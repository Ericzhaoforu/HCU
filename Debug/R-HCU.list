
R-HCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015c20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003758  08015db0  08015db0  00025db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019508  08019508  000304e8  2**0
                  CONTENTS
  4 .ARM          00000008  08019508  08019508  00029508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019510  08019510  000304e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019510  08019510  00029510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019514  08019514  00029514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004e8  20000000  08019518  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000304e8  2**0
                  CONTENTS
 10 .bss          0000e7a4  200004e8  200004e8  000304e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000ec8c  2000ec8c  000304e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030518  2**0
                  CONTENTS, READONLY
 14 .debug_info   00030d0f  00000000  00000000  0003055b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008265  00000000  00000000  0006126a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a28  00000000  00000000  000694d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000211e  00000000  00000000  0006bef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037830  00000000  00000000  0006e016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047ac5  00000000  00000000  000a5846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb435  00000000  00000000  000ed30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000b784  00000000  00000000  001e8740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003d  00000000  00000000  001f3ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004e8 	.word	0x200004e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015d98 	.word	0x08015d98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004ec 	.word	0x200004ec
 80001cc:	08015d98 	.word	0x08015d98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <L6470_ResetAppCmdPkg>:
  * @brief  Reset the structure used to store the identifier of the L6470
  *         application command and its the needed parameters.
  * @param  L6470_AppCmdPkg   The structure to be reset.
  */
void L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  uint8_t id;
  
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]
 8000588:	e01a      	b.n	80005c0 <L6470_ResetAppCmdPkg+0x44>
  {
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	011b      	lsls	r3, r3, #4
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	011b      	lsls	r3, r3, #4
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	011b      	lsls	r3, r3, #4
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	011b      	lsls	r3, r3, #4
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	3301      	adds	r3, #1
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0e1      	beq.n	800058a <L6470_ResetAppCmdPkg+0xe>
  }
}
 80005c6:	bf00      	nop
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <L6470_FillAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_FillAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60b9      	str	r1, [r7, #8]
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4603      	mov	r3, r0
 80005e0:	73fb      	strb	r3, [r7, #15]
 80005e2:	4613      	mov	r3, r2
 80005e4:	73bb      	strb	r3, [r7, #14]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	4413      	add	r3, r2
 80005ee:	7bba      	ldrb	r2, [r7, #14]
 80005f0:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	011b      	lsls	r3, r3, #4
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	4413      	add	r3, r2
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	4413      	add	r3, r2
 8000606:	69ba      	ldr	r2, [r7, #24]
 8000608:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	4413      	add	r3, r2
 8000612:	69fa      	ldr	r2, [r7, #28]
 8000614:	60da      	str	r2, [r3, #12]
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <L6470_PrepareAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_PrepareAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af02      	add	r7, sp, #8
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4603      	mov	r3, r0
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	4613      	mov	r3, r2
 8000634:	73bb      	strb	r3, [r7, #14]
  if(!L6470_DaisyChain_HalfPrepared)
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <L6470_PrepareAppCmdPkg+0x44>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d105      	bne.n	800064a <L6470_PrepareAppCmdPkg+0x26>
  {
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <L6470_PrepareAppCmdPkg+0x44>)
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8000644:	68b8      	ldr	r0, [r7, #8]
 8000646:	f7ff ff99 	bl	800057c <L6470_ResetAppCmdPkg>
  }
  
  L6470_FillAppCmdPkg(L6470_Id, pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800064a:	7bba      	ldrb	r2, [r7, #14]
 800064c:	7bf8      	ldrb	r0, [r7, #15]
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	68b9      	ldr	r1, [r7, #8]
 800065a:	f7ff ffbb 	bl	80005d4 <L6470_FillAppCmdPkg>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000051c 	.word	0x2000051c

0800066c <L6470_PrepareDaisyChainCommand>:
  *
  * @param  pL6470_AppCmdPkg              Pointer to the sL6470_AppCmdPkg_t to be filled.
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the structure used by SPI to send the commands.
  */
void L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
  uint8_t PARAMLengthBytes; /* The number of bytes related to the numeric value for the addressed register */
  uint8_t spibyte;
  uint8_t i;
  
  /* Reset the structure used to send the command to the L6470 Daisy Chain through the SPI */
  i = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	737b      	strb	r3, [r7, #13]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800067a:	2300      	movs	r3, #0
 800067c:	73bb      	strb	r3, [r7, #14]
 800067e:	e013      	b.n	80006a8 <L6470_PrepareDaisyChainCommand+0x3c>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e00a      	b.n	800069c <L6470_PrepareDaisyChainCommand+0x30>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8000686:	7b7b      	ldrb	r3, [r7, #13]
 8000688:	1c5a      	adds	r2, r3, #1
 800068a:	737a      	strb	r2, [r7, #13]
 800068c:	461a      	mov	r2, r3
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	4413      	add	r3, r2
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	3301      	adds	r3, #1
 800069a:	73fb      	strb	r3, [r7, #15]
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f1      	beq.n	8000686 <L6470_PrepareDaisyChainCommand+0x1a>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	3301      	adds	r3, #1
 80006a6:	73bb      	strb	r3, [r7, #14]
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d9e8      	bls.n	8000680 <L6470_PrepareDaisyChainCommand+0x14>
  
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	e1f0      	b.n	8000a96 <L6470_PrepareDaisyChainCommand+0x42a>
  {
    /* Build the 1st bytes to transmit with the binary code of the command */
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	011b      	lsls	r3, r3, #4
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	441a      	add	r2, r3
 80006c6:	49b0      	ldr	r1, [pc, #704]	; (8000988 <L6470_PrepareDaisyChainCommand+0x31c>)
 80006c8:	4603      	mov	r3, r0
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	1a1b      	subs	r3, r3, r0
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	440b      	add	r3, r1
 80006d2:	330c      	adds	r3, #12
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	7013      	strb	r3, [r2, #0]
    
    /* Perform the related L6470_AppCmdId */
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	011b      	lsls	r3, r3, #4
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4413      	add	r3, r2
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b12      	cmp	r3, #18
 80006e4:	f200 81d4 	bhi.w	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <L6470_PrepareDaisyChainCommand+0x84>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000a91 	.word	0x08000a91
 80006f4:	0800073d 	.word	0x0800073d
 80006f8:	080007c1 	.word	0x080007c1
 80006fc:	080007ef 	.word	0x080007ef
 8000700:	08000855 	.word	0x08000855
 8000704:	08000883 	.word	0x08000883
 8000708:	080008e9 	.word	0x080008e9
 800070c:	08000923 	.word	0x08000923
 8000710:	08000995 	.word	0x08000995
 8000714:	08000a2f 	.word	0x08000a2f
 8000718:	08000a91 	.word	0x08000a91
 800071c:	08000a91 	.word	0x08000a91
 8000720:	08000a91 	.word	0x08000a91
 8000724:	08000a91 	.word	0x08000a91
 8000728:	08000a91 	.word	0x08000a91
 800072c:	08000a91 	.word	0x08000a91
 8000730:	08000a91 	.word	0x08000a91
 8000734:	08000a91 	.word	0x08000a91
 8000738:	08000a91 	.word	0x08000a91
    {
    case L6470_NOP_ID:
      break;
    case L6470_SETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	4413      	add	r3, r2
 8000742:	7819      	ldrb	r1, [r3, #0]
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	011b      	lsls	r3, r3, #4
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4413      	add	r3, r2
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	488f      	ldr	r0, [pc, #572]	; (800098c <L6470_PrepareDaisyChainCommand+0x320>)
 8000750:	4613      	mov	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4403      	add	r3, r0
 800075a:	781a      	ldrb	r2, [r3, #0]
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	6838      	ldr	r0, [r7, #0]
 8000760:	4403      	add	r3, r0
 8000762:	430a      	orrs	r2, r1
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	701a      	strb	r2, [r3, #0]
      
      /* The length, in byte, of this register (PARAM) is... */
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4413      	add	r3, r2
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	4986      	ldr	r1, [pc, #536]	; (800098c <L6470_PrepareDaisyChainCommand+0x320>)
 8000774:	4613      	mov	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4413      	add	r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	440b      	add	r3, r1
 800077e:	330e      	adds	r3, #14
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	733b      	strb	r3, [r7, #12]
      
      /* Build the others bytes to transmit (VALUE) */
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8000784:	2301      	movs	r3, #1
 8000786:	73bb      	strb	r3, [r7, #14]
 8000788:	e015      	b.n	80007b6 <L6470_PrepareDaisyChainCommand+0x14a>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	011b      	lsls	r3, r3, #4
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	689a      	ldr	r2, [r3, #8]
 8000794:	7b39      	ldrb	r1, [r7, #12]
 8000796:	7bbb      	ldrb	r3, [r7, #14]
 8000798:	1acb      	subs	r3, r1, r3
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	fa22 f103 	lsr.w	r1, r2, r3
 80007a0:	7bba      	ldrb	r2, [r7, #14]
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	4413      	add	r3, r2
 80007a6:	461a      	mov	r2, r3
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	b2ca      	uxtb	r2, r1
 80007ae:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	3301      	adds	r3, #1
 80007b4:	73bb      	strb	r3, [r7, #14]
 80007b6:	7b3a      	ldrb	r2, [r7, #12]
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d2e5      	bcs.n	800078a <L6470_PrepareDaisyChainCommand+0x11e>
      }
      break;
 80007be:	e167      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
    case L6470_GETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	7819      	ldrb	r1, [r3, #0]
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	011b      	lsls	r3, r3, #4
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	4413      	add	r3, r2
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	486e      	ldr	r0, [pc, #440]	; (800098c <L6470_PrepareDaisyChainCommand+0x320>)
 80007d4:	4613      	mov	r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4403      	add	r3, r0
 80007de:	781a      	ldrb	r2, [r3, #0]
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	6838      	ldr	r0, [r7, #0]
 80007e4:	4403      	add	r3, r0
 80007e6:	430a      	orrs	r2, r1
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	701a      	strb	r2, [r3, #0]
      break;
 80007ec:	e150      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
    case L6470_RUN_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	683a      	ldr	r2, [r7, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	7819      	ldrb	r1, [r3, #0]
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	011b      	lsls	r3, r3, #4
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	685a      	ldr	r2, [r3, #4]
 8000800:	4863      	ldr	r0, [pc, #396]	; (8000990 <L6470_PrepareDaisyChainCommand+0x324>)
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	4403      	add	r3, r0
 800080a:	3308      	adds	r3, #8
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	4403      	add	r3, r0
 8000814:	430a      	orrs	r2, r1
 8000816:	b2d2      	uxtb	r2, r2
 8000818:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800081a:	2301      	movs	r3, #1
 800081c:	73bb      	strb	r3, [r7, #14]
 800081e:	e015      	b.n	800084c <L6470_PrepareDaisyChainCommand+0x1e0>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	f1c3 0303 	rsb	r3, r3, #3
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	fa22 f103 	lsr.w	r1, r2, r3
 8000836:	7bba      	ldrb	r2, [r7, #14]
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	4413      	add	r3, r2
 800083c:	461a      	mov	r2, r3
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	4413      	add	r3, r2
 8000842:	b2ca      	uxtb	r2, r1
 8000844:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	3301      	adds	r3, #1
 800084a:	73bb      	strb	r3, [r7, #14]
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	2b03      	cmp	r3, #3
 8000850:	d9e6      	bls.n	8000820 <L6470_PrepareDaisyChainCommand+0x1b4>
      }
      break;
 8000852:	e11d      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
    case L6470_STEPCLOCK_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	4413      	add	r3, r2
 800085a:	7819      	ldrb	r1, [r3, #0]
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	011b      	lsls	r3, r3, #4
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	4413      	add	r3, r2
 8000864:	685a      	ldr	r2, [r3, #4]
 8000866:	484a      	ldr	r0, [pc, #296]	; (8000990 <L6470_PrepareDaisyChainCommand+0x324>)
 8000868:	4613      	mov	r3, r2
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	4413      	add	r3, r2
 800086e:	4403      	add	r3, r0
 8000870:	3308      	adds	r3, #8
 8000872:	781a      	ldrb	r2, [r3, #0]
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	6838      	ldr	r0, [r7, #0]
 8000878:	4403      	add	r3, r0
 800087a:	430a      	orrs	r2, r1
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	701a      	strb	r2, [r3, #0]
      break;
 8000880:	e106      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
    case L6470_MOVE_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	4413      	add	r3, r2
 8000888:	7819      	ldrb	r1, [r3, #0]
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	483e      	ldr	r0, [pc, #248]	; (8000990 <L6470_PrepareDaisyChainCommand+0x324>)
 8000896:	4613      	mov	r3, r2
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	4413      	add	r3, r2
 800089c:	4403      	add	r3, r0
 800089e:	3308      	adds	r3, #8
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	6838      	ldr	r0, [r7, #0]
 80008a6:	4403      	add	r3, r0
 80008a8:	430a      	orrs	r2, r1
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (N_STEP) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80008ae:	2301      	movs	r3, #1
 80008b0:	73bb      	strb	r3, [r7, #14]
 80008b2:	e015      	b.n	80008e0 <L6470_PrepareDaisyChainCommand+0x274>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	011b      	lsls	r3, r3, #4
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	4413      	add	r3, r2
 80008bc:	689a      	ldr	r2, [r3, #8]
 80008be:	7bbb      	ldrb	r3, [r7, #14]
 80008c0:	f1c3 0303 	rsb	r3, r3, #3
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	fa22 f103 	lsr.w	r1, r2, r3
 80008ca:	7bba      	ldrb	r2, [r7, #14]
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	4413      	add	r3, r2
 80008d0:	461a      	mov	r2, r3
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	b2ca      	uxtb	r2, r1
 80008d8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80008da:	7bbb      	ldrb	r3, [r7, #14]
 80008dc:	3301      	adds	r3, #1
 80008de:	73bb      	strb	r3, [r7, #14]
 80008e0:	7bbb      	ldrb	r3, [r7, #14]
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d9e6      	bls.n	80008b4 <L6470_PrepareDaisyChainCommand+0x248>
      }      
      break;
 80008e6:	e0d3      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
    case L6470_GOTO_ID:
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80008e8:	2301      	movs	r3, #1
 80008ea:	73bb      	strb	r3, [r7, #14]
 80008ec:	e015      	b.n	800091a <L6470_PrepareDaisyChainCommand+0x2ae>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	7bbb      	ldrb	r3, [r7, #14]
 80008fa:	f1c3 0303 	rsb	r3, r3, #3
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	fa22 f103 	lsr.w	r1, r2, r3
 8000904:	7bba      	ldrb	r2, [r7, #14]
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	4413      	add	r3, r2
 800090a:	461a      	mov	r2, r3
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	4413      	add	r3, r2
 8000910:	b2ca      	uxtb	r2, r1
 8000912:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8000914:	7bbb      	ldrb	r3, [r7, #14]
 8000916:	3301      	adds	r3, #1
 8000918:	73bb      	strb	r3, [r7, #14]
 800091a:	7bbb      	ldrb	r3, [r7, #14]
 800091c:	2b03      	cmp	r3, #3
 800091e:	d9e6      	bls.n	80008ee <L6470_PrepareDaisyChainCommand+0x282>
      }
      break;
 8000920:	e0b6      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
    case L6470_GOTODIR_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	4413      	add	r3, r2
 8000928:	7819      	ldrb	r1, [r3, #0]
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	011b      	lsls	r3, r3, #4
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	685a      	ldr	r2, [r3, #4]
 8000934:	4816      	ldr	r0, [pc, #88]	; (8000990 <L6470_PrepareDaisyChainCommand+0x324>)
 8000936:	4613      	mov	r3, r2
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	4413      	add	r3, r2
 800093c:	4403      	add	r3, r0
 800093e:	3308      	adds	r3, #8
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	6838      	ldr	r0, [r7, #0]
 8000946:	4403      	add	r3, r0
 8000948:	430a      	orrs	r2, r1
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800094e:	2301      	movs	r3, #1
 8000950:	73bb      	strb	r3, [r7, #14]
 8000952:	e015      	b.n	8000980 <L6470_PrepareDaisyChainCommand+0x314>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	f1c3 0303 	rsb	r3, r3, #3
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	fa22 f103 	lsr.w	r1, r2, r3
 800096a:	7bba      	ldrb	r2, [r7, #14]
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	4413      	add	r3, r2
 8000970:	461a      	mov	r2, r3
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	4413      	add	r3, r2
 8000976:	b2ca      	uxtb	r2, r1
 8000978:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	3301      	adds	r3, #1
 800097e:	73bb      	strb	r3, [r7, #14]
 8000980:	7bbb      	ldrb	r3, [r7, #14]
 8000982:	2b03      	cmp	r3, #3
 8000984:	d9e6      	bls.n	8000954 <L6470_PrepareDaisyChainCommand+0x2e8>
      }
      break;
 8000986:	e083      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
 8000988:	08018938 	.word	0x08018938
 800098c:	08018744 	.word	0x08018744
 8000990:	08018a44 	.word	0x08018a44
    case L6470_GOUNTIL_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	4413      	add	r3, r2
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b259      	sxtb	r1, r3
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	011b      	lsls	r3, r3, #4
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	685a      	ldr	r2, [r3, #4]
 80009a8:	4840      	ldr	r0, [pc, #256]	; (8000aac <L6470_PrepareDaisyChainCommand+0x440>)
 80009aa:	4613      	mov	r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	4413      	add	r3, r2
 80009b0:	4403      	add	r3, r0
 80009b2:	3304      	adds	r3, #4
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	430b      	orrs	r3, r1
 80009bc:	b259      	sxtb	r1, r3
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	b2ca      	uxtb	r2, r1
 80009c6:	701a      	strb	r2, [r3, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	683a      	ldr	r2, [r7, #0]
 80009cc:	4413      	add	r3, r2
 80009ce:	7819      	ldrb	r1, [r3, #0]
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	011b      	lsls	r3, r3, #4
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	4835      	ldr	r0, [pc, #212]	; (8000ab0 <L6470_PrepareDaisyChainCommand+0x444>)
 80009dc:	4613      	mov	r3, r2
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	4413      	add	r3, r2
 80009e2:	4403      	add	r3, r0
 80009e4:	3308      	adds	r3, #8
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	6838      	ldr	r0, [r7, #0]
 80009ec:	4403      	add	r3, r0
 80009ee:	430a      	orrs	r2, r1
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80009f4:	2301      	movs	r3, #1
 80009f6:	73bb      	strb	r3, [r7, #14]
 80009f8:	e015      	b.n	8000a26 <L6470_PrepareDaisyChainCommand+0x3ba>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	011b      	lsls	r3, r3, #4
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	7bbb      	ldrb	r3, [r7, #14]
 8000a06:	f1c3 0303 	rsb	r3, r3, #3
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	fa22 f103 	lsr.w	r1, r2, r3
 8000a10:	7bba      	ldrb	r2, [r7, #14]
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	4413      	add	r3, r2
 8000a16:	461a      	mov	r2, r3
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b2ca      	uxtb	r2, r1
 8000a1e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8000a20:	7bbb      	ldrb	r3, [r7, #14]
 8000a22:	3301      	adds	r3, #1
 8000a24:	73bb      	strb	r3, [r7, #14]
 8000a26:	7bbb      	ldrb	r3, [r7, #14]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d9e6      	bls.n	80009fa <L6470_PrepareDaisyChainCommand+0x38e>
      }
      break;
 8000a2c:	e030      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
    case L6470_RELEASESW_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b259      	sxtb	r1, r3
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	011b      	lsls	r3, r3, #4
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	4413      	add	r3, r2
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	481a      	ldr	r0, [pc, #104]	; (8000aac <L6470_PrepareDaisyChainCommand+0x440>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	4403      	add	r3, r0
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	430b      	orrs	r3, r1
 8000a56:	b259      	sxtb	r1, r3
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b2ca      	uxtb	r2, r1
 8000a60:	701a      	strb	r2, [r3, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	7819      	ldrb	r1, [r3, #0]
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	011b      	lsls	r3, r3, #4
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <L6470_PrepareDaisyChainCommand+0x444>)
 8000a76:	4613      	mov	r3, r2
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4403      	add	r3, r0
 8000a7e:	3308      	adds	r3, #8
 8000a80:	781a      	ldrb	r2, [r3, #0]
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	6838      	ldr	r0, [r7, #0]
 8000a86:	4403      	add	r3, r0
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	701a      	strb	r2, [r3, #0]
      break;
 8000a8e:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	3301      	adds	r3, #1
 8000a94:	73fb      	strb	r3, [r7, #15]
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f43f ae0b 	beq.w	80006b4 <L6470_PrepareDaisyChainCommand+0x48>
      break;
    case L6470_GETSTATUS_ID:
      break;
    }
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	08018a58 	.word	0x08018a58
 8000ab0:	08018a44 	.word	0x08018a44

08000ab4 <Step_s_2_Speed>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
uint32_t Step_s_2_Speed(float Step_s)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8000abe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ac2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000af4 <Step_s_2_Speed+0x40>
 8000ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ace:	d80a      	bhi.n	8000ae6 <Step_s_2_Speed+0x32>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8000ad0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ad4:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000af8 <Step_s_2_Speed+0x44>
 8000ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ae0:	ee17 3a90 	vmov	r3, s15
 8000ae4:	e000      	b.n	8000ae8 <Step_s_2_Speed+0x34>
  else
    return 0;   // Warning
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	4674241b 	.word	0x4674241b
 8000af8:	3c74242a 	.word	0x3c74242a

08000afc <Step_s2_2_Acc>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACC register value.
  */
uint16_t Step_s2_2_Acc(float Step_s2)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8000b06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b0a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000b40 <Step_s2_2_Acc+0x44>
 8000b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b16:	d80b      	bhi.n	8000b30 <Step_s2_2_Acc+0x34>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8000b18:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b1c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000b44 <Step_s2_2_Acc+0x48>
 8000b20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b28:	ee17 3a90 	vmov	r3, s15
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	e000      	b.n	8000b32 <Step_s2_2_Acc+0x36>
  else
    return 0;   // Warning
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	4768c671 	.word	0x4768c671
 8000b44:	4168d4fe 	.word	0x4168d4fe

08000b48 <Step_s2_2_Dec>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DEC register value.
  */
uint16_t Step_s2_2_Dec(float Step_s2)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8000b52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b56:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000b8c <Step_s2_2_Dec+0x44>
 8000b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b62:	d80b      	bhi.n	8000b7c <Step_s2_2_Dec+0x34>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8000b64:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b68:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000b90 <Step_s2_2_Dec+0x48>
 8000b6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b74:	ee17 3a90 	vmov	r3, s15
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	e000      	b.n	8000b7e <Step_s2_2_Dec+0x36>
  else
    return 0;   // Warning
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	4768c671 	.word	0x4768c671
 8000b90:	4168d4fe 	.word	0x4168d4fe

08000b94 <Step_s_2_MaxSpeed>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
uint16_t Step_s_2_MaxSpeed(float Step_s)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8000b9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ba2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000bd8 <Step_s_2_MaxSpeed+0x44>
 8000ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bae:	d80b      	bhi.n	8000bc8 <Step_s_2_MaxSpeed+0x34>
    return (uint16_t)(Step_s / ((float)15.2588));
 8000bb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bb4:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000bdc <Step_s_2_MaxSpeed+0x48>
 8000bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bc0:	ee17 3a90 	vmov	r3, s15
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	e000      	b.n	8000bca <Step_s_2_MaxSpeed+0x36>
  else
    return 0;   // Warning
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	4673e702 	.word	0x4673e702
 8000bdc:	4174240b 	.word	0x4174240b

08000be0 <Step_s_2_MinSpeed>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
uint16_t Step_s_2_MinSpeed(float Step_s)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8000bea:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bee:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000c24 <Step_s_2_MinSpeed+0x44>
 8000bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bfa:	d80b      	bhi.n	8000c14 <Step_s_2_MinSpeed+0x34>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8000bfc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c00:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000c28 <Step_s_2_MinSpeed+0x48>
 8000c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c0c:	ee17 3a90 	vmov	r3, s15
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	e000      	b.n	8000c16 <Step_s_2_MinSpeed+0x36>
  else
    return 0;   // Warning
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	447414bf 	.word	0x447414bf
 8000c28:	3e742401 	.word	0x3e742401

08000c2c <Step_s_2_FsSpd>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t Step_s_2_FsSpd(float Step_s)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8000c36:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c3a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000c78 <Step_s_2_FsSpd+0x4c>
 8000c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c46:	d80f      	bhi.n	8000c68 <Step_s_2_FsSpd+0x3c>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8000c48:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c4c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000c7c <Step_s_2_FsSpd+0x50>
 8000c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c54:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c60:	ee17 3a90 	vmov	r3, s15
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	e000      	b.n	8000c6a <Step_s_2_FsSpd+0x3e>
  else
    return 0;   // Warning
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	4673e180 	.word	0x4673e180
 8000c7c:	41740000 	.word	0x41740000

08000c80 <Step_s_2_IntSpeed>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t Step_s_2_IntSpeed(float Step_s)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8000c8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c8e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000cc4 <Step_s_2_IntSpeed+0x44>
 8000c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9a:	d80b      	bhi.n	8000cb4 <Step_s_2_IntSpeed+0x34>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8000c9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ca0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000cc8 <Step_s_2_IntSpeed+0x48>
 8000ca4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cac:	ee17 3a90 	vmov	r3, s15
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	e000      	b.n	8000cb6 <Step_s_2_IntSpeed+0x36>
  else
    return 0;   // Warning
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	44742023 	.word	0x44742023
 8000cc8:	3d7423f4 	.word	0x3d7423f4

08000ccc <s_Step_2_StSlp>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_StSlp(float s_Step)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8000cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cda:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000d10 <s_Step_2_StSlp+0x44>
 8000cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce6:	d80c      	bhi.n	8000d02 <s_Step_2_StSlp+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8000ce8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cec:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000d14 <s_Step_2_StSlp+0x48>
 8000cf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf8:	edc7 7a00 	vstr	s15, [r7]
 8000cfc:	783b      	ldrb	r3, [r7, #0]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	e000      	b.n	8000d04 <s_Step_2_StSlp+0x38>
  else
    return 0;   // Warning
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	3b8311d9 	.word	0x3b8311d9
 8000d14:	3783956e 	.word	0x3783956e

08000d18 <s_Step_2_FnSlpAcc>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_FnSlpAcc(float s_Step)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8000d22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d26:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000d5c <s_Step_2_FnSlpAcc+0x44>
 8000d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d32:	d80c      	bhi.n	8000d4e <s_Step_2_FnSlpAcc+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8000d34:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d38:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000d60 <s_Step_2_FnSlpAcc+0x48>
 8000d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d44:	edc7 7a00 	vstr	s15, [r7]
 8000d48:	783b      	ldrb	r3, [r7, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	e000      	b.n	8000d50 <s_Step_2_FnSlpAcc+0x38>
  else
    return 0;   // Warning
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	3b8311d9 	.word	0x3b8311d9
 8000d60:	3783956e 	.word	0x3783956e

08000d64 <s_Step_2_FnSlpDec>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_FnSlpDec(float s_Step)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8000d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d72:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000da8 <s_Step_2_FnSlpDec+0x44>
 8000d76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7e:	d80c      	bhi.n	8000d9a <s_Step_2_FnSlpDec+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8000d80:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d84:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000dac <s_Step_2_FnSlpDec+0x48>
 8000d88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d90:	edc7 7a00 	vstr	s15, [r7]
 8000d94:	783b      	ldrb	r3, [r7, #0]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	e000      	b.n	8000d9c <s_Step_2_FnSlpDec+0x38>
  else
    return 0;   // Warning
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	3b8311d9 	.word	0x3b8311d9
 8000dac:	3783956e 	.word	0x3783956e

08000db0 <mA_2_OcdTh>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
uint8_t mA_2_OcdTh(float mA)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	ed87 0a01 	vstr	s0, [r7, #4]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8000dba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dbe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000e48 <mA_2_OcdTh+0x98>
 8000dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dca:	d836      	bhi.n	8000e3a <mA_2_OcdTh+0x8a>
  {
    result = (mA / ((float)375));
 8000dcc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dd0:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000e4c <mA_2_OcdTh+0x9c>
 8000dd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dd8:	edc7 7a03 	vstr	s15, [r7, #12]
    decimal = result - (uint8_t)result;
 8000ddc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000de4:	edc7 7a00 	vstr	s15, [r7]
 8000de8:	783b      	ldrb	r3, [r7, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000df4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dfc:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (decimal < (float)0.5)
 8000e00:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e10:	d50a      	bpl.n	8000e28 <mA_2_OcdTh+0x78>
      return ((uint8_t)result - 1);
 8000e12:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e1a:	edc7 7a00 	vstr	s15, [r7]
 8000e1e:	783b      	ldrb	r3, [r7, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	3b01      	subs	r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	e009      	b.n	8000e3c <mA_2_OcdTh+0x8c>
    else
      return ((uint8_t)result);    
 8000e28:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e30:	edc7 7a00 	vstr	s15, [r7]
 8000e34:	783b      	ldrb	r3, [r7, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	e000      	b.n	8000e3c <mA_2_OcdTh+0x8c>
  }
  else
    return 0;   // Warning
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	45bb8000 	.word	0x45bb8000
 8000e4c:	43bb8000 	.word	0x43bb8000

08000e50 <mA_2_StallTh>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
uint8_t mA_2_StallTh(float mA)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	ed87 0a01 	vstr	s0, [r7, #4]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8000e5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e5e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000ee8 <mA_2_StallTh+0x98>
 8000e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6a:	d836      	bhi.n	8000eda <mA_2_StallTh+0x8a>
  {
    result = (mA / ((float)31.25));
 8000e6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e70:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000eec <mA_2_StallTh+0x9c>
 8000e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e78:	edc7 7a03 	vstr	s15, [r7, #12]
    decimal = result - (uint8_t)result;
 8000e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e84:	edc7 7a00 	vstr	s15, [r7]
 8000e88:	783b      	ldrb	r3, [r7, #0]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	ee07 3a90 	vmov	s15, r3
 8000e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e94:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9c:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (decimal < (float)0.5)
 8000ea0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ea4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb0:	d50a      	bpl.n	8000ec8 <mA_2_StallTh+0x78>
      return ((uint8_t)result - 1);
 8000eb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eba:	edc7 7a00 	vstr	s15, [r7]
 8000ebe:	783b      	ldrb	r3, [r7, #0]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	e009      	b.n	8000edc <mA_2_StallTh+0x8c>
    else
      return ((uint8_t)result);    
 8000ec8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ed0:	edc7 7a00 	vstr	s15, [r7]
 8000ed4:	783b      	ldrb	r3, [r7, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	e000      	b.n	8000edc <mA_2_StallTh+0x8c>
  }
  else
    return 0;   // Warning
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	457a0000 	.word	0x457a0000
 8000eec:	41fa0000 	.word	0x41fa0000

08000ef0 <L6470_SetParam>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * @param  Value         The new value.
  */
void L6470_SetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	603a      	str	r2, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
 8000efc:	460b      	mov	r3, r1
 8000efe:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8000f00:	79ba      	ldrb	r2, [r7, #6]
 8000f02:	79f8      	ldrb	r0, [r7, #7]
 8000f04:	2300      	movs	r3, #0
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4907      	ldr	r1, [pc, #28]	; (8000f30 <L6470_SetParam+0x40>)
 8000f12:	f7ff fb87 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000f16:	4907      	ldr	r1, [pc, #28]	; (8000f34 <L6470_SetParam+0x44>)
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <L6470_SetParam+0x40>)
 8000f1a:	f7ff fba7 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000f1e:	4906      	ldr	r1, [pc, #24]	; (8000f38 <L6470_SetParam+0x48>)
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <L6470_SetParam+0x44>)
 8000f22:	f000 fc61 	bl	80017e8 <L6470_DaisyChainCommand>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000504 	.word	0x20000504
 8000f34:	20000514 	.word	0x20000514
 8000f38:	20000518 	.word	0x20000518

08000f3c <L6470_GetParam>:
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * 
  * @retval ReceivedValue The register value.
  */
uint32_t L6470_GetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	4603      	mov	r3, r0
 8000f44:	460a      	mov	r2, r1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	71bb      	strb	r3, [r7, #6]
  uint8_t ValueLengthByte;
  uint32_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	79f8      	ldrb	r0, [r7, #7]
 8000f50:	2200      	movs	r2, #0
 8000f52:	9201      	str	r2, [sp, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	9200      	str	r2, [sp, #0]
 8000f58:	2202      	movs	r2, #2
 8000f5a:	4910      	ldr	r1, [pc, #64]	; (8000f9c <L6470_GetParam+0x60>)
 8000f5c:	f7ff fb62 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000f60:	490f      	ldr	r1, [pc, #60]	; (8000fa0 <L6470_GetParam+0x64>)
 8000f62:	480e      	ldr	r0, [pc, #56]	; (8000f9c <L6470_GetParam+0x60>)
 8000f64:	f7ff fb82 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000f68:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <L6470_GetParam+0x68>)
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <L6470_GetParam+0x64>)
 8000f6c:	f000 fc3c 	bl	80017e8 <L6470_DaisyChainCommand>
  
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8000f70:	79ba      	ldrb	r2, [r7, #6]
 8000f72:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <L6470_GetParam+0x6c>)
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	330e      	adds	r3, #14
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	73fb      	strb	r3, [r7, #15]
  
  ReceivedValue = L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4906      	ldr	r1, [pc, #24]	; (8000fa4 <L6470_GetParam+0x68>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fc76 	bl	800187c <L6470_ExtractReturnedData>
 8000f90:	60b8      	str	r0, [r7, #8]
  
  return ReceivedValue;
 8000f92:	68bb      	ldr	r3, [r7, #8]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000504 	.word	0x20000504
 8000fa0:	20000514 	.word	0x20000514
 8000fa4:	20000518 	.word	0x20000518
 8000fa8:	08018744 	.word	0x08018744

08000fac <L6470_Run>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470_Run(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	603a      	str	r2, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8000fbc:	79ba      	ldrb	r2, [r7, #6]
 8000fbe:	79f8      	ldrb	r0, [r7, #7]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	2203      	movs	r2, #3
 8000fcc:	4907      	ldr	r1, [pc, #28]	; (8000fec <L6470_Run+0x40>)
 8000fce:	f7ff fb29 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000fd2:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <L6470_Run+0x44>)
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <L6470_Run+0x40>)
 8000fd6:	f7ff fb49 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000fda:	4906      	ldr	r1, [pc, #24]	; (8000ff4 <L6470_Run+0x48>)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <L6470_Run+0x44>)
 8000fde:	f000 fc03 	bl	80017e8 <L6470_DaisyChainCommand>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000504 	.word	0x20000504
 8000ff0:	20000514 	.word	0x20000514
 8000ff4:	20000518 	.word	0x20000518

08000ff8 <L6470_StepClock>:
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470_StepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	79f8      	ldrb	r0, [r7, #7]
 800100c:	2200      	movs	r2, #0
 800100e:	9201      	str	r2, [sp, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	9200      	str	r2, [sp, #0]
 8001014:	2204      	movs	r2, #4
 8001016:	4907      	ldr	r1, [pc, #28]	; (8001034 <L6470_StepClock+0x3c>)
 8001018:	f7ff fb04 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800101c:	4906      	ldr	r1, [pc, #24]	; (8001038 <L6470_StepClock+0x40>)
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <L6470_StepClock+0x3c>)
 8001020:	f7ff fb24 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001024:	4905      	ldr	r1, [pc, #20]	; (800103c <L6470_StepClock+0x44>)
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <L6470_StepClock+0x40>)
 8001028:	f000 fbde 	bl	80017e8 <L6470_DaisyChainCommand>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000504 	.word	0x20000504
 8001038:	20000514 	.word	0x20000514
 800103c:	20000518 	.word	0x20000518

08001040 <L6470_Move>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  N_Step        The number of microsteps.
  */
void L6470_Move(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af02      	add	r7, sp, #8
 8001046:	4603      	mov	r3, r0
 8001048:	603a      	str	r2, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	460b      	mov	r3, r1
 800104e:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8001050:	79ba      	ldrb	r2, [r7, #6]
 8001052:	79f8      	ldrb	r0, [r7, #7]
 8001054:	2300      	movs	r3, #0
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	4613      	mov	r3, r2
 800105e:	2205      	movs	r2, #5
 8001060:	4907      	ldr	r1, [pc, #28]	; (8001080 <L6470_Move+0x40>)
 8001062:	f7ff fadf 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001066:	4907      	ldr	r1, [pc, #28]	; (8001084 <L6470_Move+0x44>)
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <L6470_Move+0x40>)
 800106a:	f7ff faff 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800106e:	4906      	ldr	r1, [pc, #24]	; (8001088 <L6470_Move+0x48>)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <L6470_Move+0x44>)
 8001072:	f000 fbb9 	bl	80017e8 <L6470_DaisyChainCommand>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000504 	.word	0x20000504
 8001084:	20000514 	.word	0x20000514
 8001088:	20000518 	.word	0x20000518

0800108c <L6470_GoTo>:
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  AbsPos        The target absolute position.
  */
void L6470_GoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af02      	add	r7, sp, #8
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if (AbsPos <= L6470_POSITION_RANGE)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800109e:	d211      	bcs.n	80010c4 <L6470_GoTo+0x38>
  {
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80010a0:	79f8      	ldrb	r0, [r7, #7]
 80010a2:	2300      	movs	r3, #0
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	2300      	movs	r3, #0
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2206      	movs	r2, #6
 80010ae:	4907      	ldr	r1, [pc, #28]	; (80010cc <L6470_GoTo+0x40>)
 80010b0:	f7ff fab8 	bl	8000624 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80010b4:	4906      	ldr	r1, [pc, #24]	; (80010d0 <L6470_GoTo+0x44>)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <L6470_GoTo+0x40>)
 80010b8:	f7ff fad8 	bl	800066c <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80010bc:	4905      	ldr	r1, [pc, #20]	; (80010d4 <L6470_GoTo+0x48>)
 80010be:	4804      	ldr	r0, [pc, #16]	; (80010d0 <L6470_GoTo+0x44>)
 80010c0:	f000 fb92 	bl	80017e8 <L6470_DaisyChainCommand>
  }
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000504 	.word	0x20000504
 80010d0:	20000514 	.word	0x20000514
 80010d4:	20000518 	.word	0x20000518

080010d8 <L6470_GoToDir>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  AbsPos        The target absolute position.
  */
void L6470_GoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4603      	mov	r3, r0
 80010e0:	603a      	str	r2, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	460b      	mov	r3, r1
 80010e6:	71bb      	strb	r3, [r7, #6]
  if (AbsPos <= L6470_POSITION_RANGE)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010ee:	d212      	bcs.n	8001116 <L6470_GoToDir+0x3e>
  {
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 80010f0:	79ba      	ldrb	r2, [r7, #6]
 80010f2:	79f8      	ldrb	r0, [r7, #7]
 80010f4:	2300      	movs	r3, #0
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	4613      	mov	r3, r2
 80010fe:	2207      	movs	r2, #7
 8001100:	4907      	ldr	r1, [pc, #28]	; (8001120 <L6470_GoToDir+0x48>)
 8001102:	f7ff fa8f 	bl	8000624 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001106:	4907      	ldr	r1, [pc, #28]	; (8001124 <L6470_GoToDir+0x4c>)
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <L6470_GoToDir+0x48>)
 800110a:	f7ff faaf 	bl	800066c <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800110e:	4906      	ldr	r1, [pc, #24]	; (8001128 <L6470_GoToDir+0x50>)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <L6470_GoToDir+0x4c>)
 8001112:	f000 fb69 	bl	80017e8 <L6470_DaisyChainCommand>
  }
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000504 	.word	0x20000504
 8001124:	20000514 	.word	0x20000514
 8001128:	20000518 	.word	0x20000518

0800112c <L6470_GoUntil>:
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470_GoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af02      	add	r7, sp, #8
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	460b      	mov	r3, r1
 800113a:	71bb      	strb	r3, [r7, #6]
 800113c:	4613      	mov	r3, r2
 800113e:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8001140:	79b9      	ldrb	r1, [r7, #6]
 8001142:	797b      	ldrb	r3, [r7, #5]
 8001144:	79f8      	ldrb	r0, [r7, #7]
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	9201      	str	r2, [sp, #4]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	460b      	mov	r3, r1
 800114e:	2208      	movs	r2, #8
 8001150:	4907      	ldr	r1, [pc, #28]	; (8001170 <L6470_GoUntil+0x44>)
 8001152:	f7ff fa67 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001156:	4907      	ldr	r1, [pc, #28]	; (8001174 <L6470_GoUntil+0x48>)
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <L6470_GoUntil+0x44>)
 800115a:	f7ff fa87 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800115e:	4906      	ldr	r1, [pc, #24]	; (8001178 <L6470_GoUntil+0x4c>)
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <L6470_GoUntil+0x48>)
 8001162:	f000 fb41 	bl	80017e8 <L6470_DaisyChainCommand>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000504 	.word	0x20000504
 8001174:	20000514 	.word	0x20000514
 8001178:	20000518 	.word	0x20000518

0800117c <L6470_ReleaseSW>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470_ReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af02      	add	r7, sp, #8
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	460b      	mov	r3, r1
 8001188:	71bb      	strb	r3, [r7, #6]
 800118a:	4613      	mov	r3, r2
 800118c:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800118e:	79ba      	ldrb	r2, [r7, #6]
 8001190:	797b      	ldrb	r3, [r7, #5]
 8001192:	79f8      	ldrb	r0, [r7, #7]
 8001194:	2100      	movs	r1, #0
 8001196:	9101      	str	r1, [sp, #4]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	4613      	mov	r3, r2
 800119c:	2209      	movs	r2, #9
 800119e:	4907      	ldr	r1, [pc, #28]	; (80011bc <L6470_ReleaseSW+0x40>)
 80011a0:	f7ff fa40 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80011a4:	4906      	ldr	r1, [pc, #24]	; (80011c0 <L6470_ReleaseSW+0x44>)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <L6470_ReleaseSW+0x40>)
 80011a8:	f7ff fa60 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80011ac:	4905      	ldr	r1, [pc, #20]	; (80011c4 <L6470_ReleaseSW+0x48>)
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <L6470_ReleaseSW+0x44>)
 80011b0:	f000 fb1a 	bl	80017e8 <L6470_DaisyChainCommand>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000504 	.word	0x20000504
 80011c0:	20000514 	.word	0x20000514
 80011c4:	20000518 	.word	0x20000518

080011c8 <L6470_GoHome>:
  *         via the shortest path.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_GoHome(uint8_t L6470_Id)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 80011d2:	79f8      	ldrb	r0, [r7, #7]
 80011d4:	2300      	movs	r3, #0
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	2300      	movs	r3, #0
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2300      	movs	r3, #0
 80011de:	220a      	movs	r2, #10
 80011e0:	4907      	ldr	r1, [pc, #28]	; (8001200 <L6470_GoHome+0x38>)
 80011e2:	f7ff fa1f 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80011e6:	4907      	ldr	r1, [pc, #28]	; (8001204 <L6470_GoHome+0x3c>)
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <L6470_GoHome+0x38>)
 80011ea:	f7ff fa3f 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80011ee:	4906      	ldr	r1, [pc, #24]	; (8001208 <L6470_GoHome+0x40>)
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <L6470_GoHome+0x3c>)
 80011f2:	f000 faf9 	bl	80017e8 <L6470_DaisyChainCommand>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000504 	.word	0x20000504
 8001204:	20000514 	.word	0x20000514
 8001208:	20000518 	.word	0x20000518

0800120c <L6470_GoMark>:
  *         minimum path.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_GoMark(uint8_t L6470_Id)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af02      	add	r7, sp, #8
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8001216:	79f8      	ldrb	r0, [r7, #7]
 8001218:	2300      	movs	r3, #0
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	2300      	movs	r3, #0
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2300      	movs	r3, #0
 8001222:	220b      	movs	r2, #11
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <L6470_GoMark+0x38>)
 8001226:	f7ff f9fd 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800122a:	4907      	ldr	r1, [pc, #28]	; (8001248 <L6470_GoMark+0x3c>)
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <L6470_GoMark+0x38>)
 800122e:	f7ff fa1d 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001232:	4906      	ldr	r1, [pc, #24]	; (800124c <L6470_GoMark+0x40>)
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <L6470_GoMark+0x3c>)
 8001236:	f000 fad7 	bl	80017e8 <L6470_DaisyChainCommand>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000504 	.word	0x20000504
 8001248:	20000514 	.word	0x20000514
 800124c:	20000518 	.word	0x20000518

08001250 <L6470_ResetPos>:
  * @brief  ResetPos command resets the ABS_POS register to zero.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_ResetPos(uint8_t L6470_Id)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af02      	add	r7, sp, #8
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800125a:	79f8      	ldrb	r0, [r7, #7]
 800125c:	2300      	movs	r3, #0
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2300      	movs	r3, #0
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	220c      	movs	r2, #12
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <L6470_ResetPos+0x38>)
 800126a:	f7ff f9db 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800126e:	4907      	ldr	r1, [pc, #28]	; (800128c <L6470_ResetPos+0x3c>)
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <L6470_ResetPos+0x38>)
 8001272:	f7ff f9fb 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001276:	4906      	ldr	r1, [pc, #24]	; (8001290 <L6470_ResetPos+0x40>)
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <L6470_ResetPos+0x3c>)
 800127a:	f000 fab5 	bl	80017e8 <L6470_DaisyChainCommand>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000504 	.word	0x20000504
 800128c:	20000514 	.word	0x20000514
 8001290:	20000518 	.word	0x20000518

08001294 <L6470_ResetDevice>:
  * @brief  ResetDevice command resets the device to power-up conditions.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_ResetDevice(uint8_t L6470_Id)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af02      	add	r7, sp, #8
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800129e:	79f8      	ldrb	r0, [r7, #7]
 80012a0:	2300      	movs	r3, #0
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	2300      	movs	r3, #0
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2300      	movs	r3, #0
 80012aa:	220d      	movs	r2, #13
 80012ac:	4907      	ldr	r1, [pc, #28]	; (80012cc <L6470_ResetDevice+0x38>)
 80012ae:	f7ff f9b9 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80012b2:	4907      	ldr	r1, [pc, #28]	; (80012d0 <L6470_ResetDevice+0x3c>)
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <L6470_ResetDevice+0x38>)
 80012b6:	f7ff f9d9 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80012ba:	4906      	ldr	r1, [pc, #24]	; (80012d4 <L6470_ResetDevice+0x40>)
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <L6470_ResetDevice+0x3c>)
 80012be:	f000 fa93 	bl	80017e8 <L6470_DaisyChainCommand>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000504 	.word	0x20000504
 80012d0:	20000514 	.word	0x20000514
 80012d4:	20000518 	.word	0x20000518

080012d8 <L6470_SoftStop>:
  *         in the DEC register.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_SoftStop(uint8_t L6470_Id)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af02      	add	r7, sp, #8
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80012e2:	79f8      	ldrb	r0, [r7, #7]
 80012e4:	2300      	movs	r3, #0
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2300      	movs	r3, #0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2300      	movs	r3, #0
 80012ee:	220e      	movs	r2, #14
 80012f0:	4907      	ldr	r1, [pc, #28]	; (8001310 <L6470_SoftStop+0x38>)
 80012f2:	f7ff f997 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80012f6:	4907      	ldr	r1, [pc, #28]	; (8001314 <L6470_SoftStop+0x3c>)
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <L6470_SoftStop+0x38>)
 80012fa:	f7ff f9b7 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80012fe:	4906      	ldr	r1, [pc, #24]	; (8001318 <L6470_SoftStop+0x40>)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <L6470_SoftStop+0x3c>)
 8001302:	f000 fa71 	bl	80017e8 <L6470_DaisyChainCommand>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000504 	.word	0x20000504
 8001314:	20000514 	.word	0x20000514
 8001318:	20000518 	.word	0x20000518

0800131c <L6470_HardStop>:
  * @brief  HardStop command causes an immediate motor stop with infinite deceleration.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_HardStop(uint8_t L6470_Id)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af02      	add	r7, sp, #8
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8001326:	79f8      	ldrb	r0, [r7, #7]
 8001328:	2300      	movs	r3, #0
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	2300      	movs	r3, #0
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2300      	movs	r3, #0
 8001332:	220f      	movs	r2, #15
 8001334:	4907      	ldr	r1, [pc, #28]	; (8001354 <L6470_HardStop+0x38>)
 8001336:	f7ff f975 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800133a:	4907      	ldr	r1, [pc, #28]	; (8001358 <L6470_HardStop+0x3c>)
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <L6470_HardStop+0x38>)
 800133e:	f7ff f995 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001342:	4906      	ldr	r1, [pc, #24]	; (800135c <L6470_HardStop+0x40>)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <L6470_HardStop+0x3c>)
 8001346:	f000 fa4f 	bl	80017e8 <L6470_DaisyChainCommand>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000504 	.word	0x20000504
 8001358:	20000514 	.word	0x20000514
 800135c:	20000518 	.word	0x20000518

08001360 <L6470_SoftHiZ>:
  *         stored in the DEC register.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_SoftHiZ(uint8_t L6470_Id)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af02      	add	r7, sp, #8
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800136a:	79f8      	ldrb	r0, [r7, #7]
 800136c:	2300      	movs	r3, #0
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	2300      	movs	r3, #0
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2300      	movs	r3, #0
 8001376:	2210      	movs	r2, #16
 8001378:	4907      	ldr	r1, [pc, #28]	; (8001398 <L6470_SoftHiZ+0x38>)
 800137a:	f7ff f953 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800137e:	4907      	ldr	r1, [pc, #28]	; (800139c <L6470_SoftHiZ+0x3c>)
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <L6470_SoftHiZ+0x38>)
 8001382:	f7ff f973 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001386:	4906      	ldr	r1, [pc, #24]	; (80013a0 <L6470_SoftHiZ+0x40>)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <L6470_SoftHiZ+0x3c>)
 800138a:	f000 fa2d 	bl	80017e8 <L6470_DaisyChainCommand>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000504 	.word	0x20000504
 800139c:	20000514 	.word	0x20000514
 80013a0:	20000518 	.word	0x20000518

080013a4 <L6470_HardHiZ>:
  * @brief  HardHiZ command immediately disables the power bridges (high impedance state).
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_HardHiZ(uint8_t L6470_Id)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80013ae:	79f8      	ldrb	r0, [r7, #7]
 80013b0:	2300      	movs	r3, #0
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	2300      	movs	r3, #0
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2300      	movs	r3, #0
 80013ba:	2211      	movs	r2, #17
 80013bc:	4907      	ldr	r1, [pc, #28]	; (80013dc <L6470_HardHiZ+0x38>)
 80013be:	f7ff f931 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80013c2:	4907      	ldr	r1, [pc, #28]	; (80013e0 <L6470_HardHiZ+0x3c>)
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <L6470_HardHiZ+0x38>)
 80013c6:	f7ff f951 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80013ca:	4906      	ldr	r1, [pc, #24]	; (80013e4 <L6470_HardHiZ+0x40>)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <L6470_HardHiZ+0x3c>)
 80013ce:	f000 fa0b 	bl	80017e8 <L6470_DaisyChainCommand>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000504 	.word	0x20000504
 80013e0:	20000514 	.word	0x20000514
 80013e4:	20000518 	.word	0x20000518

080013e8 <L6470_GetStatus>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * 
  * @retval ReceivedValue The register value.
  */
uint16_t L6470_GetStatus(uint8_t L6470_Id)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
  uint16_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80013f2:	79f8      	ldrb	r0, [r7, #7]
 80013f4:	2300      	movs	r3, #0
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	2300      	movs	r3, #0
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2300      	movs	r3, #0
 80013fe:	2212      	movs	r2, #18
 8001400:	490b      	ldr	r1, [pc, #44]	; (8001430 <L6470_GetStatus+0x48>)
 8001402:	f7ff f90f 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001406:	490b      	ldr	r1, [pc, #44]	; (8001434 <L6470_GetStatus+0x4c>)
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <L6470_GetStatus+0x48>)
 800140a:	f7ff f92f 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800140e:	490a      	ldr	r1, [pc, #40]	; (8001438 <L6470_GetStatus+0x50>)
 8001410:	4808      	ldr	r0, [pc, #32]	; (8001434 <L6470_GetStatus+0x4c>)
 8001412:	f000 f9e9 	bl	80017e8 <L6470_DaisyChainCommand>
  
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2202      	movs	r2, #2
 800141a:	4907      	ldr	r1, [pc, #28]	; (8001438 <L6470_GetStatus+0x50>)
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fa2d 	bl	800187c <L6470_ExtractReturnedData>
 8001422:	4603      	mov	r3, r0
 8001424:	81fb      	strh	r3, [r7, #14]
  
  return ReceivedValue;
 8001426:	89fb      	ldrh	r3, [r7, #14]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000504 	.word	0x20000504
 8001434:	20000514 	.word	0x20000514
 8001438:	20000518 	.word	0x20000518

0800143c <L6470_PrepareSetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af02      	add	r7, sp, #8
 8001442:	4603      	mov	r3, r0
 8001444:	603a      	str	r2, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	460b      	mov	r3, r1
 800144a:	71bb      	strb	r3, [r7, #6]
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800144c:	79ba      	ldrb	r2, [r7, #6]
 800144e:	79f8      	ldrb	r0, [r7, #7]
 8001450:	2300      	movs	r3, #0
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	4613      	mov	r3, r2
 800145a:	2201      	movs	r2, #1
 800145c:	4903      	ldr	r1, [pc, #12]	; (800146c <L6470_PrepareSetParam+0x30>)
 800145e:	f7ff f8e1 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000504 	.word	0x20000504

08001470 <L6470_PrepareGetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af02      	add	r7, sp, #8
 8001476:	4603      	mov	r3, r0
 8001478:	460a      	mov	r2, r1
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	4613      	mov	r3, r2
 800147e:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	79f8      	ldrb	r0, [r7, #7]
 8001484:	2200      	movs	r2, #0
 8001486:	9201      	str	r2, [sp, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	9200      	str	r2, [sp, #0]
 800148c:	2202      	movs	r2, #2
 800148e:	4903      	ldr	r1, [pc, #12]	; (800149c <L6470_PrepareGetParam+0x2c>)
 8001490:	f7ff f8c8 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000504 	.word	0x20000504

080014a0 <L6470_PrepareRun>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareRun(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	4603      	mov	r3, r0
 80014a8:	603a      	str	r2, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	460b      	mov	r3, r1
 80014ae:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80014b0:	79ba      	ldrb	r2, [r7, #6]
 80014b2:	79f8      	ldrb	r0, [r7, #7]
 80014b4:	2300      	movs	r3, #0
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4613      	mov	r3, r2
 80014be:	2203      	movs	r2, #3
 80014c0:	4903      	ldr	r1, [pc, #12]	; (80014d0 <L6470_PrepareRun+0x30>)
 80014c2:	f7ff f8af 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000504 	.word	0x20000504

080014d4 <L6470_PrepareStepClock>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareStepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af02      	add	r7, sp, #8
 80014da:	4603      	mov	r3, r0
 80014dc:	460a      	mov	r2, r1
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	4613      	mov	r3, r2
 80014e2:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80014e4:	79bb      	ldrb	r3, [r7, #6]
 80014e6:	79f8      	ldrb	r0, [r7, #7]
 80014e8:	2200      	movs	r2, #0
 80014ea:	9201      	str	r2, [sp, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	9200      	str	r2, [sp, #0]
 80014f0:	2204      	movs	r2, #4
 80014f2:	4903      	ldr	r1, [pc, #12]	; (8001500 <L6470_PrepareStepClock+0x2c>)
 80014f4:	f7ff f896 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000504 	.word	0x20000504

08001504 <L6470_PrepareMove>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareMove(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af02      	add	r7, sp, #8
 800150a:	4603      	mov	r3, r0
 800150c:	603a      	str	r2, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	460b      	mov	r3, r1
 8001512:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8001514:	79ba      	ldrb	r2, [r7, #6]
 8001516:	79f8      	ldrb	r0, [r7, #7]
 8001518:	2300      	movs	r3, #0
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4613      	mov	r3, r2
 8001522:	2205      	movs	r2, #5
 8001524:	4903      	ldr	r1, [pc, #12]	; (8001534 <L6470_PrepareMove+0x30>)
 8001526:	f7ff f87d 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000504 	.word	0x20000504

08001538 <L6470_PrepareGoTo>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af02      	add	r7, sp, #8
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8001544:	79f8      	ldrb	r0, [r7, #7]
 8001546:	2300      	movs	r3, #0
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	2300      	movs	r3, #0
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2206      	movs	r2, #6
 8001552:	4903      	ldr	r1, [pc, #12]	; (8001560 <L6470_PrepareGoTo+0x28>)
 8001554:	f7ff f866 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000504 	.word	0x20000504

08001564 <L6470_PrepareGoToDir>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af02      	add	r7, sp, #8
 800156a:	4603      	mov	r3, r0
 800156c:	603a      	str	r2, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	460b      	mov	r3, r1
 8001572:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8001574:	79ba      	ldrb	r2, [r7, #6]
 8001576:	79f8      	ldrb	r0, [r7, #7]
 8001578:	2300      	movs	r3, #0
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	4613      	mov	r3, r2
 8001582:	2207      	movs	r2, #7
 8001584:	4903      	ldr	r1, [pc, #12]	; (8001594 <L6470_PrepareGoToDir+0x30>)
 8001586:	f7ff f84d 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000504 	.word	0x20000504

08001598 <L6470_PrepareGoUntil>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af02      	add	r7, sp, #8
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
 80015a4:	460b      	mov	r3, r1
 80015a6:	71bb      	strb	r3, [r7, #6]
 80015a8:	4613      	mov	r3, r2
 80015aa:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 80015ac:	79b9      	ldrb	r1, [r7, #6]
 80015ae:	797b      	ldrb	r3, [r7, #5]
 80015b0:	79f8      	ldrb	r0, [r7, #7]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	9201      	str	r2, [sp, #4]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	460b      	mov	r3, r1
 80015ba:	2208      	movs	r2, #8
 80015bc:	4903      	ldr	r1, [pc, #12]	; (80015cc <L6470_PrepareGoUntil+0x34>)
 80015be:	f7ff f831 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000504 	.word	0x20000504

080015d0 <L6470_PrepareReleaseSW>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
 80015da:	460b      	mov	r3, r1
 80015dc:	71bb      	strb	r3, [r7, #6]
 80015de:	4613      	mov	r3, r2
 80015e0:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80015e2:	79ba      	ldrb	r2, [r7, #6]
 80015e4:	797b      	ldrb	r3, [r7, #5]
 80015e6:	79f8      	ldrb	r0, [r7, #7]
 80015e8:	2100      	movs	r1, #0
 80015ea:	9101      	str	r1, [sp, #4]
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	4613      	mov	r3, r2
 80015f0:	2209      	movs	r2, #9
 80015f2:	4903      	ldr	r1, [pc, #12]	; (8001600 <L6470_PrepareReleaseSW+0x30>)
 80015f4:	f7ff f816 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000504 	.word	0x20000504

08001604 <L6470_PrepareGoHome>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoHome(uint8_t L6470_Id)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af02      	add	r7, sp, #8
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800160e:	79f8      	ldrb	r0, [r7, #7]
 8001610:	2300      	movs	r3, #0
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	2300      	movs	r3, #0
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2300      	movs	r3, #0
 800161a:	220a      	movs	r2, #10
 800161c:	4903      	ldr	r1, [pc, #12]	; (800162c <L6470_PrepareGoHome+0x28>)
 800161e:	f7ff f801 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000504 	.word	0x20000504

08001630 <L6470_PrepareGoMark>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoMark(uint8_t L6470_Id)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af02      	add	r7, sp, #8
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800163a:	79f8      	ldrb	r0, [r7, #7]
 800163c:	2300      	movs	r3, #0
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	2300      	movs	r3, #0
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2300      	movs	r3, #0
 8001646:	220b      	movs	r2, #11
 8001648:	4903      	ldr	r1, [pc, #12]	; (8001658 <L6470_PrepareGoMark+0x28>)
 800164a:	f7fe ffeb 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000504 	.word	0x20000504

0800165c <L6470_PrepareResetPos>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetPos(uint8_t L6470_Id)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af02      	add	r7, sp, #8
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8001666:	79f8      	ldrb	r0, [r7, #7]
 8001668:	2300      	movs	r3, #0
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	2300      	movs	r3, #0
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2300      	movs	r3, #0
 8001672:	220c      	movs	r2, #12
 8001674:	4903      	ldr	r1, [pc, #12]	; (8001684 <L6470_PrepareResetPos+0x28>)
 8001676:	f7fe ffd5 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000504 	.word	0x20000504

08001688 <L6470_PrepareResetDevice>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetDevice(uint8_t L6470_Id)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af02      	add	r7, sp, #8
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8001692:	79f8      	ldrb	r0, [r7, #7]
 8001694:	2300      	movs	r3, #0
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	2300      	movs	r3, #0
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2300      	movs	r3, #0
 800169e:	220d      	movs	r2, #13
 80016a0:	4903      	ldr	r1, [pc, #12]	; (80016b0 <L6470_PrepareResetDevice+0x28>)
 80016a2:	f7fe ffbf 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000504 	.word	0x20000504

080016b4 <L6470_PrepareSoftStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftStop(uint8_t L6470_Id)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80016be:	79f8      	ldrb	r0, [r7, #7]
 80016c0:	2300      	movs	r3, #0
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	2300      	movs	r3, #0
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2300      	movs	r3, #0
 80016ca:	220e      	movs	r2, #14
 80016cc:	4903      	ldr	r1, [pc, #12]	; (80016dc <L6470_PrepareSoftStop+0x28>)
 80016ce:	f7fe ffa9 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000504 	.word	0x20000504

080016e0 <L6470_PrepareHardStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardStop(uint8_t L6470_Id)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80016ea:	79f8      	ldrb	r0, [r7, #7]
 80016ec:	2300      	movs	r3, #0
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	2300      	movs	r3, #0
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2300      	movs	r3, #0
 80016f6:	220f      	movs	r2, #15
 80016f8:	4903      	ldr	r1, [pc, #12]	; (8001708 <L6470_PrepareHardStop+0x28>)
 80016fa:	f7fe ff93 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000504 	.word	0x20000504

0800170c <L6470_PrepareSoftHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftHiZ(uint8_t L6470_Id)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af02      	add	r7, sp, #8
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8001716:	79f8      	ldrb	r0, [r7, #7]
 8001718:	2300      	movs	r3, #0
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	2300      	movs	r3, #0
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2300      	movs	r3, #0
 8001722:	2210      	movs	r2, #16
 8001724:	4903      	ldr	r1, [pc, #12]	; (8001734 <L6470_PrepareSoftHiZ+0x28>)
 8001726:	f7fe ff7d 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000504 	.word	0x20000504

08001738 <L6470_PrepareHardHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardHiZ(uint8_t L6470_Id)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af02      	add	r7, sp, #8
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8001742:	79f8      	ldrb	r0, [r7, #7]
 8001744:	2300      	movs	r3, #0
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	2300      	movs	r3, #0
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2300      	movs	r3, #0
 800174e:	2211      	movs	r2, #17
 8001750:	4903      	ldr	r1, [pc, #12]	; (8001760 <L6470_PrepareHardHiZ+0x28>)
 8001752:	f7fe ff67 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000504 	.word	0x20000504

08001764 <L6470_PrepareGetStatus>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetStatus(uint8_t L6470_Id)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af02      	add	r7, sp, #8
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800176e:	79f8      	ldrb	r0, [r7, #7]
 8001770:	2300      	movs	r3, #0
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	2300      	movs	r3, #0
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2300      	movs	r3, #0
 800177a:	2212      	movs	r2, #18
 800177c:	4903      	ldr	r1, [pc, #12]	; (800178c <L6470_PrepareGetStatus+0x28>)
 800177e:	f7fe ff51 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000504 	.word	0x20000504

08001790 <L6470_PerformPreparedApplicationCommand>:
  * @retval (uint8_t*)L6470_DaisyChainSpiRxStruct  The pointer to the structure
  *         containing returned values from each L6470 of the daisy chain for each
  *         sent SPI data.
  */
uint8_t* L6470_PerformPreparedApplicationCommand(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001794:	4905      	ldr	r1, [pc, #20]	; (80017ac <L6470_PerformPreparedApplicationCommand+0x1c>)
 8001796:	4806      	ldr	r0, [pc, #24]	; (80017b0 <L6470_PerformPreparedApplicationCommand+0x20>)
 8001798:	f7fe ff68 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800179c:	4905      	ldr	r1, [pc, #20]	; (80017b4 <L6470_PerformPreparedApplicationCommand+0x24>)
 800179e:	4803      	ldr	r0, [pc, #12]	; (80017ac <L6470_PerformPreparedApplicationCommand+0x1c>)
 80017a0:	f000 f822 	bl	80017e8 <L6470_DaisyChainCommand>
  
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <L6470_PerformPreparedApplicationCommand+0x24>)
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000514 	.word	0x20000514
 80017b0:	20000504 	.word	0x20000504
 80017b4:	20000518 	.word	0x20000518

080017b8 <L6470_ID>:
  *
  * @note   The position '1' is close the uC MISO.
  * @note   If the position is not allowable the returned value is 0xFF.
  */
uint8_t L6470_ID(uint8_t position)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
   if ((position == 0) || ((position > 0) && (position < L6470DAISYCHAINSIZE)))
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <L6470_ID+0x1c>
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d004      	beq.n	80017d8 <L6470_ID+0x20>
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <L6470_ID+0x20>
  {
    return (position);
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	e000      	b.n	80017da <L6470_ID+0x22>
  }
  else
  {
    return 0xFF;
 80017d8:	23ff      	movs	r3, #255	; 0xff
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <L6470_DaisyChainCommand>:
  * @brief  Send command to the L6470 daisy chain via SPI
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the matrix array of bytes to be sent to the daisy chain L6470
  * @param  pL6470_DaisyChainSpiRxStruct  Pointer to the matrix array of bytes to be received from the daisy chain L6470
  */
void L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint8_t spibyte;
  
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 80017f2:	4b1e      	ldr	r3, [pc, #120]	; (800186c <L6470_DaisyChainCommand+0x84>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
  
  /* Send all command bytes via SPI */
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
 80017fc:	e02d      	b.n	800185a <L6470_DaisyChainCommand+0x72>
  {
    /* Enable SPI communication for L6470 */
    L6470_nCS_LOW();
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <L6470_DaisyChainCommand+0x88>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <L6470_DaisyChainCommand+0x88>)
 8001804:	8911      	ldrh	r1, [r2, #8]
 8001806:	2200      	movs	r2, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f004 f91b 	bl	8005a44 <HAL_GPIO_WritePin>
    
    /* Send the command via SPI */
    L6470_SPI_Communication(&HSPI, (pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	18d1      	adds	r1, r2, r3
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	441a      	add	r2, r3
 800181a:	230a      	movs	r3, #10
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2301      	movs	r3, #1
 8001820:	4814      	ldr	r0, [pc, #80]	; (8001874 <L6470_DaisyChainCommand+0x8c>)
 8001822:	f005 fae6 	bl	8006df2 <HAL_SPI_TransmitReceive>
    
    /* Allow the device to decode the received command */
    L6470_nCS_HIGH();
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <L6470_DaisyChainCommand+0x88>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4a11      	ldr	r2, [pc, #68]	; (8001870 <L6470_DaisyChainCommand+0x88>)
 800182c:	8911      	ldrh	r1, [r2, #8]
 800182e:	2201      	movs	r2, #1
 8001830:	4618      	mov	r0, r3
 8001832:	f004 f907 	bl	8005a44 <HAL_GPIO_WritePin>
    
    _DELAY(TDISCS);
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <L6470_DaisyChainCommand+0x90>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	e006      	b.n	800184c <L6470_DaisyChainCommand+0x64>
 800183e:	bf00      	nop
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <L6470_DaisyChainCommand+0x90>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <L6470_DaisyChainCommand+0x90>)
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <L6470_DaisyChainCommand+0x90>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b13      	cmp	r3, #19
 8001852:	d9f4      	bls.n	800183e <L6470_DaisyChainCommand+0x56>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	3301      	adds	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	2b03      	cmp	r3, #3
 800185e:	d9ce      	bls.n	80017fe <L6470_DaisyChainCommand+0x16>
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	2000051c 	.word	0x2000051c
 8001870:	20000524 	.word	0x20000524
 8001874:	20000530 	.word	0x20000530
 8001878:	20000522 	.word	0x20000522

0800187c <L6470_ExtractReturnedData>:
  * @param    pL6470_DaisyChainSpiRxStruct  uint8_t-pointer to the matrix that
  *           contains the received data by SPI from the L6470 daisy chain.
  * @param    LengthByte  The number of bytes about the received value.
  */
uint32_t L6470_ExtractReturnedData(uint8_t L6470_Id, uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
  uint32_t value;
  uint8_t i;
  
  value = 0x000000;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8001890:	2301      	movs	r3, #1
 8001892:	72fb      	strb	r3, [r7, #11]
 8001894:	e013      	b.n	80018be <L6470_ExtractReturnedData+0x42>
  {
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8001896:	7afa      	ldrb	r2, [r7, #11]
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4413      	add	r3, r2
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	79ba      	ldrb	r2, [r7, #6]
 80018a6:	7afb      	ldrb	r3, [r7, #11]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80018b8:	7afb      	ldrb	r3, [r7, #11]
 80018ba:	3301      	adds	r3, #1
 80018bc:	72fb      	strb	r3, [r7, #11]
 80018be:	7afb      	ldrb	r3, [r7, #11]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d9e8      	bls.n	8001896 <L6470_ExtractReturnedData+0x1a>
  }
  
  return value;
 80018c4:	68fb      	ldr	r3, [r7, #12]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <L6470_CheckStatusRegisterFlag>:
  *
  * @retval state The flag state.
  */

uint8_t L6470_CheckStatusRegisterFlag(uint8_t L6470_Id, uint8_t L6470_StatusRegisterFlagId)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71bb      	strb	r3, [r7, #6]
  uint8_t state = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]
  
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_Id, L6470_STATUS_ID);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2118      	movs	r1, #24
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fb25 	bl	8000f3c <L6470_GetParam>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	b292      	uxth	r2, r2
 80018fa:	801a      	strh	r2, [r3, #0]
  
  switch(L6470_StatusRegisterFlagId)
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	2b0e      	cmp	r3, #14
 8001900:	f200 809a 	bhi.w	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
 8001904:	a201      	add	r2, pc, #4	; (adr r2, 800190c <L6470_CheckStatusRegisterFlag+0x38>)
 8001906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190a:	bf00      	nop
 800190c:	08001949 	.word	0x08001949
 8001910:	08001959 	.word	0x08001959
 8001914:	08001969 	.word	0x08001969
 8001918:	08001979 	.word	0x08001979
 800191c:	08001989 	.word	0x08001989
 8001920:	08001999 	.word	0x08001999
 8001924:	080019a9 	.word	0x080019a9
 8001928:	080019b9 	.word	0x080019b9
 800192c:	080019c9 	.word	0x080019c9
 8001930:	080019d9 	.word	0x080019d9
 8001934:	080019e9 	.word	0x080019e9
 8001938:	080019f9 	.word	0x080019f9
 800193c:	08001a09 	.word	0x08001a09
 8001940:	08001a19 	.word	0x08001a19
 8001944:	08001a29 	.word	0x08001a29
  {
  case HiZ_ID:
    state = pL6470_StatusRegister->HiZ;
 8001948:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	73fb      	strb	r3, [r7, #15]
    break;
 8001956:	e06f      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case BUSY_ID:
    state = pL6470_StatusRegister->BUSY;
 8001958:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	73fb      	strb	r3, [r7, #15]
    break;
 8001966:	e067      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case SW_F_ID:
    state = pL6470_StatusRegister->SW_F;
 8001968:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	73fb      	strb	r3, [r7, #15]
    break;
 8001976:	e05f      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case SW_EVN_ID:
    state = pL6470_StatusRegister->SW_EVN;
 8001978:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	73fb      	strb	r3, [r7, #15]
    break;
 8001986:	e057      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case DIR_ID:
    state = pL6470_StatusRegister->DIR;
 8001988:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001992:	b2db      	uxtb	r3, r3
 8001994:	73fb      	strb	r3, [r7, #15]
    break;
 8001996:	e04f      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case MOT_STATUS_ID:
    state = pL6470_StatusRegister->MOT_STATUS;
 8001998:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	73fb      	strb	r3, [r7, #15]
    break;
 80019a6:	e047      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case NOTPERF_CMD_ID:
    state = pL6470_StatusRegister->NOTPERF_CMD;
 80019a8:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	73fb      	strb	r3, [r7, #15]
    break;
 80019b6:	e03f      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case WRONG_CMD_ID:
    state = pL6470_StatusRegister->WRONG_CMD;
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	73fb      	strb	r3, [r7, #15]
    break;
 80019c6:	e037      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case UVLO_ID:
    state = pL6470_StatusRegister->UVLO;
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	785b      	ldrb	r3, [r3, #1]
 80019ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	73fb      	strb	r3, [r7, #15]
    break;
 80019d6:	e02f      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case TH_WRN_ID:
    state = pL6470_StatusRegister->TH_WRN;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	785b      	ldrb	r3, [r3, #1]
 80019de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	73fb      	strb	r3, [r7, #15]
    break;
 80019e6:	e027      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case TH_SD_ID:
    state = pL6470_StatusRegister->TH_SD;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	785b      	ldrb	r3, [r3, #1]
 80019ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	73fb      	strb	r3, [r7, #15]
    break;
 80019f6:	e01f      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case OCD_ID:
    state = pL6470_StatusRegister->OCD;
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	785b      	ldrb	r3, [r3, #1]
 80019fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	73fb      	strb	r3, [r7, #15]
    break;
 8001a06:	e017      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case STEP_LOSS_A_ID:
    state = pL6470_StatusRegister->STEP_LOSS_A;
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	785b      	ldrb	r3, [r3, #1]
 8001a0e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	73fb      	strb	r3, [r7, #15]
    break;
 8001a16:	e00f      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case STEP_LOSS_B_ID:
    state = pL6470_StatusRegister->STEP_LOSS_B;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	785b      	ldrb	r3, [r3, #1]
 8001a1e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	73fb      	strb	r3, [r7, #15]
    break;
 8001a26:	e007      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case SCK_MOD_ID:
    state = pL6470_StatusRegister->SCK_MOD;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	785b      	ldrb	r3, [r3, #1]
 8001a2e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	73fb      	strb	r3, [r7, #15]
    break;
 8001a36:	bf00      	nop
  }
  
  return state;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000094 	.word	0x20000094

08001a48 <L6470_Config>:
  * @brief  Configures the L6470 registers.
  * @param  StepperMotorDriverHandle_t* The pointer to the stepper motor driver handle structure.
  * @param  MotorParameterData_t* The pointer to the related parameter data structure.
  */
void L6470_Config(StepperMotorDriverHandle_t *StepperMotorDriverHandle, MotorParameterData_t *MotorParameterData)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  StepperMotorDriverHandle->Register.ACC = Step_s2_2_Acc(MotorParameterData->acc);
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a58:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5c:	f7ff f84e 	bl	8000afc <Step_s2_2_Acc>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	839a      	strh	r2, [r3, #28]
  StepperMotorDriverHandle->Register.DEC = Step_s2_2_Dec(MotorParameterData->dec);
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a72:	f7ff f869 	bl	8000b48 <Step_s2_2_Dec>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	83da      	strh	r2, [r3, #30]
  StepperMotorDriverHandle->Register.MAX_SPEED = Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a84:	eeb0 0a67 	vmov.f32	s0, s15
 8001a88:	f7ff f884 	bl	8000b94 <Step_s_2_MaxSpeed>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	841a      	strh	r2, [r3, #32]
  StepperMotorDriverHandle->Register.MIN_SPEED = Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9e:	f7ff f89f 	bl	8000be0 <Step_s_2_MinSpeed>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	845a      	strh	r2, [r3, #34]	; 0x22
  StepperMotorDriverHandle->Register.FS_SPD = Step_s_2_FsSpd(MotorParameterData->fsspd);
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab4:	f7ff f8ba 	bl	8000c2c <Step_s_2_FsSpd>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	849a      	strh	r2, [r3, #36]	; 0x24
  StepperMotorDriverHandle->Register.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ac6:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001d74 <L6470_Config+0x32c>
 8001aca:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	ed93 7a00 	vldr	s14, [r3]
 8001ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001adc:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ae0:	793b      	ldrb	r3, [r7, #4]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  StepperMotorDriverHandle->Register.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001af0:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001d74 <L6470_Config+0x32c>
 8001af4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	ed93 7a00 	vldr	s14, [r3]
 8001afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b06:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b0a:	793b      	ldrb	r3, [r7, #4]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  StepperMotorDriverHandle->Register.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001b1a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001d74 <L6470_Config+0x32c>
 8001b1e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b30:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b34:	793b      	ldrb	r3, [r7, #4]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  StepperMotorDriverHandle->Register.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001b44:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001d74 <L6470_Config+0x32c>
 8001b48:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	ed93 7a00 	vldr	s14, [r3]
 8001b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b5a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b5e:	793b      	ldrb	r3, [r7, #4]
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  StepperMotorDriverHandle->Register.INT_SPEED = Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b72:	f7ff f885 	bl	8000c80 <Step_s_2_IntSpeed>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  StepperMotorDriverHandle->Register.ST_SLP = s_Step_2_StSlp(MotorParameterData->stslp);
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b84:	eeb0 0a67 	vmov.f32	s0, s15
 8001b88:	f7ff f8a0 	bl	8000ccc <s_Step_2_StSlp>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  StepperMotorDriverHandle->Register.FN_SLP_ACC = s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba0:	f7ff f8ba 	bl	8000d18 <s_Step_2_FnSlpAcc>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  StepperMotorDriverHandle->Register.FN_SLP_DEC = s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb8:	f7ff f8d4 	bl	8000d64 <s_Step_2_FnSlpDec>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  StepperMotorDriverHandle->Register.K_THERM = MotorParameterData->kterm;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  StepperMotorDriverHandle->Register.OCD_TH = mA_2_OcdTh(MotorParameterData->ocdth);
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bdc:	f7ff f8e8 	bl	8000db0 <mA_2_OcdTh>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  StepperMotorDriverHandle->Register.STALL_TH = mA_2_StallTh(MotorParameterData->stallth);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf4:	f7ff f92c 	bl	8000e50 <mA_2_StallTh>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  StepperMotorDriverHandle->Register.STEP_MODE = MotorParameterData->step_sel;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  StepperMotorDriverHandle->Register.ALARM_EN = MotorParameterData->alarmen;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  StepperMotorDriverHandle->Register.CONFIG = MotorParameterData->config;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	86da      	strh	r2, [r3, #54]	; 0x36
  
  /* Write the L6470 registers with the prepared data */
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ACC_ID, StepperMotorDriverHandle->Register.ACC);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	7810      	ldrb	r0, [r2, #0]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	8b92      	ldrh	r2, [r2, #28]
 8001c32:	2104      	movs	r1, #4
 8001c34:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_DEC_ID, StepperMotorDriverHandle->Register.DEC);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	7810      	ldrb	r0, [r2, #0]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	8bd2      	ldrh	r2, [r2, #30]
 8001c44:	2105      	movs	r1, #5
 8001c46:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MAX_SPEED_ID, StepperMotorDriverHandle->Register.MAX_SPEED);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	7810      	ldrb	r0, [r2, #0]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	8c12      	ldrh	r2, [r2, #32]
 8001c56:	2106      	movs	r1, #6
 8001c58:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MIN_SPEED_ID, StepperMotorDriverHandle->Register.MIN_SPEED);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	7810      	ldrb	r0, [r2, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001c68:	2107      	movs	r1, #7
 8001c6a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FS_SPD_ID, StepperMotorDriverHandle->Register.FS_SPD);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	7810      	ldrb	r0, [r2, #0]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001c7a:	2108      	movs	r1, #8
 8001c7c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_HOLD_ID, StepperMotorDriverHandle->Register.KVAL_HOLD);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	7810      	ldrb	r0, [r2, #0]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001c8e:	2109      	movs	r1, #9
 8001c90:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_RUN_ID, StepperMotorDriverHandle->Register.KVAL_RUN);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	7810      	ldrb	r0, [r2, #0]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8001ca2:	210a      	movs	r1, #10
 8001ca4:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_ACC_ID, StepperMotorDriverHandle->Register.KVAL_ACC);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	7810      	ldrb	r0, [r2, #0]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8001cb6:	210b      	movs	r1, #11
 8001cb8:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_DEC_ID, StepperMotorDriverHandle->Register.KVAL_DEC);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	7810      	ldrb	r0, [r2, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8001cca:	210c      	movs	r1, #12
 8001ccc:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_INT_SPEED_ID, StepperMotorDriverHandle->Register.INT_SPEED);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	7810      	ldrb	r0, [r2, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8001cdc:	210d      	movs	r1, #13
 8001cde:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ST_SLP_ID, StepperMotorDriverHandle->Register.ST_SLP);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	7810      	ldrb	r0, [r2, #0]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001cf0:	210e      	movs	r1, #14
 8001cf2:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_ACC_ID, StepperMotorDriverHandle->Register.FN_SLP_ACC);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	7810      	ldrb	r0, [r2, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8001d04:	210f      	movs	r1, #15
 8001d06:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_DEC_ID, StepperMotorDriverHandle->Register.FN_SLP_DEC);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	7810      	ldrb	r0, [r2, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8001d18:	2110      	movs	r1, #16
 8001d1a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_K_THERM_ID, StepperMotorDriverHandle->Register.K_THERM);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	7810      	ldrb	r0, [r2, #0]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8001d2c:	2111      	movs	r1, #17
 8001d2e:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_OCD_TH_ID, StepperMotorDriverHandle->Register.OCD_TH);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	7810      	ldrb	r0, [r2, #0]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8001d40:	2113      	movs	r1, #19
 8001d42:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STALL_TH_ID, StepperMotorDriverHandle->Register.STALL_TH);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	7810      	ldrb	r0, [r2, #0]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001d54:	2114      	movs	r1, #20
 8001d56:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STEP_MODE_ID, StepperMotorDriverHandle->Register.STEP_MODE);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	7810      	ldrb	r0, [r2, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8001d68:	2115      	movs	r1, #21
 8001d6a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ALARM_EN_ID, StepperMotorDriverHandle->Register.ALARM_EN);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	e001      	b.n	8001d78 <L6470_Config+0x330>
 8001d74:	43800000 	.word	0x43800000
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	7810      	ldrb	r0, [r2, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001d82:	2116      	movs	r1, #22
 8001d84:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_CONFIG_ID, StepperMotorDriverHandle->Register.CONFIG);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	7810      	ldrb	r0, [r2, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8001d94:	2117      	movs	r1, #23
 8001d96:	4798      	blx	r3
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00b      	beq.n	8001dc8 <LAN8742_RegisterBusIO+0x28>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <LAN8742_RegisterBusIO+0x28>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <LAN8742_RegisterBusIO+0x28>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dcc:	e014      	b.n	8001df8 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d17c      	bne.n	8001f1e <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2220      	movs	r2, #32
 8001e36:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	e01c      	b.n	8001e78 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f107 0208 	add.w	r2, r7, #8
 8001e46:	2112      	movs	r1, #18
 8001e48:	6978      	ldr	r0, [r7, #20]
 8001e4a:	4798      	blx	r3
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	da03      	bge.n	8001e5a <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001e52:	f06f 0304 	mvn.w	r3, #4
 8001e56:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001e58:	e00b      	b.n	8001e72 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d105      	bne.n	8001e72 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
         break;
 8001e70:	e005      	b.n	8001e7e <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b1f      	cmp	r3, #31
 8001e7c:	d9df      	bls.n	8001e3e <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b1f      	cmp	r3, #31
 8001e84:	d902      	bls.n	8001e8c <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001e86:	f06f 0302 	mvn.w	r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d145      	bne.n	8001f1e <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6810      	ldr	r0, [r2, #0]
 8001e9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4798      	blx	r3
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db37      	blt.n	8001f18 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6810      	ldr	r0, [r2, #0]
 8001eb0:	f107 0208 	add.w	r2, r7, #8
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4798      	blx	r3
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db28      	blt.n	8001f10 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	4798      	blx	r3
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001ec8:	e01c      	b.n	8001f04 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	4798      	blx	r3
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001edc:	d80e      	bhi.n	8001efc <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6810      	ldr	r0, [r2, #0]
 8001ee6:	f107 0208 	add.w	r2, r7, #8
 8001eea:	2100      	movs	r1, #0
 8001eec:	4798      	blx	r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	da07      	bge.n	8001f04 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8001ef4:	f06f 0304 	mvn.w	r3, #4
 8001ef8:	613b      	str	r3, [r7, #16]
                 break;
 8001efa:	e010      	b.n	8001f1e <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001efc:	f06f 0301 	mvn.w	r3, #1
 8001f00:	613b      	str	r3, [r7, #16]
               break;
 8001f02:	e00c      	b.n	8001f1e <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1dd      	bne.n	8001eca <LAN8742_Init+0xc6>
 8001f0e:	e006      	b.n	8001f1e <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001f10:	f06f 0304 	mvn.w	r3, #4
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	e002      	b.n	8001f1e <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001f18:	f06f 0303 	mvn.w	r3, #3
 8001f1c:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d112      	bne.n	8001f4a <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4798      	blx	r3
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001f2e:	bf00      	nop
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4798      	blx	r3
 8001f36:	4603      	mov	r3, r0
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f42:	d9f5      	bls.n	8001f30 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 }
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6810      	ldr	r0, [r2, #0]
 8001f68:	f107 020c 	add.w	r2, r7, #12
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	4798      	blx	r3
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	da02      	bge.n	8001f7c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001f76:	f06f 0304 	mvn.w	r3, #4
 8001f7a:	e06e      	b.n	800205a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6810      	ldr	r0, [r2, #0]
 8001f84:	f107 020c 	add.w	r2, r7, #12
 8001f88:	2101      	movs	r1, #1
 8001f8a:	4798      	blx	r3
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	da02      	bge.n	8001f98 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001f92:	f06f 0304 	mvn.w	r3, #4
 8001f96:	e060      	b.n	800205a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e059      	b.n	800205a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6810      	ldr	r0, [r2, #0]
 8001fae:	f107 020c 	add.w	r2, r7, #12
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4798      	blx	r3
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	da02      	bge.n	8001fc2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001fbc:	f06f 0304 	mvn.w	r3, #4
 8001fc0:	e04b      	b.n	800205a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d11b      	bne.n	8002004 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <LAN8742_GetLinkState+0x90>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e03a      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e033      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	e02c      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002000:	2305      	movs	r3, #5
 8002002:	e02a      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6810      	ldr	r0, [r2, #0]
 800200c:	f107 020c 	add.w	r2, r7, #12
 8002010:	211f      	movs	r1, #31
 8002012:	4798      	blx	r3
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	da02      	bge.n	8002020 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800201a:	f06f 0304 	mvn.w	r3, #4
 800201e:	e01c      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800202a:	2306      	movs	r3, #6
 800202c:	e015      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 031c 	and.w	r3, r3, #28
 8002034:	2b18      	cmp	r3, #24
 8002036:	d101      	bne.n	800203c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002038:	2302      	movs	r3, #2
 800203a:	e00e      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 031c 	and.w	r3, r3, #28
 8002042:	2b08      	cmp	r3, #8
 8002044:	d101      	bne.n	800204a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002046:	2303      	movs	r3, #3
 8002048:	e007      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 031c 	and.w	r3, r3, #28
 8002050:	2b14      	cmp	r3, #20
 8002052:	d101      	bne.n	8002058 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002054:	2304      	movs	r3, #4
 8002056:	e000      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002058:	2305      	movs	r3, #5
    }
  }
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <BSP_NUCLEO_GPIO_Init>:
  *         - nBUSY_SYNC (Input with IRQ on falling edge)
  *         - nFLAG (Input with IRQ on falling edge)
  *         - one or more nCS (Output Push-Pull)
  */
void BSP_NUCLEO_GPIO_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  uint8_t ExpBrd;
  
  /* Initialize X-NUCLEO-IHM02A1 nSTBY_nRST pin */
  GPIO_CLK_ENABLE(L6470_nSTBY_nRST_GPIO.gpio_clk_enable);
 800206a:	4b46      	ldr	r3, [pc, #280]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 800206c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800206e:	4b46      	ldr	r3, [pc, #280]	; (8002188 <BSP_NUCLEO_GPIO_Init+0x124>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4944      	ldr	r1, [pc, #272]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 8002074:	4313      	orrs	r3, r2
 8002076:	630b      	str	r3, [r1, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nSTBY_nRST_GPIO.pin;
 8002078:	4b43      	ldr	r3, [pc, #268]	; (8002188 <BSP_NUCLEO_GPIO_Init+0x124>)
 800207a:	891b      	ldrh	r3, [r3, #8]
 800207c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800207e:	2311      	movs	r3, #17
 8002080:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(L6470_nSTBY_nRST_GPIO.port, &GPIO_InitStruct);
 800208a:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <BSP_NUCLEO_GPIO_Init+0x124>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	463a      	mov	r2, r7
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f003 fb22 	bl	80056dc <HAL_GPIO_Init>
  
  /* Initialize the X-NUCLEO-IHM02A1 nBUSY_SYNC pin */
  GPIO_CLK_ENABLE(L6470_nBUSY_SYNC_GPIO.gpio_clk_enable);
 8002098:	4b3a      	ldr	r3, [pc, #232]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 800209a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800209c:	4b3b      	ldr	r3, [pc, #236]	; (800218c <BSP_NUCLEO_GPIO_Init+0x128>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4938      	ldr	r1, [pc, #224]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	630b      	str	r3, [r1, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nBUSY_SYNC_GPIO.pin;
 80020a6:	4b39      	ldr	r3, [pc, #228]	; (800218c <BSP_NUCLEO_GPIO_Init+0x128>)
 80020a8:	891b      	ldrh	r3, [r3, #8]
 80020aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020ac:	4b38      	ldr	r3, [pc, #224]	; (8002190 <BSP_NUCLEO_GPIO_Init+0x12c>)
 80020ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(L6470_nBUSY_SYNC_GPIO.port, &GPIO_InitStruct);
 80020b4:	4b35      	ldr	r3, [pc, #212]	; (800218c <BSP_NUCLEO_GPIO_Init+0x128>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	463a      	mov	r2, r7
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f003 fb0d 	bl	80056dc <HAL_GPIO_Init>

  /* Sets the priority grouping field */
  HAL_NVIC_SetPriority(L6470_nBUSY_SYNC_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2006      	movs	r0, #6
 80020c8:	f002 f93d 	bl	8004346 <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(L6470_nBUSY_SYNC_IRQn);

  /* Initialize X-NUCLEO-IHM02A1 nFLAG pin */
  GPIO_CLK_ENABLE(L6470_nFLAG_GPIO.gpio_clk_enable);
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 80020ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d0:	4b30      	ldr	r3, [pc, #192]	; (8002194 <BSP_NUCLEO_GPIO_Init+0x130>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	492b      	ldr	r1, [pc, #172]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	630b      	str	r3, [r1, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nFLAG_GPIO.pin;
 80020da:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <BSP_NUCLEO_GPIO_Init+0x130>)
 80020dc:	891b      	ldrh	r3, [r3, #8]
 80020de:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020e0:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <BSP_NUCLEO_GPIO_Init+0x12c>)
 80020e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(L6470_nFLAG_GPIO.port, &GPIO_InitStruct);
 80020e8:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <BSP_NUCLEO_GPIO_Init+0x130>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	463a      	mov	r2, r7
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f003 faf3 	bl	80056dc <HAL_GPIO_Init>

  /* Sets the priority grouping field */
  HAL_NVIC_SetPriority(L6470_nFLAG_IRQn, 0, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2100      	movs	r1, #0
 80020fa:	2007      	movs	r0, #7
 80020fc:	f002 f923 	bl	8004346 <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(L6470_nFLAG_IRQn);
  
  /* Initialize X-NUCLEO-IHM02A1 nCS pin */
  for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); ExpBrd++)
 8002100:	2000      	movs	r0, #0
 8002102:	f000 fa8d 	bl	8002620 <EXPBRD_ID>
 8002106:	4603      	mov	r3, r0
 8002108:	75fb      	strb	r3, [r7, #23]
 800210a:	e02d      	b.n	8002168 <BSP_NUCLEO_GPIO_Init+0x104>
  {
    GPIO_CLK_ENABLE(L6470_nCS_GPIO_Array[ExpBrd].gpio_clk_enable);
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 800210e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002110:	7dfa      	ldrb	r2, [r7, #23]
 8002112:	4821      	ldr	r0, [pc, #132]	; (8002198 <BSP_NUCLEO_GPIO_Init+0x134>)
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4403      	add	r3, r0
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a18      	ldr	r2, [pc, #96]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 8002122:	430b      	orrs	r3, r1
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = L6470_nCS_GPIO_Array[ExpBrd].pin;
 8002126:	7dfa      	ldrb	r2, [r7, #23]
 8002128:	491b      	ldr	r1, [pc, #108]	; (8002198 <BSP_NUCLEO_GPIO_Init+0x134>)
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	3308      	adds	r3, #8
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(L6470_nCS_GPIO_Array[ExpBrd].port, &GPIO_InitStruct);
 8002146:	7dfa      	ldrb	r2, [r7, #23]
 8002148:	4913      	ldr	r1, [pc, #76]	; (8002198 <BSP_NUCLEO_GPIO_Init+0x134>)
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	3304      	adds	r3, #4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	463a      	mov	r2, r7
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fabd 	bl	80056dc <HAL_GPIO_Init>
  for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); ExpBrd++)
 8002162:	7dfb      	ldrb	r3, [r7, #23]
 8002164:	3301      	adds	r3, #1
 8002166:	75fb      	strb	r3, [r7, #23]
 8002168:	2000      	movs	r0, #0
 800216a:	f000 fa59 	bl	8002620 <EXPBRD_ID>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
 8002172:	7dfb      	ldrb	r3, [r7, #23]
 8002174:	4293      	cmp	r3, r2
 8002176:	d9c9      	bls.n	800210c <BSP_NUCLEO_GPIO_Init+0xa8>
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	20000328 	.word	0x20000328
 800218c:	20000334 	.word	0x20000334
 8002190:	10210000 	.word	0x10210000
 8002194:	20000340 	.word	0x20000340
 8002198:	2000034c 	.word	0x2000034c

0800219c <BSP_L6470_Init>:

/**
  * @brief  Initialize the X-NUCLEO-IHM02A1 mounted board and theirs L6470 devices.
  */
void BSP_L6470_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
  uint8_t ExpBrd;                     /* to index the expansion board to be addressed */
  uint8_t L6470_Id;                   /* to index the L6470 to be addressed */
  
  /* Disable the L6470 */
  L6470_DISABLE();
 80021a2:	4b28      	ldr	r3, [pc, #160]	; (8002244 <BSP_L6470_Init+0xa8>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a27      	ldr	r2, [pc, #156]	; (8002244 <BSP_L6470_Init+0xa8>)
 80021a8:	8911      	ldrh	r1, [r2, #8]
 80021aa:	2200      	movs	r2, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f003 fc49 	bl	8005a44 <HAL_GPIO_WritePin>
  
  /* Enable the L6470 */
  L6470_ENABLE();
 80021b2:	4b24      	ldr	r3, [pc, #144]	; (8002244 <BSP_L6470_Init+0xa8>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4a23      	ldr	r2, [pc, #140]	; (8002244 <BSP_L6470_Init+0xa8>)
 80021b8:	8911      	ldrh	r1, [r2, #8]
 80021ba:	2201      	movs	r2, #1
 80021bc:	4618      	mov	r0, r3
 80021be:	f003 fc41 	bl	8005a44 <HAL_GPIO_WritePin>
  
  /* Initialize all mounted L6470 for each stacked X-NUCLEO-IHM02A1 */
  for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); ExpBrd++)
 80021c2:	2000      	movs	r0, #0
 80021c4:	f000 fa2c 	bl	8002620 <EXPBRD_ID>
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
 80021cc:	e027      	b.n	800221e <BSP_L6470_Init+0x82>
  {
    /* Select the used GPIO for the L6470 nCS mounted on the addressed X-NUCLEO-IHM02A1 */
    BSP_Select(ExpBrd);
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fa37 	bl	8002644 <BSP_Select>
    
    /* Disable SPI communication for L6470 */
    L6470_nCS_HIGH();
 80021d6:	4b1c      	ldr	r3, [pc, #112]	; (8002248 <BSP_L6470_Init+0xac>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <BSP_L6470_Init+0xac>)
 80021dc:	8911      	ldrh	r1, [r2, #8]
 80021de:	2201      	movs	r2, #1
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fc2f 	bl	8005a44 <HAL_GPIO_WritePin>
    
    for (L6470_Id = L6470_ID(0); L6470_Id<=L6470_ID(L6470DAISYCHAINSIZE-1); L6470_Id++)
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7ff fae6 	bl	80017b8 <L6470_ID>
 80021ec:	4603      	mov	r3, r0
 80021ee:	71bb      	strb	r3, [r7, #6]
 80021f0:	e00a      	b.n	8002208 <BSP_L6470_Init+0x6c>
    {
      /* Reset the devices */
      L6470_ResetDevice(L6470_Id);
 80021f2:	79bb      	ldrb	r3, [r7, #6]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff f84d 	bl	8001294 <L6470_ResetDevice>
      
      /* Reset all Status Register Flags */
      L6470_GetStatus(L6470_Id);
 80021fa:	79bb      	ldrb	r3, [r7, #6]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff f8f3 	bl	80013e8 <L6470_GetStatus>
    for (L6470_Id = L6470_ID(0); L6470_Id<=L6470_ID(L6470DAISYCHAINSIZE-1); L6470_Id++)
 8002202:	79bb      	ldrb	r3, [r7, #6]
 8002204:	3301      	adds	r3, #1
 8002206:	71bb      	strb	r3, [r7, #6]
 8002208:	2000      	movs	r0, #0
 800220a:	f7ff fad5 	bl	80017b8 <L6470_ID>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	79bb      	ldrb	r3, [r7, #6]
 8002214:	4293      	cmp	r3, r2
 8002216:	d9ec      	bls.n	80021f2 <BSP_L6470_Init+0x56>
  for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); ExpBrd++)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	3301      	adds	r3, #1
 800221c:	71fb      	strb	r3, [r7, #7]
 800221e:	2000      	movs	r0, #0
 8002220:	f000 f9fe 	bl	8002620 <EXPBRD_ID>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	4293      	cmp	r3, r2
 800222c:	d9cf      	bls.n	80021ce <BSP_L6470_Init+0x32>
    }
  }
 
  /* Select the default X-NUCLEO-IHM02A1 to be addressed by SPI */
  BSP_Select(EXPBRD_ID(0));
 800222e:	2000      	movs	r0, #0
 8002230:	f000 f9f6 	bl	8002620 <EXPBRD_ID>
 8002234:	4603      	mov	r3, r0
 8002236:	4618      	mov	r0, r3
 8002238:	f000 fa04 	bl	8002644 <BSP_Select>
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000328 	.word	0x20000328
 8002248:	20000524 	.word	0x20000524

0800224c <BSP_L6470_SetParam>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_RegId     The L6470 Register identifier
  * @param  Value           The new value for the L6470 Register
  */
void BSP_L6470_SetParam(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4603      	mov	r3, r0
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	460b      	mov	r3, r1
 800225a:	71bb      	strb	r3, [r7, #6]
 800225c:	4613      	mov	r3, r2
 800225e:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f9ee 	bl	8002644 <BSP_Select>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <BSP_L6470_SetParam+0x2e>
  {
    /* Perform the related L6470 Application Command */
    L6470_SetParam(L6470_Id, L6470_RegId, Value);
 800226e:	7979      	ldrb	r1, [r7, #5]
 8002270:	79bb      	ldrb	r3, [r7, #6]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fe3b 	bl	8000ef0 <L6470_SetParam>
  }
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <BSP_L6470_GetParam>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_RegId     The L6470 Register identifier
  * @retval uint32_t        The value of the L6470 Register
  */
uint32_t BSP_L6470_GetParam(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	71fb      	strb	r3, [r7, #7]
 800228c:	460b      	mov	r3, r1
 800228e:	71bb      	strb	r3, [r7, #6]
 8002290:	4613      	mov	r3, r2
 8002292:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f9d4 	bl	8002644 <BSP_Select>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <BSP_L6470_GetParam+0x30>
  {
    /* Perform the related L6470 Application Command */
    return L6470_GetParam(L6470_Id, L6470_RegId);
 80022a2:	797a      	ldrb	r2, [r7, #5]
 80022a4:	79bb      	ldrb	r3, [r7, #6]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fe47 	bl	8000f3c <L6470_GetParam>
 80022ae:	4603      	mov	r3, r0
 80022b0:	e000      	b.n	80022b4 <BSP_L6470_GetParam+0x32>
  }
  else
    return 0xFF;
 80022b2:	23ff      	movs	r3, #255	; 0xff
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <BSP_L6470_Run>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_DirId     The L6470 Direction identifier
  * @param  Speed           The new value about the speed
  */
void BSP_L6470_Run(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
 80022c8:	460b      	mov	r3, r1
 80022ca:	71bb      	strb	r3, [r7, #6]
 80022cc:	4613      	mov	r3, r2
 80022ce:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f9b6 	bl	8002644 <BSP_Select>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <BSP_L6470_Run+0x2e>
  {
    /* Perform the related L6470 Application Command */
    L6470_Run(L6470_Id, L6470_DirId, Speed);
 80022de:	7979      	ldrb	r1, [r7, #5]
 80022e0:	79bb      	ldrb	r3, [r7, #6]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fe61 	bl	8000fac <L6470_Run>
  }
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <BSP_L6470_StepClock>:
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_DirId     The L6470 Direction identifier
  */
void BSP_L6470_StepClock(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	71fb      	strb	r3, [r7, #7]
 80022fc:	460b      	mov	r3, r1
 80022fe:	71bb      	strb	r3, [r7, #6]
 8002300:	4613      	mov	r3, r2
 8002302:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f99c 	bl	8002644 <BSP_Select>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <BSP_L6470_StepClock+0x2c>
  {
    /* Perform the related L6470 Application Command */
    L6470_StepClock(L6470_Id, L6470_DirId);
 8002312:	797a      	ldrb	r2, [r7, #5]
 8002314:	79bb      	ldrb	r3, [r7, #6]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fe6d 	bl	8000ff8 <L6470_StepClock>
  }
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <BSP_L6470_Move>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_DirId     The L6470 Direction identifier
  * @param  N_Step          The number of step about the movement to be performed
  */
void BSP_L6470_Move(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
 8002332:	460b      	mov	r3, r1
 8002334:	71bb      	strb	r3, [r7, #6]
 8002336:	4613      	mov	r3, r2
 8002338:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f000 f981 	bl	8002644 <BSP_Select>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <BSP_L6470_Move+0x2e>
  {
    /* Perform the related L6470 Application Command */
    L6470_Move(L6470_Id, L6470_DirId, N_Step);
 8002348:	7979      	ldrb	r1, [r7, #5]
 800234a:	79bb      	ldrb	r3, [r7, #6]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fe76 	bl	8001040 <L6470_Move>
  }
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <BSP_L6470_GoTo>:
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  AbsPos          The L6470 absolute position to be reached
  */
void BSP_L6470_GoTo(uint8_t ExpBrd_Id, uint8_t L6470_Id, uint32_t AbsPos)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	603a      	str	r2, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
 8002368:	460b      	mov	r3, r1
 800236a:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f968 	bl	8002644 <BSP_Select>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <BSP_L6470_GoTo+0x28>
  {
    /* Perform the related L6470 Application Command */
    L6470_GoTo(L6470_Id, AbsPos);
 800237a:	79bb      	ldrb	r3, [r7, #6]
 800237c:	6839      	ldr	r1, [r7, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fe84 	bl	800108c <L6470_GoTo>
  }
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <BSP_L6470_GoToDir>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_DirId     The L6470 Direction identifier
  * @param  AbsPos          The L6470 absolute position to be reached
  */
void BSP_L6470_GoToDir(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
 8002398:	460b      	mov	r3, r1
 800239a:	71bb      	strb	r3, [r7, #6]
 800239c:	4613      	mov	r3, r2
 800239e:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f94e 	bl	8002644 <BSP_Select>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <BSP_L6470_GoToDir+0x2e>
  {
    /* Perform the related L6470 Application Command */
    L6470_GoToDir(L6470_Id, L6470_DirId, AbsPos);
 80023ae:	7979      	ldrb	r1, [r7, #5]
 80023b0:	79bb      	ldrb	r3, [r7, #6]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe fe8f 	bl	80010d8 <L6470_GoToDir>
  }
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <BSP_L6470_GoUntil>:
  * @param  L6470_ActId     The L6470 Action identifier about ABS_POS register
  * @param  L6470_DirId     The L6470 Direction identifier
  * @param  Speed           The new value about the speed
  */
void BSP_L6470_GoUntil(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 80023c2:	b590      	push	{r4, r7, lr}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4604      	mov	r4, r0
 80023ca:	4608      	mov	r0, r1
 80023cc:	4611      	mov	r1, r2
 80023ce:	461a      	mov	r2, r3
 80023d0:	4623      	mov	r3, r4
 80023d2:	71fb      	strb	r3, [r7, #7]
 80023d4:	4603      	mov	r3, r0
 80023d6:	71bb      	strb	r3, [r7, #6]
 80023d8:	460b      	mov	r3, r1
 80023da:	717b      	strb	r3, [r7, #5]
 80023dc:	4613      	mov	r3, r2
 80023de:	713b      	strb	r3, [r7, #4]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f92e 	bl	8002644 <BSP_Select>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <BSP_L6470_GoUntil+0x38>
  {
    /* Perform the related L6470 Application Command */
    L6470_GoUntil(L6470_Id, L6470_ActId, L6470_DirId, Speed);
 80023ee:	793a      	ldrb	r2, [r7, #4]
 80023f0:	7979      	ldrb	r1, [r7, #5]
 80023f2:	79b8      	ldrb	r0, [r7, #6]
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	f7fe fe99 	bl	800112c <L6470_GoUntil>
  }
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd90      	pop	{r4, r7, pc}

08002402 <BSP_L6470_ReleaseSW>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_ActId     The L6470 Action identifier about ABS_POS register
  * @param  L6470_DirId     The L6470 Direction identifier
  */
void BSP_L6470_ReleaseSW(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 8002402:	b590      	push	{r4, r7, lr}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	4604      	mov	r4, r0
 800240a:	4608      	mov	r0, r1
 800240c:	4611      	mov	r1, r2
 800240e:	461a      	mov	r2, r3
 8002410:	4623      	mov	r3, r4
 8002412:	71fb      	strb	r3, [r7, #7]
 8002414:	4603      	mov	r3, r0
 8002416:	71bb      	strb	r3, [r7, #6]
 8002418:	460b      	mov	r3, r1
 800241a:	717b      	strb	r3, [r7, #5]
 800241c:	4613      	mov	r3, r2
 800241e:	713b      	strb	r3, [r7, #4]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f90e 	bl	8002644 <BSP_Select>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <BSP_L6470_ReleaseSW+0x38>
  {
    /* Perform the related L6470 Application Command */
    L6470_ReleaseSW(L6470_Id, L6470_ActId, L6470_DirId);
 800242e:	793a      	ldrb	r2, [r7, #4]
 8002430:	7979      	ldrb	r1, [r7, #5]
 8002432:	79bb      	ldrb	r3, [r7, #6]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fea1 	bl	800117c <L6470_ReleaseSW>
  }
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bd90      	pop	{r4, r7, pc}

08002442 <BSP_L6470_GoHome>:
  * @brief  Perform the L6470_GoHome Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_GoHome(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	460a      	mov	r2, r1
 800244c:	71fb      	strb	r3, [r7, #7]
 800244e:	4613      	mov	r3, r2
 8002450:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	4618      	mov	r0, r3
 8002456:	f000 f8f5 	bl	8002644 <BSP_Select>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <BSP_L6470_GoHome+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_GoHome(L6470_Id);
 8002460:	79bb      	ldrb	r3, [r7, #6]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe feb0 	bl	80011c8 <L6470_GoHome>
  }
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <BSP_L6470_GoMark>:
  * @brief  Perform the L6470_GoMark Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_GoMark(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	460a      	mov	r2, r1
 800247a:	71fb      	strb	r3, [r7, #7]
 800247c:	4613      	mov	r3, r2
 800247e:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f8de 	bl	8002644 <BSP_Select>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <BSP_L6470_GoMark+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_GoMark(L6470_Id);
 800248e:	79bb      	ldrb	r3, [r7, #6]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe febb 	bl	800120c <L6470_GoMark>
  }
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <BSP_L6470_ResetPos>:
  * @brief  Perform the L6470_ResetPos Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_ResetPos(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	460a      	mov	r2, r1
 80024a8:	71fb      	strb	r3, [r7, #7]
 80024aa:	4613      	mov	r3, r2
 80024ac:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f8c7 	bl	8002644 <BSP_Select>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <BSP_L6470_ResetPos+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_ResetPos(L6470_Id);
 80024bc:	79bb      	ldrb	r3, [r7, #6]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fec6 	bl	8001250 <L6470_ResetPos>
  }
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <BSP_L6470_ResetDevice>:
  * @brief  Perform the L6470_ResetDevice Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_ResetDevice(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	460a      	mov	r2, r1
 80024d6:	71fb      	strb	r3, [r7, #7]
 80024d8:	4613      	mov	r3, r2
 80024da:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f8b0 	bl	8002644 <BSP_Select>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <BSP_L6470_ResetDevice+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_ResetDevice(L6470_Id);
 80024ea:	79bb      	ldrb	r3, [r7, #6]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fed1 	bl	8001294 <L6470_ResetDevice>
  }
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <BSP_L6470_SoftStop>:
  * @brief  Perform the L6470_SoftStop Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_SoftStop(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	460a      	mov	r2, r1
 8002504:	71fb      	strb	r3, [r7, #7]
 8002506:	4613      	mov	r3, r2
 8002508:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 f899 	bl	8002644 <BSP_Select>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <BSP_L6470_SoftStop+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_SoftStop(L6470_Id);
 8002518:	79bb      	ldrb	r3, [r7, #6]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fedc 	bl	80012d8 <L6470_SoftStop>
  }
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <BSP_L6470_HardStop>:
  * @brief  Perform the L6470_HardStop Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_HardStop(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	460a      	mov	r2, r1
 8002532:	71fb      	strb	r3, [r7, #7]
 8002534:	4613      	mov	r3, r2
 8002536:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f882 	bl	8002644 <BSP_Select>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <BSP_L6470_HardStop+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_HardStop(L6470_Id);
 8002546:	79bb      	ldrb	r3, [r7, #6]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fee7 	bl	800131c <L6470_HardStop>
  }
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <BSP_L6470_SoftHiZ>:
  * @brief  Perform the L6470_SoftHiZ Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_SoftHiZ(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	460a      	mov	r2, r1
 8002560:	71fb      	strb	r3, [r7, #7]
 8002562:	4613      	mov	r3, r2
 8002564:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f86b 	bl	8002644 <BSP_Select>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <BSP_L6470_SoftHiZ+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_SoftHiZ(L6470_Id);
 8002574:	79bb      	ldrb	r3, [r7, #6]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fef2 	bl	8001360 <L6470_SoftHiZ>
  }
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <BSP_L6470_HardHiZ>:
  * @brief  Perform the L6470_HardHiZ Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_HardHiZ(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	460a      	mov	r2, r1
 800258e:	71fb      	strb	r3, [r7, #7]
 8002590:	4613      	mov	r3, r2
 8002592:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f854 	bl	8002644 <BSP_Select>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <BSP_L6470_HardHiZ+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_HardHiZ(L6470_Id);
 80025a2:	79bb      	ldrb	r3, [r7, #6]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fefd 	bl	80013a4 <L6470_HardHiZ>
  }
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <BSP_L6470_GetStatus>:
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @retval uint16_t        The value of the L6470 Status Register
  */
uint16_t BSP_L6470_GetStatus(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	460a      	mov	r2, r1
 80025bc:	71fb      	strb	r3, [r7, #7]
 80025be:	4613      	mov	r3, r2
 80025c0:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 f83d 	bl	8002644 <BSP_Select>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <BSP_L6470_GetStatus+0x2a>
  {
    /* Perform the related L6470 Application Command */
    return L6470_GetStatus(L6470_Id);
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe ff08 	bl	80013e8 <L6470_GetStatus>
 80025d8:	4603      	mov	r3, r0
 80025da:	e000      	b.n	80025de <BSP_L6470_GetStatus+0x2c>
  }
  else
    return 0;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <BSP_L6470_CheckStatusRegisterFlag>:
  * @param  L6470_Id                    The L6470 identifier inside the daisy chain
  * @param  L6470_StatusRegisterFlagId  The L6470 Status Register Flag identifier
  * @retval uint8_t                     The actual flag status.
  */
uint8_t BSP_L6470_CheckStatusRegisterFlag(uint8_t ExpBrd_Id, uint8_t L6470_Id, uint8_t L6470_StatusRegisterFlagId)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	71fb      	strb	r3, [r7, #7]
 80025f0:	460b      	mov	r3, r1
 80025f2:	71bb      	strb	r3, [r7, #6]
 80025f4:	4613      	mov	r3, r2
 80025f6:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f822 	bl	8002644 <BSP_Select>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <BSP_L6470_CheckStatusRegisterFlag+0x30>
  {
    /* Check the flag of the L6470 Register Status related to the device mounted on the addressed X-NUCLEO-IHM02A1 */
    return L6470_CheckStatusRegisterFlag(L6470_Id, L6470_StatusRegisterFlagId);
 8002606:	797a      	ldrb	r2, [r7, #5]
 8002608:	79bb      	ldrb	r3, [r7, #6]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff f961 	bl	80018d4 <L6470_CheckStatusRegisterFlag>
 8002612:	4603      	mov	r3, r0
 8002614:	e000      	b.n	8002618 <BSP_L6470_CheckStatusRegisterFlag+0x32>
  }
  else
    return 0xFF;
 8002616:	23ff      	movs	r3, #255	; 0xff
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <EXPBRD_ID>:
  *
  * @note The first accepted position is '0'.
  * @note If the position is not allowable the returned value is 0xFF.
  */
uint8_t EXPBRD_ID(uint8_t position)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  if (position < EXPBRD_MOUNTED_NR)
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <EXPBRD_ID+0x14>
  {
    return (position);
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	e000      	b.n	8002636 <EXPBRD_ID+0x16>
  }
  else
  {
    return 0xFF;
 8002634:	23ff      	movs	r3, #255	; 0xff
  }
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <BSP_Select>:
  * @brief  Select the used SPI nCS mounted on the addressed X-NUCLEO-IHM02A1.
  * @param  ExpBrd_Id   The identifier of the Expansion Board to be addressed.
  * @retval FlagStatus  SET or RESET related to the result.
  */
uint8_t BSP_Select(uint8_t ExpBrd_Id)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if (ExpBrd_Id < EXPBRD_MOUNTED_NR)
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d121      	bne.n	8002698 <BSP_Select+0x54>
  {
    L6470_nCS_GPIO.gpio_clk_enable = L6470_nCS_GPIO_Array[ExpBrd_Id].gpio_clk_enable;
 8002654:	79fa      	ldrb	r2, [r7, #7]
 8002656:	4914      	ldr	r1, [pc, #80]	; (80026a8 <BSP_Select+0x64>)
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a11      	ldr	r2, [pc, #68]	; (80026ac <BSP_Select+0x68>)
 8002666:	6013      	str	r3, [r2, #0]
    L6470_nCS_GPIO.port = L6470_nCS_GPIO_Array[ExpBrd_Id].port;
 8002668:	79fa      	ldrb	r2, [r7, #7]
 800266a:	490f      	ldr	r1, [pc, #60]	; (80026a8 <BSP_Select+0x64>)
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	3304      	adds	r3, #4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <BSP_Select+0x68>)
 800267c:	6053      	str	r3, [r2, #4]
    L6470_nCS_GPIO.pin = L6470_nCS_GPIO_Array[ExpBrd_Id].pin;
 800267e:	79fa      	ldrb	r2, [r7, #7]
 8002680:	4909      	ldr	r1, [pc, #36]	; (80026a8 <BSP_Select+0x64>)
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	3308      	adds	r3, #8
 800268e:	881a      	ldrh	r2, [r3, #0]
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <BSP_Select+0x68>)
 8002692:	811a      	strh	r2, [r3, #8]
    return SET;
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <BSP_Select+0x56>
  }
  else
    return RESET;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	2000034c 	.word	0x2000034c
 80026ac:	20000524 	.word	0x20000524

080026b0 <BSP_Init>:

/**
  * @brief  X-NUCLEO-IHM02A1 initialization
  */
void BSP_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Select the default L6470_nCS_GPIO */
  BSP_Select(EXPBRD_ID(0));
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7ff ffb3 	bl	8002620 <EXPBRD_ID>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ffc1 	bl	8002644 <BSP_Select>
  
  /* Initialize the NUCLEO GPIO used by the X-NUCLEO-IHM02A1 */
  BSP_NUCLEO_GPIO_Init();
 80026c2:	f7ff fccf 	bl	8002064 <BSP_NUCLEO_GPIO_Init>
  
  /* Initialize the L6470 devices mounted on the X-NUCLEO-IHM02A1 */
  BSP_L6470_Init();
 80026c6:	f7ff fd69 	bl	800219c <BSP_L6470_Init>
  /* Enable the IRQ for the nBUSY_SYNC and the nFLAG of the X-NUCLEO-IHM02A1*/
  //BSP_IRQ(ENABLE);
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <BSP_0_Config>:
/**
 * @brief   Initialize the data structure related to the stepper motor board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_0_Config(MotorParameterData_t *MotorParameterData)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  StepperMotorBoardHandle_t *StepperMotorBoardHandle;
  
  StepperMotorBoardHandle = &XNUCLEOIHM02A1Drv[0];
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <BSP_0_Config+0x1c>)
 80026da:	60fb      	str	r3, [r7, #12]
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f8f0 	bl	80028c4 <BSP_Config>
}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	200002c8 	.word	0x200002c8

080026f0 <BSP_1_Config>:
/**
 * @brief   Initialize the data structure related to the stepper motor board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_1_Config(MotorParameterData_t *MotorParameterData)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  StepperMotorBoardHandle_t *StepperMotorBoardHandle;
  
  StepperMotorBoardHandle = &XNUCLEOIHM02A1Drv[1];
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <BSP_1_Config+0x1c>)
 80026fa:	60fb      	str	r3, [r7, #12]
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f8e0 	bl	80028c4 <BSP_Config>
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	200002e0 	.word	0x200002e0

08002710 <BSP_2_Config>:
/**
 * @brief   Initialize the data structure related to the stepper motor board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_2_Config(MotorParameterData_t *MotorParameterData)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  StepperMotorBoardHandle_t *StepperMotorBoardHandle;
  
  StepperMotorBoardHandle = &XNUCLEOIHM02A1Drv[2];
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <BSP_2_Config+0x1c>)
 800271a:	60fb      	str	r3, [r7, #12]
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f8d0 	bl	80028c4 <BSP_Config>
}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	200002f8 	.word	0x200002f8

08002730 <BSP_3_Config>:
/**
 * @brief   Initialize the data structure related to the stepper motor board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_3_Config(MotorParameterData_t *MotorParameterData)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  StepperMotorBoardHandle_t *StepperMotorBoardHandle;
  
  StepperMotorBoardHandle = &XNUCLEOIHM02A1Drv[3];
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <BSP_3_Config+0x1c>)
 800273a:	60fb      	str	r3, [r7, #12]
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f8c0 	bl	80028c4 <BSP_Config>
}
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000310 	.word	0x20000310

08002750 <BSP_L6470_0_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
*/
void BSP_L6470_0_0_Config(MotorParameterData_t *MotorParameterData)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[0][0];
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <BSP_L6470_0_0_Config+0x1c>)
 800275a:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f7ff f972 	bl	8001a48 <L6470_Config>
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	200000e8 	.word	0x200000e8

08002770 <BSP_L6470_0_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_0_1_Config(MotorParameterData_t *MotorParameterData)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[0][1];
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <BSP_L6470_0_1_Config+0x1c>)
 800277a:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f7ff f962 	bl	8001a48 <L6470_Config>
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000124 	.word	0x20000124

08002790 <BSP_L6470_1_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_1_0_Config(MotorParameterData_t *MotorParameterData)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[1][0];
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <BSP_L6470_1_0_Config+0x1c>)
 800279a:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7ff f952 	bl	8001a48 <L6470_Config>
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000160 	.word	0x20000160

080027b0 <BSP_L6470_1_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_1_1_Config(MotorParameterData_t *MotorParameterData)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[1][1];
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <BSP_L6470_1_1_Config+0x1c>)
 80027ba:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7ff f942 	bl	8001a48 <L6470_Config>
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	2000019c 	.word	0x2000019c

080027d0 <BSP_L6470_2_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_2_0_Config(MotorParameterData_t *MotorParameterData)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[2][0];
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <BSP_L6470_2_0_Config+0x1c>)
 80027da:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f7ff f932 	bl	8001a48 <L6470_Config>
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	200001d8 	.word	0x200001d8

080027f0 <BSP_L6470_2_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_2_1_Config(MotorParameterData_t *MotorParameterData)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[2][1];
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <BSP_L6470_2_1_Config+0x1c>)
 80027fa:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f7ff f922 	bl	8001a48 <L6470_Config>
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000214 	.word	0x20000214

08002810 <BSP_L6470_3_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_3_0_Config(MotorParameterData_t *MotorParameterData)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[3][0];
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <BSP_L6470_3_0_Config+0x1c>)
 800281a:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f7ff f912 	bl	8001a48 <L6470_Config>
}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000250 	.word	0x20000250

08002830 <BSP_L6470_3_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_3_1_Config(MotorParameterData_t *MotorParameterData)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[3][1];
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <BSP_L6470_3_1_Config+0x1c>)
 800283a:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff f902 	bl	8001a48 <L6470_Config>
}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	2000028c 	.word	0x2000028c

08002850 <BSP_GetExpansionBoardHandle>:
 * @brief Return expansion board handle (pointer to the L6470 motor driver structure)
 * @param id Identifier inside the daisy chain
 * @retval Pointer to the StepperMotorDriverHandle_t structure
 */
StepperMotorBoardHandle_t *BSP_GetExpansionBoardHandle(uint8_t id)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  if (id == EXPBRD_ID(0))
 800285a:	2000      	movs	r0, #0
 800285c:	f7ff fee0 	bl	8002620 <EXPBRD_ID>
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <BSP_GetExpansionBoardHandle+0x1e>
    return (&XNUCLEOIHM02A1Drv[0]);
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <BSP_GetExpansionBoardHandle+0x64>)
 800286c:	e01e      	b.n	80028ac <BSP_GetExpansionBoardHandle+0x5c>
  if (id == EXPBRD_ID(1))
 800286e:	2001      	movs	r0, #1
 8002870:	f7ff fed6 	bl	8002620 <EXPBRD_ID>
 8002874:	4603      	mov	r3, r0
 8002876:	461a      	mov	r2, r3
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	4293      	cmp	r3, r2
 800287c:	d101      	bne.n	8002882 <BSP_GetExpansionBoardHandle+0x32>
    return (&XNUCLEOIHM02A1Drv[1]);
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <BSP_GetExpansionBoardHandle+0x68>)
 8002880:	e014      	b.n	80028ac <BSP_GetExpansionBoardHandle+0x5c>
  if (id == EXPBRD_ID(2))
 8002882:	2002      	movs	r0, #2
 8002884:	f7ff fecc 	bl	8002620 <EXPBRD_ID>
 8002888:	4603      	mov	r3, r0
 800288a:	461a      	mov	r2, r3
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <BSP_GetExpansionBoardHandle+0x46>
    return (&XNUCLEOIHM02A1Drv[2]);
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <BSP_GetExpansionBoardHandle+0x6c>)
 8002894:	e00a      	b.n	80028ac <BSP_GetExpansionBoardHandle+0x5c>
  if (id == EXPBRD_ID(3))
 8002896:	2003      	movs	r0, #3
 8002898:	f7ff fec2 	bl	8002620 <EXPBRD_ID>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d101      	bne.n	80028aa <BSP_GetExpansionBoardHandle+0x5a>
    return (&XNUCLEOIHM02A1Drv[3]);
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <BSP_GetExpansionBoardHandle+0x70>)
 80028a8:	e000      	b.n	80028ac <BSP_GetExpansionBoardHandle+0x5c>
  
  return 0;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	200002c8 	.word	0x200002c8
 80028b8:	200002e0 	.word	0x200002e0
 80028bc:	200002f8 	.word	0x200002f8
 80028c0:	20000310 	.word	0x20000310

080028c4 <BSP_Config>:
  * @brief  Configures each L6470 mounted on the X-NUCLEO-IHM02A1.
  * @param  StepperMotorBoardHandle_t* The pointer to the stepper motor board handle structure.
  * @param  MotorParameterData_t* The pointer to the parameter data structure.
  */
void BSP_Config(StepperMotorBoardHandle_t *StepperMotorBoardHandle, MotorParameterData_t *MotorParameterData)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  StepperMotorBoardHandle->Select(StepperMotorBoardHandle->StackedPosition);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	7812      	ldrb	r2, [r2, #0]
 80028d6:	4610      	mov	r0, r2
 80028d8:	4798      	blx	r3
  
  StepperMotorBoardHandle->StepperMotorDriverHandle[0]->Config(MotorParameterData+0);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	6838      	ldr	r0, [r7, #0]
 80028e2:	4798      	blx	r3
  StepperMotorBoardHandle->StepperMotorDriverHandle[1]->Config(MotorParameterData+1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	3258      	adds	r2, #88	; 0x58
 80028ee:	4610      	mov	r0, r2
 80028f0:	4798      	blx	r3
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <MX_SPI_Init>:
  *
  * @note   It selects the @ref MX_SPI1_Init or @ref MX_SPI2_Init
  *         related to the defined macro @ref NUCLEO_USE_SPI_1 or @ref NUCLEO_USE_SPI_2.
  */
void MX_SPI_Init(void)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	af00      	add	r7, sp, #0
#ifdef NUCLEO_USE_SPI_1
  MX_SPI1_Init();
 80028fe:	f000 f803 	bl	8002908 <MX_SPI1_Init>
#endif
#ifdef NUCLEO_USE_SPI_3
  MX_SPI3_Init();
#endif
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <MX_SPI1_Init>:
  *         - CPOL High
  *         - CPHA 2nd Edge
  *         - Baud Rate lower than 5 MBits/s
  */
void MX_SPI1_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
  #define MAX_BAUDRATE  5000000
  uint32_t freq;
  uint16_t freq_div;
  uint32_t spi_baudrateprescaler;
  
  hspi1.Instance = SPI1;
 800290e:	4b32      	ldr	r3, [pc, #200]	; (80029d8 <MX_SPI1_Init+0xd0>)
 8002910:	4a32      	ldr	r2, [pc, #200]	; (80029dc <MX_SPI1_Init+0xd4>)
 8002912:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002914:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <MX_SPI1_Init+0xd0>)
 8002916:	f44f 7282 	mov.w	r2, #260	; 0x104
 800291a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800291c:	4b2e      	ldr	r3, [pc, #184]	; (80029d8 <MX_SPI1_Init+0xd0>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002922:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <MX_SPI1_Init+0xd0>)
 8002924:	2200      	movs	r2, #0
 8002926:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <MX_SPI1_Init+0xd0>)
 800292a:	2202      	movs	r2, #2
 800292c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800292e:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <MX_SPI1_Init+0xd0>)
 8002930:	2201      	movs	r2, #1
 8002932:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002934:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <MX_SPI1_Init+0xd0>)
 8002936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800293a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800293c:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <MX_SPI1_Init+0xd0>)
 800293e:	2200      	movs	r2, #0
 8002940:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLED;
 8002942:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <MX_SPI1_Init+0xd0>)
 8002944:	2200      	movs	r2, #0
 8002946:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002948:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <MX_SPI1_Init+0xd0>)
 800294a:	2200      	movs	r2, #0
 800294c:	629a      	str	r2, [r3, #40]	; 0x28
  
  freq = HAL_RCC_GetPCLK2Freq();
 800294e:	f004 f9ab 	bl	8006ca8 <HAL_RCC_GetPCLK2Freq>
 8002952:	60b8      	str	r0, [r7, #8]
  freq_div = (freq / MAX_BAUDRATE);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <MX_SPI1_Init+0xd8>)
 8002958:	fba2 2303 	umull	r2, r3, r2, r3
 800295c:	0d5b      	lsrs	r3, r3, #21
 800295e:	80fb      	strh	r3, [r7, #6]
  
  if (freq_div < 2)
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d802      	bhi.n	800296c <MX_SPI1_Init+0x64>
  {
    spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_2;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	e02a      	b.n	80029c2 <MX_SPI1_Init+0xba>
  }
  else
  {
    if (freq_div < 4)
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d802      	bhi.n	8002978 <MX_SPI1_Init+0x70>
    {
      spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_4;
 8002972:	2308      	movs	r3, #8
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	e024      	b.n	80029c2 <MX_SPI1_Init+0xba>
    }
    else
    {
      if (freq_div < 8)
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	2b07      	cmp	r3, #7
 800297c:	d802      	bhi.n	8002984 <MX_SPI1_Init+0x7c>
      {
        spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_8;
 800297e:	2310      	movs	r3, #16
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e01e      	b.n	80029c2 <MX_SPI1_Init+0xba>
      }
      else
      {
        if (freq_div < 16)
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	d802      	bhi.n	8002990 <MX_SPI1_Init+0x88>
        {
          spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_16;
 800298a:	2318      	movs	r3, #24
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e018      	b.n	80029c2 <MX_SPI1_Init+0xba>
        }
        else
        {
          if (freq_div < 32)
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	2b1f      	cmp	r3, #31
 8002994:	d802      	bhi.n	800299c <MX_SPI1_Init+0x94>
          {
            spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_32;
 8002996:	2320      	movs	r3, #32
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e012      	b.n	80029c2 <MX_SPI1_Init+0xba>
          }
          else
          {
            if (freq_div < 64)
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	2b3f      	cmp	r3, #63	; 0x3f
 80029a0:	d802      	bhi.n	80029a8 <MX_SPI1_Init+0xa0>
            {
              spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_64;
 80029a2:	2328      	movs	r3, #40	; 0x28
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	e00c      	b.n	80029c2 <MX_SPI1_Init+0xba>
            }
            else
            {
              if (freq_div < 128)
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	2b7f      	cmp	r3, #127	; 0x7f
 80029ac:	d802      	bhi.n	80029b4 <MX_SPI1_Init+0xac>
              {
                spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_128;
 80029ae:	2330      	movs	r3, #48	; 0x30
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	e006      	b.n	80029c2 <MX_SPI1_Init+0xba>
              }
              else
              {
                if (freq_div < 256)
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	2bff      	cmp	r3, #255	; 0xff
 80029b8:	d802      	bhi.n	80029c0 <MX_SPI1_Init+0xb8>
                {
                  spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_256;
 80029ba:	2338      	movs	r3, #56	; 0x38
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	e000      	b.n	80029c2 <MX_SPI1_Init+0xba>
                }
                else
                {
                  /* the condition is not possible, you should reduce the CPU frequency */
                  while(1);
 80029c0:	e7fe      	b.n	80029c0 <MX_SPI1_Init+0xb8>
        }
      }
    }
  }
  
  hspi1.Init.BaudRatePrescaler = spi_baudrateprescaler;  // the baudrate will be lower than MAX_BAUDRATE (5 MBits/s)
 80029c2:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <MX_SPI1_Init+0xd0>)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	61d3      	str	r3, [r2, #28]
  HAL_SPI_Init(&hspi1);
 80029c8:	4803      	ldr	r0, [pc, #12]	; (80029d8 <MX_SPI1_Init+0xd0>)
 80029ca:	f004 f981 	bl	8006cd0 <HAL_SPI_Init>
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000530 	.word	0x20000530
 80029dc:	40013000 	.word	0x40013000
 80029e0:	6b5fca6b 	.word	0x6b5fca6b

080029e4 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <BSP_MotorControl_ErrorHandler+0x38>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00d      	beq.n	8002a12 <BSP_MotorControl_ErrorHandler+0x2e>
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <BSP_MotorControl_ErrorHandler+0x38>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <BSP_MotorControl_ErrorHandler+0x38>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a0a:	88fa      	ldrh	r2, [r7, #6]
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8002a10:	e000      	b.n	8002a14 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 8002a12:	e7fe      	b.n	8002a12 <BSP_MotorControl_ErrorHandler+0x2e>
}
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200005d0 	.word	0x200005d0

08002a20 <BSP_MotorControl_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void BSP_MotorControl_FlagInterruptHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  if ((motorDrvHandle != 0)&&(motorDrvHandle->FlagInterruptHandler != 0))
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d009      	beq.n	8002a40 <BSP_MotorControl_FlagInterruptHandler+0x20>
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <BSP_MotorControl_FlagInterruptHandler+0x20>
  {
    motorDrvHandle->FlagInterruptHandler();
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	4798      	blx	r3
 8002a3e:	e004      	b.n	8002a4a <BSP_MotorControl_FlagInterruptHandler+0x2a>
  }    
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(5);
 8002a40:	f640 0005 	movw	r0, #2053	; 0x805
 8002a44:	f7ff ffce 	bl	80029e4 <BSP_MotorControl_ErrorHandler>
  }  
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200005d0 	.word	0x200005d0

08002a54 <BSP_MotorControl_BusyInterruptHandler>:
/******************************************************//**
 * @brief Handler of the busy interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void BSP_MotorControl_BusyInterruptHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  if ((motorDrvHandle != 0)&&(motorDrvHandle->BusyInterruptHandler != 0))
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <BSP_MotorControl_BusyInterruptHandler+0x34>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00b      	beq.n	8002a78 <BSP_MotorControl_BusyInterruptHandler+0x24>
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <BSP_MotorControl_BusyInterruptHandler+0x34>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <BSP_MotorControl_BusyInterruptHandler+0x24>
  {
    motorDrvHandle->BusyInterruptHandler();
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <BSP_MotorControl_BusyInterruptHandler+0x34>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a74:	4798      	blx	r3
 8002a76:	e004      	b.n	8002a82 <BSP_MotorControl_BusyInterruptHandler+0x2e>
  }    
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(61);
 8002a78:	f640 003d 	movw	r0, #2109	; 0x83d
 8002a7c:	f7ff ffb2 	bl	80029e4 <BSP_MotorControl_ErrorHandler>
  }  
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	200005d0 	.word	0x200005d0

08002a8c <ModbusTCPInit>:
#include "User_modbus_TCP.h"
#include "mb.h"
#include "mbutils.h"

void ModbusTCPInit(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
    eMBTCPInit(MODBUS_TCP_PORT);
 8002a90:	f44f 70fb 	mov.w	r0, #502	; 0x1f6
 8002a94:	f000 f9a8 	bl	8002de8 <eMBTCPInit>
    eMBEnable();
 8002a98:	f000 fa14 	bl	8002ec4 <eMBEnable>
}
 8002a9c:	bf00      	nop
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <ModbusTCPDeInit>:

void ModbusTCPDeInit(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
    eMBDisable();
 8002aa4:	f000 fa2a 	bl	8002efc <eMBDisable>
    eMBClose();
 8002aa8:	f000 f9f0 	bl	8002e8c <eMBClose>
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <ModbusTCPMain>:

void ModbusTCPMain(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
    if (MB_ENOERR != eMBPoll())
 8002ab4:	f000 fa44 	bl	8002f40 <eMBPoll>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <ModbusTCPMain+0x16>
    {
        ModbusTCPDeInit();
 8002abe:	f7ff ffef 	bl	8002aa0 <ModbusTCPDeInit>
        ModbusTCPInit();
 8002ac2:	f7ff ffe3 	bl	8002a8c <ModbusTCPInit>
    }
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <eMBRegCoilsCB>:
#define REG_COILS_SIZE      10
//uint8_t REG_COILS_BUF[REG_COILS_SIZE];
extern uint8_t REG_COILS_BUF[10];

eMBErrorCode eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode )
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	4608      	mov	r0, r1
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4603      	mov	r3, r0
 8002adc:	817b      	strh	r3, [r7, #10]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	813b      	strh	r3, [r7, #8]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	71fb      	strb	r3, [r7, #7]
	 USHORT usRegIndex   = usAddress - 1;;
 8002ae6:	897b      	ldrh	r3, [r7, #10]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	82fb      	strh	r3, [r7, #22]
	 USHORT usCoilGroups = ((usNCoils - 1) / 8 + 1);
 8002aec:	893b      	ldrh	r3, [r7, #8]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	da00      	bge.n	8002af6 <eMBRegCoilsCB+0x2a>
 8002af4:	3307      	adds	r3, #7
 8002af6:	10db      	asrs	r3, r3, #3
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	82bb      	strh	r3, [r7, #20]
	 UCHAR  ucStatus     = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	74fb      	strb	r3, [r7, #19]
	 UCHAR  ucBits       = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	74bb      	strb	r3, [r7, #18]

	 UCHAR  ucDisp       = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	747b      	strb	r3, [r7, #17]
	 // 非法检测
	 if((usRegIndex + usNCoils)> REG_COILS_SIZE)
 8002b0a:	8afa      	ldrh	r2, [r7, #22]
 8002b0c:	893b      	ldrh	r3, [r7, #8]
 8002b0e:	4413      	add	r3, r2
 8002b10:	2b0a      	cmp	r3, #10
 8002b12:	dd01      	ble.n	8002b18 <eMBRegCoilsCB+0x4c>
	 {
		 return MB_ENOREG;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e054      	b.n	8002bc2 <eMBRegCoilsCB+0xf6>
	 }
	 // 写线圈
	 if(eMode == MB_REG_WRITE)
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d14b      	bne.n	8002bb6 <eMBRegCoilsCB+0xea>
	 {
	     while(usCoilGroups--)
 8002b1e:	e01e      	b.n	8002b5e <eMBRegCoilsCB+0x92>
	     {
	        ucStatus=*pucRegBuffer++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	60fa      	str	r2, [r7, #12]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	74fb      	strb	r3, [r7, #19]
	        ucBits =8;
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	74bb      	strb	r3, [r7, #18]
	        while((usNCoils--)!=0&& (ucBits--)!= 0)
 8002b2e:	e00c      	b.n	8002b4a <eMBRegCoilsCB+0x7e>
	        {
	         REG_COILS_BUF[usRegIndex++]= ucStatus & 0X01;
 8002b30:	8afb      	ldrh	r3, [r7, #22]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	82fa      	strh	r2, [r7, #22]
 8002b36:	461a      	mov	r2, r3
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	b2d9      	uxtb	r1, r3
 8002b40:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <eMBRegCoilsCB+0x104>)
 8002b42:	5499      	strb	r1, [r3, r2]
	         ucStatus >>=1;
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	74fb      	strb	r3, [r7, #19]
	        while((usNCoils--)!=0&& (ucBits--)!= 0)
 8002b4a:	893b      	ldrh	r3, [r7, #8]
 8002b4c:	1e5a      	subs	r2, r3, #1
 8002b4e:	813a      	strh	r2, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d004      	beq.n	8002b5e <eMBRegCoilsCB+0x92>
 8002b54:	7cbb      	ldrb	r3, [r7, #18]
 8002b56:	1e5a      	subs	r2, r3, #1
 8002b58:	74ba      	strb	r2, [r7, #18]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1e8      	bne.n	8002b30 <eMBRegCoilsCB+0x64>
	     while(usCoilGroups--)
 8002b5e:	8abb      	ldrh	r3, [r7, #20]
 8002b60:	1e5a      	subs	r2, r3, #1
 8002b62:	82ba      	strh	r2, [r7, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1db      	bne.n	8002b20 <eMBRegCoilsCB+0x54>
 8002b68:	e02a      	b.n	8002bc0 <eMBRegCoilsCB+0xf4>
	 // 读线圈
	     else
	     {
	         while(usCoilGroups--)
	         {
	             ucDisp = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	747b      	strb	r3, [r7, #17]
	             ucBits = 8;
 8002b6e:	2308      	movs	r3, #8
 8002b70:	74bb      	strb	r3, [r7, #18]
	             while((usNCoils--) != 0 && (ucBits--) != 0)
 8002b72:	e011      	b.n	8002b98 <eMBRegCoilsCB+0xcc>
	             {
	                 ucStatus |= (REG_COILS_BUF[usRegIndex++] << (ucDisp++));
 8002b74:	8afb      	ldrh	r3, [r7, #22]
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	82fa      	strh	r2, [r7, #22]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <eMBRegCoilsCB+0x104>)
 8002b7e:	5c9b      	ldrb	r3, [r3, r2]
 8002b80:	461a      	mov	r2, r3
 8002b82:	7c7b      	ldrb	r3, [r7, #17]
 8002b84:	1c59      	adds	r1, r3, #1
 8002b86:	7479      	strb	r1, [r7, #17]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	b25a      	sxtb	r2, r3
 8002b8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	74fb      	strb	r3, [r7, #19]
	             while((usNCoils--) != 0 && (ucBits--) != 0)
 8002b98:	893b      	ldrh	r3, [r7, #8]
 8002b9a:	1e5a      	subs	r2, r3, #1
 8002b9c:	813a      	strh	r2, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d004      	beq.n	8002bac <eMBRegCoilsCB+0xe0>
 8002ba2:	7cbb      	ldrb	r3, [r7, #18]
 8002ba4:	1e5a      	subs	r2, r3, #1
 8002ba6:	74ba      	strb	r2, [r7, #18]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e3      	bne.n	8002b74 <eMBRegCoilsCB+0xa8>
	             }
	             *pucRegBuffer++ = ucStatus;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	60fa      	str	r2, [r7, #12]
 8002bb2:	7cfa      	ldrb	r2, [r7, #19]
 8002bb4:	701a      	strb	r2, [r3, #0]
	         while(usCoilGroups--)
 8002bb6:	8abb      	ldrh	r3, [r7, #20]
 8002bb8:	1e5a      	subs	r2, r3, #1
 8002bba:	82ba      	strh	r2, [r7, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1d4      	bne.n	8002b6a <eMBRegCoilsCB+0x9e>
	         }
	     }
	     return MB_ENOERR;
 8002bc0:	2300      	movs	r3, #0
	 }
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	2000e690 	.word	0x2000e690

08002bd4 <eMBRegDiscreteCB>:
#define REG_DISC_SIZE  10
//uint8_t REG_DISC_BUF[10]={0,0,1,0,1};
extern uint8_t REG_DISC_BUF[10];
 //离散寄存器
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
 8002be0:	4613      	mov	r3, r2
 8002be2:	803b      	strh	r3, [r7, #0]
	USHORT usRegIndex   = usAddress - 1;
 8002be4:	887b      	ldrh	r3, [r7, #2]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	813b      	strh	r3, [r7, #8]
	    USHORT usCoilGroups = ((usNDiscrete - 1) / 8 + 1);
 8002bea:	883b      	ldrh	r3, [r7, #0]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	da00      	bge.n	8002bf4 <eMBRegDiscreteCB+0x20>
 8002bf2:	3307      	adds	r3, #7
 8002bf4:	10db      	asrs	r3, r3, #3
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	81fb      	strh	r3, [r7, #14]
	    UCHAR  ucStatus     = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	737b      	strb	r3, [r7, #13]
	    UCHAR  ucBits       = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	733b      	strb	r3, [r7, #12]
	    UCHAR  ucDisp       = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	72fb      	strb	r3, [r7, #11]

	    // 非法检测
	    if((usRegIndex + usNDiscrete) > REG_DISC_SIZE)
 8002c08:	893a      	ldrh	r2, [r7, #8]
 8002c0a:	883b      	ldrh	r3, [r7, #0]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	2b0a      	cmp	r3, #10
 8002c10:	dd27      	ble.n	8002c62 <eMBRegDiscreteCB+0x8e>
	    {
	        return MB_ENOREG;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e02b      	b.n	8002c6e <eMBRegDiscreteCB+0x9a>
	    }

	        // 读离散输入
	        while(usCoilGroups--)
	        {
	                ucDisp = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	72fb      	strb	r3, [r7, #11]
	                ucBits = 8;
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	733b      	strb	r3, [r7, #12]
	                while((usNDiscrete--) != 0 && (ucBits--) != 0)
 8002c1e:	e011      	b.n	8002c44 <eMBRegDiscreteCB+0x70>
	                {
	                        if(REG_DISC_BUF[usRegIndex])
 8002c20:	893b      	ldrh	r3, [r7, #8]
 8002c22:	4a16      	ldr	r2, [pc, #88]	; (8002c7c <eMBRegDiscreteCB+0xa8>)
 8002c24:	5cd3      	ldrb	r3, [r2, r3]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <eMBRegDiscreteCB+0x6a>
	                        {
	                                ucStatus |= (1 << ucDisp);
 8002c2a:	7afb      	ldrb	r3, [r7, #11]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	b25a      	sxtb	r2, r3
 8002c34:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b25b      	sxtb	r3, r3
 8002c3c:	737b      	strb	r3, [r7, #13]
	                        }
	                        ucDisp++;
 8002c3e:	7afb      	ldrb	r3, [r7, #11]
 8002c40:	3301      	adds	r3, #1
 8002c42:	72fb      	strb	r3, [r7, #11]
	                while((usNDiscrete--) != 0 && (ucBits--) != 0)
 8002c44:	883b      	ldrh	r3, [r7, #0]
 8002c46:	1e5a      	subs	r2, r3, #1
 8002c48:	803a      	strh	r2, [r7, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <eMBRegDiscreteCB+0x84>
 8002c4e:	7b3b      	ldrb	r3, [r7, #12]
 8002c50:	1e5a      	subs	r2, r3, #1
 8002c52:	733a      	strb	r2, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e3      	bne.n	8002c20 <eMBRegDiscreteCB+0x4c>
	                }
	                *pucRegBuffer++ = ucStatus;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	7b7a      	ldrb	r2, [r7, #13]
 8002c60:	701a      	strb	r2, [r3, #0]
	        while(usCoilGroups--)
 8002c62:	89fb      	ldrh	r3, [r7, #14]
 8002c64:	1e5a      	subs	r2, r3, #1
 8002c66:	81fa      	strh	r2, [r7, #14]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1d4      	bne.n	8002c16 <eMBRegDiscreteCB+0x42>
//	    for(usRegIndex = 0; usRegIndex < REG_DISC_SIZE; usRegIndex++)
//	    {
//	        REG_DISC_BUF[usRegIndex] = !REG_DISC_BUF[usRegIndex];
//	    }

	    return MB_ENOERR;
 8002c6c:	2300      	movs	r3, #0

}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	2000e684 	.word	0x2000e684

08002c80 <eMBRegHoldingCB>:
 * @param eMode         读写模式
 * @return eMBErrorCode 返回错误码
 */

eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	4608      	mov	r0, r1
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	817b      	strh	r3, [r7, #10]
 8002c92:	460b      	mov	r3, r1
 8002c94:	813b      	strh	r3, [r7, #8]
 8002c96:	4613      	mov	r3, r2
 8002c98:	71fb      	strb	r3, [r7, #7]
    uint16_t i = 0,RegIndex = usAddress - REG_HOLDING_REGISTER_START-1;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	82fb      	strh	r3, [r7, #22]
 8002c9e:	897b      	ldrh	r3, [r7, #10]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	82bb      	strh	r3, [r7, #20]
  
    if ((usAddress >= REG_HOLDING_REGISTER_START )&&(usAddress + usNRegs <= REG_HOLDING_REGISTER_START  + REG_HOLDING_REGISTER_SIZE+1))
 8002ca4:	897a      	ldrh	r2, [r7, #10]
 8002ca6:	893b      	ldrh	r3, [r7, #8]
 8002ca8:	4413      	add	r3, r2
 8002caa:	2b1f      	cmp	r3, #31
 8002cac:	dc4c      	bgt.n	8002d48 <eMBRegHoldingCB+0xc8>
    {
        if (MB_REG_READ == eMode)//读
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d126      	bne.n	8002d02 <eMBRegHoldingCB+0x82>
        {
          for(i=0;i<usNRegs;i++)
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	82fb      	strh	r3, [r7, #22]
 8002cb8:	e01e      	b.n	8002cf8 <eMBRegHoldingCB+0x78>
          {
            pucRegBuffer[i*2] = (UCHAR)(Holding_Data[RegIndex+i]>>8);
 8002cba:	8aba      	ldrh	r2, [r7, #20]
 8002cbc:	8afb      	ldrh	r3, [r7, #22]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a26      	ldr	r2, [pc, #152]	; (8002d5c <eMBRegHoldingCB+0xdc>)
 8002cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	8afb      	ldrh	r3, [r7, #22]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4619      	mov	r1, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	440b      	add	r3, r1
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]
            pucRegBuffer[i*2+1] = (UCHAR)Holding_Data[RegIndex+i];
 8002cd8:	8aba      	ldrh	r2, [r7, #20]
 8002cda:	8afb      	ldrh	r3, [r7, #22]
 8002cdc:	4413      	add	r3, r2
 8002cde:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <eMBRegHoldingCB+0xdc>)
 8002ce0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002ce4:	8afb      	ldrh	r3, [r7, #22]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	3301      	adds	r3, #1
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4413      	add	r3, r2
 8002cee:	b2ca      	uxtb	r2, r1
 8002cf0:	701a      	strb	r2, [r3, #0]
          for(i=0;i<usNRegs;i++)
 8002cf2:	8afb      	ldrh	r3, [r7, #22]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	82fb      	strh	r3, [r7, #22]
 8002cf8:	8afa      	ldrh	r2, [r7, #22]
 8002cfa:	893b      	ldrh	r3, [r7, #8]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3dc      	bcc.n	8002cba <eMBRegHoldingCB+0x3a>
 8002d00:	e024      	b.n	8002d4c <eMBRegHoldingCB+0xcc>
          }
        }
        else//写
        {
          for(i=0;i<usNRegs;i++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	82fb      	strh	r3, [r7, #22]
 8002d06:	e01a      	b.n	8002d3e <eMBRegHoldingCB+0xbe>
          {
            Holding_Data[RegIndex+i]=(pucRegBuffer[i*2]<<8)|(pucRegBuffer[i*2+1]);
 8002d08:	8afb      	ldrh	r3, [r7, #22]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4413      	add	r3, r2
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	b21a      	sxth	r2, r3
 8002d18:	8afb      	ldrh	r3, [r7, #22]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	68f9      	ldr	r1, [r7, #12]
 8002d20:	440b      	add	r3, r1
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	b21b      	sxth	r3, r3
 8002d26:	4313      	orrs	r3, r2
 8002d28:	b219      	sxth	r1, r3
 8002d2a:	8aba      	ldrh	r2, [r7, #20]
 8002d2c:	8afb      	ldrh	r3, [r7, #22]
 8002d2e:	4413      	add	r3, r2
 8002d30:	b289      	uxth	r1, r1
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <eMBRegHoldingCB+0xdc>)
 8002d34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          for(i=0;i<usNRegs;i++)
 8002d38:	8afb      	ldrh	r3, [r7, #22]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	82fb      	strh	r3, [r7, #22]
 8002d3e:	8afa      	ldrh	r2, [r7, #22]
 8002d40:	893b      	ldrh	r3, [r7, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d3e0      	bcc.n	8002d08 <eMBRegHoldingCB+0x88>
 8002d46:	e001      	b.n	8002d4c <eMBRegHoldingCB+0xcc>
          }
        }
    }
    else
    {
        return MB_ENOREG;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <eMBRegHoldingCB+0xce>
    }

    return MB_ENOERR;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000358 	.word	0x20000358

08002d60 <eMBRegInputCB>:
 * @param usAddress     起始地址
 * @param usNRegs       寄存器个数
 * @return eMBErrorCode 返回错误码
 */
eMBErrorCode eMBRegInputCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	803b      	strh	r3, [r7, #0]
    uint16_t i = 0,RegIndex = usAddress - REG_INPUT_REGISTER_START-1;
 8002d70:	2300      	movs	r3, #0
 8002d72:	81fb      	strh	r3, [r7, #14]
 8002d74:	887b      	ldrh	r3, [r7, #2]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	81bb      	strh	r3, [r7, #12]
    if ((usAddress >= REG_INPUT_REGISTER_START)&&(usAddress + usNRegs <= REG_INPUT_REGISTER_START + REG_INPUT_REGISTER_SIZE+1))
 8002d7a:	887a      	ldrh	r2, [r7, #2]
 8002d7c:	883b      	ldrh	r3, [r7, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	2b15      	cmp	r3, #21
 8002d82:	dc26      	bgt.n	8002dd2 <eMBRegInputCB+0x72>
    {
        for(i=0;i<usNRegs;i++)
 8002d84:	2300      	movs	r3, #0
 8002d86:	81fb      	strh	r3, [r7, #14]
 8002d88:	e01e      	b.n	8002dc8 <eMBRegInputCB+0x68>
        {
          pucRegBuffer[i*2] = (UCHAR)(Input_Data[RegIndex+i]>>8);
 8002d8a:	89ba      	ldrh	r2, [r7, #12]
 8002d8c:	89fb      	ldrh	r3, [r7, #14]
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <eMBRegInputCB+0x84>)
 8002d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	89fb      	ldrh	r3, [r7, #14]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4619      	mov	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	440b      	add	r3, r1
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]
          pucRegBuffer[i*2+1] = (UCHAR)Input_Data[RegIndex+i];
 8002da8:	89ba      	ldrh	r2, [r7, #12]
 8002daa:	89fb      	ldrh	r3, [r7, #14]
 8002dac:	4413      	add	r3, r2
 8002dae:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <eMBRegInputCB+0x84>)
 8002db0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002db4:	89fb      	ldrh	r3, [r7, #14]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	3301      	adds	r3, #1
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b2ca      	uxtb	r2, r1
 8002dc0:	701a      	strb	r2, [r3, #0]
        for(i=0;i<usNRegs;i++)
 8002dc2:	89fb      	ldrh	r3, [r7, #14]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	81fb      	strh	r3, [r7, #14]
 8002dc8:	89fa      	ldrh	r2, [r7, #14]
 8002dca:	883b      	ldrh	r3, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d3dc      	bcc.n	8002d8a <eMBRegInputCB+0x2a>
 8002dd0:	e001      	b.n	8002dd6 <eMBRegInputCB+0x76>
        }
    }
    else
    {
        return MB_ENOREG;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <eMBRegInputCB+0x78>
    }
    
    return MB_ENOERR;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	20000394 	.word	0x20000394

08002de8 <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	80fb      	strh	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f001 f8ab 	bl	8003f54 <eMBTCPDoInit>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	73fb      	strb	r3, [r7, #15]
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <eMBTCPInit+0x28>
    {
        eMBState = STATE_DISABLED;
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <eMBTCPInit+0x74>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e01f      	b.n	8002e50 <eMBTCPInit+0x68>
    }
    else if( !xMBPortEventInit(  ) )
 8002e10:	f000 fd60 	bl	80038d4 <xMBPortEventInit>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <eMBTCPInit+0x38>
    {
        /* Port dependent event module initalization failed. */
        eStatus = MB_EPORTERR;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	73fb      	strb	r3, [r7, #15]
 8002e1e:	e017      	b.n	8002e50 <eMBTCPInit+0x68>
    }
    else
    {
        pvMBFrameStartCur = eMBTCPStart;
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <eMBTCPInit+0x78>)
 8002e22:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <eMBTCPInit+0x7c>)
 8002e24:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <eMBTCPInit+0x80>)
 8002e28:	4a10      	ldr	r2, [pc, #64]	; (8002e6c <eMBTCPInit+0x84>)
 8002e2a:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 8002e2c:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <eMBTCPInit+0x88>)
 8002e2e:	4a11      	ldr	r2, [pc, #68]	; (8002e74 <eMBTCPInit+0x8c>)
 8002e30:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 8002e32:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <eMBTCPInit+0x90>)
 8002e34:	4a11      	ldr	r2, [pc, #68]	; (8002e7c <eMBTCPInit+0x94>)
 8002e36:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <eMBTCPInit+0x98>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <eMBTCPInit+0x9c>)
 8002e40:	22ff      	movs	r2, #255	; 0xff
 8002e42:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 8002e44:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <eMBTCPInit+0xa0>)
 8002e46:	2202      	movs	r2, #2
 8002e48:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 8002e4a:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <eMBTCPInit+0x74>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200003bc 	.word	0x200003bc
 8002e60:	200005dc 	.word	0x200005dc
 8002e64:	08003f7f 	.word	0x08003f7f
 8002e68:	200005e0 	.word	0x200005e0
 8002e6c:	08003f8d 	.word	0x08003f8d
 8002e70:	200005e4 	.word	0x200005e4
 8002e74:	08003f99 	.word	0x08003f99
 8002e78:	200005d8 	.word	0x200005d8
 8002e7c:	0800400b 	.word	0x0800400b
 8002e80:	200005e8 	.word	0x200005e8
 8002e84:	200005d4 	.word	0x200005d4
 8002e88:	200005d5 	.word	0x200005d5

08002e8c <eMBClose>:
}


eMBErrorCode
eMBClose( void )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8002e92:	2300      	movs	r3, #0
 8002e94:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <eMBClose+0x30>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d107      	bne.n	8002eae <eMBClose+0x22>
    {
        if( pvMBFrameCloseCur != NULL )
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <eMBClose+0x34>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <eMBClose+0x26>
        {
            pvMBFrameCloseCur(  );
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <eMBClose+0x34>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4798      	blx	r3
 8002eac:	e001      	b.n	8002eb2 <eMBClose+0x26>
        }
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8002eae:	2306      	movs	r3, #6
 8002eb0:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	200003bc 	.word	0x200003bc
 8002ec0:	200005e8 	.word	0x200005e8

08002ec4 <eMBEnable>:

eMBErrorCode
eMBEnable( void )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <eMBEnable+0x30>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d106      	bne.n	8002ee4 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <eMBEnable+0x34>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <eMBEnable+0x30>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e001      	b.n	8002ee8 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8002ee4:	2306      	movs	r3, #6
 8002ee6:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200003bc 	.word	0x200003bc
 8002ef8:	200005dc 	.word	0x200005dc

08002efc <eMBDisable>:

eMBErrorCode
eMBDisable( void )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus;

    if( eMBState == STATE_ENABLED )
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <eMBDisable+0x3c>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d108      	bne.n	8002f1c <eMBDisable+0x20>
    {
        pvMBFrameStopCur(  );
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <eMBDisable+0x40>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4798      	blx	r3
        eMBState = STATE_DISABLED;
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <eMBDisable+0x3c>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
        eStatus = MB_ENOERR;
 8002f16:	2300      	movs	r3, #0
 8002f18:	71fb      	strb	r3, [r7, #7]
 8002f1a:	e008      	b.n	8002f2e <eMBDisable+0x32>
    }
    else if( eMBState == STATE_DISABLED )
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <eMBDisable+0x3c>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d102      	bne.n	8002f2a <eMBDisable+0x2e>
    {
        eStatus = MB_ENOERR;
 8002f24:	2300      	movs	r3, #0
 8002f26:	71fb      	strb	r3, [r7, #7]
 8002f28:	e001      	b.n	8002f2e <eMBDisable+0x32>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8002f2a:	2306      	movs	r3, #6
 8002f2c:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	200003bc 	.word	0x200003bc
 8002f3c:	200005e0 	.word	0x200005e0

08002f40 <eMBPoll>:

eMBErrorCode
eMBPoll( void )
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8002f46:	2300      	movs	r3, #0
 8002f48:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8002f4a:	4b50      	ldr	r3, [pc, #320]	; (800308c <eMBPoll+0x14c>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8002f52:	2306      	movs	r3, #6
 8002f54:	e095      	b.n	8003082 <eMBPoll+0x142>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8002f56:	1cbb      	adds	r3, r7, #2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fcdf 	bl	800391c <xMBPortEventGet>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	f040 808d 	bne.w	8003080 <eMBPoll+0x140>
    {
        switch ( eEvent )
 8002f66:	78bb      	ldrb	r3, [r7, #2]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	f200 8089 	bhi.w	8003080 <eMBPoll+0x140>
 8002f6e:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <eMBPoll+0x34>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08003081 	.word	0x08003081
 8002f78:	08002f85 	.word	0x08002f85
 8002f7c:	08002fb7 	.word	0x08002fb7
 8002f80:	08003081 	.word	0x08003081
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8002f84:	4b42      	ldr	r3, [pc, #264]	; (8003090 <eMBPoll+0x150>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a42      	ldr	r2, [pc, #264]	; (8003094 <eMBPoll+0x154>)
 8002f8a:	4943      	ldr	r1, [pc, #268]	; (8003098 <eMBPoll+0x158>)
 8002f8c:	4843      	ldr	r0, [pc, #268]	; (800309c <eMBPoll+0x15c>)
 8002f8e:	4798      	blx	r3
 8002f90:	4603      	mov	r3, r0
 8002f92:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d16f      	bne.n	800307a <eMBPoll+0x13a>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8002f9a:	4b40      	ldr	r3, [pc, #256]	; (800309c <eMBPoll+0x15c>)
 8002f9c:	781a      	ldrb	r2, [r3, #0]
 8002f9e:	4b40      	ldr	r3, [pc, #256]	; (80030a0 <eMBPoll+0x160>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d003      	beq.n	8002fae <eMBPoll+0x6e>
 8002fa6:	4b3d      	ldr	r3, [pc, #244]	; (800309c <eMBPoll+0x15c>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d165      	bne.n	800307a <eMBPoll+0x13a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8002fae:	2002      	movs	r0, #2
 8002fb0:	f000 fc9e 	bl	80038f0 <xMBPortEventPost>
                }
            }
            break;
 8002fb4:	e061      	b.n	800307a <eMBPoll+0x13a>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8002fb6:	4b38      	ldr	r3, [pc, #224]	; (8003098 <eMBPoll+0x158>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	781a      	ldrb	r2, [r3, #0]
 8002fbc:	4b39      	ldr	r3, [pc, #228]	; (80030a4 <eMBPoll+0x164>)
 8002fbe:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8002fc0:	4b39      	ldr	r3, [pc, #228]	; (80030a8 <eMBPoll+0x168>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	e01f      	b.n	800300c <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8002fcc:	4a37      	ldr	r2, [pc, #220]	; (80030ac <eMBPoll+0x16c>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d01d      	beq.n	8003014 <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8002fd8:	4a34      	ldr	r2, [pc, #208]	; (80030ac <eMBPoll+0x16c>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8002fe0:	4b30      	ldr	r3, [pc, #192]	; (80030a4 <eMBPoll+0x164>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d10e      	bne.n	8003006 <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8002fe8:	4a30      	ldr	r2, [pc, #192]	; (80030ac <eMBPoll+0x16c>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4a29      	ldr	r2, [pc, #164]	; (8003098 <eMBPoll+0x158>)
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	4927      	ldr	r1, [pc, #156]	; (8003094 <eMBPoll+0x154>)
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4798      	blx	r3
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <eMBPoll+0x168>)
 8003002:	701a      	strb	r2, [r3, #0]
                    break;
 8003004:	e007      	b.n	8003016 <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3301      	adds	r3, #1
 800300a:	607b      	str	r3, [r7, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b0f      	cmp	r3, #15
 8003010:	dddc      	ble.n	8002fcc <eMBPoll+0x8c>
 8003012:	e000      	b.n	8003016 <eMBPoll+0xd6>
                    break;
 8003014:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8003016:	4b21      	ldr	r3, [pc, #132]	; (800309c <eMBPoll+0x15c>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d02f      	beq.n	800307e <eMBPoll+0x13e>
            {
                if( eException != MB_EX_NONE )
 800301e:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <eMBPoll+0x168>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01d      	beq.n	8003062 <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <eMBPoll+0x154>)
 8003028:	2200      	movs	r2, #0
 800302a:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800302c:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <eMBPoll+0x164>)
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <eMBPoll+0x158>)
 8003032:	6819      	ldr	r1, [r3, #0]
 8003034:	4b17      	ldr	r3, [pc, #92]	; (8003094 <eMBPoll+0x154>)
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	1c58      	adds	r0, r3, #1
 800303a:	b284      	uxth	r4, r0
 800303c:	4815      	ldr	r0, [pc, #84]	; (8003094 <eMBPoll+0x154>)
 800303e:	8004      	strh	r4, [r0, #0]
 8003040:	440b      	add	r3, r1
 8003042:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 800304a:	4b13      	ldr	r3, [pc, #76]	; (8003098 <eMBPoll+0x158>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <eMBPoll+0x154>)
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	1c59      	adds	r1, r3, #1
 8003054:	b288      	uxth	r0, r1
 8003056:	490f      	ldr	r1, [pc, #60]	; (8003094 <eMBPoll+0x154>)
 8003058:	8008      	strh	r0, [r1, #0]
 800305a:	4413      	add	r3, r2
 800305c:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <eMBPoll+0x168>)
 800305e:	7812      	ldrb	r2, [r2, #0]
 8003060:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8003062:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <eMBPoll+0x170>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <eMBPoll+0x160>)
 8003068:	7810      	ldrb	r0, [r2, #0]
 800306a:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <eMBPoll+0x158>)
 800306c:	6811      	ldr	r1, [r2, #0]
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <eMBPoll+0x154>)
 8003070:	8812      	ldrh	r2, [r2, #0]
 8003072:	4798      	blx	r3
 8003074:	4603      	mov	r3, r0
 8003076:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8003078:	e001      	b.n	800307e <eMBPoll+0x13e>
            break;
 800307a:	bf00      	nop
 800307c:	e000      	b.n	8003080 <eMBPoll+0x140>
            break;
 800307e:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}
 800308a:	bf00      	nop
 800308c:	200003bc 	.word	0x200003bc
 8003090:	200005e4 	.word	0x200005e4
 8003094:	200005f4 	.word	0x200005f4
 8003098:	200005f0 	.word	0x200005f0
 800309c:	200005ec 	.word	0x200005ec
 80030a0:	200005d4 	.word	0x200005d4
 80030a4:	200005f6 	.word	0x200005f6
 80030a8:	200005f7 	.word	0x200005f7
 80030ac:	200003c0 	.word	0x200003c0
 80030b0:	200005d8 	.word	0x200005d8

080030b4 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80030be:	2300      	movs	r3, #0
 80030c0:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d16c      	bne.n	80031a4 <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3301      	adds	r3, #1
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3302      	adds	r3, #2
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	8abb      	ldrh	r3, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80030e4:	8abb      	ldrh	r3, [r7, #20]
 80030e6:	3301      	adds	r3, #1
 80030e8:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3303      	adds	r3, #3
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3304      	adds	r3, #4
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	8a7b      	ldrh	r3, [r7, #18]
 8003100:	4313      	orrs	r3, r2
 8003102:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8003104:	8a7b      	ldrh	r3, [r7, #18]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d049      	beq.n	800319e <eMBFuncReadCoils+0xea>
 800310a:	8a7b      	ldrh	r3, [r7, #18]
 800310c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003110:	d245      	bcs.n	800319e <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2200      	movs	r2, #0
 800311a:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	60fa      	str	r2, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	3301      	adds	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8003132:	8a7b      	ldrh	r3, [r7, #18]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	2b00      	cmp	r3, #0
 800313a:	d006      	beq.n	800314a <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 800313c:	8a7b      	ldrh	r3, [r7, #18]
 800313e:	08db      	lsrs	r3, r3, #3
 8003140:	b29b      	uxth	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	3301      	adds	r3, #1
 8003146:	75fb      	strb	r3, [r7, #23]
 8003148:	e003      	b.n	8003152 <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 800314a:	8a7b      	ldrh	r3, [r7, #18]
 800314c:	08db      	lsrs	r3, r3, #3
 800314e:	b29b      	uxth	r3, r3
 8003150:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	60fa      	str	r2, [r7, #12]
 8003158:	7dfa      	ldrb	r2, [r7, #23]
 800315a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8003168:	8a7a      	ldrh	r2, [r7, #18]
 800316a:	8ab9      	ldrh	r1, [r7, #20]
 800316c:	2300      	movs	r3, #0
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f7ff fcac 	bl	8002acc <eMBRegCoilsCB>
 8003174:	4603      	mov	r3, r0
 8003176:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003178:	7afb      	ldrb	r3, [r7, #11]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d006      	beq.n	800318c <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800317e:	7afb      	ldrb	r3, [r7, #11]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fb85 	bl	8003890 <prveMBError2Exception>
 8003186:	4603      	mov	r3, r0
 8003188:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 800318a:	e00d      	b.n	80031a8 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	881a      	ldrh	r2, [r3, #0]
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	b29b      	uxth	r3, r3
 8003194:	4413      	add	r3, r2
 8003196:	b29a      	uxth	r2, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800319c:	e004      	b.n	80031a8 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800319e:	2303      	movs	r3, #3
 80031a0:	75bb      	strb	r3, [r7, #22]
 80031a2:	e001      	b.n	80031a8 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80031a4:	2303      	movs	r3, #3
 80031a6:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 80031a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 80031bc:	2300      	movs	r3, #0
 80031be:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	2b05      	cmp	r3, #5
 80031c6:	d140      	bne.n	800324a <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3301      	adds	r3, #1
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3302      	adds	r3, #2
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	b29a      	uxth	r2, r3
 80031dc:	89bb      	ldrh	r3, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80031e2:	89bb      	ldrh	r3, [r7, #12]
 80031e4:	3301      	adds	r3, #1
 80031e6:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d128      	bne.n	8003244 <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3303      	adds	r3, #3
 80031f6:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80031f8:	2bff      	cmp	r3, #255	; 0xff
 80031fa:	d004      	beq.n	8003206 <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3303      	adds	r3, #3
 8003200:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8003202:	2b00      	cmp	r3, #0
 8003204:	d11e      	bne.n	8003244 <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3303      	adds	r3, #3
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2bff      	cmp	r3, #255	; 0xff
 8003212:	d102      	bne.n	800321a <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8003214:	2301      	movs	r3, #1
 8003216:	723b      	strb	r3, [r7, #8]
 8003218:	e001      	b.n	800321e <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 800321e:	89b9      	ldrh	r1, [r7, #12]
 8003220:	f107 0008 	add.w	r0, r7, #8
 8003224:	2301      	movs	r3, #1
 8003226:	2201      	movs	r2, #1
 8003228:	f7ff fc50 	bl	8002acc <eMBRegCoilsCB>
 800322c:	4603      	mov	r3, r0
 800322e:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003230:	7afb      	ldrb	r3, [r7, #11]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003236:	7afb      	ldrb	r3, [r7, #11]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fb29 	bl	8003890 <prveMBError2Exception>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8003242:	e004      	b.n	800324e <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003244:	2303      	movs	r3, #3
 8003246:	73fb      	strb	r3, [r7, #15]
 8003248:	e001      	b.n	800324e <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800324a:	2303      	movs	r3, #3
 800324c:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800324e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8003262:	2300      	movs	r3, #0
 8003264:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	2b05      	cmp	r3, #5
 800326c:	d954      	bls.n	8003318 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3301      	adds	r3, #1
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	b29b      	uxth	r3, r3
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3302      	adds	r3, #2
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	b29a      	uxth	r2, r3
 8003282:	89bb      	ldrh	r3, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8003288:	89bb      	ldrh	r3, [r7, #12]
 800328a:	3301      	adds	r3, #1
 800328c:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3303      	adds	r3, #3
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3304      	adds	r3, #4
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	897b      	ldrh	r3, [r7, #10]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	795b      	ldrb	r3, [r3, #5]
 80032ac:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80032ae:	897b      	ldrh	r3, [r7, #10]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d006      	beq.n	80032c6 <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80032b8:	897b      	ldrh	r3, [r7, #10]
 80032ba:	08db      	lsrs	r3, r3, #3
 80032bc:	b29b      	uxth	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	3301      	adds	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	e003      	b.n	80032ce <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80032c6:	897b      	ldrh	r3, [r7, #10]
 80032c8:	08db      	lsrs	r3, r3, #3
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01e      	beq.n	8003312 <eMBFuncWriteMultipleCoils+0xba>
 80032d4:	897b      	ldrh	r3, [r7, #10]
 80032d6:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 80032da:	d81a      	bhi.n	8003312 <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	7a7b      	ldrb	r3, [r7, #9]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d116      	bne.n	8003312 <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	1d98      	adds	r0, r3, #6
 80032e8:	897a      	ldrh	r2, [r7, #10]
 80032ea:	89b9      	ldrh	r1, [r7, #12]
 80032ec:	2301      	movs	r3, #1
 80032ee:	f7ff fbed 	bl	8002acc <eMBRegCoilsCB>
 80032f2:	4603      	mov	r3, r0
 80032f4:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80032f6:	7a3b      	ldrb	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d006      	beq.n	800330a <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80032fc:	7a3b      	ldrb	r3, [r7, #8]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fac6 	bl	8003890 <prveMBError2Exception>
 8003304:	4603      	mov	r3, r0
 8003306:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8003308:	e008      	b.n	800331c <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2205      	movs	r2, #5
 800330e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003310:	e004      	b.n	800331c <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003312:	2303      	movs	r3, #3
 8003314:	73bb      	strb	r3, [r7, #14]
 8003316:	e001      	b.n	800331c <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003318:	2303      	movs	r3, #3
 800331a:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 800331c:	7bbb      	ldrb	r3, [r7, #14]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b086      	sub	sp, #24
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8003330:	2300      	movs	r3, #0
 8003332:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	2b05      	cmp	r3, #5
 800333a:	d16c      	bne.n	8003416 <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3301      	adds	r3, #1
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3302      	adds	r3, #2
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	b29a      	uxth	r2, r3
 8003350:	8abb      	ldrh	r3, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8003356:	8abb      	ldrh	r3, [r7, #20]
 8003358:	3301      	adds	r3, #1
 800335a:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3303      	adds	r3, #3
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	b29a      	uxth	r2, r3
 8003370:	8a7b      	ldrh	r3, [r7, #18]
 8003372:	4313      	orrs	r3, r2
 8003374:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8003376:	8a7b      	ldrh	r3, [r7, #18]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d049      	beq.n	8003410 <eMBFuncReadDiscreteInputs+0xea>
 800337c:	8a7b      	ldrh	r3, [r7, #18]
 800337e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003382:	d245      	bcs.n	8003410 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2200      	movs	r2, #0
 800338c:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	60fa      	str	r2, [r7, #12]
 8003394:	2202      	movs	r2, #2
 8003396:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	3301      	adds	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80033a4:	8a7b      	ldrh	r3, [r7, #18]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 80033ae:	8a7b      	ldrh	r3, [r7, #18]
 80033b0:	08db      	lsrs	r3, r3, #3
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	75fb      	strb	r3, [r7, #23]
 80033ba:	e003      	b.n	80033c4 <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 80033bc:	8a7b      	ldrh	r3, [r7, #18]
 80033be:	08db      	lsrs	r3, r3, #3
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	60fa      	str	r2, [r7, #12]
 80033ca:	7dfa      	ldrb	r2, [r7, #23]
 80033cc:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 80033da:	8a7a      	ldrh	r2, [r7, #18]
 80033dc:	8abb      	ldrh	r3, [r7, #20]
 80033de:	4619      	mov	r1, r3
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f7ff fbf7 	bl	8002bd4 <eMBRegDiscreteCB>
 80033e6:	4603      	mov	r3, r0
 80033e8:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80033ea:	7afb      	ldrb	r3, [r7, #11]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d006      	beq.n	80033fe <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80033f0:	7afb      	ldrb	r3, [r7, #11]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fa4c 	bl	8003890 <prveMBError2Exception>
 80033f8:	4603      	mov	r3, r0
 80033fa:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 80033fc:	e00d      	b.n	800341a <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	881a      	ldrh	r2, [r3, #0]
 8003402:	7dfb      	ldrb	r3, [r7, #23]
 8003404:	b29b      	uxth	r3, r3
 8003406:	4413      	add	r3, r2
 8003408:	b29a      	uxth	r2, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800340e:	e004      	b.n	800341a <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003410:	2303      	movs	r3, #3
 8003412:	75bb      	strb	r3, [r7, #22]
 8003414:	e001      	b.n	800341a <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003416:	2303      	movs	r3, #3
 8003418:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 800341a:	7dbb      	ldrb	r3, [r7, #22]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	2b05      	cmp	r3, #5
 8003438:	d122      	bne.n	8003480 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3301      	adds	r3, #1
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3302      	adds	r3, #2
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	b29a      	uxth	r2, r3
 800344e:	89bb      	ldrh	r3, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8003454:	89bb      	ldrh	r3, [r7, #12]
 8003456:	3301      	adds	r3, #1
 8003458:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	1cd8      	adds	r0, r3, #3
 800345e:	89b9      	ldrh	r1, [r7, #12]
 8003460:	2301      	movs	r3, #1
 8003462:	2201      	movs	r2, #1
 8003464:	f7ff fc0c 	bl	8002c80 <eMBRegHoldingCB>
 8003468:	4603      	mov	r3, r0
 800346a:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 800346c:	7afb      	ldrb	r3, [r7, #11]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8003472:	7afb      	ldrb	r3, [r7, #11]
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fa0b 	bl	8003890 <prveMBError2Exception>
 800347a:	4603      	mov	r3, r0
 800347c:	73fb      	strb	r3, [r7, #15]
 800347e:	e001      	b.n	8003484 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003480:	2303      	movs	r3, #3
 8003482:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d946      	bls.n	8003532 <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3301      	adds	r3, #1
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3302      	adds	r3, #2
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	89bb      	ldrh	r3, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80034be:	89bb      	ldrh	r3, [r7, #12]
 80034c0:	3301      	adds	r3, #1
 80034c2:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3303      	adds	r3, #3
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	021b      	lsls	r3, r3, #8
 80034ce:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	897b      	ldrh	r3, [r7, #10]
 80034da:	4313      	orrs	r3, r2
 80034dc:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	795b      	ldrb	r3, [r3, #5]
 80034e2:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 80034e4:	897b      	ldrh	r3, [r7, #10]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d020      	beq.n	800352c <eMBFuncWriteMultipleHoldingRegister+0x9e>
 80034ea:	897b      	ldrh	r3, [r7, #10]
 80034ec:	2b78      	cmp	r3, #120	; 0x78
 80034ee:	d81d      	bhi.n	800352c <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80034f0:	897b      	ldrh	r3, [r7, #10]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 80034f8:	7a7a      	ldrb	r2, [r7, #9]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d116      	bne.n	800352c <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	1d98      	adds	r0, r3, #6
 8003502:	897a      	ldrh	r2, [r7, #10]
 8003504:	89b9      	ldrh	r1, [r7, #12]
 8003506:	2301      	movs	r3, #1
 8003508:	f7ff fbba 	bl	8002c80 <eMBRegHoldingCB>
 800350c:	4603      	mov	r3, r0
 800350e:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003510:	7a3b      	ldrb	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d006      	beq.n	8003524 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003516:	7a3b      	ldrb	r3, [r7, #8]
 8003518:	4618      	mov	r0, r3
 800351a:	f000 f9b9 	bl	8003890 <prveMBError2Exception>
 800351e:	4603      	mov	r3, r0
 8003520:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8003522:	e008      	b.n	8003536 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2205      	movs	r2, #5
 8003528:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800352a:	e004      	b.n	8003536 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800352c:	2303      	movs	r3, #3
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	e001      	b.n	8003536 <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003532:	2303      	movs	r3, #3
 8003534:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8003536:	7bfb      	ldrb	r3, [r7, #15]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	2b05      	cmp	r3, #5
 8003554:	d15c      	bne.n	8003610 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3301      	adds	r3, #1
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	b29b      	uxth	r3, r3
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3302      	adds	r3, #2
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	b29a      	uxth	r2, r3
 800356a:	8abb      	ldrh	r3, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8003570:	8abb      	ldrh	r3, [r7, #20]
 8003572:	3301      	adds	r3, #1
 8003574:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3303      	adds	r3, #3
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b29b      	uxth	r3, r3
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3304      	adds	r3, #4
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800358a:	8a7b      	ldrh	r3, [r7, #18]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d03c      	beq.n	800360a <eMBFuncReadHoldingRegister+0xca>
 8003590:	8a7b      	ldrh	r3, [r7, #18]
 8003592:	2b7d      	cmp	r3, #125	; 0x7d
 8003594:	d839      	bhi.n	800360a <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2200      	movs	r2, #0
 800359e:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	60fa      	str	r2, [r7, #12]
 80035a6:	2203      	movs	r2, #3
 80035a8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	3301      	adds	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80035b6:	8a7b      	ldrh	r3, [r7, #18]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1c59      	adds	r1, r3, #1
 80035be:	60f9      	str	r1, [r7, #12]
 80035c0:	0052      	lsls	r2, r2, #1
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80035d2:	8a7a      	ldrh	r2, [r7, #18]
 80035d4:	8ab9      	ldrh	r1, [r7, #20]
 80035d6:	2300      	movs	r3, #0
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f7ff fb51 	bl	8002c80 <eMBRegHoldingCB>
 80035de:	4603      	mov	r3, r0
 80035e0:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80035e2:	7afb      	ldrb	r3, [r7, #11]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d006      	beq.n	80035f6 <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80035e8:	7afb      	ldrb	r3, [r7, #11]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f950 	bl	8003890 <prveMBError2Exception>
 80035f0:	4603      	mov	r3, r0
 80035f2:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80035f4:	e00e      	b.n	8003614 <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	881a      	ldrh	r2, [r3, #0]
 80035fa:	8a7b      	ldrh	r3, [r7, #18]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	b29b      	uxth	r3, r3
 8003600:	4413      	add	r3, r2
 8003602:	b29a      	uxth	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003608:	e004      	b.n	8003614 <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800360a:	2303      	movs	r3, #3
 800360c:	75fb      	strb	r3, [r7, #23]
 800360e:	e001      	b.n	8003614 <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003610:	2303      	movs	r3, #3
 8003612:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8003628:	2300      	movs	r3, #0
 800362a:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	2b09      	cmp	r3, #9
 8003632:	f240 8099 	bls.w	8003768 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3301      	adds	r3, #1
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b29b      	uxth	r3, r3
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3302      	adds	r3, #2
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	b29a      	uxth	r2, r3
 800364a:	8abb      	ldrh	r3, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8003650:	8abb      	ldrh	r3, [r7, #20]
 8003652:	3301      	adds	r3, #1
 8003654:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3303      	adds	r3, #3
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b29b      	uxth	r3, r3
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	b29a      	uxth	r2, r3
 800366a:	8a7b      	ldrh	r3, [r7, #18]
 800366c:	4313      	orrs	r3, r2
 800366e:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3305      	adds	r3, #5
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3306      	adds	r3, #6
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	b29a      	uxth	r2, r3
 8003684:	8a3b      	ldrh	r3, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 800368a:	8a3b      	ldrh	r3, [r7, #16]
 800368c:	3301      	adds	r3, #1
 800368e:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3307      	adds	r3, #7
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	b29b      	uxth	r3, r3
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3308      	adds	r3, #8
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	89fb      	ldrh	r3, [r7, #14]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	7a5b      	ldrb	r3, [r3, #9]
 80036ae:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 80036b0:	8a7b      	ldrh	r3, [r7, #18]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d056      	beq.n	8003764 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80036b6:	8a7b      	ldrh	r3, [r7, #18]
 80036b8:	2b7d      	cmp	r3, #125	; 0x7d
 80036ba:	d853      	bhi.n	8003764 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80036bc:	89fb      	ldrh	r3, [r7, #14]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d050      	beq.n	8003764 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80036c2:	89fb      	ldrh	r3, [r7, #14]
 80036c4:	2b79      	cmp	r3, #121	; 0x79
 80036c6:	d84d      	bhi.n	8003764 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 80036c8:	89fb      	ldrh	r3, [r7, #14]
 80036ca:	005a      	lsls	r2, r3, #1
 80036cc:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d148      	bne.n	8003764 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f103 000a 	add.w	r0, r3, #10
 80036d8:	89fa      	ldrh	r2, [r7, #14]
 80036da:	8a39      	ldrh	r1, [r7, #16]
 80036dc:	2301      	movs	r3, #1
 80036de:	f7ff facf 	bl	8002c80 <eMBRegHoldingCB>
 80036e2:	4603      	mov	r3, r0
 80036e4:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80036e6:	7dbb      	ldrb	r3, [r7, #22]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d131      	bne.n	8003750 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	60ba      	str	r2, [r7, #8]
 80036fc:	2217      	movs	r2, #23
 80036fe:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	3301      	adds	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 800370c:	8a7b      	ldrh	r3, [r7, #18]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	1c59      	adds	r1, r3, #1
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	0052      	lsls	r2, r2, #1
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8003728:	8a7a      	ldrh	r2, [r7, #18]
 800372a:	8ab9      	ldrh	r1, [r7, #20]
 800372c:	2300      	movs	r3, #0
 800372e:	68b8      	ldr	r0, [r7, #8]
 8003730:	f7ff faa6 	bl	8002c80 <eMBRegHoldingCB>
 8003734:	4603      	mov	r3, r0
 8003736:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8003738:	7dbb      	ldrb	r3, [r7, #22]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d108      	bne.n	8003750 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	881a      	ldrh	r2, [r3, #0]
 8003742:	8a7b      	ldrh	r3, [r7, #18]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	b29b      	uxth	r3, r3
 8003748:	4413      	add	r3, r2
 800374a:	b29a      	uxth	r2, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8003750:	7dbb      	ldrb	r3, [r7, #22]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003756:	7dbb      	ldrb	r3, [r7, #22]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 f899 	bl	8003890 <prveMBError2Exception>
 800375e:	4603      	mov	r3, r0
 8003760:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8003762:	e001      	b.n	8003768 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003764:	2303      	movs	r3, #3
 8003766:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8003768:	7dfb      	ldrb	r3, [r7, #23]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800377c:	2300      	movs	r3, #0
 800377e:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	2b05      	cmp	r3, #5
 8003786:	d15f      	bne.n	8003848 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3301      	adds	r3, #1
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3302      	adds	r3, #2
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	b29a      	uxth	r2, r3
 800379c:	8abb      	ldrh	r3, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80037a2:	8abb      	ldrh	r3, [r7, #20]
 80037a4:	3301      	adds	r3, #1
 80037a6:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3303      	adds	r3, #3
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	8a7b      	ldrh	r3, [r7, #18]
 80037be:	4313      	orrs	r3, r2
 80037c0:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 80037c2:	8a7b      	ldrh	r3, [r7, #18]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d03c      	beq.n	8003842 <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80037c8:	8a7b      	ldrh	r3, [r7, #18]
 80037ca:	2b7c      	cmp	r3, #124	; 0x7c
 80037cc:	d839      	bhi.n	8003842 <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2200      	movs	r2, #0
 80037d6:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	60fa      	str	r2, [r7, #12]
 80037de:	2204      	movs	r2, #4
 80037e0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	3301      	adds	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80037ee:	8a7b      	ldrh	r3, [r7, #18]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1c59      	adds	r1, r3, #1
 80037f6:	60f9      	str	r1, [r7, #12]
 80037f8:	0052      	lsls	r2, r2, #1
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	3301      	adds	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 800380a:	8a7a      	ldrh	r2, [r7, #18]
 800380c:	8abb      	ldrh	r3, [r7, #20]
 800380e:	4619      	mov	r1, r3
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff faa5 	bl	8002d60 <eMBRegInputCB>
 8003816:	4603      	mov	r3, r0
 8003818:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800381a:	7afb      	ldrb	r3, [r7, #11]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d006      	beq.n	800382e <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003820:	7afb      	ldrb	r3, [r7, #11]
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f834 	bl	8003890 <prveMBError2Exception>
 8003828:	4603      	mov	r3, r0
 800382a:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800382c:	e00e      	b.n	800384c <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	881a      	ldrh	r2, [r3, #0]
 8003832:	8a7b      	ldrh	r3, [r7, #18]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	b29b      	uxth	r3, r3
 8003838:	4413      	add	r3, r2
 800383a:	b29a      	uxth	r2, r3
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003840:	e004      	b.n	800384c <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003842:	2303      	movs	r3, #3
 8003844:	75fb      	strb	r3, [r7, #23]
 8003846:	e001      	b.n	800384c <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003848:	2303      	movs	r3, #3
 800384a:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800384c:	7dfb      	ldrb	r3, [r7, #23]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3301      	adds	r3, #1
 8003866:	4a08      	ldr	r2, [pc, #32]	; (8003888 <eMBFuncReportSlaveID+0x30>)
 8003868:	8812      	ldrh	r2, [r2, #0]
 800386a:	4908      	ldr	r1, [pc, #32]	; (800388c <eMBFuncReportSlaveID+0x34>)
 800386c:	4618      	mov	r0, r3
 800386e:	f011 face 	bl	8014e0e <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <eMBFuncReportSlaveID+0x30>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	3301      	adds	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000618 	.word	0x20000618
 800388c:	200005f8 	.word	0x200005f8

08003890 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	2b07      	cmp	r3, #7
 800389e:	d00c      	beq.n	80038ba <prveMBError2Exception+0x2a>
 80038a0:	2b07      	cmp	r3, #7
 80038a2:	dc0d      	bgt.n	80038c0 <prveMBError2Exception+0x30>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <prveMBError2Exception+0x1e>
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d003      	beq.n	80038b4 <prveMBError2Exception+0x24>
 80038ac:	e008      	b.n	80038c0 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
            break;
 80038b2:	e008      	b.n	80038c6 <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80038b4:	2302      	movs	r3, #2
 80038b6:	73fb      	strb	r3, [r7, #15]
            break;
 80038b8:	e005      	b.n	80038c6 <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80038ba:	2306      	movs	r3, #6
 80038bc:	73fb      	strb	r3, [r7, #15]
            break;
 80038be:	e002      	b.n	80038c6 <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80038c0:	2304      	movs	r3, #4
 80038c2:	73fb      	strb	r3, [r7, #15]
            break;
 80038c4:	bf00      	nop
    }

    return eStatus;
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 80038d8:	4b04      	ldr	r3, [pc, #16]	; (80038ec <xMBPortEventInit+0x18>)
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
    return TRUE;
 80038de:	2301      	movs	r3, #1
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	2000061b 	.word	0x2000061b

080038f0 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <xMBPortEventPost+0x24>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8003900:	4a05      	ldr	r2, [pc, #20]	; (8003918 <xMBPortEventPost+0x28>)
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8003906:	2301      	movs	r3, #1
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	2000061b 	.word	0x2000061b
 8003918:	2000061a 	.word	0x2000061a

0800391c <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <xMBPortEventGet+0x34>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <xMBPortEventGet+0x38>)
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <xMBPortEventGet+0x34>)
 800393a:	2200      	movs	r2, #0
 800393c:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	2000061b 	.word	0x2000061b
 8003954:	2000061a 	.word	0x2000061a

08003958 <prvvMBTCPLogFrame>:
/* ----------------------- Start implementation -----------------------------*/

#ifdef MB_TCP_DEBUG
void
prvvMBTCPLogFrame( UCHAR * pucMsg, UCHAR * pucFrame, USHORT usFrameLen )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	4613      	mov	r3, r2
 8003964:	80fb      	strh	r3, [r7, #6]
    int             i;
    int             res = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
    int             iBufPos = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
    size_t          iBufLeft = MB_FRAME_LOG_BUFSIZE;
 800396e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003972:	613b      	str	r3, [r7, #16]
    static CHAR     arcBuffer[MB_FRAME_LOG_BUFSIZE];

    assert( pucFrame != NULL );
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d105      	bne.n	8003986 <prvvMBTCPLogFrame+0x2e>
 800397a:	4b55      	ldr	r3, [pc, #340]	; (8003ad0 <prvvMBTCPLogFrame+0x178>)
 800397c:	222c      	movs	r2, #44	; 0x2c
 800397e:	4955      	ldr	r1, [pc, #340]	; (8003ad4 <prvvMBTCPLogFrame+0x17c>)
 8003980:	4855      	ldr	r0, [pc, #340]	; (8003ad8 <prvvMBTCPLogFrame+0x180>)
 8003982:	f011 f8e1 	bl	8014b48 <iprintf>

    for( i = 0; i < usFrameLen; i++ )
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e07d      	b.n	8003a88 <prvvMBTCPLogFrame+0x130>
    {
        /* Print some additional frame information. */
        switch ( i )
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	2b08      	cmp	r3, #8
 8003990:	d850      	bhi.n	8003a34 <prvvMBTCPLogFrame+0xdc>
 8003992:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <prvvMBTCPLogFrame+0x40>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039bd 	.word	0x080039bd
 800399c:	08003a35 	.word	0x08003a35
 80039a0:	080039d1 	.word	0x080039d1
 80039a4:	08003a35 	.word	0x08003a35
 80039a8:	080039e5 	.word	0x080039e5
 80039ac:	08003a35 	.word	0x08003a35
 80039b0:	080039f9 	.word	0x080039f9
 80039b4:	08003a0d 	.word	0x08003a0d
 80039b8:	08003a21 	.word	0x08003a21
        {
        case 0:
            /* TID = Transaction Identifier. */
            res = snprintf( &arcBuffer[iBufPos], iBufLeft, "| TID = " );
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	4a47      	ldr	r2, [pc, #284]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 80039c0:	4413      	add	r3, r2
 80039c2:	4a47      	ldr	r2, [pc, #284]	; (8003ae0 <prvvMBTCPLogFrame+0x188>)
 80039c4:	6939      	ldr	r1, [r7, #16]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f011 f8d0 	bl	8014b6c <sniprintf>
 80039cc:	61b8      	str	r0, [r7, #24]
            break;
 80039ce:	e034      	b.n	8003a3a <prvvMBTCPLogFrame+0xe2>
        case 2:
            /* PID = Protocol Identifier. */
            res = snprintf( &arcBuffer[iBufPos], iBufLeft, " | PID = " );
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	4a42      	ldr	r2, [pc, #264]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 80039d4:	4413      	add	r3, r2
 80039d6:	4a43      	ldr	r2, [pc, #268]	; (8003ae4 <prvvMBTCPLogFrame+0x18c>)
 80039d8:	6939      	ldr	r1, [r7, #16]
 80039da:	4618      	mov	r0, r3
 80039dc:	f011 f8c6 	bl	8014b6c <sniprintf>
 80039e0:	61b8      	str	r0, [r7, #24]
            break;
 80039e2:	e02a      	b.n	8003a3a <prvvMBTCPLogFrame+0xe2>
        case 4:
            /* Length */
            res = snprintf( &arcBuffer[iBufPos], iBufLeft, " | LEN = " );
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	4a3d      	ldr	r2, [pc, #244]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 80039e8:	4413      	add	r3, r2
 80039ea:	4a3f      	ldr	r2, [pc, #252]	; (8003ae8 <prvvMBTCPLogFrame+0x190>)
 80039ec:	6939      	ldr	r1, [r7, #16]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f011 f8bc 	bl	8014b6c <sniprintf>
 80039f4:	61b8      	str	r0, [r7, #24]
            break;
 80039f6:	e020      	b.n	8003a3a <prvvMBTCPLogFrame+0xe2>
        case 6:
            /* UID = Unit Identifier. */
            res = snprintf( &arcBuffer[iBufPos], iBufLeft, " | UID = " );
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	4a38      	ldr	r2, [pc, #224]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 80039fc:	4413      	add	r3, r2
 80039fe:	4a3b      	ldr	r2, [pc, #236]	; (8003aec <prvvMBTCPLogFrame+0x194>)
 8003a00:	6939      	ldr	r1, [r7, #16]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f011 f8b2 	bl	8014b6c <sniprintf>
 8003a08:	61b8      	str	r0, [r7, #24]
            break;
 8003a0a:	e016      	b.n	8003a3a <prvvMBTCPLogFrame+0xe2>
        case 7:
            /* MB Function Code. */
            res = snprintf( &arcBuffer[iBufPos], iBufLeft, "|| FUNC = " );
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	4a33      	ldr	r2, [pc, #204]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 8003a10:	4413      	add	r3, r2
 8003a12:	4a37      	ldr	r2, [pc, #220]	; (8003af0 <prvvMBTCPLogFrame+0x198>)
 8003a14:	6939      	ldr	r1, [r7, #16]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f011 f8a8 	bl	8014b6c <sniprintf>
 8003a1c:	61b8      	str	r0, [r7, #24]
            break;
 8003a1e:	e00c      	b.n	8003a3a <prvvMBTCPLogFrame+0xe2>
        case 8:
            /* MB PDU rest. */
            res = snprintf( &arcBuffer[iBufPos], iBufLeft, " | DATA = " );
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	4a2e      	ldr	r2, [pc, #184]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 8003a24:	4413      	add	r3, r2
 8003a26:	4a33      	ldr	r2, [pc, #204]	; (8003af4 <prvvMBTCPLogFrame+0x19c>)
 8003a28:	6939      	ldr	r1, [r7, #16]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f011 f89e 	bl	8014b6c <sniprintf>
 8003a30:	61b8      	str	r0, [r7, #24]
            break;
 8003a32:	e002      	b.n	8003a3a <prvvMBTCPLogFrame+0xe2>
        default:
            res = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
            break;
 8003a38:	bf00      	nop
        }
        if( res == -1 )
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a40:	d028      	beq.n	8003a94 <prvvMBTCPLogFrame+0x13c>
        {
            break;
        }
        else
        {
            iBufPos += res;
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	4413      	add	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
            iBufLeft -= res;
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	613b      	str	r3, [r7, #16]
        }

        /* Print the data. */
        res = snprintf( &arcBuffer[iBufPos], iBufLeft, "%02X", pucFrame[i] );
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	4a21      	ldr	r2, [pc, #132]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 8003a56:	1898      	adds	r0, r3, r2
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	4a25      	ldr	r2, [pc, #148]	; (8003af8 <prvvMBTCPLogFrame+0x1a0>)
 8003a62:	6939      	ldr	r1, [r7, #16]
 8003a64:	f011 f882 	bl	8014b6c <sniprintf>
 8003a68:	61b8      	str	r0, [r7, #24]
        if( res == -1 )
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a70:	d012      	beq.n	8003a98 <prvvMBTCPLogFrame+0x140>
        {
            break;
        }
        else
        {
            iBufPos += res;
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	4413      	add	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
            iBufLeft -= res;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	613b      	str	r3, [r7, #16]
    for( i = 0; i < usFrameLen; i++ )
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3301      	adds	r3, #1
 8003a86:	61fb      	str	r3, [r7, #28]
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	f6ff af7d 	blt.w	800398c <prvvMBTCPLogFrame+0x34>
 8003a92:	e002      	b.n	8003a9a <prvvMBTCPLogFrame+0x142>
            break;
 8003a94:	bf00      	nop
 8003a96:	e000      	b.n	8003a9a <prvvMBTCPLogFrame+0x142>
            break;
 8003a98:	bf00      	nop
        }
    }

    if( res != -1 )
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d012      	beq.n	8003ac8 <prvvMBTCPLogFrame+0x170>
    {
        /* Append an end of frame string. */
        res = snprintf( &arcBuffer[iBufPos], iBufLeft, " |\r\n" );
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 8003aa6:	4413      	add	r3, r2
 8003aa8:	4a14      	ldr	r2, [pc, #80]	; (8003afc <prvvMBTCPLogFrame+0x1a4>)
 8003aaa:	6939      	ldr	r1, [r7, #16]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f011 f85d 	bl	8014b6c <sniprintf>
 8003ab2:	61b8      	str	r0, [r7, #24]
        if( res != -1 )
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aba:	d005      	beq.n	8003ac8 <prvvMBTCPLogFrame+0x170>
        {
            vMBPortLog( MB_LOG_DEBUG, pucMsg, "%s", arcBuffer );
 8003abc:	4b07      	ldr	r3, [pc, #28]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 8003abe:	4a10      	ldr	r2, [pc, #64]	; (8003b00 <prvvMBTCPLogFrame+0x1a8>)
 8003ac0:	68f9      	ldr	r1, [r7, #12]
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	f000 f81e 	bl	8003b04 <vMBPortLog>
        }
    }
}
 8003ac8:	bf00      	nop
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	08015db0 	.word	0x08015db0
 8003ad4:	08015ddc 	.word	0x08015ddc
 8003ad8:	08015df0 	.word	0x08015df0
 8003adc:	2000061c 	.word	0x2000061c
 8003ae0:	08015e18 	.word	0x08015e18
 8003ae4:	08015e24 	.word	0x08015e24
 8003ae8:	08015e30 	.word	0x08015e30
 8003aec:	08015e3c 	.word	0x08015e3c
 8003af0:	08015e48 	.word	0x08015e48
 8003af4:	08015e54 	.word	0x08015e54
 8003af8:	08015e60 	.word	0x08015e60
 8003afc:	08015e68 	.word	0x08015e68
 8003b00:	08015e70 	.word	0x08015e70

08003b04 <vMBPortLog>:
#endif

void
vMBPortLog( eMBPortLogLevel eLevel, const CHAR * szModule, const CHAR * szFmt, ... )
{
 8003b04:	b40c      	push	{r2, r3}
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	6039      	str	r1, [r7, #0]
 8003b10:	71fb      	strb	r3, [r7, #7]
    va_list         args;
    static const char *arszLevel2Str[] = { "DEBUG", "INFO", "WARN", "ERROR" };

    ( void )printf( "%s: %s: ", arszLevel2Str[eLevel], szModule );
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	4a0a      	ldr	r2, [pc, #40]	; (8003b40 <vMBPortLog+0x3c>)
 8003b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4809      	ldr	r0, [pc, #36]	; (8003b44 <vMBPortLog+0x40>)
 8003b20:	f011 f812 	bl	8014b48 <iprintf>
    va_start( args, szFmt );
 8003b24:	f107 031c 	add.w	r3, r7, #28
 8003b28:	60fb      	str	r3, [r7, #12]
    vprintf( szFmt, args );
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	69b8      	ldr	r0, [r7, #24]
 8003b2e:	f011 f8b5 	bl	8014c9c <viprintf>
    va_end( args );
}
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b3c:	b002      	add	sp, #8
 8003b3e:	4770      	bx	lr
 8003b40:	20000440 	.word	0x20000440
 8003b44:	08015e74 	.word	0x08015e74

08003b48 <xMBTCPPortInit>:
static void     prvvMBTCPPortError( void *pvArg, err_t xErr );

/* ----------------------- Begin implementation -----------------------------*/
BOOL
xMBTCPPortInit( USHORT usTCPPort )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	80fb      	strh	r3, [r7, #6]
    struct tcp_pcb *pxPCBListenNew, *pxPCBListenOld;
    BOOL            bOkay = FALSE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	757b      	strb	r3, [r7, #21]
    USHORT          usPort;

    if( usTCPPort == 0 )
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d103      	bne.n	8003b64 <xMBTCPPortInit+0x1c>
    {
        usPort = MB_TCP_DEFAULT_PORT;
 8003b5c:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 8003b60:	82fb      	strh	r3, [r7, #22]
 8003b62:	e001      	b.n	8003b68 <xMBTCPPortInit+0x20>
    }
    else
    {
        usPort = ( USHORT ) usTCPPort;
 8003b64:	88fb      	ldrh	r3, [r7, #6]
 8003b66:	82fb      	strh	r3, [r7, #22]
    }

    if( ( pxPCBListenNew = pxPCBListenOld = tcp_new(  ) ) == NULL )
 8003b68:	f008 fa3e 	bl	800bfe8 <tcp_new>
 8003b6c:	6138      	str	r0, [r7, #16]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <xMBTCPPortInit+0x36>
    {
        /* Can't create TCP socket. */
        bOkay = FALSE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	757b      	strb	r3, [r7, #21]
 8003b7c:	e028      	b.n	8003bd0 <xMBTCPPortInit+0x88>
    }
    else if( tcp_bind( pxPCBListenNew, IP_ADDR_ANY, ( u16_t ) usPort ) != ERR_OK )
 8003b7e:	8afb      	ldrh	r3, [r7, #22]
 8003b80:	461a      	mov	r2, r3
 8003b82:	4917      	ldr	r1, [pc, #92]	; (8003be0 <xMBTCPPortInit+0x98>)
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f007 f9a9 	bl	800aedc <tcp_bind>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <xMBTCPPortInit+0x54>
    {
        /* Bind failed - Maybe illegal port value or in use. */
        ( void )tcp_close( pxPCBListenOld );
 8003b90:	6938      	ldr	r0, [r7, #16]
 8003b92:	f007 f8ad 	bl	800acf0 <tcp_close>
        bOkay = FALSE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	757b      	strb	r3, [r7, #21]
 8003b9a:	e019      	b.n	8003bd0 <xMBTCPPortInit+0x88>
    }
    else if( ( pxPCBListenNew = tcp_listen( pxPCBListenNew ) ) == NULL )
 8003b9c:	21ff      	movs	r1, #255	; 0xff
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f007 fa54 	bl	800b04c <tcp_listen_with_backlog>
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d105      	bne.n	8003bb8 <xMBTCPPortInit+0x70>
    {
        ( void )tcp_close( pxPCBListenOld );
 8003bac:	6938      	ldr	r0, [r7, #16]
 8003bae:	f007 f89f 	bl	800acf0 <tcp_close>
        bOkay = FALSE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	757b      	strb	r3, [r7, #21]
 8003bb6:	e00b      	b.n	8003bd0 <xMBTCPPortInit+0x88>
    }
    else
    {
        /* Register callback function for new clients. */
        tcp_accept( pxPCBListenNew, prvxMBTCPPortAccept );
 8003bb8:	490a      	ldr	r1, [pc, #40]	; (8003be4 <xMBTCPPortInit+0x9c>)
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f008 fa72 	bl	800c0a4 <tcp_accept>

        /* Everything okay. Set global variable. */
        pxPCBListen = pxPCBListenNew;
 8003bc0:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <xMBTCPPortInit+0xa0>)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6013      	str	r3, [r2, #0]

#ifdef MB_TCP_DEBUG
        vMBPortLog( MB_LOG_DEBUG, "MBTCP-ACCEPT", "Protocol stack ready.\r\n" );
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <xMBTCPPortInit+0xa4>)
 8003bc8:	4909      	ldr	r1, [pc, #36]	; (8003bf0 <xMBTCPPortInit+0xa8>)
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f7ff ff9a 	bl	8003b04 <vMBPortLog>
#endif
    }
    bOkay = TRUE;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	757b      	strb	r3, [r7, #21]
    return bOkay;
 8003bd4:	7d7b      	ldrb	r3, [r7, #21]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	08018b30 	.word	0x08018b30
 8003be4:	08003c9d 	.word	0x08003c9d
 8003be8:	2000081c 	.word	0x2000081c
 8003bec:	08015ea0 	.word	0x08015ea0
 8003bf0:	08015eb8 	.word	0x08015eb8

08003bf4 <prvvMBPortReleaseClient>:

void
prvvMBPortReleaseClient( struct tcp_pcb *pxPCB )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af04      	add	r7, sp, #16
 8003bfa:	6078      	str	r0, [r7, #4]
    if( pxPCB != NULL )
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d033      	beq.n	8003c6a <prvvMBPortReleaseClient+0x76>
    {
        if( tcp_close( pxPCB ) != ERR_OK )
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f007 f874 	bl	800acf0 <tcp_close>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <prvvMBPortReleaseClient+0x20>
        {
            tcp_abort( pxPCB );
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f007 f958 	bl	800aec4 <tcp_abort>
        }
        //vPortEnterCritical(  );
        if( pxPCB == pxPCBClient )
 8003c14:	4b17      	ldr	r3, [pc, #92]	; (8003c74 <prvvMBPortReleaseClient+0x80>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d11d      	bne.n	8003c5a <prvvMBPortReleaseClient+0x66>
        {
#ifdef MB_TCP_DEBUG
            vMBPortLog( MB_LOG_DEBUG, "MBTCP-CLOSE", "Closed connection to %d.%d.%d.%d.\r\n",
                        ip4_addr1( &( pxPCB->remote_ip ) ),
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	781b      	ldrb	r3, [r3, #0]
            vMBPortLog( MB_LOG_DEBUG, "MBTCP-CLOSE", "Closed connection to %d.%d.%d.%d.\r\n",
 8003c24:	4618      	mov	r0, r3
                        ip4_addr2( &( pxPCB->remote_ip ) ),
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	781b      	ldrb	r3, [r3, #0]
            vMBPortLog( MB_LOG_DEBUG, "MBTCP-CLOSE", "Closed connection to %d.%d.%d.%d.\r\n",
 8003c2e:	461a      	mov	r2, r3
                        ip4_addr3( &( pxPCB->remote_ip ) ), ip4_addr4( &( pxPCB->remote_ip ) ) );
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	3302      	adds	r3, #2
 8003c36:	781b      	ldrb	r3, [r3, #0]
            vMBPortLog( MB_LOG_DEBUG, "MBTCP-CLOSE", "Closed connection to %d.%d.%d.%d.\r\n",
 8003c38:	4619      	mov	r1, r3
                        ip4_addr3( &( pxPCB->remote_ip ) ), ip4_addr4( &( pxPCB->remote_ip ) ) );
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	3303      	adds	r3, #3
 8003c40:	781b      	ldrb	r3, [r3, #0]
            vMBPortLog( MB_LOG_DEBUG, "MBTCP-CLOSE", "Closed connection to %d.%d.%d.%d.\r\n",
 8003c42:	9302      	str	r3, [sp, #8]
 8003c44:	9101      	str	r1, [sp, #4]
 8003c46:	9200      	str	r2, [sp, #0]
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4a0b      	ldr	r2, [pc, #44]	; (8003c78 <prvvMBPortReleaseClient+0x84>)
 8003c4c:	490b      	ldr	r1, [pc, #44]	; (8003c7c <prvvMBPortReleaseClient+0x88>)
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f7ff ff58 	bl	8003b04 <vMBPortLog>
#endif
            pxPCBClient = NULL;
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <prvvMBPortReleaseClient+0x80>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
        }
        if( pxPCB == pxPCBListen )
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <prvvMBPortReleaseClient+0x8c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d102      	bne.n	8003c6a <prvvMBPortReleaseClient+0x76>
        {
            pxPCBListen = NULL;
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <prvvMBPortReleaseClient+0x8c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
        }
        //vPortExitCritical(  );
    }
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000820 	.word	0x20000820
 8003c78:	08015ec8 	.word	0x08015ec8
 8003c7c:	08015eec 	.word	0x08015eec
 8003c80:	2000081c 	.word	0x2000081c

08003c84 <vMBTCPPortDisable>:
    //vMBPortEventClose(  );
}

void
vMBTCPPortDisable( void )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
    prvvMBPortReleaseClient( pxPCBClient );
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <vMBTCPPortDisable+0x14>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ffb1 	bl	8003bf4 <prvvMBPortReleaseClient>
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000820 	.word	0x20000820

08003c9c <prvxMBTCPPortAccept>:

err_t
prvxMBTCPPortAccept( void *pvArg, struct tcp_pcb *pxPCB, err_t xErr )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af04      	add	r7, sp, #16
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	71fb      	strb	r3, [r7, #7]
    err_t           error;

    if( xErr != ERR_OK )
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <prvxMBTCPPortAccept+0x1c>
    {
        return xErr;
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	e03a      	b.n	8003d2e <prvxMBTCPPortAccept+0x92>
    }

    /* We can handle only one client. */
    if( pxPCBClient == NULL )
 8003cb8:	4b1f      	ldr	r3, [pc, #124]	; (8003d38 <prvxMBTCPPortAccept+0x9c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d12f      	bne.n	8003d20 <prvxMBTCPPortAccept+0x84>
    {
        /* Register the client. */
        pxPCBClient = pxPCB;
 8003cc0:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <prvxMBTCPPortAccept+0x9c>)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6013      	str	r3, [r2, #0]

        /* Set up the receive function prvxMBTCPPortReceive( ) to be called when data
         * arrives.
         */
        tcp_recv( pxPCB, prvxMBTCPPortReceive );
 8003cc6:	491d      	ldr	r1, [pc, #116]	; (8003d3c <prvxMBTCPPortAccept+0xa0>)
 8003cc8:	68b8      	ldr	r0, [r7, #8]
 8003cca:	f008 f9a7 	bl	800c01c <tcp_recv>

        /* Register error handler. */
        tcp_err( pxPCB, prvvMBTCPPortError );
 8003cce:	491c      	ldr	r1, [pc, #112]	; (8003d40 <prvxMBTCPPortAccept+0xa4>)
 8003cd0:	68b8      	ldr	r0, [r7, #8]
 8003cd2:	f008 f9c5 	bl	800c060 <tcp_err>

        /* Set callback argument later used in the error handler. */
        tcp_arg( pxPCB, pxPCB );
 8003cd6:	68b9      	ldr	r1, [r7, #8]
 8003cd8:	68b8      	ldr	r0, [r7, #8]
 8003cda:	f008 f98d 	bl	800bff8 <tcp_arg>

        /* Reset the buffers and state variables. */
        usTCPBufPos = 0;
 8003cde:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <prvxMBTCPPortAccept+0xa8>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	801a      	strh	r2, [r3, #0]

#ifdef MB_TCP_DEBUG
        vMBPortLog( MB_LOG_DEBUG, "MBTCP-ACCEPT", "Accepted new client %d.%d.%d.%d\r\n",
                    ip4_addr1( &( pxPCB->remote_ip ) ),
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	781b      	ldrb	r3, [r3, #0]
        vMBPortLog( MB_LOG_DEBUG, "MBTCP-ACCEPT", "Accepted new client %d.%d.%d.%d\r\n",
 8003cea:	4618      	mov	r0, r3
                    ip4_addr2( &( pxPCB->remote_ip ) ),
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	781b      	ldrb	r3, [r3, #0]
        vMBPortLog( MB_LOG_DEBUG, "MBTCP-ACCEPT", "Accepted new client %d.%d.%d.%d\r\n",
 8003cf4:	461a      	mov	r2, r3
                    ip4_addr3( &( pxPCB->remote_ip ) ), ip4_addr4( &( pxPCB->remote_ip ) ) );
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
        vMBPortLog( MB_LOG_DEBUG, "MBTCP-ACCEPT", "Accepted new client %d.%d.%d.%d\r\n",
 8003cfe:	4619      	mov	r1, r3
                    ip4_addr3( &( pxPCB->remote_ip ) ), ip4_addr4( &( pxPCB->remote_ip ) ) );
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	3304      	adds	r3, #4
 8003d04:	3303      	adds	r3, #3
 8003d06:	781b      	ldrb	r3, [r3, #0]
        vMBPortLog( MB_LOG_DEBUG, "MBTCP-ACCEPT", "Accepted new client %d.%d.%d.%d\r\n",
 8003d08:	9302      	str	r3, [sp, #8]
 8003d0a:	9101      	str	r1, [sp, #4]
 8003d0c:	9200      	str	r2, [sp, #0]
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4a0d      	ldr	r2, [pc, #52]	; (8003d48 <prvxMBTCPPortAccept+0xac>)
 8003d12:	490e      	ldr	r1, [pc, #56]	; (8003d4c <prvxMBTCPPortAccept+0xb0>)
 8003d14:	2000      	movs	r0, #0
 8003d16:	f7ff fef5 	bl	8003b04 <vMBPortLog>
#endif

        error = ERR_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	75fb      	strb	r3, [r7, #23]
 8003d1e:	e004      	b.n	8003d2a <prvxMBTCPPortAccept+0x8e>
    }
    else
    {
        prvvMBPortReleaseClient( pxPCB );
 8003d20:	68b8      	ldr	r0, [r7, #8]
 8003d22:	f7ff ff67 	bl	8003bf4 <prvvMBPortReleaseClient>
        error = ERR_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	75fb      	strb	r3, [r7, #23]
    }
    return error;
 8003d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000820 	.word	0x20000820
 8003d3c:	08003d89 	.word	0x08003d89
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	2000092c 	.word	0x2000092c
 8003d48:	08015ef8 	.word	0x08015ef8
 8003d4c:	08015eb8 	.word	0x08015eb8

08003d50 <prvvMBTCPPortError>:

/* Called in case of an unrecoverable error. In any case we drop the client
 * connection. */
void
prvvMBTCPPortError( void *pvArg, err_t xErr )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
    struct tcp_pcb *pxPCB = pvArg;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	60fb      	str	r3, [r7, #12]

    if( pxPCB != NULL )
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <prvvMBTCPPortError+0x26>
    {
#ifdef MB_TCP_DEBUG
        vMBPortLog( MB_LOG_DEBUG, "MBTCP-ERROR", "Error with client connection! Droping it.\r\n" );
 8003d66:	4a06      	ldr	r2, [pc, #24]	; (8003d80 <prvvMBTCPPortError+0x30>)
 8003d68:	4906      	ldr	r1, [pc, #24]	; (8003d84 <prvvMBTCPPortError+0x34>)
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f7ff feca 	bl	8003b04 <vMBPortLog>
#endif
        prvvMBPortReleaseClient( pxPCB );
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7ff ff3f 	bl	8003bf4 <prvvMBPortReleaseClient>
    }
}
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	08015f1c 	.word	0x08015f1c
 8003d84:	08015f48 	.word	0x08015f48

08003d88 <prvxMBTCPPortReceive>:

err_t
prvxMBTCPPortReceive( void *pvArg, struct tcp_pcb *pxPCB, struct pbuf *p, err_t xErr )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	70fb      	strb	r3, [r7, #3]
    USHORT          usLength;

    err_t           error = xErr;
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	75fb      	strb	r3, [r7, #23]

    if( error != ERR_OK )
 8003d9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <prvxMBTCPPortReceive+0x20>
    {
        return error;
 8003da2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003da6:	e064      	b.n	8003e72 <prvxMBTCPPortReceive+0xea>
    }

    /* If pbuf is NULL then remote end has closed connection. */
    if( p == NULL )
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d104      	bne.n	8003db8 <prvxMBTCPPortReceive+0x30>
    {
        prvvMBPortReleaseClient( pxPCB );
 8003dae:	68b8      	ldr	r0, [r7, #8]
 8003db0:	f7ff ff20 	bl	8003bf4 <prvvMBPortReleaseClient>
        return ERR_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	e05c      	b.n	8003e72 <prvxMBTCPPortReceive+0xea>
    }

    /* Acknowledge that we have received the data bytes. */
    tcp_recved( pxPCB, p->len );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	895b      	ldrh	r3, [r3, #10]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	68b8      	ldr	r0, [r7, #8]
 8003dc0:	f007 fa5a 	bl	800b278 <tcp_recved>

    /* Check for internal buffer overflow. In case of an error drop the
     * client. */
    if( ( usTCPBufPos + p->len ) >= MB_TCP_BUF_SIZE )
 8003dc4:	4b2d      	ldr	r3, [pc, #180]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	895b      	ldrh	r3, [r3, #10]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8003dd4:	dd05      	ble.n	8003de2 <prvxMBTCPPortReceive+0x5a>
    {
        prvvMBPortReleaseClient( pxPCB );
 8003dd6:	68b8      	ldr	r0, [r7, #8]
 8003dd8:	f7ff ff0c 	bl	8003bf4 <prvvMBPortReleaseClient>
        error = ERR_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	75fb      	strb	r3, [r7, #23]
 8003de0:	e042      	b.n	8003e68 <prvxMBTCPPortReceive+0xe0>
    }
    else
    {
        memcpy( &aucTCPBuf[usTCPBufPos], p->payload, p->len );
 8003de2:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <prvxMBTCPPortReceive+0xf8>)
 8003dea:	18d0      	adds	r0, r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6859      	ldr	r1, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	895b      	ldrh	r3, [r3, #10]
 8003df4:	461a      	mov	r2, r3
 8003df6:	f011 f80a 	bl	8014e0e <memcpy>
        usTCPBufPos += p->len;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	895a      	ldrh	r2, [r3, #10]
 8003dfe:	4b1f      	ldr	r3, [pc, #124]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	4413      	add	r3, r2
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003e08:	801a      	strh	r2, [r3, #0]

        /* If we have received the MBAP header we can analyze it and calculate
         * the number of bytes left to complete the current request. If complete
         * notify the protocol stack.
         */
        if( usTCPBufPos >= MB_TCP_FUNC )
 8003e0a:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d92a      	bls.n	8003e68 <prvxMBTCPPortReceive+0xe0>
        {
            /* Length is a byte count of Modbus PDU (function code + data) and the
             * unit identifier. */
            usLength = aucTCPBuf[MB_TCP_LEN] << 8U;
 8003e12:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <prvxMBTCPPortReceive+0xf8>)
 8003e14:	791b      	ldrb	r3, [r3, #4]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	82bb      	strh	r3, [r7, #20]
            usLength |= aucTCPBuf[MB_TCP_LEN + 1];
 8003e1c:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <prvxMBTCPPortReceive+0xf8>)
 8003e1e:	795b      	ldrb	r3, [r3, #5]
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	8abb      	ldrh	r3, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	82bb      	strh	r3, [r7, #20]

            /* Is the frame already complete. */
            if( usTCPBufPos < ( MB_TCP_UID + usLength ) )
 8003e28:	8abb      	ldrh	r3, [r7, #20]
 8003e2a:	3305      	adds	r3, #5
 8003e2c:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003e2e:	8812      	ldrh	r2, [r2, #0]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	da19      	bge.n	8003e68 <prvxMBTCPPortReceive+0xe0>
            {
            }
            else if( usTCPBufPos == ( MB_TCP_UID + usLength ) )
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	8abb      	ldrh	r3, [r7, #20]
 8003e3c:	3306      	adds	r3, #6
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d10a      	bne.n	8003e58 <prvxMBTCPPortReceive+0xd0>
            {
#ifdef MB_TCP_DEBUG
                prvvMBTCPLogFrame( "MBTCP-RECV", &aucTCPBuf[0], usTCPBufPos );
 8003e42:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	490d      	ldr	r1, [pc, #52]	; (8003e80 <prvxMBTCPPortReceive+0xf8>)
 8003e4a:	480e      	ldr	r0, [pc, #56]	; (8003e84 <prvxMBTCPPortReceive+0xfc>)
 8003e4c:	f7ff fd84 	bl	8003958 <prvvMBTCPLogFrame>
#endif
                ( void )xMBPortEventPost( EV_FRAME_RECEIVED );
 8003e50:	2001      	movs	r0, #1
 8003e52:	f7ff fd4d 	bl	80038f0 <xMBPortEventPost>
 8003e56:	e007      	b.n	8003e68 <prvxMBTCPPortReceive+0xe0>
            }
            else
            {
#ifdef MB_TCP_DEBUG
                vMBPortLog( MB_LOG_DEBUG, "MBTCP-ERROR",
 8003e58:	4a0b      	ldr	r2, [pc, #44]	; (8003e88 <prvxMBTCPPortReceive+0x100>)
 8003e5a:	490c      	ldr	r1, [pc, #48]	; (8003e8c <prvxMBTCPPortReceive+0x104>)
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f7ff fe51 	bl	8003b04 <vMBPortLog>
                            "Received to many bytes! Droping client.\r\n" );
#endif
                /* This should not happen. We can't deal with such a client and
                 * drop the connection for security reasons.
                 */
                prvvMBPortReleaseClient( pxPCB );
 8003e62:	68b8      	ldr	r0, [r7, #8]
 8003e64:	f7ff fec6 	bl	8003bf4 <prvvMBPortReleaseClient>
            }
        }
    }
    pbuf_free( p );
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f006 faa3 	bl	800a3b4 <pbuf_free>
    return error;
 8003e6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	2000092c 	.word	0x2000092c
 8003e80:	20000824 	.word	0x20000824
 8003e84:	08015f54 	.word	0x08015f54
 8003e88:	08015f60 	.word	0x08015f60
 8003e8c:	08015f48 	.word	0x08015f48

08003e90 <xMBTCPPortGetRequest>:

BOOL
xMBTCPPortGetRequest( UCHAR ** ppucMBTCPFrame, USHORT * usTCPLength )
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
    *ppucMBTCPFrame = &aucTCPBuf[0];
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <xMBTCPPortGetRequest+0x2c>)
 8003e9e:	601a      	str	r2, [r3, #0]
    *usTCPLength = usTCPBufPos;
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <xMBTCPPortGetRequest+0x30>)
 8003ea2:	881a      	ldrh	r2, [r3, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	801a      	strh	r2, [r3, #0]

    /* Reset the buffer. */
    usTCPBufPos = 0;
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <xMBTCPPortGetRequest+0x30>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	801a      	strh	r2, [r3, #0]
    return TRUE;
 8003eae:	2301      	movs	r3, #1
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	20000824 	.word	0x20000824
 8003ec0:	2000092c 	.word	0x2000092c

08003ec4 <xMBTCPPortSendResponse>:

BOOL
xMBTCPPortSendResponse( const UCHAR * pucMBTCPFrame, USHORT usTCPLength )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	807b      	strh	r3, [r7, #2]
    BOOL            bFrameSent = FALSE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	73fb      	strb	r3, [r7, #15]

    if( pxPCBClient )
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <xMBTCPPortSendResponse+0x78>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d02a      	beq.n	8003f32 <xMBTCPPortSendResponse+0x6e>
    {
        /* Make sure we can send the packet. */
        assert( tcp_sndbuf( pxPCBClient ) >= usTCPLength );
 8003edc:	4b17      	ldr	r3, [pc, #92]	; (8003f3c <xMBTCPPortSendResponse+0x78>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003ee4:	887a      	ldrh	r2, [r7, #2]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d906      	bls.n	8003ef8 <xMBTCPPortSendResponse+0x34>
 8003eea:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <xMBTCPPortSendResponse+0x7c>)
 8003eec:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003ef0:	4914      	ldr	r1, [pc, #80]	; (8003f44 <xMBTCPPortSendResponse+0x80>)
 8003ef2:	4815      	ldr	r0, [pc, #84]	; (8003f48 <xMBTCPPortSendResponse+0x84>)
 8003ef4:	f010 fe28 	bl	8014b48 <iprintf>

        if( tcp_write( pxPCBClient, pucMBTCPFrame, ( u16_t ) usTCPLength, NETCONN_COPY ) == ERR_OK )
 8003ef8:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <xMBTCPPortSendResponse+0x78>)
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	887a      	ldrh	r2, [r7, #2]
 8003efe:	2301      	movs	r3, #1
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	f00a ff69 	bl	800edd8 <tcp_write>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10d      	bne.n	8003f28 <xMBTCPPortSendResponse+0x64>
        {
#ifdef MB_TCP_DEBUG
            prvvMBTCPLogFrame( "MBTCP-SENT", &aucTCPBuf[0], usTCPLength );
 8003f0c:	887b      	ldrh	r3, [r7, #2]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	490e      	ldr	r1, [pc, #56]	; (8003f4c <xMBTCPPortSendResponse+0x88>)
 8003f12:	480f      	ldr	r0, [pc, #60]	; (8003f50 <xMBTCPPortSendResponse+0x8c>)
 8003f14:	f7ff fd20 	bl	8003958 <prvvMBTCPLogFrame>
#endif
            /* Make sure data gets sent immediately. */
            ( void )tcp_output( pxPCBClient );
 8003f18:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <xMBTCPPortSendResponse+0x78>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f00b fd45 	bl	800f9ac <tcp_output>
            bFrameSent = TRUE;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
 8003f26:	e004      	b.n	8003f32 <xMBTCPPortSendResponse+0x6e>
        }
        else
        {
            /* Drop the connection in case of an write error. */
            prvvMBPortReleaseClient( pxPCBClient );
 8003f28:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <xMBTCPPortSendResponse+0x78>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fe61 	bl	8003bf4 <prvvMBPortReleaseClient>
        }
    }
    return bFrameSent;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	20000820 	.word	0x20000820
 8003f40:	08015f8c 	.word	0x08015f8c
 8003f44:	08015fb8 	.word	0x08015fb8
 8003f48:	08015fe4 	.word	0x08015fe4
 8003f4c:	20000824 	.word	0x20000824
 8003f50:	0801600c 	.word	0x0801600c

08003f54 <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	80fb      	strh	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff fdef 	bl	8003b48 <xMBTCPPortInit>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <eMBTCPDoInit+0x20>
    {
        eStatus = MB_EPORTERR;
 8003f70:	2303      	movs	r3, #3
 8003f72:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <eMBTCPStart>:

void
eMBTCPStart( void )
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <eMBTCPStop>:

void
eMBTCPStop( void )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 8003f90:	f7ff fe78 	bl	8003c84 <vMBTCPPortDisable>
}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_EIO;
 8003fa4:	2305      	movs	r3, #5
 8003fa6:	77fb      	strb	r3, [r7, #31]
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8003fa8:	f107 0216 	add.w	r2, r7, #22
 8003fac:	f107 0318 	add.w	r3, r7, #24
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff ff6c 	bl	8003e90 <xMBTCPPortGetRequest>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01e      	beq.n	8003ffc <eMBTCPReceive+0x64>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	83bb      	strh	r3, [r7, #28]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	3303      	adds	r3, #3
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	8bbb      	ldrh	r3, [r7, #28]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	83bb      	strh	r3, [r7, #28]

        if( usPID == MB_TCP_PROTOCOL_ID )
 8003fd8:	8bbb      	ldrh	r3, [r7, #28]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d110      	bne.n	8004000 <eMBTCPReceive+0x68>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	1dda      	adds	r2, r3, #7
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	601a      	str	r2, [r3, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 8003fe6:	8afb      	ldrh	r3, [r7, #22]
 8003fe8:	3b07      	subs	r3, #7
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	801a      	strh	r2, [r3, #0]
            eStatus = MB_ENOERR;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	77fb      	strb	r3, [r7, #31]

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	22ff      	movs	r2, #255	; 0xff
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	e001      	b.n	8004000 <eMBTCPReceive+0x68>
        }
    }
    else
    {
        eStatus = MB_EIO;
 8003ffc:	2305      	movs	r3, #5
 8003ffe:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 8004000:	7ffb      	ldrb	r3, [r7, #31]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af00      	add	r7, sp, #0
 8004010:	4603      	mov	r3, r0
 8004012:	6039      	str	r1, [r7, #0]
 8004014:	71fb      	strb	r3, [r7, #7]
 8004016:	4613      	mov	r3, r2
 8004018:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	3b07      	subs	r3, #7
 8004022:	613b      	str	r3, [r7, #16]
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 8004024:	88bb      	ldrh	r3, [r7, #4]
 8004026:	3307      	adds	r3, #7
 8004028:	81fb      	strh	r3, [r7, #14]
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 800402a:	88bb      	ldrh	r3, [r7, #4]
 800402c:	3301      	adds	r3, #1
 800402e:	121a      	asrs	r2, r3, #8
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	3304      	adds	r3, #4
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 8004038:	88bb      	ldrh	r3, [r7, #4]
 800403a:	b2da      	uxtb	r2, r3
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	3305      	adds	r3, #5
 8004040:	3201      	adds	r2, #1
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 8004046:	89fb      	ldrh	r3, [r7, #14]
 8004048:	4619      	mov	r1, r3
 800404a:	6938      	ldr	r0, [r7, #16]
 800404c:	f7ff ff3a 	bl	8003ec4 <xMBTCPPortSendResponse>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <eMBTCPSend+0x50>
    {
        eStatus = MB_EIO;
 8004056:	2305      	movs	r3, #5
 8004058:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800405a:	7dfb      	ldrb	r3, [r7, #23]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <HAL_Init+0x40>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0d      	ldr	r2, [pc, #52]	; (80040a4 <HAL_Init+0x40>)
 800406e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_Init+0x40>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <HAL_Init+0x40>)
 800407a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800407e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004080:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <HAL_Init+0x40>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a07      	ldr	r2, [pc, #28]	; (80040a4 <HAL_Init+0x40>)
 8004086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800408c:	2003      	movs	r0, #3
 800408e:	f000 f94f 	bl	8004330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004092:	200f      	movs	r0, #15
 8004094:	f000 f808 	bl	80040a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004098:	f002 f97b 	bl	8006392 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40023c00 	.word	0x40023c00

080040a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040b0:	4b12      	ldr	r3, [pc, #72]	; (80040fc <HAL_InitTick+0x54>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b12      	ldr	r3, [pc, #72]	; (8004100 <HAL_InitTick+0x58>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040be:	fbb3 f3f1 	udiv	r3, r3, r1
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 f967 	bl	800439a <HAL_SYSTICK_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e00e      	b.n	80040f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b0f      	cmp	r3, #15
 80040da:	d80a      	bhi.n	80040f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040dc:	2200      	movs	r2, #0
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	f04f 30ff 	mov.w	r0, #4294967295
 80040e4:	f000 f92f 	bl	8004346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040e8:	4a06      	ldr	r2, [pc, #24]	; (8004104 <HAL_InitTick+0x5c>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e000      	b.n	80040f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000488 	.word	0x20000488
 8004100:	20000454 	.word	0x20000454
 8004104:	20000450 	.word	0x20000450

08004108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_IncTick+0x20>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_IncTick+0x24>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4413      	add	r3, r2
 8004118:	4a04      	ldr	r2, [pc, #16]	; (800412c <HAL_IncTick+0x24>)
 800411a:	6013      	str	r3, [r2, #0]
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000454 	.word	0x20000454
 800412c:	20000930 	.word	0x20000930

08004130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return uwTick;
 8004134:	4b03      	ldr	r3, [pc, #12]	; (8004144 <HAL_GetTick+0x14>)
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000930 	.word	0x20000930

08004148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004150:	f7ff ffee 	bl	8004130 <HAL_GetTick>
 8004154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004160:	d005      	beq.n	800416e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004162:	4b0a      	ldr	r3, [pc, #40]	; (800418c <HAL_Delay+0x44>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800416e:	bf00      	nop
 8004170:	f7ff ffde 	bl	8004130 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	429a      	cmp	r2, r3
 800417e:	d8f7      	bhi.n	8004170 <HAL_Delay+0x28>
  {
  }
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000454 	.word	0x20000454

08004190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <__NVIC_SetPriorityGrouping+0x44>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041ac:	4013      	ands	r3, r2
 80041ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041c2:	4a04      	ldr	r2, [pc, #16]	; (80041d4 <__NVIC_SetPriorityGrouping+0x44>)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	60d3      	str	r3, [r2, #12]
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041dc:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <__NVIC_GetPriorityGrouping+0x18>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	0a1b      	lsrs	r3, r3, #8
 80041e2:	f003 0307 	and.w	r3, r3, #7
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	e000ed00 	.word	0xe000ed00

080041f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004202:	2b00      	cmp	r3, #0
 8004204:	db0b      	blt.n	800421e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004206:	79fb      	ldrb	r3, [r7, #7]
 8004208:	f003 021f 	and.w	r2, r3, #31
 800420c:	4907      	ldr	r1, [pc, #28]	; (800422c <__NVIC_EnableIRQ+0x38>)
 800420e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	2001      	movs	r0, #1
 8004216:	fa00 f202 	lsl.w	r2, r0, r2
 800421a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	e000e100 	.word	0xe000e100

08004230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	6039      	str	r1, [r7, #0]
 800423a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004240:	2b00      	cmp	r3, #0
 8004242:	db0a      	blt.n	800425a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	490c      	ldr	r1, [pc, #48]	; (800427c <__NVIC_SetPriority+0x4c>)
 800424a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424e:	0112      	lsls	r2, r2, #4
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	440b      	add	r3, r1
 8004254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004258:	e00a      	b.n	8004270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	4908      	ldr	r1, [pc, #32]	; (8004280 <__NVIC_SetPriority+0x50>)
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	3b04      	subs	r3, #4
 8004268:	0112      	lsls	r2, r2, #4
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	440b      	add	r3, r1
 800426e:	761a      	strb	r2, [r3, #24]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	e000e100 	.word	0xe000e100
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004284:	b480      	push	{r7}
 8004286:	b089      	sub	sp, #36	; 0x24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f1c3 0307 	rsb	r3, r3, #7
 800429e:	2b04      	cmp	r3, #4
 80042a0:	bf28      	it	cs
 80042a2:	2304      	movcs	r3, #4
 80042a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3304      	adds	r3, #4
 80042aa:	2b06      	cmp	r3, #6
 80042ac:	d902      	bls.n	80042b4 <NVIC_EncodePriority+0x30>
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	3b03      	subs	r3, #3
 80042b2:	e000      	b.n	80042b6 <NVIC_EncodePriority+0x32>
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b8:	f04f 32ff 	mov.w	r2, #4294967295
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43da      	mvns	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	401a      	ands	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042cc:	f04f 31ff 	mov.w	r1, #4294967295
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	fa01 f303 	lsl.w	r3, r1, r3
 80042d6:	43d9      	mvns	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042dc:	4313      	orrs	r3, r2
         );
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3724      	adds	r7, #36	; 0x24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042fc:	d301      	bcc.n	8004302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042fe:	2301      	movs	r3, #1
 8004300:	e00f      	b.n	8004322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004302:	4a0a      	ldr	r2, [pc, #40]	; (800432c <SysTick_Config+0x40>)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3b01      	subs	r3, #1
 8004308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800430a:	210f      	movs	r1, #15
 800430c:	f04f 30ff 	mov.w	r0, #4294967295
 8004310:	f7ff ff8e 	bl	8004230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <SysTick_Config+0x40>)
 8004316:	2200      	movs	r2, #0
 8004318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800431a:	4b04      	ldr	r3, [pc, #16]	; (800432c <SysTick_Config+0x40>)
 800431c:	2207      	movs	r2, #7
 800431e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	e000e010 	.word	0xe000e010

08004330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff ff29 	bl	8004190 <__NVIC_SetPriorityGrouping>
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004346:	b580      	push	{r7, lr}
 8004348:	b086      	sub	sp, #24
 800434a:	af00      	add	r7, sp, #0
 800434c:	4603      	mov	r3, r0
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
 8004352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004358:	f7ff ff3e 	bl	80041d8 <__NVIC_GetPriorityGrouping>
 800435c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	6978      	ldr	r0, [r7, #20]
 8004364:	f7ff ff8e 	bl	8004284 <NVIC_EncodePriority>
 8004368:	4602      	mov	r2, r0
 800436a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800436e:	4611      	mov	r1, r2
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff ff5d 	bl	8004230 <__NVIC_SetPriority>
}
 8004376:	bf00      	nop
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	4603      	mov	r3, r0
 8004386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff ff31 	bl	80041f4 <__NVIC_EnableIRQ>
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff ffa2 	bl	80042ec <SysTick_Config>
 80043a8:	4603      	mov	r3, r0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043c0:	f7ff feb6 	bl	8004130 <HAL_GetTick>
 80043c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d008      	beq.n	80043e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2280      	movs	r2, #128	; 0x80
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e052      	b.n	800448a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0216 	bic.w	r2, r2, #22
 80043f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695a      	ldr	r2, [r3, #20]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004402:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d103      	bne.n	8004414 <HAL_DMA_Abort+0x62>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0208 	bic.w	r2, r2, #8
 8004422:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004434:	e013      	b.n	800445e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004436:	f7ff fe7b 	bl	8004130 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b05      	cmp	r3, #5
 8004442:	d90c      	bls.n	800445e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2203      	movs	r2, #3
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e015      	b.n	800448a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e4      	bne.n	8004436 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004470:	223f      	movs	r2, #63	; 0x3f
 8004472:	409a      	lsls	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d004      	beq.n	80044b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2280      	movs	r2, #128	; 0x80
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e00c      	b.n	80044ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2205      	movs	r2, #5
 80044b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0201 	bic.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
	...

080044d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e06c      	b.n	80045c4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2223      	movs	r2, #35	; 0x23
 80044f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f004 fa11 	bl	8008924 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	4b31      	ldr	r3, [pc, #196]	; (80045cc <HAL_ETH_Init+0xf4>)
 8004508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450a:	4a30      	ldr	r2, [pc, #192]	; (80045cc <HAL_ETH_Init+0xf4>)
 800450c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004510:	6453      	str	r3, [r2, #68]	; 0x44
 8004512:	4b2e      	ldr	r3, [pc, #184]	; (80045cc <HAL_ETH_Init+0xf4>)
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800451e:	4b2c      	ldr	r3, [pc, #176]	; (80045d0 <HAL_ETH_Init+0xf8>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	4a2b      	ldr	r2, [pc, #172]	; (80045d0 <HAL_ETH_Init+0xf8>)
 8004524:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004528:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800452a:	4b29      	ldr	r3, [pc, #164]	; (80045d0 <HAL_ETH_Init+0xf8>)
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	4927      	ldr	r1, [pc, #156]	; (80045d0 <HAL_ETH_Init+0xf8>)
 8004534:	4313      	orrs	r3, r2
 8004536:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004538:	4b25      	ldr	r3, [pc, #148]	; (80045d0 <HAL_ETH_Init+0xf8>)
 800453a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004552:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004554:	f7ff fdec 	bl	8004130 <HAL_GetTick>
 8004558:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800455a:	e011      	b.n	8004580 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800455c:	f7ff fde8 	bl	8004130 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800456a:	d909      	bls.n	8004580 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2204      	movs	r2, #4
 8004570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	22e0      	movs	r2, #224	; 0xe0
 8004578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e021      	b.n	80045c4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e4      	bne.n	800455c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fdfc 	bl	8005190 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fea3 	bl	80052e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fef9 	bl	8005396 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	461a      	mov	r2, r3
 80045aa:	2100      	movs	r1, #0
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fe61 	bl	8005274 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2210      	movs	r2, #16
 80045be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40013800 	.word	0x40013800

080045d4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e2:	2b10      	cmp	r3, #16
 80045e4:	d150      	bne.n	8004688 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2223      	movs	r2, #35	; 0x23
 80045ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2204      	movs	r2, #4
 80045f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f9fd 	bl	80049f4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0208 	orr.w	r2, r2, #8
 8004608:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004612:	2001      	movs	r0, #1
 8004614:	f7ff fd98 	bl	8004148 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0204 	orr.w	r2, r2, #4
 800462e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004638:	2001      	movs	r0, #1
 800463a:	f7ff fd85 	bl	8004148 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fc42 	bl	8004ed0 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800465e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004662:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	f043 0302 	orr.w	r3, r3, #2
 8004676:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800467a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2223      	movs	r2, #35	; 0x23
 8004680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	e000      	b.n	800468a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
  }
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a0:	2b23      	cmp	r3, #35	; 0x23
 80046a2:	d14a      	bne.n	800473a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2223      	movs	r2, #35	; 0x23
 80046a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046c2:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6812      	ldr	r2, [r2, #0]
 80046d2:	f023 0302 	bic.w	r3, r3, #2
 80046d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046da:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0204 	bic.w	r2, r2, #4
 80046ea:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80046f4:	2001      	movs	r0, #1
 80046f6:	f7ff fd27 	bl	8004148 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fbe4 	bl	8004ed0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0208 	bic.w	r2, r2, #8
 8004716:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004720:	2001      	movs	r0, #1
 8004722:	f7ff fd11 	bl	8004148 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2210      	movs	r2, #16
 8004732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	e000      	b.n	800473c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
  }
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f043 0201 	orr.w	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e07c      	b.n	8004864 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004770:	2b23      	cmp	r3, #35	; 0x23
 8004772:	d176      	bne.n	8004862 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004774:	2200      	movs	r2, #0
 8004776:	68b9      	ldr	r1, [r7, #8]
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 fe79 	bl	8005470 <ETH_Prepare_Tx_Descriptors>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d009      	beq.n	8004798 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478a:	f043 0202 	orr.w	r2, r3, #2
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e065      	b.n	8004864 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004798:	f3bf 8f4f 	dsb	sy
}
 800479c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3206      	adds	r2, #6
 80047a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047aa:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	629a      	str	r2, [r3, #40]	; 0x28
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d904      	bls.n	80047c8 <HAL_ETH_Transmit+0x84>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	1f1a      	subs	r2, r3, #4
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3106      	adds	r1, #6
 80047d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80047d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047dc:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80047de:	f7ff fca7 	bl	8004130 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80047e4:	e037      	b.n	8004856 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d011      	beq.n	800481c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	f043 0208 	orr.w	r2, r3, #8
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e023      	b.n	8004864 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004822:	d018      	beq.n	8004856 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004824:	f7ff fc84 	bl	8004130 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	429a      	cmp	r2, r3
 8004832:	d302      	bcc.n	800483a <HAL_ETH_Transmit+0xf6>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10d      	bne.n	8004856 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f043 0204 	orr.w	r2, r3, #4
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8004850:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e006      	b.n	8004864 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	dbc3      	blt.n	80047e6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	e000      	b.n	8004864 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
  }
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	f043 0201 	orr.w	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0a8      	b.n	80049ea <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800489e:	2b23      	cmp	r3, #35	; 0x23
 80048a0:	d001      	beq.n	80048a6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e0a1      	b.n	80049ea <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048aa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69fa      	ldr	r2, [r7, #28]
 80048b0:	3212      	adds	r2, #18
 80048b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048bc:	f1c3 0304 	rsb	r3, r3, #4
 80048c0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80048c2:	e06a      	b.n	800499a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	699a      	ldr	r2, [r3, #24]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d103      	bne.n	80048f4 <HAL_ETH_ReadData+0x88>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d040      	beq.n	8004976 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00c      	beq.n	8004938 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	0c1b      	lsrs	r3, r3, #16
 8004924:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004928:	3b04      	subs	r3, #4
 800492a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004934:	2301      	movs	r3, #1
 8004936:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004950:	461a      	mov	r2, r3
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	b29b      	uxth	r3, r3
 8004956:	f004 f995 	bl	8008c84 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	441a      	add	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2200      	movs	r2, #0
 8004974:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	3301      	adds	r3, #1
 800497a:	61fb      	str	r3, [r7, #28]
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	2b03      	cmp	r3, #3
 8004980:	d902      	bls.n	8004988 <HAL_ETH_ReadData+0x11c>
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3b04      	subs	r3, #4
 8004986:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	3212      	adds	r2, #18
 800498e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004992:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	3301      	adds	r3, #1
 8004998:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800499e:	2b00      	cmp	r3, #0
 80049a0:	db06      	blt.n	80049b0 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d202      	bcs.n	80049b0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d089      	beq.n	80048c4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	441a      	add	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f815 	bl	80049f4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d108      	bne.n	80049e8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	e000      	b.n	80049ea <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004a00:	2301      	movs	r3, #1
 8004a02:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a08:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	3212      	adds	r2, #18
 8004a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a14:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a1a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004a1c:	e03d      	b.n	8004a9a <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d112      	bne.n	8004a4c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004a26:	f107 0308 	add.w	r3, r7, #8
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f004 f8fa 	bl	8008c24 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d102      	bne.n	8004a3c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	74fb      	strb	r3, [r7, #19]
 8004a3a:	e007      	b.n	8004a4c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	461a      	mov	r2, r3
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d023      	beq.n	8004a9a <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	4a24      	ldr	r2, [pc, #144]	; (8004af0 <ETH_UpdateDescriptor+0xfc>)
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	e003      	b.n	8004a6a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004a68:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d902      	bls.n	8004a88 <ETH_UpdateDescriptor+0x94>
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3b04      	subs	r3, #4
 8004a86:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69fa      	ldr	r2, [r7, #28]
 8004a8c:	3212      	adds	r2, #18
 8004a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a92:	617b      	str	r3, [r7, #20]
      desccount--;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <ETH_UpdateDescriptor+0xb2>
 8004aa0:	7cfb      	ldrb	r3, [r7, #19]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1bb      	bne.n	8004a1e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d01a      	beq.n	8004ae6 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004aba:	f3bf 8f5f 	dmb	sy
}
 8004abe:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6919      	ldr	r1, [r3, #16]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	18ca      	adds	r2, r1, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad8:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004ae6:	bf00      	nop
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	800045f8 	.word	0x800045f8

08004af4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f003 031c 	and.w	r3, r3, #28
 8004b10:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	02db      	lsls	r3, r3, #11
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	019b      	lsls	r3, r3, #6
 8004b22:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f023 0302 	bic.w	r3, r3, #2
 8004b32:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004b44:	f7ff faf4 	bl	8004130 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b4a:	e00d      	b.n	8004b68 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004b4c:	f7ff faf0 	bl	8004130 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5a:	d301      	bcc.n	8004b60 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e010      	b.n	8004b82 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1ec      	bne.n	8004b4c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b086      	sub	sp, #24
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
 8004b96:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 031c 	and.w	r3, r3, #28
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	02db      	lsls	r3, r3, #11
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	019b      	lsls	r3, r3, #6
 8004bb8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f043 0302 	orr.w	r3, r3, #2
 8004bc8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004be4:	f7ff faa4 	bl	8004130 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004bea:	e00d      	b.n	8004c08 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004bec:	f7ff faa0 	bl	8004130 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfa:	d301      	bcc.n	8004c00 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e009      	b.n	8004c14 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1ec      	bne.n	8004bec <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0d9      	b.n	8004de4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	bf14      	ite	ne
 8004c3e:	2301      	movne	r3, #1
 8004c40:	2300      	moveq	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bf0c      	ite	eq
 8004c68:	2301      	moveq	r3, #1
 8004c6a:	2300      	movne	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf14      	ite	ne
 8004c84:	2301      	movne	r3, #1
 8004c86:	2300      	moveq	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf14      	ite	ne
 8004cb8:	2301      	movne	r3, #1
 8004cba:	2300      	moveq	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	bf0c      	ite	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	2300      	movne	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bf14      	ite	ne
 8004d22:	2301      	movne	r3, #1
 8004d24:	2300      	moveq	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	bf14      	ite	ne
 8004d4a:	2301      	movne	r3, #1
 8004d4c:	2300      	moveq	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bf14      	ite	ne
 8004d64:	2301      	movne	r3, #1
 8004d66:	2300      	moveq	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	0c1b      	lsrs	r3, r3, #16
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bf14      	ite	ne
 8004db8:	2301      	movne	r3, #1
 8004dba:	2300      	moveq	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e00b      	b.n	8004e1c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e0a:	2b10      	cmp	r3, #16
 8004e0c:	d105      	bne.n	8004e1a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004e0e:	6839      	ldr	r1, [r7, #0]
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f883 	bl	8004f1c <ETH_SetMACConfig>

    return HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	e000      	b.n	8004e1c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
  }
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 031c 	bic.w	r3, r3, #28
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004e3c:	f001 ff14 	bl	8006c68 <HAL_RCC_GetHCLKFreq>
 8004e40:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <HAL_ETH_SetMDIOClockRange+0x98>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d908      	bls.n	8004e5c <HAL_ETH_SetMDIOClockRange+0x38>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4a1c      	ldr	r2, [pc, #112]	; (8004ec0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d804      	bhi.n	8004e5c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f043 0308 	orr.w	r3, r3, #8
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e027      	b.n	8004eac <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4a18      	ldr	r2, [pc, #96]	; (8004ec0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d908      	bls.n	8004e76 <HAL_ETH_SetMDIOClockRange+0x52>
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d204      	bcs.n	8004e76 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f043 030c 	orr.w	r3, r3, #12
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e01a      	b.n	8004eac <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4a12      	ldr	r2, [pc, #72]	; (8004ec4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d303      	bcc.n	8004e86 <HAL_ETH_SetMDIOClockRange+0x62>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d911      	bls.n	8004eaa <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4a0f      	ldr	r2, [pc, #60]	; (8004ec8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d908      	bls.n	8004ea0 <HAL_ETH_SetMDIOClockRange+0x7c>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4a0e      	ldr	r2, [pc, #56]	; (8004ecc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d804      	bhi.n	8004ea0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f043 0304 	orr.w	r3, r3, #4
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	e005      	b.n	8004eac <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f043 0310 	orr.w	r3, r3, #16
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	e000      	b.n	8004eac <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004eaa:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	611a      	str	r2, [r3, #16]
}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	01312cff 	.word	0x01312cff
 8004ec0:	02160ebf 	.word	0x02160ebf
 8004ec4:	03938700 	.word	0x03938700
 8004ec8:	05f5e0ff 	.word	0x05f5e0ff
 8004ecc:	08f0d17f 	.word	0x08f0d17f

08004ed0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ef2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f00:	2001      	movs	r0, #1
 8004f02:	f7ff f921 	bl	8004148 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f10:	6193      	str	r3, [r2, #24]
}
 8004f12:	bf00      	nop
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4b51      	ldr	r3, [pc, #324]	; (8005078 <ETH_SetMACConfig+0x15c>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	7c1b      	ldrb	r3, [r3, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d102      	bne.n	8004f44 <ETH_SetMACConfig+0x28>
 8004f3e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004f42:	e000      	b.n	8004f46 <ETH_SetMACConfig+0x2a>
 8004f44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	7c5b      	ldrb	r3, [r3, #17]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <ETH_SetMACConfig+0x38>
 8004f4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f52:	e000      	b.n	8004f56 <ETH_SetMACConfig+0x3a>
 8004f54:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f56:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004f5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	7fdb      	ldrb	r3, [r3, #31]
 8004f62:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004f64:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004f6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	7f92      	ldrb	r2, [r2, #30]
 8004f70:	2a00      	cmp	r2, #0
 8004f72:	d102      	bne.n	8004f7a <ETH_SetMACConfig+0x5e>
 8004f74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f78:	e000      	b.n	8004f7c <ETH_SetMACConfig+0x60>
 8004f7a:	2200      	movs	r2, #0
                        macconf->Speed |
 8004f7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	7f1b      	ldrb	r3, [r3, #28]
 8004f82:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004f84:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004f8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	791b      	ldrb	r3, [r3, #4]
 8004f90:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004f92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004f9a:	2a00      	cmp	r2, #0
 8004f9c:	d102      	bne.n	8004fa4 <ETH_SetMACConfig+0x88>
 8004f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fa2:	e000      	b.n	8004fa6 <ETH_SetMACConfig+0x8a>
 8004fa4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004fa6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	7bdb      	ldrb	r3, [r3, #15]
 8004fac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004fae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004fb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fbc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	f7ff f8b6 	bl	8004148 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ffa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005002:	2a00      	cmp	r2, #0
 8005004:	d101      	bne.n	800500a <ETH_SetMACConfig+0xee>
 8005006:	2280      	movs	r2, #128	; 0x80
 8005008:	e000      	b.n	800500c <ETH_SetMACConfig+0xf0>
 800500a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800500c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005012:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800501a:	2a01      	cmp	r2, #1
 800501c:	d101      	bne.n	8005022 <ETH_SetMACConfig+0x106>
 800501e:	2208      	movs	r2, #8
 8005020:	e000      	b.n	8005024 <ETH_SetMACConfig+0x108>
 8005022:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005024:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800502c:	2a01      	cmp	r2, #1
 800502e:	d101      	bne.n	8005034 <ETH_SetMACConfig+0x118>
 8005030:	2204      	movs	r2, #4
 8005032:	e000      	b.n	8005036 <ETH_SetMACConfig+0x11a>
 8005034:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005036:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800503e:	2a01      	cmp	r2, #1
 8005040:	d101      	bne.n	8005046 <ETH_SetMACConfig+0x12a>
 8005042:	2202      	movs	r2, #2
 8005044:	e000      	b.n	8005048 <ETH_SetMACConfig+0x12c>
 8005046:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005048:	4313      	orrs	r3, r2
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005060:	2001      	movs	r0, #1
 8005062:	f7ff f871 	bl	8004148 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	619a      	str	r2, [r3, #24]
}
 800506e:	bf00      	nop
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	ff20810f 	.word	0xff20810f

0800507c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4b3d      	ldr	r3, [pc, #244]	; (800518c <ETH_SetDMAConfig+0x110>)
 8005096:	4013      	ands	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	7b1b      	ldrb	r3, [r3, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <ETH_SetDMAConfig+0x2c>
 80050a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80050a6:	e000      	b.n	80050aa <ETH_SetDMAConfig+0x2e>
 80050a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	7b5b      	ldrb	r3, [r3, #13]
 80050ae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80050b0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	7f52      	ldrb	r2, [r2, #29]
 80050b6:	2a00      	cmp	r2, #0
 80050b8:	d102      	bne.n	80050c0 <ETH_SetDMAConfig+0x44>
 80050ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80050be:	e000      	b.n	80050c2 <ETH_SetDMAConfig+0x46>
 80050c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80050c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	7b9b      	ldrb	r3, [r3, #14]
 80050c8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80050ca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80050d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	7f1b      	ldrb	r3, [r3, #28]
 80050d6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80050d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	7f9b      	ldrb	r3, [r3, #30]
 80050de:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80050e0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80050e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050ee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80050f0:	4313      	orrs	r3, r2
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005100:	461a      	mov	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005112:	2001      	movs	r0, #1
 8005114:	f7ff f818 	bl	8004148 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005120:	461a      	mov	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	791b      	ldrb	r3, [r3, #4]
 800512a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005130:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005136:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800513c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005144:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005146:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800514e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005154:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800515e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005162:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005170:	2001      	movs	r0, #1
 8005172:	f7fe ffe9 	bl	8004148 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517e:	461a      	mov	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6013      	str	r3, [r2, #0]
}
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	f8de3f23 	.word	0xf8de3f23

08005190 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b0a6      	sub	sp, #152	; 0x98
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005198:	2301      	movs	r3, #1
 800519a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800519e:	2301      	movs	r3, #1
 80051a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80051a4:	2300      	movs	r3, #0
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80051b4:	2300      	movs	r3, #0
 80051b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80051ba:	2301      	movs	r3, #1
 80051bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80051c0:	2300      	movs	r3, #0
 80051c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80051cc:	2300      	movs	r3, #0
 80051ce:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80051d0:	2300      	movs	r3, #0
 80051d2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80051da:	2300      	movs	r3, #0
 80051dc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80051e0:	2300      	movs	r3, #0
 80051e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80051e6:	2300      	movs	r3, #0
 80051e8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80051ec:	2300      	movs	r3, #0
 80051ee:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80051f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051f6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80051f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80051fe:	2300      	movs	r3, #0
 8005200:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005204:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005208:	4619      	mov	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff fe86 	bl	8004f1c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005210:	2301      	movs	r3, #1
 8005212:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005214:	2301      	movs	r3, #1
 8005216:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005218:	2301      	movs	r3, #1
 800521a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800521e:	2301      	movs	r3, #1
 8005220:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005226:	2300      	movs	r3, #0
 8005228:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800522c:	2300      	movs	r3, #0
 800522e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005232:	2300      	movs	r3, #0
 8005234:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800523c:	2301      	movs	r3, #1
 800523e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005244:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005246:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800524a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800524c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005250:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005252:	2301      	movs	r3, #1
 8005254:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005258:	2300      	movs	r3, #0
 800525a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800525c:	2300      	movs	r3, #0
 800525e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005260:	f107 0308 	add.w	r3, r7, #8
 8005264:	4619      	mov	r1, r3
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff ff08 	bl	800507c <ETH_SetDMAConfig>
}
 800526c:	bf00      	nop
 800526e:	3798      	adds	r7, #152	; 0x98
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3305      	adds	r3, #5
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	3204      	adds	r2, #4
 800528c:	7812      	ldrb	r2, [r2, #0]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	4b11      	ldr	r3, [pc, #68]	; (80052dc <ETH_MACAddressConfig+0x68>)
 8005296:	4413      	add	r3, r2
 8005298:	461a      	mov	r2, r3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3303      	adds	r3, #3
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	061a      	lsls	r2, r3, #24
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3302      	adds	r3, #2
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	041b      	lsls	r3, r3, #16
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3301      	adds	r3, #1
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	4313      	orrs	r3, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	7812      	ldrb	r2, [r2, #0]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <ETH_MACAddressConfig+0x6c>)
 80052c6:	4413      	add	r3, r2
 80052c8:	461a      	mov	r2, r3
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	6013      	str	r3, [r2, #0]
}
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40028040 	.word	0x40028040
 80052e0:	40028044 	.word	0x40028044

080052e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e03e      	b.n	8005370 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68d9      	ldr	r1, [r3, #12]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	440b      	add	r3, r1
 8005302:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2200      	movs	r2, #0
 800530e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2200      	movs	r2, #0
 8005314:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2200      	movs	r2, #0
 800531a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	3206      	adds	r2, #6
 8005324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d80c      	bhi.n	8005354 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68d9      	ldr	r1, [r3, #12]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	440b      	add	r3, r1
 800534c:	461a      	mov	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	60da      	str	r2, [r3, #12]
 8005352:	e004      	b.n	800535e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	461a      	mov	r2, r3
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3301      	adds	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b03      	cmp	r3, #3
 8005374:	d9bd      	bls.n	80052f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005388:	611a      	str	r2, [r3, #16]
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e046      	b.n	8005432 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6919      	ldr	r1, [r3, #16]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	440b      	add	r3, r1
 80053b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2200      	movs	r2, #0
 80053c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2200      	movs	r2, #0
 80053c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2200      	movs	r2, #0
 80053cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2200      	movs	r2, #0
 80053d2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2200      	movs	r2, #0
 80053d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053e0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80053e8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	3212      	adds	r2, #18
 80053fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d80c      	bhi.n	8005422 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6919      	ldr	r1, [r3, #16]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	4613      	mov	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	440b      	add	r3, r1
 800541a:	461a      	mov	r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	60da      	str	r2, [r3, #12]
 8005420:	e004      	b.n	800542c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	461a      	mov	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3301      	adds	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d9b5      	bls.n	80053a4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005462:	60da      	str	r2, [r3, #12]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005470:	b480      	push	{r7}
 8005472:	b08d      	sub	sp, #52	; 0x34
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3318      	adds	r3, #24
 8005480:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054b2:	d007      	beq.n	80054c4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	3304      	adds	r3, #4
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80054c4:	2302      	movs	r3, #2
 80054c6:	e103      	b.n	80056d0 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	3301      	adds	r3, #1
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80054e0:	f023 031f 	bic.w	r3, r3, #31
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	6852      	ldr	r2, [r2, #4]
 80054e8:	431a      	orrs	r2, r3
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d008      	beq.n	800550c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	431a      	orrs	r2, r3
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	431a      	orrs	r2, r3
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800554e:	f3bf 8f5f 	dmb	sy
}
 8005552:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005560:	e084      	b.n	800566c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d006      	beq.n	8005582 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	e005      	b.n	800558e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	3301      	adds	r3, #1
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	2b03      	cmp	r3, #3
 8005598:	d902      	bls.n	80055a0 <ETH_Prepare_Tx_Descriptors+0x130>
 800559a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559c:	3b04      	subs	r3, #4
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055c2:	d007      	beq.n	80055d4 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c8:	3304      	adds	r3, #4
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d029      	beq.n	8005628 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80055e2:	2300      	movs	r3, #0
 80055e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e6:	e019      	b.n	800561c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80055e8:	f3bf 8f5f 	dmb	sy
}
 80055ec:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80055fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fc:	3301      	adds	r3, #1
 80055fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	2b03      	cmp	r3, #3
 8005604:	d902      	bls.n	800560c <ETH_Prepare_Tx_Descriptors+0x19c>
 8005606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005608:	3b04      	subs	r3, #4
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005614:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	3301      	adds	r3, #1
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
 800561c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	429a      	cmp	r2, r3
 8005622:	d3e1      	bcc.n	80055e8 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8005624:	2302      	movs	r3, #2
 8005626:	e053      	b.n	80056d0 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	3301      	adds	r3, #1
 800562c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8005646:	f023 031f 	bic.w	r3, r3, #31
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	6852      	ldr	r2, [r2, #4]
 800564e:	431a      	orrs	r2, r3
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	3301      	adds	r3, #1
 8005658:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800565a:	f3bf 8f5f 	dmb	sy
}
 800565e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	f47f af76 	bne.w	8005562 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d006      	beq.n	800568a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	e005      	b.n	8005696 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056a6:	6979      	ldr	r1, [r7, #20]
 80056a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056aa:	3304      	adds	r3, #4
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80056b8:	b672      	cpsid	i
}
 80056ba:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	4413      	add	r3, r2
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80056ca:	b662      	cpsie	i
}
 80056cc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3734      	adds	r7, #52	; 0x34
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056dc:	b480      	push	{r7}
 80056de:	b089      	sub	sp, #36	; 0x24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056f2:	2300      	movs	r3, #0
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	e16b      	b.n	80059d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056f8:	2201      	movs	r2, #1
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4013      	ands	r3, r2
 800570a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	429a      	cmp	r2, r3
 8005712:	f040 815a 	bne.w	80059ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	2b01      	cmp	r3, #1
 8005720:	d005      	beq.n	800572e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800572a:	2b02      	cmp	r3, #2
 800572c:	d130      	bne.n	8005790 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	2203      	movs	r2, #3
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43db      	mvns	r3, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4013      	ands	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4313      	orrs	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005764:	2201      	movs	r2, #1
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	43db      	mvns	r3, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4013      	ands	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	091b      	lsrs	r3, r3, #4
 800577a:	f003 0201 	and.w	r2, r3, #1
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4313      	orrs	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	2b03      	cmp	r3, #3
 800579a:	d017      	beq.n	80057cc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	2203      	movs	r2, #3
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	43db      	mvns	r3, r3
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	4013      	ands	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f003 0303 	and.w	r3, r3, #3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d123      	bne.n	8005820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	08da      	lsrs	r2, r3, #3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3208      	adds	r2, #8
 80057e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	220f      	movs	r2, #15
 80057f0:	fa02 f303 	lsl.w	r3, r2, r3
 80057f4:	43db      	mvns	r3, r3
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	4013      	ands	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4313      	orrs	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	08da      	lsrs	r2, r3, #3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3208      	adds	r2, #8
 800581a:	69b9      	ldr	r1, [r7, #24]
 800581c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	2203      	movs	r2, #3
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	4013      	ands	r3, r2
 8005836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 0203 	and.w	r2, r3, #3
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	4313      	orrs	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80b4 	beq.w	80059ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	4b60      	ldr	r3, [pc, #384]	; (80059e8 <HAL_GPIO_Init+0x30c>)
 8005868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586a:	4a5f      	ldr	r2, [pc, #380]	; (80059e8 <HAL_GPIO_Init+0x30c>)
 800586c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005870:	6453      	str	r3, [r2, #68]	; 0x44
 8005872:	4b5d      	ldr	r3, [pc, #372]	; (80059e8 <HAL_GPIO_Init+0x30c>)
 8005874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800587e:	4a5b      	ldr	r2, [pc, #364]	; (80059ec <HAL_GPIO_Init+0x310>)
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	089b      	lsrs	r3, r3, #2
 8005884:	3302      	adds	r3, #2
 8005886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	220f      	movs	r2, #15
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	43db      	mvns	r3, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4013      	ands	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a52      	ldr	r2, [pc, #328]	; (80059f0 <HAL_GPIO_Init+0x314>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d02b      	beq.n	8005902 <HAL_GPIO_Init+0x226>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a51      	ldr	r2, [pc, #324]	; (80059f4 <HAL_GPIO_Init+0x318>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d025      	beq.n	80058fe <HAL_GPIO_Init+0x222>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a50      	ldr	r2, [pc, #320]	; (80059f8 <HAL_GPIO_Init+0x31c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01f      	beq.n	80058fa <HAL_GPIO_Init+0x21e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a4f      	ldr	r2, [pc, #316]	; (80059fc <HAL_GPIO_Init+0x320>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d019      	beq.n	80058f6 <HAL_GPIO_Init+0x21a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a4e      	ldr	r2, [pc, #312]	; (8005a00 <HAL_GPIO_Init+0x324>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <HAL_GPIO_Init+0x216>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a4d      	ldr	r2, [pc, #308]	; (8005a04 <HAL_GPIO_Init+0x328>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00d      	beq.n	80058ee <HAL_GPIO_Init+0x212>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a4c      	ldr	r2, [pc, #304]	; (8005a08 <HAL_GPIO_Init+0x32c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d007      	beq.n	80058ea <HAL_GPIO_Init+0x20e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a4b      	ldr	r2, [pc, #300]	; (8005a0c <HAL_GPIO_Init+0x330>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d101      	bne.n	80058e6 <HAL_GPIO_Init+0x20a>
 80058e2:	2307      	movs	r3, #7
 80058e4:	e00e      	b.n	8005904 <HAL_GPIO_Init+0x228>
 80058e6:	2308      	movs	r3, #8
 80058e8:	e00c      	b.n	8005904 <HAL_GPIO_Init+0x228>
 80058ea:	2306      	movs	r3, #6
 80058ec:	e00a      	b.n	8005904 <HAL_GPIO_Init+0x228>
 80058ee:	2305      	movs	r3, #5
 80058f0:	e008      	b.n	8005904 <HAL_GPIO_Init+0x228>
 80058f2:	2304      	movs	r3, #4
 80058f4:	e006      	b.n	8005904 <HAL_GPIO_Init+0x228>
 80058f6:	2303      	movs	r3, #3
 80058f8:	e004      	b.n	8005904 <HAL_GPIO_Init+0x228>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e002      	b.n	8005904 <HAL_GPIO_Init+0x228>
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <HAL_GPIO_Init+0x228>
 8005902:	2300      	movs	r3, #0
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	f002 0203 	and.w	r2, r2, #3
 800590a:	0092      	lsls	r2, r2, #2
 800590c:	4093      	lsls	r3, r2
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	4313      	orrs	r3, r2
 8005912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005914:	4935      	ldr	r1, [pc, #212]	; (80059ec <HAL_GPIO_Init+0x310>)
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	089b      	lsrs	r3, r3, #2
 800591a:	3302      	adds	r3, #2
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005922:	4b3b      	ldr	r3, [pc, #236]	; (8005a10 <HAL_GPIO_Init+0x334>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	43db      	mvns	r3, r3
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	4013      	ands	r3, r2
 8005930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005946:	4a32      	ldr	r2, [pc, #200]	; (8005a10 <HAL_GPIO_Init+0x334>)
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800594c:	4b30      	ldr	r3, [pc, #192]	; (8005a10 <HAL_GPIO_Init+0x334>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	43db      	mvns	r3, r3
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	4013      	ands	r3, r2
 800595a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005970:	4a27      	ldr	r2, [pc, #156]	; (8005a10 <HAL_GPIO_Init+0x334>)
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005976:	4b26      	ldr	r3, [pc, #152]	; (8005a10 <HAL_GPIO_Init+0x334>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	43db      	mvns	r3, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4013      	ands	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	4313      	orrs	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800599a:	4a1d      	ldr	r2, [pc, #116]	; (8005a10 <HAL_GPIO_Init+0x334>)
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059a0:	4b1b      	ldr	r3, [pc, #108]	; (8005a10 <HAL_GPIO_Init+0x334>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	43db      	mvns	r3, r3
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	4013      	ands	r3, r2
 80059ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059c4:	4a12      	ldr	r2, [pc, #72]	; (8005a10 <HAL_GPIO_Init+0x334>)
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	3301      	adds	r3, #1
 80059ce:	61fb      	str	r3, [r7, #28]
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	2b0f      	cmp	r3, #15
 80059d4:	f67f ae90 	bls.w	80056f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	3724      	adds	r7, #36	; 0x24
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	40023800 	.word	0x40023800
 80059ec:	40013800 	.word	0x40013800
 80059f0:	40020000 	.word	0x40020000
 80059f4:	40020400 	.word	0x40020400
 80059f8:	40020800 	.word	0x40020800
 80059fc:	40020c00 	.word	0x40020c00
 8005a00:	40021000 	.word	0x40021000
 8005a04:	40021400 	.word	0x40021400
 8005a08:	40021800 	.word	0x40021800
 8005a0c:	40021c00 	.word	0x40021c00
 8005a10:	40013c00 	.word	0x40013c00

08005a14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	887b      	ldrh	r3, [r7, #2]
 8005a26:	4013      	ands	r3, r2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	73fb      	strb	r3, [r7, #15]
 8005a30:	e001      	b.n	8005a36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a32:	2300      	movs	r3, #0
 8005a34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	807b      	strh	r3, [r7, #2]
 8005a50:	4613      	mov	r3, r2
 8005a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a54:	787b      	ldrb	r3, [r7, #1]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a5a:	887a      	ldrh	r2, [r7, #2]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a60:	e003      	b.n	8005a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a62:	887b      	ldrh	r3, [r7, #2]
 8005a64:	041a      	lsls	r2, r3, #16
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	619a      	str	r2, [r3, #24]
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b085      	sub	sp, #20
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a88:	887a      	ldrh	r2, [r7, #2]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	041a      	lsls	r2, r3, #16
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	43d9      	mvns	r1, r3
 8005a94:	887b      	ldrh	r3, [r7, #2]
 8005a96:	400b      	ands	r3, r1
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	619a      	str	r2, [r3, #24]
}
 8005a9e:	bf00      	nop
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
	...

08005aac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ab6:	4b08      	ldr	r3, [pc, #32]	; (8005ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ab8:	695a      	ldr	r2, [r3, #20]
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	4013      	ands	r3, r2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d006      	beq.n	8005ad0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ac2:	4a05      	ldr	r2, [pc, #20]	; (8005ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ac4:	88fb      	ldrh	r3, [r7, #6]
 8005ac6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ac8:	88fb      	ldrh	r3, [r7, #6]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f00e fce2 	bl	8014494 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ad0:	bf00      	nop
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40013c00 	.word	0x40013c00

08005adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e12b      	b.n	8005d46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f00d fb4c 	bl	80131a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2224      	movs	r2, #36	; 0x24
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0201 	bic.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b40:	f001 f89e 	bl	8006c80 <HAL_RCC_GetPCLK1Freq>
 8005b44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	4a81      	ldr	r2, [pc, #516]	; (8005d50 <HAL_I2C_Init+0x274>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d807      	bhi.n	8005b60 <HAL_I2C_Init+0x84>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4a80      	ldr	r2, [pc, #512]	; (8005d54 <HAL_I2C_Init+0x278>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	bf94      	ite	ls
 8005b58:	2301      	movls	r3, #1
 8005b5a:	2300      	movhi	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	e006      	b.n	8005b6e <HAL_I2C_Init+0x92>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4a7d      	ldr	r2, [pc, #500]	; (8005d58 <HAL_I2C_Init+0x27c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	bf94      	ite	ls
 8005b68:	2301      	movls	r3, #1
 8005b6a:	2300      	movhi	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e0e7      	b.n	8005d46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4a78      	ldr	r2, [pc, #480]	; (8005d5c <HAL_I2C_Init+0x280>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	0c9b      	lsrs	r3, r3, #18
 8005b80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	4a6a      	ldr	r2, [pc, #424]	; (8005d50 <HAL_I2C_Init+0x274>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d802      	bhi.n	8005bb0 <HAL_I2C_Init+0xd4>
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	3301      	adds	r3, #1
 8005bae:	e009      	b.n	8005bc4 <HAL_I2C_Init+0xe8>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bb6:	fb02 f303 	mul.w	r3, r2, r3
 8005bba:	4a69      	ldr	r2, [pc, #420]	; (8005d60 <HAL_I2C_Init+0x284>)
 8005bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc0:	099b      	lsrs	r3, r3, #6
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005bd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	495c      	ldr	r1, [pc, #368]	; (8005d50 <HAL_I2C_Init+0x274>)
 8005be0:	428b      	cmp	r3, r1
 8005be2:	d819      	bhi.n	8005c18 <HAL_I2C_Init+0x13c>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	1e59      	subs	r1, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bf2:	1c59      	adds	r1, r3, #1
 8005bf4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bf8:	400b      	ands	r3, r1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <HAL_I2C_Init+0x138>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1e59      	subs	r1, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c12:	e051      	b.n	8005cb8 <HAL_I2C_Init+0x1dc>
 8005c14:	2304      	movs	r3, #4
 8005c16:	e04f      	b.n	8005cb8 <HAL_I2C_Init+0x1dc>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d111      	bne.n	8005c44 <HAL_I2C_Init+0x168>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1e58      	subs	r0, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6859      	ldr	r1, [r3, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	440b      	add	r3, r1
 8005c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c32:	3301      	adds	r3, #1
 8005c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bf0c      	ite	eq
 8005c3c:	2301      	moveq	r3, #1
 8005c3e:	2300      	movne	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	e012      	b.n	8005c6a <HAL_I2C_Init+0x18e>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	1e58      	subs	r0, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6859      	ldr	r1, [r3, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	440b      	add	r3, r1
 8005c52:	0099      	lsls	r1, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bf0c      	ite	eq
 8005c64:	2301      	moveq	r3, #1
 8005c66:	2300      	movne	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <HAL_I2C_Init+0x196>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e022      	b.n	8005cb8 <HAL_I2C_Init+0x1dc>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10e      	bne.n	8005c98 <HAL_I2C_Init+0x1bc>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1e58      	subs	r0, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6859      	ldr	r1, [r3, #4]
 8005c82:	460b      	mov	r3, r1
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	440b      	add	r3, r1
 8005c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c96:	e00f      	b.n	8005cb8 <HAL_I2C_Init+0x1dc>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	1e58      	subs	r0, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6859      	ldr	r1, [r3, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	0099      	lsls	r1, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cae:	3301      	adds	r3, #1
 8005cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	6809      	ldr	r1, [r1, #0]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ce6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6911      	ldr	r1, [r2, #16]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	68d2      	ldr	r2, [r2, #12]
 8005cf2:	4311      	orrs	r1, r2
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695a      	ldr	r2, [r3, #20]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	000186a0 	.word	0x000186a0
 8005d54:	001e847f 	.word	0x001e847f
 8005d58:	003d08ff 	.word	0x003d08ff
 8005d5c:	431bde83 	.word	0x431bde83
 8005d60:	10624dd3 	.word	0x10624dd3

08005d64 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b088      	sub	sp, #32
 8005d68:	af02      	add	r7, sp, #8
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	4608      	mov	r0, r1
 8005d6e:	4611      	mov	r1, r2
 8005d70:	461a      	mov	r2, r3
 8005d72:	4603      	mov	r3, r0
 8005d74:	817b      	strh	r3, [r7, #10]
 8005d76:	460b      	mov	r3, r1
 8005d78:	813b      	strh	r3, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d7e:	f7fe f9d7 	bl	8004130 <HAL_GetTick>
 8005d82:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	f040 80d9 	bne.w	8005f44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	2319      	movs	r3, #25
 8005d98:	2201      	movs	r2, #1
 8005d9a:	496d      	ldr	r1, [pc, #436]	; (8005f50 <HAL_I2C_Mem_Write+0x1ec>)
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 f971 	bl	8006084 <I2C_WaitOnFlagUntilTimeout>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005da8:	2302      	movs	r3, #2
 8005daa:	e0cc      	b.n	8005f46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_I2C_Mem_Write+0x56>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e0c5      	b.n	8005f46 <HAL_I2C_Mem_Write+0x1e2>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d007      	beq.n	8005de0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0201 	orr.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2221      	movs	r2, #33	; 0x21
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2240      	movs	r2, #64	; 0x40
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a3a      	ldr	r2, [r7, #32]
 8005e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4a4d      	ldr	r2, [pc, #308]	; (8005f54 <HAL_I2C_Mem_Write+0x1f0>)
 8005e20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e22:	88f8      	ldrh	r0, [r7, #6]
 8005e24:	893a      	ldrh	r2, [r7, #8]
 8005e26:	8979      	ldrh	r1, [r7, #10]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	9301      	str	r3, [sp, #4]
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	4603      	mov	r3, r0
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f890 	bl	8005f58 <I2C_RequestMemoryWrite>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d052      	beq.n	8005ee4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e081      	b.n	8005f46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f9f2 	bl	8006230 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00d      	beq.n	8005e6e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d107      	bne.n	8005e6a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e06b      	b.n	8005f46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	781a      	ldrb	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d11b      	bne.n	8005ee4 <HAL_I2C_Mem_Write+0x180>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d017      	beq.n	8005ee4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	781a      	ldrb	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1aa      	bne.n	8005e42 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 f9de 	bl	80062b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00d      	beq.n	8005f18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d107      	bne.n	8005f14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e016      	b.n	8005f46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e000      	b.n	8005f46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f44:	2302      	movs	r3, #2
  }
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	00100002 	.word	0x00100002
 8005f54:	ffff0000 	.word	0xffff0000

08005f58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af02      	add	r7, sp, #8
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	4608      	mov	r0, r1
 8005f62:	4611      	mov	r1, r2
 8005f64:	461a      	mov	r2, r3
 8005f66:	4603      	mov	r3, r0
 8005f68:	817b      	strh	r3, [r7, #10]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	813b      	strh	r3, [r7, #8]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f878 	bl	8006084 <I2C_WaitOnFlagUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00d      	beq.n	8005fb6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa8:	d103      	bne.n	8005fb2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e05f      	b.n	8006076 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fb6:	897b      	ldrh	r3, [r7, #10]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	6a3a      	ldr	r2, [r7, #32]
 8005fca:	492d      	ldr	r1, [pc, #180]	; (8006080 <I2C_RequestMemoryWrite+0x128>)
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f8b0 	bl	8006132 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e04c      	b.n	8006076 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff4:	6a39      	ldr	r1, [r7, #32]
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 f91a 	bl	8006230 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00d      	beq.n	800601e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	2b04      	cmp	r3, #4
 8006008:	d107      	bne.n	800601a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006018:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e02b      	b.n	8006076 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d105      	bne.n	8006030 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006024:	893b      	ldrh	r3, [r7, #8]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	611a      	str	r2, [r3, #16]
 800602e:	e021      	b.n	8006074 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006030:	893b      	ldrh	r3, [r7, #8]
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	b29b      	uxth	r3, r3
 8006036:	b2da      	uxtb	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800603e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006040:	6a39      	ldr	r1, [r7, #32]
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f8f4 	bl	8006230 <I2C_WaitOnTXEFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00d      	beq.n	800606a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	2b04      	cmp	r3, #4
 8006054:	d107      	bne.n	8006066 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006064:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e005      	b.n	8006076 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800606a:	893b      	ldrh	r3, [r7, #8]
 800606c:	b2da      	uxtb	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	00010002 	.word	0x00010002

08006084 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	4613      	mov	r3, r2
 8006092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006094:	e025      	b.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d021      	beq.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609e:	f7fe f847 	bl	8004130 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d302      	bcc.n	80060b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d116      	bne.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f043 0220 	orr.w	r2, r3, #32
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e023      	b.n	800612a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	0c1b      	lsrs	r3, r3, #16
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d10d      	bne.n	8006108 <I2C_WaitOnFlagUntilTimeout+0x84>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	43da      	mvns	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	4013      	ands	r3, r2
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	bf0c      	ite	eq
 80060fe:	2301      	moveq	r3, #1
 8006100:	2300      	movne	r3, #0
 8006102:	b2db      	uxtb	r3, r3
 8006104:	461a      	mov	r2, r3
 8006106:	e00c      	b.n	8006122 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	43da      	mvns	r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	4013      	ands	r3, r2
 8006114:	b29b      	uxth	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	bf0c      	ite	eq
 800611a:	2301      	moveq	r3, #1
 800611c:	2300      	movne	r3, #0
 800611e:	b2db      	uxtb	r3, r3
 8006120:	461a      	mov	r2, r3
 8006122:	79fb      	ldrb	r3, [r7, #7]
 8006124:	429a      	cmp	r2, r3
 8006126:	d0b6      	beq.n	8006096 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	607a      	str	r2, [r7, #4]
 800613e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006140:	e051      	b.n	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006150:	d123      	bne.n	800619a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006160:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800616a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	f043 0204 	orr.w	r2, r3, #4
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e046      	b.n	8006228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a0:	d021      	beq.n	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a2:	f7fd ffc5 	bl	8004130 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d302      	bcc.n	80061b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d116      	bne.n	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f043 0220 	orr.w	r2, r3, #32
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e020      	b.n	8006228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10c      	bne.n	800620a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	43da      	mvns	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4013      	ands	r3, r2
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	bf14      	ite	ne
 8006202:	2301      	movne	r3, #1
 8006204:	2300      	moveq	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	e00b      	b.n	8006222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	43da      	mvns	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4013      	ands	r3, r2
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d18d      	bne.n	8006142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800623c:	e02d      	b.n	800629a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f878 	bl	8006334 <I2C_IsAcknowledgeFailed>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e02d      	b.n	80062aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d021      	beq.n	800629a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006256:	f7fd ff6b 	bl	8004130 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	429a      	cmp	r2, r3
 8006264:	d302      	bcc.n	800626c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d116      	bne.n	800629a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	f043 0220 	orr.w	r2, r3, #32
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e007      	b.n	80062aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a4:	2b80      	cmp	r3, #128	; 0x80
 80062a6:	d1ca      	bne.n	800623e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062be:	e02d      	b.n	800631c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f837 	bl	8006334 <I2C_IsAcknowledgeFailed>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e02d      	b.n	800632c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d6:	d021      	beq.n	800631c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d8:	f7fd ff2a 	bl	8004130 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d302      	bcc.n	80062ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d116      	bne.n	800631c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e007      	b.n	800632c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b04      	cmp	r3, #4
 8006328:	d1ca      	bne.n	80062c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800634a:	d11b      	bne.n	8006384 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006354:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	f043 0204 	orr.w	r2, r3, #4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e000      	b.n	8006386 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8006392:	b480      	push	{r7}
 8006394:	af00      	add	r7, sp, #0

}
 8006396:	bf00      	nop
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e267      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d075      	beq.n	80064aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063be:	4b88      	ldr	r3, [pc, #544]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 030c 	and.w	r3, r3, #12
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d00c      	beq.n	80063e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063ca:	4b85      	ldr	r3, [pc, #532]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063d2:	2b08      	cmp	r3, #8
 80063d4:	d112      	bne.n	80063fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063d6:	4b82      	ldr	r3, [pc, #520]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063e2:	d10b      	bne.n	80063fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e4:	4b7e      	ldr	r3, [pc, #504]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d05b      	beq.n	80064a8 <HAL_RCC_OscConfig+0x108>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d157      	bne.n	80064a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e242      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006404:	d106      	bne.n	8006414 <HAL_RCC_OscConfig+0x74>
 8006406:	4b76      	ldr	r3, [pc, #472]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a75      	ldr	r2, [pc, #468]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 800640c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	e01d      	b.n	8006450 <HAL_RCC_OscConfig+0xb0>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800641c:	d10c      	bne.n	8006438 <HAL_RCC_OscConfig+0x98>
 800641e:	4b70      	ldr	r3, [pc, #448]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a6f      	ldr	r2, [pc, #444]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 8006424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	4b6d      	ldr	r3, [pc, #436]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a6c      	ldr	r2, [pc, #432]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 8006430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	e00b      	b.n	8006450 <HAL_RCC_OscConfig+0xb0>
 8006438:	4b69      	ldr	r3, [pc, #420]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a68      	ldr	r2, [pc, #416]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 800643e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	4b66      	ldr	r3, [pc, #408]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a65      	ldr	r2, [pc, #404]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 800644a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800644e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d013      	beq.n	8006480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006458:	f7fd fe6a 	bl	8004130 <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006460:	f7fd fe66 	bl	8004130 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b64      	cmp	r3, #100	; 0x64
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e207      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006472:	4b5b      	ldr	r3, [pc, #364]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f0      	beq.n	8006460 <HAL_RCC_OscConfig+0xc0>
 800647e:	e014      	b.n	80064aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006480:	f7fd fe56 	bl	8004130 <HAL_GetTick>
 8006484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006488:	f7fd fe52 	bl	8004130 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b64      	cmp	r3, #100	; 0x64
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e1f3      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800649a:	4b51      	ldr	r3, [pc, #324]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1f0      	bne.n	8006488 <HAL_RCC_OscConfig+0xe8>
 80064a6:	e000      	b.n	80064aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d063      	beq.n	800657e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064b6:	4b4a      	ldr	r3, [pc, #296]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 030c 	and.w	r3, r3, #12
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00b      	beq.n	80064da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064c2:	4b47      	ldr	r3, [pc, #284]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064ca:	2b08      	cmp	r3, #8
 80064cc:	d11c      	bne.n	8006508 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064ce:	4b44      	ldr	r3, [pc, #272]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d116      	bne.n	8006508 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064da:	4b41      	ldr	r3, [pc, #260]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <HAL_RCC_OscConfig+0x152>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d001      	beq.n	80064f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e1c7      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f2:	4b3b      	ldr	r3, [pc, #236]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	4937      	ldr	r1, [pc, #220]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 8006502:	4313      	orrs	r3, r2
 8006504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006506:	e03a      	b.n	800657e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d020      	beq.n	8006552 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006510:	4b34      	ldr	r3, [pc, #208]	; (80065e4 <HAL_RCC_OscConfig+0x244>)
 8006512:	2201      	movs	r2, #1
 8006514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006516:	f7fd fe0b 	bl	8004130 <HAL_GetTick>
 800651a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800651e:	f7fd fe07 	bl	8004130 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e1a8      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006530:	4b2b      	ldr	r3, [pc, #172]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f0      	beq.n	800651e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800653c:	4b28      	ldr	r3, [pc, #160]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	4925      	ldr	r1, [pc, #148]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 800654c:	4313      	orrs	r3, r2
 800654e:	600b      	str	r3, [r1, #0]
 8006550:	e015      	b.n	800657e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006552:	4b24      	ldr	r3, [pc, #144]	; (80065e4 <HAL_RCC_OscConfig+0x244>)
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006558:	f7fd fdea 	bl	8004130 <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006560:	f7fd fde6 	bl	8004130 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e187      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006572:	4b1b      	ldr	r3, [pc, #108]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	2b00      	cmp	r3, #0
 8006588:	d036      	beq.n	80065f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d016      	beq.n	80065c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <HAL_RCC_OscConfig+0x248>)
 8006594:	2201      	movs	r2, #1
 8006596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006598:	f7fd fdca 	bl	8004130 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065a0:	f7fd fdc6 	bl	8004130 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e167      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b2:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <HAL_RCC_OscConfig+0x240>)
 80065b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCC_OscConfig+0x200>
 80065be:	e01b      	b.n	80065f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065c0:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <HAL_RCC_OscConfig+0x248>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c6:	f7fd fdb3 	bl	8004130 <HAL_GetTick>
 80065ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065cc:	e00e      	b.n	80065ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065ce:	f7fd fdaf 	bl	8004130 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d907      	bls.n	80065ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e150      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
 80065e0:	40023800 	.word	0x40023800
 80065e4:	42470000 	.word	0x42470000
 80065e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065ec:	4b88      	ldr	r3, [pc, #544]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 80065ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1ea      	bne.n	80065ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 8097 	beq.w	8006734 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006606:	2300      	movs	r3, #0
 8006608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800660a:	4b81      	ldr	r3, [pc, #516]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10f      	bne.n	8006636 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006616:	2300      	movs	r3, #0
 8006618:	60bb      	str	r3, [r7, #8]
 800661a:	4b7d      	ldr	r3, [pc, #500]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	4a7c      	ldr	r2, [pc, #496]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 8006620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006624:	6413      	str	r3, [r2, #64]	; 0x40
 8006626:	4b7a      	ldr	r3, [pc, #488]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662e:	60bb      	str	r3, [r7, #8]
 8006630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006632:	2301      	movs	r3, #1
 8006634:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006636:	4b77      	ldr	r3, [pc, #476]	; (8006814 <HAL_RCC_OscConfig+0x474>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663e:	2b00      	cmp	r3, #0
 8006640:	d118      	bne.n	8006674 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006642:	4b74      	ldr	r3, [pc, #464]	; (8006814 <HAL_RCC_OscConfig+0x474>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a73      	ldr	r2, [pc, #460]	; (8006814 <HAL_RCC_OscConfig+0x474>)
 8006648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800664c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800664e:	f7fd fd6f 	bl	8004130 <HAL_GetTick>
 8006652:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006654:	e008      	b.n	8006668 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006656:	f7fd fd6b 	bl	8004130 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e10c      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006668:	4b6a      	ldr	r3, [pc, #424]	; (8006814 <HAL_RCC_OscConfig+0x474>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0f0      	beq.n	8006656 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d106      	bne.n	800668a <HAL_RCC_OscConfig+0x2ea>
 800667c:	4b64      	ldr	r3, [pc, #400]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 800667e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006680:	4a63      	ldr	r2, [pc, #396]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 8006682:	f043 0301 	orr.w	r3, r3, #1
 8006686:	6713      	str	r3, [r2, #112]	; 0x70
 8006688:	e01c      	b.n	80066c4 <HAL_RCC_OscConfig+0x324>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b05      	cmp	r3, #5
 8006690:	d10c      	bne.n	80066ac <HAL_RCC_OscConfig+0x30c>
 8006692:	4b5f      	ldr	r3, [pc, #380]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 8006694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006696:	4a5e      	ldr	r2, [pc, #376]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 8006698:	f043 0304 	orr.w	r3, r3, #4
 800669c:	6713      	str	r3, [r2, #112]	; 0x70
 800669e:	4b5c      	ldr	r3, [pc, #368]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 80066a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a2:	4a5b      	ldr	r2, [pc, #364]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 80066a4:	f043 0301 	orr.w	r3, r3, #1
 80066a8:	6713      	str	r3, [r2, #112]	; 0x70
 80066aa:	e00b      	b.n	80066c4 <HAL_RCC_OscConfig+0x324>
 80066ac:	4b58      	ldr	r3, [pc, #352]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 80066ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b0:	4a57      	ldr	r2, [pc, #348]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 80066b2:	f023 0301 	bic.w	r3, r3, #1
 80066b6:	6713      	str	r3, [r2, #112]	; 0x70
 80066b8:	4b55      	ldr	r3, [pc, #340]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 80066ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066bc:	4a54      	ldr	r2, [pc, #336]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 80066be:	f023 0304 	bic.w	r3, r3, #4
 80066c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d015      	beq.n	80066f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066cc:	f7fd fd30 	bl	8004130 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d2:	e00a      	b.n	80066ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066d4:	f7fd fd2c 	bl	8004130 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e0cb      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ea:	4b49      	ldr	r3, [pc, #292]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0ee      	beq.n	80066d4 <HAL_RCC_OscConfig+0x334>
 80066f6:	e014      	b.n	8006722 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f8:	f7fd fd1a 	bl	8004130 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066fe:	e00a      	b.n	8006716 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006700:	f7fd fd16 	bl	8004130 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	f241 3288 	movw	r2, #5000	; 0x1388
 800670e:	4293      	cmp	r3, r2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e0b5      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006716:	4b3e      	ldr	r3, [pc, #248]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 8006718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1ee      	bne.n	8006700 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006722:	7dfb      	ldrb	r3, [r7, #23]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d105      	bne.n	8006734 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006728:	4b39      	ldr	r3, [pc, #228]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 800672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672c:	4a38      	ldr	r2, [pc, #224]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 800672e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006732:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 80a1 	beq.w	8006880 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800673e:	4b34      	ldr	r3, [pc, #208]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f003 030c 	and.w	r3, r3, #12
 8006746:	2b08      	cmp	r3, #8
 8006748:	d05c      	beq.n	8006804 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d141      	bne.n	80067d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006752:	4b31      	ldr	r3, [pc, #196]	; (8006818 <HAL_RCC_OscConfig+0x478>)
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006758:	f7fd fcea 	bl	8004130 <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006760:	f7fd fce6 	bl	8004130 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e087      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006772:	4b27      	ldr	r3, [pc, #156]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1f0      	bne.n	8006760 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69da      	ldr	r2, [r3, #28]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	019b      	lsls	r3, r3, #6
 800678e:	431a      	orrs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006794:	085b      	lsrs	r3, r3, #1
 8006796:	3b01      	subs	r3, #1
 8006798:	041b      	lsls	r3, r3, #16
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	061b      	lsls	r3, r3, #24
 80067a2:	491b      	ldr	r1, [pc, #108]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067a8:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <HAL_RCC_OscConfig+0x478>)
 80067aa:	2201      	movs	r2, #1
 80067ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ae:	f7fd fcbf 	bl	8004130 <HAL_GetTick>
 80067b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b4:	e008      	b.n	80067c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067b6:	f7fd fcbb 	bl	8004130 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e05c      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067c8:	4b11      	ldr	r3, [pc, #68]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0f0      	beq.n	80067b6 <HAL_RCC_OscConfig+0x416>
 80067d4:	e054      	b.n	8006880 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067d6:	4b10      	ldr	r3, [pc, #64]	; (8006818 <HAL_RCC_OscConfig+0x478>)
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067dc:	f7fd fca8 	bl	8004130 <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067e4:	f7fd fca4 	bl	8004130 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e045      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <HAL_RCC_OscConfig+0x470>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1f0      	bne.n	80067e4 <HAL_RCC_OscConfig+0x444>
 8006802:	e03d      	b.n	8006880 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d107      	bne.n	800681c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e038      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
 8006810:	40023800 	.word	0x40023800
 8006814:	40007000 	.word	0x40007000
 8006818:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800681c:	4b1b      	ldr	r3, [pc, #108]	; (800688c <HAL_RCC_OscConfig+0x4ec>)
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d028      	beq.n	800687c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006834:	429a      	cmp	r2, r3
 8006836:	d121      	bne.n	800687c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006842:	429a      	cmp	r2, r3
 8006844:	d11a      	bne.n	800687c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800684c:	4013      	ands	r3, r2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006852:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006854:	4293      	cmp	r3, r2
 8006856:	d111      	bne.n	800687c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006862:	085b      	lsrs	r3, r3, #1
 8006864:	3b01      	subs	r3, #1
 8006866:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006868:	429a      	cmp	r2, r3
 800686a:	d107      	bne.n	800687c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006876:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006878:	429a      	cmp	r2, r3
 800687a:	d001      	beq.n	8006880 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e000      	b.n	8006882 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40023800 	.word	0x40023800

08006890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e0cc      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068a4:	4b68      	ldr	r3, [pc, #416]	; (8006a48 <HAL_RCC_ClockConfig+0x1b8>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0307 	and.w	r3, r3, #7
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d90c      	bls.n	80068cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b2:	4b65      	ldr	r3, [pc, #404]	; (8006a48 <HAL_RCC_ClockConfig+0x1b8>)
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ba:	4b63      	ldr	r3, [pc, #396]	; (8006a48 <HAL_RCC_ClockConfig+0x1b8>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d001      	beq.n	80068cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e0b8      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d020      	beq.n	800691a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068e4:	4b59      	ldr	r3, [pc, #356]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	4a58      	ldr	r2, [pc, #352]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068fc:	4b53      	ldr	r3, [pc, #332]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	4a52      	ldr	r2, [pc, #328]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006908:	4b50      	ldr	r3, [pc, #320]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	494d      	ldr	r1, [pc, #308]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006916:	4313      	orrs	r3, r2
 8006918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d044      	beq.n	80069b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d107      	bne.n	800693e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800692e:	4b47      	ldr	r3, [pc, #284]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d119      	bne.n	800696e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e07f      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d003      	beq.n	800694e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800694a:	2b03      	cmp	r3, #3
 800694c:	d107      	bne.n	800695e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800694e:	4b3f      	ldr	r3, [pc, #252]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d109      	bne.n	800696e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e06f      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800695e:	4b3b      	ldr	r3, [pc, #236]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e067      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800696e:	4b37      	ldr	r3, [pc, #220]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f023 0203 	bic.w	r2, r3, #3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	4934      	ldr	r1, [pc, #208]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 800697c:	4313      	orrs	r3, r2
 800697e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006980:	f7fd fbd6 	bl	8004130 <HAL_GetTick>
 8006984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006986:	e00a      	b.n	800699e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006988:	f7fd fbd2 	bl	8004130 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	f241 3288 	movw	r2, #5000	; 0x1388
 8006996:	4293      	cmp	r3, r2
 8006998:	d901      	bls.n	800699e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e04f      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800699e:	4b2b      	ldr	r3, [pc, #172]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f003 020c 	and.w	r2, r3, #12
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d1eb      	bne.n	8006988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069b0:	4b25      	ldr	r3, [pc, #148]	; (8006a48 <HAL_RCC_ClockConfig+0x1b8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0307 	and.w	r3, r3, #7
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d20c      	bcs.n	80069d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069be:	4b22      	ldr	r3, [pc, #136]	; (8006a48 <HAL_RCC_ClockConfig+0x1b8>)
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c6:	4b20      	ldr	r3, [pc, #128]	; (8006a48 <HAL_RCC_ClockConfig+0x1b8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d001      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e032      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d008      	beq.n	80069f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069e4:	4b19      	ldr	r3, [pc, #100]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	4916      	ldr	r1, [pc, #88]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d009      	beq.n	8006a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	490e      	ldr	r1, [pc, #56]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a16:	f000 f821 	bl	8006a5c <HAL_RCC_GetSysClockFreq>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <HAL_RCC_ClockConfig+0x1bc>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	091b      	lsrs	r3, r3, #4
 8006a22:	f003 030f 	and.w	r3, r3, #15
 8006a26:	490a      	ldr	r1, [pc, #40]	; (8006a50 <HAL_RCC_ClockConfig+0x1c0>)
 8006a28:	5ccb      	ldrb	r3, [r1, r3]
 8006a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2e:	4a09      	ldr	r2, [pc, #36]	; (8006a54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a32:	4b09      	ldr	r3, [pc, #36]	; (8006a58 <HAL_RCC_ClockConfig+0x1c8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fd fb36 	bl	80040a8 <HAL_InitTick>

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40023c00 	.word	0x40023c00
 8006a4c:	40023800 	.word	0x40023800
 8006a50:	08019410 	.word	0x08019410
 8006a54:	20000488 	.word	0x20000488
 8006a58:	20000450 	.word	0x20000450

08006a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a60:	b094      	sub	sp, #80	; 0x50
 8006a62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	647b      	str	r3, [r7, #68]	; 0x44
 8006a68:	2300      	movs	r3, #0
 8006a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a74:	4b79      	ldr	r3, [pc, #484]	; (8006c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f003 030c 	and.w	r3, r3, #12
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d00d      	beq.n	8006a9c <HAL_RCC_GetSysClockFreq+0x40>
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	f200 80e1 	bhi.w	8006c48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_RCC_GetSysClockFreq+0x34>
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d003      	beq.n	8006a96 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a8e:	e0db      	b.n	8006c48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a90:	4b73      	ldr	r3, [pc, #460]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006a94:	e0db      	b.n	8006c4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a96:	4b73      	ldr	r3, [pc, #460]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a9a:	e0d8      	b.n	8006c4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a9c:	4b6f      	ldr	r3, [pc, #444]	; (8006c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aa4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006aa6:	4b6d      	ldr	r3, [pc, #436]	; (8006c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d063      	beq.n	8006b7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ab2:	4b6a      	ldr	r3, [pc, #424]	; (8006c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	099b      	lsrs	r3, r3, #6
 8006ab8:	2200      	movs	r2, #0
 8006aba:	63bb      	str	r3, [r7, #56]	; 0x38
 8006abc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006ace:	4622      	mov	r2, r4
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	f04f 0000 	mov.w	r0, #0
 8006ad6:	f04f 0100 	mov.w	r1, #0
 8006ada:	0159      	lsls	r1, r3, #5
 8006adc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ae0:	0150      	lsls	r0, r2, #5
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	1a51      	subs	r1, r2, r1
 8006aea:	6139      	str	r1, [r7, #16]
 8006aec:	4629      	mov	r1, r5
 8006aee:	eb63 0301 	sbc.w	r3, r3, r1
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b00:	4659      	mov	r1, fp
 8006b02:	018b      	lsls	r3, r1, #6
 8006b04:	4651      	mov	r1, sl
 8006b06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b0a:	4651      	mov	r1, sl
 8006b0c:	018a      	lsls	r2, r1, #6
 8006b0e:	4651      	mov	r1, sl
 8006b10:	ebb2 0801 	subs.w	r8, r2, r1
 8006b14:	4659      	mov	r1, fp
 8006b16:	eb63 0901 	sbc.w	r9, r3, r1
 8006b1a:	f04f 0200 	mov.w	r2, #0
 8006b1e:	f04f 0300 	mov.w	r3, #0
 8006b22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b2e:	4690      	mov	r8, r2
 8006b30:	4699      	mov	r9, r3
 8006b32:	4623      	mov	r3, r4
 8006b34:	eb18 0303 	adds.w	r3, r8, r3
 8006b38:	60bb      	str	r3, [r7, #8]
 8006b3a:	462b      	mov	r3, r5
 8006b3c:	eb49 0303 	adc.w	r3, r9, r3
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	f04f 0200 	mov.w	r2, #0
 8006b46:	f04f 0300 	mov.w	r3, #0
 8006b4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b4e:	4629      	mov	r1, r5
 8006b50:	024b      	lsls	r3, r1, #9
 8006b52:	4621      	mov	r1, r4
 8006b54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b58:	4621      	mov	r1, r4
 8006b5a:	024a      	lsls	r2, r1, #9
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b62:	2200      	movs	r2, #0
 8006b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b6c:	f7f9 fb88 	bl	8000280 <__aeabi_uldivmod>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4613      	mov	r3, r2
 8006b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b78:	e058      	b.n	8006c2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b7a:	4b38      	ldr	r3, [pc, #224]	; (8006c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	099b      	lsrs	r3, r3, #6
 8006b80:	2200      	movs	r2, #0
 8006b82:	4618      	mov	r0, r3
 8006b84:	4611      	mov	r1, r2
 8006b86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b8a:	623b      	str	r3, [r7, #32]
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b94:	4642      	mov	r2, r8
 8006b96:	464b      	mov	r3, r9
 8006b98:	f04f 0000 	mov.w	r0, #0
 8006b9c:	f04f 0100 	mov.w	r1, #0
 8006ba0:	0159      	lsls	r1, r3, #5
 8006ba2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ba6:	0150      	lsls	r0, r2, #5
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4641      	mov	r1, r8
 8006bae:	ebb2 0a01 	subs.w	sl, r2, r1
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006bc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006bc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006bcc:	ebb2 040a 	subs.w	r4, r2, sl
 8006bd0:	eb63 050b 	sbc.w	r5, r3, fp
 8006bd4:	f04f 0200 	mov.w	r2, #0
 8006bd8:	f04f 0300 	mov.w	r3, #0
 8006bdc:	00eb      	lsls	r3, r5, #3
 8006bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006be2:	00e2      	lsls	r2, r4, #3
 8006be4:	4614      	mov	r4, r2
 8006be6:	461d      	mov	r5, r3
 8006be8:	4643      	mov	r3, r8
 8006bea:	18e3      	adds	r3, r4, r3
 8006bec:	603b      	str	r3, [r7, #0]
 8006bee:	464b      	mov	r3, r9
 8006bf0:	eb45 0303 	adc.w	r3, r5, r3
 8006bf4:	607b      	str	r3, [r7, #4]
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	f04f 0300 	mov.w	r3, #0
 8006bfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c02:	4629      	mov	r1, r5
 8006c04:	028b      	lsls	r3, r1, #10
 8006c06:	4621      	mov	r1, r4
 8006c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	028a      	lsls	r2, r1, #10
 8006c10:	4610      	mov	r0, r2
 8006c12:	4619      	mov	r1, r3
 8006c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c16:	2200      	movs	r2, #0
 8006c18:	61bb      	str	r3, [r7, #24]
 8006c1a:	61fa      	str	r2, [r7, #28]
 8006c1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c20:	f7f9 fb2e 	bl	8000280 <__aeabi_uldivmod>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	4613      	mov	r3, r2
 8006c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c2c:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	0c1b      	lsrs	r3, r3, #16
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	3301      	adds	r3, #1
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006c3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c46:	e002      	b.n	8006c4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c48:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3750      	adds	r7, #80	; 0x50
 8006c54:	46bd      	mov	sp, r7
 8006c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	00f42400 	.word	0x00f42400
 8006c64:	007a1200 	.word	0x007a1200

08006c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c6c:	4b03      	ldr	r3, [pc, #12]	; (8006c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	20000488 	.word	0x20000488

08006c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c84:	f7ff fff0 	bl	8006c68 <HAL_RCC_GetHCLKFreq>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	0a9b      	lsrs	r3, r3, #10
 8006c90:	f003 0307 	and.w	r3, r3, #7
 8006c94:	4903      	ldr	r1, [pc, #12]	; (8006ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c96:	5ccb      	ldrb	r3, [r1, r3]
 8006c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	40023800 	.word	0x40023800
 8006ca4:	08019420 	.word	0x08019420

08006ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006cac:	f7ff ffdc 	bl	8006c68 <HAL_RCC_GetHCLKFreq>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	0b5b      	lsrs	r3, r3, #13
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	4903      	ldr	r1, [pc, #12]	; (8006ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cbe:	5ccb      	ldrb	r3, [r1, r3]
 8006cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	40023800 	.word	0x40023800
 8006ccc:	08019420 	.word	0x08019420

08006cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e083      	b.n	8006dea <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d108      	bne.n	8006cfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cf2:	d009      	beq.n	8006d08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	61da      	str	r2, [r3, #28]
 8006cfa:	e005      	b.n	8006d08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d106      	bne.n	8006d22 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f00d fb33 	bl	8014388 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2202      	movs	r2, #2
 8006d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d38:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d54:	431a      	orrs	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d86:	ea42 0103 	orr.w	r1, r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	0c1b      	lsrs	r3, r3, #16
 8006da0:	f003 0104 	and.w	r1, r3, #4
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	f003 0210 	and.w	r2, r3, #16
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dbc:	d105      	bne.n	8006dca <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	b292      	uxth	r2, r2
 8006dc8:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	69da      	ldr	r2, [r3, #28]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b08e      	sub	sp, #56	; 0x38
 8006df6:	af02      	add	r7, sp, #8
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	607a      	str	r2, [r7, #4]
 8006dfe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	617b      	str	r3, [r7, #20]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e04:	2301      	movs	r3, #1
 8006e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d101      	bne.n	8006e1c <HAL_SPI_TransmitReceive+0x2a>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e1f8      	b.n	800720e <HAL_SPI_TransmitReceive+0x41c>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e24:	f7fd f984 	bl	8004130 <HAL_GetTick>
 8006e28:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006e3a:	887b      	ldrh	r3, [r7, #2]
 8006e3c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d00f      	beq.n	8006e66 <HAL_SPI_TransmitReceive+0x74>
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e4c:	d107      	bne.n	8006e5e <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d103      	bne.n	8006e5e <HAL_SPI_TransmitReceive+0x6c>
 8006e56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	d003      	beq.n	8006e66 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e64:	e1c9      	b.n	80071fa <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d005      	beq.n	8006e78 <HAL_SPI_TransmitReceive+0x86>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <HAL_SPI_TransmitReceive+0x86>
 8006e72:	887b      	ldrh	r3, [r7, #2]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d103      	bne.n	8006e80 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e7e:	e1bc      	b.n	80071fa <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d003      	beq.n	8006e94 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2205      	movs	r2, #5
 8006e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	887a      	ldrh	r2, [r7, #2]
 8006ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	887a      	ldrh	r2, [r7, #2]
 8006eaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	887a      	ldrh	r2, [r7, #2]
 8006eb6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	887a      	ldrh	r2, [r7, #2]
 8006ebc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed2:	d10f      	bne.n	8006ef4 <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ef2:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efe:	2b40      	cmp	r3, #64	; 0x40
 8006f00:	d007      	beq.n	8006f12 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f1a:	f040 808b 	bne.w	8007034 <HAL_SPI_TransmitReceive+0x242>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <HAL_SPI_TransmitReceive+0x13a>
 8006f26:	8b7b      	ldrh	r3, [r7, #26]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d178      	bne.n	800701e <HAL_SPI_TransmitReceive+0x22c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f30:	881a      	ldrh	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3c:	1c9a      	adds	r2, r3, #2
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f50:	e065      	b.n	800701e <HAL_SPI_TransmitReceive+0x22c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d12d      	bne.n	8006fbc <HAL_SPI_TransmitReceive+0x1ca>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d028      	beq.n	8006fbc <HAL_SPI_TransmitReceive+0x1ca>
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d125      	bne.n	8006fbc <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f74:	881a      	ldrh	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f80:	1c9a      	adds	r2, r3, #2
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10c      	bne.n	8006fbc <HAL_SPI_TransmitReceive+0x1ca>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006faa:	d107      	bne.n	8006fbc <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fba:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d119      	bne.n	8006ffe <HAL_SPI_TransmitReceive+0x20c>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d014      	beq.n	8006ffe <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68da      	ldr	r2, [r3, #12]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	b292      	uxth	r2, r2
 8006fe0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	1c9a      	adds	r2, r3, #2
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ffe:	f7fd f897 	bl	8004130 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800700a:	429a      	cmp	r2, r3
 800700c:	d807      	bhi.n	800701e <HAL_SPI_TransmitReceive+0x22c>
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d003      	beq.n	800701e <HAL_SPI_TransmitReceive+0x22c>
      {
        errorcode = HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800701c:	e0ed      	b.n	80071fa <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d194      	bne.n	8006f52 <HAL_SPI_TransmitReceive+0x160>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d18f      	bne.n	8006f52 <HAL_SPI_TransmitReceive+0x160>
 8007032:	e08e      	b.n	8007152 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <HAL_SPI_TransmitReceive+0x250>
 800703c:	8b7b      	ldrh	r3, [r7, #26]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d17d      	bne.n	800713e <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	330c      	adds	r3, #12
 800704c:	7812      	ldrb	r2, [r2, #0]
 800704e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007068:	e069      	b.n	800713e <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b02      	cmp	r3, #2
 8007076:	d12e      	bne.n	80070d6 <HAL_SPI_TransmitReceive+0x2e4>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d029      	beq.n	80070d6 <HAL_SPI_TransmitReceive+0x2e4>
 8007082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007084:	2b01      	cmp	r3, #1
 8007086:	d126      	bne.n	80070d6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	330c      	adds	r3, #12
 8007092:	7812      	ldrb	r2, [r2, #0]
 8007094:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	3b01      	subs	r3, #1
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10c      	bne.n	80070d6 <HAL_SPI_TransmitReceive+0x2e4>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070c4:	d107      	bne.n	80070d6 <HAL_SPI_TransmitReceive+0x2e4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070d4:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d119      	bne.n	8007118 <HAL_SPI_TransmitReceive+0x326>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d014      	beq.n	8007118 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68da      	ldr	r2, [r3, #12]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007114:	2301      	movs	r3, #1
 8007116:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007118:	f7fd f80a 	bl	8004130 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007124:	429a      	cmp	r2, r3
 8007126:	d803      	bhi.n	8007130 <HAL_SPI_TransmitReceive+0x33e>
 8007128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712e:	d102      	bne.n	8007136 <HAL_SPI_TransmitReceive+0x344>
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	2b00      	cmp	r3, #0
 8007134:	d103      	bne.n	800713e <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800713c:	e05d      	b.n	80071fa <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007142:	b29b      	uxth	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	d190      	bne.n	800706a <HAL_SPI_TransmitReceive+0x278>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d18b      	bne.n	800706a <HAL_SPI_TransmitReceive+0x278>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800715a:	d119      	bne.n	8007190 <HAL_SPI_TransmitReceive+0x39e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	2201      	movs	r2, #1
 8007164:	2101      	movs	r1, #1
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 f856 	bl	8007218 <SPI_WaitFlagStateUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d009      	beq.n	8007186 <HAL_SPI_TransmitReceive+0x394>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007176:	f043 0202 	orr.w	r2, r3, #2
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8007184:	e039      	b.n	80071fa <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 800718e:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f003 0310 	and.w	r3, r3, #16
 800719a:	2b10      	cmp	r3, #16
 800719c:	d10d      	bne.n	80071ba <HAL_SPI_TransmitReceive+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a2:	f043 0202 	orr.w	r2, r3, #2
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80071b2:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 f8b2 	bl	8007328 <SPI_EndRxTxTransaction>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d006      	beq.n	80071d8 <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2220      	movs	r2, #32
 80071d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80071d6:	e010      	b.n	80071fa <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10b      	bne.n	80071f8 <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071e0:	2300      	movs	r3, #0
 80071e2:	613b      	str	r3, [r7, #16]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	613b      	str	r3, [r7, #16]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	613b      	str	r3, [r7, #16]
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	e000      	b.n	80071fa <HAL_SPI_TransmitReceive+0x408>
  }

error :
 80071f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800720a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800720e:	4618      	mov	r0, r3
 8007210:	3730      	adds	r7, #48	; 0x30
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	4613      	mov	r3, r2
 8007226:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007228:	f7fc ff82 	bl	8004130 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007230:	1a9b      	subs	r3, r3, r2
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	4413      	add	r3, r2
 8007236:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007238:	f7fc ff7a 	bl	8004130 <HAL_GetTick>
 800723c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800723e:	4b39      	ldr	r3, [pc, #228]	; (8007324 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	015b      	lsls	r3, r3, #5
 8007244:	0d1b      	lsrs	r3, r3, #20
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	fb02 f303 	mul.w	r3, r2, r3
 800724c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800724e:	e054      	b.n	80072fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007256:	d050      	beq.n	80072fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007258:	f7fc ff6a 	bl	8004130 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	429a      	cmp	r2, r3
 8007266:	d902      	bls.n	800726e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d13d      	bne.n	80072ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800727c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007286:	d111      	bne.n	80072ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007290:	d004      	beq.n	800729c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800729a:	d107      	bne.n	80072ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072b4:	d10f      	bne.n	80072d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e017      	b.n	800731a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4013      	ands	r3, r2
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	429a      	cmp	r2, r3
 8007308:	bf0c      	ite	eq
 800730a:	2301      	moveq	r3, #1
 800730c:	2300      	movne	r3, #0
 800730e:	b2db      	uxtb	r3, r3
 8007310:	461a      	mov	r2, r3
 8007312:	79fb      	ldrb	r3, [r7, #7]
 8007314:	429a      	cmp	r2, r3
 8007316:	d19b      	bne.n	8007250 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3720      	adds	r7, #32
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	20000488 	.word	0x20000488

08007328 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b088      	sub	sp, #32
 800732c:	af02      	add	r7, sp, #8
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007334:	4b1b      	ldr	r3, [pc, #108]	; (80073a4 <SPI_EndRxTxTransaction+0x7c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a1b      	ldr	r2, [pc, #108]	; (80073a8 <SPI_EndRxTxTransaction+0x80>)
 800733a:	fba2 2303 	umull	r2, r3, r2, r3
 800733e:	0d5b      	lsrs	r3, r3, #21
 8007340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007344:	fb02 f303 	mul.w	r3, r2, r3
 8007348:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007352:	d112      	bne.n	800737a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2200      	movs	r2, #0
 800735c:	2180      	movs	r1, #128	; 0x80
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f7ff ff5a 	bl	8007218 <SPI_WaitFlagStateUntilTimeout>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d016      	beq.n	8007398 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	f043 0220 	orr.w	r2, r3, #32
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e00f      	b.n	800739a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00a      	beq.n	8007396 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	3b01      	subs	r3, #1
 8007384:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007390:	2b80      	cmp	r3, #128	; 0x80
 8007392:	d0f2      	beq.n	800737a <SPI_EndRxTxTransaction+0x52>
 8007394:	e000      	b.n	8007398 <SPI_EndRxTxTransaction+0x70>
        break;
 8007396:	bf00      	nop
  }

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20000488 	.word	0x20000488
 80073a8:	165e9f81 	.word	0x165e9f81

080073ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d122      	bne.n	8007408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d11b      	bne.n	8007408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f06f 0202 	mvn.w	r2, #2
 80073d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f00c fa6c 	bl	80138cc <HAL_TIM_IC_CaptureCallback>
 80073f4:	e005      	b.n	8007402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f8ea 	bl	80075d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f8f1 	bl	80075e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f003 0304 	and.w	r3, r3, #4
 8007412:	2b04      	cmp	r3, #4
 8007414:	d122      	bne.n	800745c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	2b04      	cmp	r3, #4
 8007422:	d11b      	bne.n	800745c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f06f 0204 	mvn.w	r2, #4
 800742c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f00c fa42 	bl	80138cc <HAL_TIM_IC_CaptureCallback>
 8007448:	e005      	b.n	8007456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f8c0 	bl	80075d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f8c7 	bl	80075e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b08      	cmp	r3, #8
 8007468:	d122      	bne.n	80074b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b08      	cmp	r3, #8
 8007476:	d11b      	bne.n	80074b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f06f 0208 	mvn.w	r2, #8
 8007480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2204      	movs	r2, #4
 8007486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	f003 0303 	and.w	r3, r3, #3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f00c fa18 	bl	80138cc <HAL_TIM_IC_CaptureCallback>
 800749c:	e005      	b.n	80074aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f896 	bl	80075d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f89d 	bl	80075e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	f003 0310 	and.w	r3, r3, #16
 80074ba:	2b10      	cmp	r3, #16
 80074bc:	d122      	bne.n	8007504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	d11b      	bne.n	8007504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f06f 0210 	mvn.w	r2, #16
 80074d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2208      	movs	r2, #8
 80074da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f00c f9ee 	bl	80138cc <HAL_TIM_IC_CaptureCallback>
 80074f0:	e005      	b.n	80074fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f86c 	bl	80075d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f873 	bl	80075e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b01      	cmp	r3, #1
 8007510:	d10e      	bne.n	8007530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b01      	cmp	r3, #1
 800751e:	d107      	bne.n	8007530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f06f 0201 	mvn.w	r2, #1
 8007528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f846 	bl	80075bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753a:	2b80      	cmp	r3, #128	; 0x80
 800753c:	d10e      	bne.n	800755c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007548:	2b80      	cmp	r3, #128	; 0x80
 800754a:	d107      	bne.n	800755c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f862 	bl	8007620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007566:	2b40      	cmp	r3, #64	; 0x40
 8007568:	d10e      	bne.n	8007588 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007574:	2b40      	cmp	r3, #64	; 0x40
 8007576:	d107      	bne.n	8007588 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f838 	bl	80075f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	f003 0320 	and.w	r3, r3, #32
 8007592:	2b20      	cmp	r3, #32
 8007594:	d10e      	bne.n	80075b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f003 0320 	and.w	r3, r3, #32
 80075a0:	2b20      	cmp	r3, #32
 80075a2:	d107      	bne.n	80075b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f06f 0220 	mvn.w	r2, #32
 80075ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f82c 	bl	800760c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075b4:	bf00      	nop
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e03f      	b.n	80076c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f00d f8c4 	bl	80147e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2224      	movs	r2, #36	; 0x24
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fbe3 	bl	8007e44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	691a      	ldr	r2, [r3, #16]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800768c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	695a      	ldr	r2, [r3, #20]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800769c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2220      	movs	r2, #32
 80076c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b085      	sub	sp, #20
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	4613      	mov	r3, r2
 80076da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b20      	cmp	r3, #32
 80076e6:	d130      	bne.n	800774a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <HAL_UART_Transmit_IT+0x26>
 80076ee:	88fb      	ldrh	r3, [r7, #6]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e029      	b.n	800774c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d101      	bne.n	8007706 <HAL_UART_Transmit_IT+0x38>
 8007702:	2302      	movs	r3, #2
 8007704:	e022      	b.n	800774c <HAL_UART_Transmit_IT+0x7e>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	88fa      	ldrh	r2, [r7, #6]
 8007718:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	88fa      	ldrh	r2, [r7, #6]
 800771e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2221      	movs	r2, #33	; 0x21
 800772a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007744:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	e000      	b.n	800774c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800774a:	2302      	movs	r3, #2
  }
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b20      	cmp	r3, #32
 8007770:	d11d      	bne.n	80077ae <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <HAL_UART_Receive_IT+0x26>
 8007778:	88fb      	ldrh	r3, [r7, #6]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e016      	b.n	80077b0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <HAL_UART_Receive_IT+0x38>
 800778c:	2302      	movs	r3, #2
 800778e:	e00f      	b.n	80077b0 <HAL_UART_Receive_IT+0x58>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800779e:	88fb      	ldrh	r3, [r7, #6]
 80077a0:	461a      	mov	r2, r3
 80077a2:	68b9      	ldr	r1, [r7, #8]
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 f9d3 	bl	8007b50 <UART_Start_Receive_IT>
 80077aa:	4603      	mov	r3, r0
 80077ac:	e000      	b.n	80077b0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80077ae:	2302      	movs	r3, #2
  }
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08a      	sub	sp, #40	; 0x28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80077d8:	2300      	movs	r3, #0
 80077da:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80077dc:	2300      	movs	r3, #0
 80077de:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10d      	bne.n	800780a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	f003 0320 	and.w	r3, r3, #32
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d008      	beq.n	800780a <HAL_UART_IRQHandler+0x52>
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	f003 0320 	and.w	r3, r3, #32
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fa87 	bl	8007d16 <UART_Receive_IT>
      return;
 8007808:	e17c      	b.n	8007b04 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 80b1 	beq.w	8007974 <HAL_UART_IRQHandler+0x1bc>
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	d105      	bne.n	8007828 <HAL_UART_IRQHandler+0x70>
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 80a6 	beq.w	8007974 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <HAL_UART_IRQHandler+0x90>
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007840:	f043 0201 	orr.w	r2, r3, #1
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	f003 0304 	and.w	r3, r3, #4
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00a      	beq.n	8007868 <HAL_UART_IRQHandler+0xb0>
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007860:	f043 0202 	orr.w	r2, r3, #2
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <HAL_UART_IRQHandler+0xd0>
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b00      	cmp	r3, #0
 800787a:	d005      	beq.n	8007888 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007880:	f043 0204 	orr.w	r2, r3, #4
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00f      	beq.n	80078b2 <HAL_UART_IRQHandler+0xfa>
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	f003 0320 	and.w	r3, r3, #32
 8007898:	2b00      	cmp	r3, #0
 800789a:	d104      	bne.n	80078a6 <HAL_UART_IRQHandler+0xee>
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d005      	beq.n	80078b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078aa:	f043 0208 	orr.w	r2, r3, #8
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 811f 	beq.w	8007afa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	f003 0320 	and.w	r3, r3, #32
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d007      	beq.n	80078d6 <HAL_UART_IRQHandler+0x11e>
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	f003 0320 	and.w	r3, r3, #32
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fa20 	bl	8007d16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e0:	2b40      	cmp	r3, #64	; 0x40
 80078e2:	bf0c      	ite	eq
 80078e4:	2301      	moveq	r3, #1
 80078e6:	2300      	movne	r3, #0
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f0:	f003 0308 	and.w	r3, r3, #8
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d102      	bne.n	80078fe <HAL_UART_IRQHandler+0x146>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d031      	beq.n	8007962 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f960 	bl	8007bc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790e:	2b40      	cmp	r3, #64	; 0x40
 8007910:	d123      	bne.n	800795a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	695a      	ldr	r2, [r3, #20]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007920:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	2b00      	cmp	r3, #0
 8007928:	d013      	beq.n	8007952 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	4a77      	ldr	r2, [pc, #476]	; (8007b0c <HAL_UART_IRQHandler+0x354>)
 8007930:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007936:	4618      	mov	r0, r3
 8007938:	f7fc fdab 	bl	8004492 <HAL_DMA_Abort_IT>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d016      	beq.n	8007970 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800794c:	4610      	mov	r0, r2
 800794e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007950:	e00e      	b.n	8007970 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f8e6 	bl	8007b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	e00a      	b.n	8007970 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f8e2 	bl	8007b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007960:	e006      	b.n	8007970 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f8de 	bl	8007b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800796e:	e0c4      	b.n	8007afa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007970:	bf00      	nop
    return;
 8007972:	e0c2      	b.n	8007afa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007978:	2b01      	cmp	r3, #1
 800797a:	f040 80a2 	bne.w	8007ac2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	f003 0310 	and.w	r3, r3, #16
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 809c 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 8096 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	60fb      	str	r3, [r7, #12]
 80079aa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b6:	2b40      	cmp	r3, #64	; 0x40
 80079b8:	d14f      	bne.n	8007a5a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80079c4:	8a3b      	ldrh	r3, [r7, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 8099 	beq.w	8007afe <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079d0:	8a3a      	ldrh	r2, [r7, #16]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	f080 8093 	bcs.w	8007afe <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	8a3a      	ldrh	r2, [r7, #16]
 80079dc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e8:	d02b      	beq.n	8007a42 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079f8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	695a      	ldr	r2, [r3, #20]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f022 0201 	bic.w	r2, r2, #1
 8007a08:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	695a      	ldr	r2, [r3, #20]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a18:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68da      	ldr	r2, [r3, #12]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 0210 	bic.w	r2, r2, #16
 8007a36:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fc fcb8 	bl	80043b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f870 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007a58:	e051      	b.n	8007afe <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d047      	beq.n	8007b02 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007a72:	8a7b      	ldrh	r3, [r7, #18]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d044      	beq.n	8007b02 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a86:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	695a      	ldr	r2, [r3, #20]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 0201 	bic.w	r2, r2, #1
 8007a96:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68da      	ldr	r2, [r3, #12]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0210 	bic.w	r2, r2, #16
 8007ab4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ab6:	8a7b      	ldrh	r3, [r7, #18]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f83c 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007ac0:	e01f      	b.n	8007b02 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d008      	beq.n	8007ade <HAL_UART_IRQHandler+0x326>
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f8b5 	bl	8007c46 <UART_Transmit_IT>
    return;
 8007adc:	e012      	b.n	8007b04 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00d      	beq.n	8007b04 <HAL_UART_IRQHandler+0x34c>
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d008      	beq.n	8007b04 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f8f7 	bl	8007ce6 <UART_EndTransmit_IT>
    return;
 8007af8:	e004      	b.n	8007b04 <HAL_UART_IRQHandler+0x34c>
    return;
 8007afa:	bf00      	nop
 8007afc:	e002      	b.n	8007b04 <HAL_UART_IRQHandler+0x34c>
      return;
 8007afe:	bf00      	nop
 8007b00:	e000      	b.n	8007b04 <HAL_UART_IRQHandler+0x34c>
      return;
 8007b02:	bf00      	nop
  }
}
 8007b04:	3728      	adds	r7, #40	; 0x28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	08007c1f 	.word	0x08007c1f

08007b10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	88fa      	ldrh	r2, [r7, #6]
 8007b68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	88fa      	ldrh	r2, [r7, #6]
 8007b6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2222      	movs	r2, #34	; 0x22
 8007b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b94:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	695a      	ldr	r2, [r3, #20]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f042 0201 	orr.w	r2, r2, #1
 8007ba4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f042 0220 	orr.w	r2, r2, #32
 8007bb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007bda:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695a      	ldr	r2, [r3, #20]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0201 	bic.w	r2, r2, #1
 8007bea:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d107      	bne.n	8007c04 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 0210 	bic.w	r2, r2, #16
 8007c02:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c12:	bf00      	nop
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f7ff ff73 	bl	8007b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b085      	sub	sp, #20
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b21      	cmp	r3, #33	; 0x21
 8007c58:	d13e      	bne.n	8007cd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c62:	d114      	bne.n	8007c8e <UART_Transmit_IT+0x48>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d110      	bne.n	8007c8e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	461a      	mov	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	1c9a      	adds	r2, r3, #2
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	621a      	str	r2, [r3, #32]
 8007c8c:	e008      	b.n	8007ca0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	1c59      	adds	r1, r3, #1
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6211      	str	r1, [r2, #32]
 8007c98:	781a      	ldrb	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	4619      	mov	r1, r3
 8007cae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10f      	bne.n	8007cd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	e000      	b.n	8007cda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007cd8:	2302      	movs	r3, #2
  }
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff ff02 	bl	8007b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b22      	cmp	r3, #34	; 0x22
 8007d28:	f040 8087 	bne.w	8007e3a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d34:	d117      	bne.n	8007d66 <UART_Receive_IT+0x50>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d113      	bne.n	8007d66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d46:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5e:	1c9a      	adds	r2, r3, #2
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	629a      	str	r2, [r3, #40]	; 0x28
 8007d64:	e026      	b.n	8007db4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d78:	d007      	beq.n	8007d8a <UART_Receive_IT+0x74>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10a      	bne.n	8007d98 <UART_Receive_IT+0x82>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d106      	bne.n	8007d98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	701a      	strb	r2, [r3, #0]
 8007d96:	e008      	b.n	8007daa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d136      	bne.n	8007e36 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68da      	ldr	r2, [r3, #12]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 0220 	bic.w	r2, r2, #32
 8007dd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007de6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	695a      	ldr	r2, [r3, #20]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f022 0201 	bic.w	r2, r2, #1
 8007df6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d10e      	bne.n	8007e26 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 0210 	bic.w	r2, r2, #16
 8007e16:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7ff fe8a 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
 8007e24:	e002      	b.n	8007e2c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f00b fe02 	bl	8013a30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	e002      	b.n	8007e3c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	e000      	b.n	8007e3c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007e3a:	2302      	movs	r3, #2
  }
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e48:	b0c0      	sub	sp, #256	; 0x100
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e60:	68d9      	ldr	r1, [r3, #12]
 8007e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	ea40 0301 	orr.w	r3, r0, r1
 8007e6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e72:	689a      	ldr	r2, [r3, #8]
 8007e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	431a      	orrs	r2, r3
 8007e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e88:	69db      	ldr	r3, [r3, #28]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e9c:	f021 010c 	bic.w	r1, r1, #12
 8007ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007eaa:	430b      	orrs	r3, r1
 8007eac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ebe:	6999      	ldr	r1, [r3, #24]
 8007ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	ea40 0301 	orr.w	r3, r0, r1
 8007eca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	4b8f      	ldr	r3, [pc, #572]	; (8008110 <UART_SetConfig+0x2cc>)
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d005      	beq.n	8007ee4 <UART_SetConfig+0xa0>
 8007ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	4b8d      	ldr	r3, [pc, #564]	; (8008114 <UART_SetConfig+0x2d0>)
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d104      	bne.n	8007eee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ee4:	f7fe fee0 	bl	8006ca8 <HAL_RCC_GetPCLK2Freq>
 8007ee8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007eec:	e003      	b.n	8007ef6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007eee:	f7fe fec7 	bl	8006c80 <HAL_RCC_GetPCLK1Freq>
 8007ef2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f00:	f040 810c 	bne.w	800811c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007f12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007f16:	4622      	mov	r2, r4
 8007f18:	462b      	mov	r3, r5
 8007f1a:	1891      	adds	r1, r2, r2
 8007f1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f1e:	415b      	adcs	r3, r3
 8007f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f26:	4621      	mov	r1, r4
 8007f28:	eb12 0801 	adds.w	r8, r2, r1
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	eb43 0901 	adc.w	r9, r3, r1
 8007f32:	f04f 0200 	mov.w	r2, #0
 8007f36:	f04f 0300 	mov.w	r3, #0
 8007f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f46:	4690      	mov	r8, r2
 8007f48:	4699      	mov	r9, r3
 8007f4a:	4623      	mov	r3, r4
 8007f4c:	eb18 0303 	adds.w	r3, r8, r3
 8007f50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f54:	462b      	mov	r3, r5
 8007f56:	eb49 0303 	adc.w	r3, r9, r3
 8007f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007f6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f72:	460b      	mov	r3, r1
 8007f74:	18db      	adds	r3, r3, r3
 8007f76:	653b      	str	r3, [r7, #80]	; 0x50
 8007f78:	4613      	mov	r3, r2
 8007f7a:	eb42 0303 	adc.w	r3, r2, r3
 8007f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8007f80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007f88:	f7f8 f97a 	bl	8000280 <__aeabi_uldivmod>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4b61      	ldr	r3, [pc, #388]	; (8008118 <UART_SetConfig+0x2d4>)
 8007f92:	fba3 2302 	umull	r2, r3, r3, r2
 8007f96:	095b      	lsrs	r3, r3, #5
 8007f98:	011c      	lsls	r4, r3, #4
 8007f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fa4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007fa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007fac:	4642      	mov	r2, r8
 8007fae:	464b      	mov	r3, r9
 8007fb0:	1891      	adds	r1, r2, r2
 8007fb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8007fb4:	415b      	adcs	r3, r3
 8007fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007fbc:	4641      	mov	r1, r8
 8007fbe:	eb12 0a01 	adds.w	sl, r2, r1
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	eb43 0b01 	adc.w	fp, r3, r1
 8007fc8:	f04f 0200 	mov.w	r2, #0
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007fd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007fd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fdc:	4692      	mov	sl, r2
 8007fde:	469b      	mov	fp, r3
 8007fe0:	4643      	mov	r3, r8
 8007fe2:	eb1a 0303 	adds.w	r3, sl, r3
 8007fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fea:	464b      	mov	r3, r9
 8007fec:	eb4b 0303 	adc.w	r3, fp, r3
 8007ff0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008000:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008004:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008008:	460b      	mov	r3, r1
 800800a:	18db      	adds	r3, r3, r3
 800800c:	643b      	str	r3, [r7, #64]	; 0x40
 800800e:	4613      	mov	r3, r2
 8008010:	eb42 0303 	adc.w	r3, r2, r3
 8008014:	647b      	str	r3, [r7, #68]	; 0x44
 8008016:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800801a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800801e:	f7f8 f92f 	bl	8000280 <__aeabi_uldivmod>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4611      	mov	r1, r2
 8008028:	4b3b      	ldr	r3, [pc, #236]	; (8008118 <UART_SetConfig+0x2d4>)
 800802a:	fba3 2301 	umull	r2, r3, r3, r1
 800802e:	095b      	lsrs	r3, r3, #5
 8008030:	2264      	movs	r2, #100	; 0x64
 8008032:	fb02 f303 	mul.w	r3, r2, r3
 8008036:	1acb      	subs	r3, r1, r3
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800803e:	4b36      	ldr	r3, [pc, #216]	; (8008118 <UART_SetConfig+0x2d4>)
 8008040:	fba3 2302 	umull	r2, r3, r3, r2
 8008044:	095b      	lsrs	r3, r3, #5
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800804c:	441c      	add	r4, r3
 800804e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008052:	2200      	movs	r2, #0
 8008054:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008058:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800805c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008060:	4642      	mov	r2, r8
 8008062:	464b      	mov	r3, r9
 8008064:	1891      	adds	r1, r2, r2
 8008066:	63b9      	str	r1, [r7, #56]	; 0x38
 8008068:	415b      	adcs	r3, r3
 800806a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800806c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008070:	4641      	mov	r1, r8
 8008072:	1851      	adds	r1, r2, r1
 8008074:	6339      	str	r1, [r7, #48]	; 0x30
 8008076:	4649      	mov	r1, r9
 8008078:	414b      	adcs	r3, r1
 800807a:	637b      	str	r3, [r7, #52]	; 0x34
 800807c:	f04f 0200 	mov.w	r2, #0
 8008080:	f04f 0300 	mov.w	r3, #0
 8008084:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008088:	4659      	mov	r1, fp
 800808a:	00cb      	lsls	r3, r1, #3
 800808c:	4651      	mov	r1, sl
 800808e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008092:	4651      	mov	r1, sl
 8008094:	00ca      	lsls	r2, r1, #3
 8008096:	4610      	mov	r0, r2
 8008098:	4619      	mov	r1, r3
 800809a:	4603      	mov	r3, r0
 800809c:	4642      	mov	r2, r8
 800809e:	189b      	adds	r3, r3, r2
 80080a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080a4:	464b      	mov	r3, r9
 80080a6:	460a      	mov	r2, r1
 80080a8:	eb42 0303 	adc.w	r3, r2, r3
 80080ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80080bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80080c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80080c4:	460b      	mov	r3, r1
 80080c6:	18db      	adds	r3, r3, r3
 80080c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80080ca:	4613      	mov	r3, r2
 80080cc:	eb42 0303 	adc.w	r3, r2, r3
 80080d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80080da:	f7f8 f8d1 	bl	8000280 <__aeabi_uldivmod>
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <UART_SetConfig+0x2d4>)
 80080e4:	fba3 1302 	umull	r1, r3, r3, r2
 80080e8:	095b      	lsrs	r3, r3, #5
 80080ea:	2164      	movs	r1, #100	; 0x64
 80080ec:	fb01 f303 	mul.w	r3, r1, r3
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	3332      	adds	r3, #50	; 0x32
 80080f6:	4a08      	ldr	r2, [pc, #32]	; (8008118 <UART_SetConfig+0x2d4>)
 80080f8:	fba2 2303 	umull	r2, r3, r2, r3
 80080fc:	095b      	lsrs	r3, r3, #5
 80080fe:	f003 0207 	and.w	r2, r3, #7
 8008102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4422      	add	r2, r4
 800810a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800810c:	e106      	b.n	800831c <UART_SetConfig+0x4d8>
 800810e:	bf00      	nop
 8008110:	40011000 	.word	0x40011000
 8008114:	40011400 	.word	0x40011400
 8008118:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800811c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008120:	2200      	movs	r2, #0
 8008122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008126:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800812a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800812e:	4642      	mov	r2, r8
 8008130:	464b      	mov	r3, r9
 8008132:	1891      	adds	r1, r2, r2
 8008134:	6239      	str	r1, [r7, #32]
 8008136:	415b      	adcs	r3, r3
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
 800813a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800813e:	4641      	mov	r1, r8
 8008140:	1854      	adds	r4, r2, r1
 8008142:	4649      	mov	r1, r9
 8008144:	eb43 0501 	adc.w	r5, r3, r1
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	f04f 0300 	mov.w	r3, #0
 8008150:	00eb      	lsls	r3, r5, #3
 8008152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008156:	00e2      	lsls	r2, r4, #3
 8008158:	4614      	mov	r4, r2
 800815a:	461d      	mov	r5, r3
 800815c:	4643      	mov	r3, r8
 800815e:	18e3      	adds	r3, r4, r3
 8008160:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008164:	464b      	mov	r3, r9
 8008166:	eb45 0303 	adc.w	r3, r5, r3
 800816a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800816e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800817a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800817e:	f04f 0200 	mov.w	r2, #0
 8008182:	f04f 0300 	mov.w	r3, #0
 8008186:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800818a:	4629      	mov	r1, r5
 800818c:	008b      	lsls	r3, r1, #2
 800818e:	4621      	mov	r1, r4
 8008190:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008194:	4621      	mov	r1, r4
 8008196:	008a      	lsls	r2, r1, #2
 8008198:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800819c:	f7f8 f870 	bl	8000280 <__aeabi_uldivmod>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4b60      	ldr	r3, [pc, #384]	; (8008328 <UART_SetConfig+0x4e4>)
 80081a6:	fba3 2302 	umull	r2, r3, r3, r2
 80081aa:	095b      	lsrs	r3, r3, #5
 80081ac:	011c      	lsls	r4, r3, #4
 80081ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80081bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80081c0:	4642      	mov	r2, r8
 80081c2:	464b      	mov	r3, r9
 80081c4:	1891      	adds	r1, r2, r2
 80081c6:	61b9      	str	r1, [r7, #24]
 80081c8:	415b      	adcs	r3, r3
 80081ca:	61fb      	str	r3, [r7, #28]
 80081cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081d0:	4641      	mov	r1, r8
 80081d2:	1851      	adds	r1, r2, r1
 80081d4:	6139      	str	r1, [r7, #16]
 80081d6:	4649      	mov	r1, r9
 80081d8:	414b      	adcs	r3, r1
 80081da:	617b      	str	r3, [r7, #20]
 80081dc:	f04f 0200 	mov.w	r2, #0
 80081e0:	f04f 0300 	mov.w	r3, #0
 80081e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081e8:	4659      	mov	r1, fp
 80081ea:	00cb      	lsls	r3, r1, #3
 80081ec:	4651      	mov	r1, sl
 80081ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081f2:	4651      	mov	r1, sl
 80081f4:	00ca      	lsls	r2, r1, #3
 80081f6:	4610      	mov	r0, r2
 80081f8:	4619      	mov	r1, r3
 80081fa:	4603      	mov	r3, r0
 80081fc:	4642      	mov	r2, r8
 80081fe:	189b      	adds	r3, r3, r2
 8008200:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008204:	464b      	mov	r3, r9
 8008206:	460a      	mov	r2, r1
 8008208:	eb42 0303 	adc.w	r3, r2, r3
 800820c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	67bb      	str	r3, [r7, #120]	; 0x78
 800821a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008228:	4649      	mov	r1, r9
 800822a:	008b      	lsls	r3, r1, #2
 800822c:	4641      	mov	r1, r8
 800822e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008232:	4641      	mov	r1, r8
 8008234:	008a      	lsls	r2, r1, #2
 8008236:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800823a:	f7f8 f821 	bl	8000280 <__aeabi_uldivmod>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	4611      	mov	r1, r2
 8008244:	4b38      	ldr	r3, [pc, #224]	; (8008328 <UART_SetConfig+0x4e4>)
 8008246:	fba3 2301 	umull	r2, r3, r3, r1
 800824a:	095b      	lsrs	r3, r3, #5
 800824c:	2264      	movs	r2, #100	; 0x64
 800824e:	fb02 f303 	mul.w	r3, r2, r3
 8008252:	1acb      	subs	r3, r1, r3
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	3332      	adds	r3, #50	; 0x32
 8008258:	4a33      	ldr	r2, [pc, #204]	; (8008328 <UART_SetConfig+0x4e4>)
 800825a:	fba2 2303 	umull	r2, r3, r2, r3
 800825e:	095b      	lsrs	r3, r3, #5
 8008260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008264:	441c      	add	r4, r3
 8008266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800826a:	2200      	movs	r2, #0
 800826c:	673b      	str	r3, [r7, #112]	; 0x70
 800826e:	677a      	str	r2, [r7, #116]	; 0x74
 8008270:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008274:	4642      	mov	r2, r8
 8008276:	464b      	mov	r3, r9
 8008278:	1891      	adds	r1, r2, r2
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	415b      	adcs	r3, r3
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008284:	4641      	mov	r1, r8
 8008286:	1851      	adds	r1, r2, r1
 8008288:	6039      	str	r1, [r7, #0]
 800828a:	4649      	mov	r1, r9
 800828c:	414b      	adcs	r3, r1
 800828e:	607b      	str	r3, [r7, #4]
 8008290:	f04f 0200 	mov.w	r2, #0
 8008294:	f04f 0300 	mov.w	r3, #0
 8008298:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800829c:	4659      	mov	r1, fp
 800829e:	00cb      	lsls	r3, r1, #3
 80082a0:	4651      	mov	r1, sl
 80082a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082a6:	4651      	mov	r1, sl
 80082a8:	00ca      	lsls	r2, r1, #3
 80082aa:	4610      	mov	r0, r2
 80082ac:	4619      	mov	r1, r3
 80082ae:	4603      	mov	r3, r0
 80082b0:	4642      	mov	r2, r8
 80082b2:	189b      	adds	r3, r3, r2
 80082b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80082b6:	464b      	mov	r3, r9
 80082b8:	460a      	mov	r2, r1
 80082ba:	eb42 0303 	adc.w	r3, r2, r3
 80082be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	663b      	str	r3, [r7, #96]	; 0x60
 80082ca:	667a      	str	r2, [r7, #100]	; 0x64
 80082cc:	f04f 0200 	mov.w	r2, #0
 80082d0:	f04f 0300 	mov.w	r3, #0
 80082d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80082d8:	4649      	mov	r1, r9
 80082da:	008b      	lsls	r3, r1, #2
 80082dc:	4641      	mov	r1, r8
 80082de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082e2:	4641      	mov	r1, r8
 80082e4:	008a      	lsls	r2, r1, #2
 80082e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80082ea:	f7f7 ffc9 	bl	8000280 <__aeabi_uldivmod>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4b0d      	ldr	r3, [pc, #52]	; (8008328 <UART_SetConfig+0x4e4>)
 80082f4:	fba3 1302 	umull	r1, r3, r3, r2
 80082f8:	095b      	lsrs	r3, r3, #5
 80082fa:	2164      	movs	r1, #100	; 0x64
 80082fc:	fb01 f303 	mul.w	r3, r1, r3
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	011b      	lsls	r3, r3, #4
 8008304:	3332      	adds	r3, #50	; 0x32
 8008306:	4a08      	ldr	r2, [pc, #32]	; (8008328 <UART_SetConfig+0x4e4>)
 8008308:	fba2 2303 	umull	r2, r3, r2, r3
 800830c:	095b      	lsrs	r3, r3, #5
 800830e:	f003 020f 	and.w	r2, r3, #15
 8008312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4422      	add	r2, r4
 800831a:	609a      	str	r2, [r3, #8]
}
 800831c:	bf00      	nop
 800831e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008322:	46bd      	mov	sp, r7
 8008324:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008328:	51eb851f 	.word	0x51eb851f

0800832c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8008332:	4b87      	ldr	r3, [pc, #540]	; (8008550 <MX_LWIP_Init+0x224>)
 8008334:	22c0      	movs	r2, #192	; 0xc0
 8008336:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008338:	4b85      	ldr	r3, [pc, #532]	; (8008550 <MX_LWIP_Init+0x224>)
 800833a:	22a8      	movs	r2, #168	; 0xa8
 800833c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 56;
 800833e:	4b84      	ldr	r3, [pc, #528]	; (8008550 <MX_LWIP_Init+0x224>)
 8008340:	2238      	movs	r2, #56	; 0x38
 8008342:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 8;
 8008344:	4b82      	ldr	r3, [pc, #520]	; (8008550 <MX_LWIP_Init+0x224>)
 8008346:	2208      	movs	r2, #8
 8008348:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800834a:	4b82      	ldr	r3, [pc, #520]	; (8008554 <MX_LWIP_Init+0x228>)
 800834c:	22ff      	movs	r2, #255	; 0xff
 800834e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008350:	4b80      	ldr	r3, [pc, #512]	; (8008554 <MX_LWIP_Init+0x228>)
 8008352:	22ff      	movs	r2, #255	; 0xff
 8008354:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008356:	4b7f      	ldr	r3, [pc, #508]	; (8008554 <MX_LWIP_Init+0x228>)
 8008358:	22ff      	movs	r2, #255	; 0xff
 800835a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800835c:	4b7d      	ldr	r3, [pc, #500]	; (8008554 <MX_LWIP_Init+0x228>)
 800835e:	2200      	movs	r2, #0
 8008360:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8008362:	4b7d      	ldr	r3, [pc, #500]	; (8008558 <MX_LWIP_Init+0x22c>)
 8008364:	22c0      	movs	r2, #192	; 0xc0
 8008366:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008368:	4b7b      	ldr	r3, [pc, #492]	; (8008558 <MX_LWIP_Init+0x22c>)
 800836a:	22a8      	movs	r2, #168	; 0xa8
 800836c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 56;
 800836e:	4b7a      	ldr	r3, [pc, #488]	; (8008558 <MX_LWIP_Init+0x22c>)
 8008370:	2238      	movs	r2, #56	; 0x38
 8008372:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 132;
 8008374:	4b78      	ldr	r3, [pc, #480]	; (8008558 <MX_LWIP_Init+0x22c>)
 8008376:	2284      	movs	r2, #132	; 0x84
 8008378:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800837a:	f000 fcf1 	bl	8008d60 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800837e:	4b74      	ldr	r3, [pc, #464]	; (8008550 <MX_LWIP_Init+0x224>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	061a      	lsls	r2, r3, #24
 8008384:	4b72      	ldr	r3, [pc, #456]	; (8008550 <MX_LWIP_Init+0x224>)
 8008386:	785b      	ldrb	r3, [r3, #1]
 8008388:	041b      	lsls	r3, r3, #16
 800838a:	431a      	orrs	r2, r3
 800838c:	4b70      	ldr	r3, [pc, #448]	; (8008550 <MX_LWIP_Init+0x224>)
 800838e:	789b      	ldrb	r3, [r3, #2]
 8008390:	021b      	lsls	r3, r3, #8
 8008392:	4313      	orrs	r3, r2
 8008394:	4a6e      	ldr	r2, [pc, #440]	; (8008550 <MX_LWIP_Init+0x224>)
 8008396:	78d2      	ldrb	r2, [r2, #3]
 8008398:	4313      	orrs	r3, r2
 800839a:	061a      	lsls	r2, r3, #24
 800839c:	4b6c      	ldr	r3, [pc, #432]	; (8008550 <MX_LWIP_Init+0x224>)
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	0619      	lsls	r1, r3, #24
 80083a2:	4b6b      	ldr	r3, [pc, #428]	; (8008550 <MX_LWIP_Init+0x224>)
 80083a4:	785b      	ldrb	r3, [r3, #1]
 80083a6:	041b      	lsls	r3, r3, #16
 80083a8:	4319      	orrs	r1, r3
 80083aa:	4b69      	ldr	r3, [pc, #420]	; (8008550 <MX_LWIP_Init+0x224>)
 80083ac:	789b      	ldrb	r3, [r3, #2]
 80083ae:	021b      	lsls	r3, r3, #8
 80083b0:	430b      	orrs	r3, r1
 80083b2:	4967      	ldr	r1, [pc, #412]	; (8008550 <MX_LWIP_Init+0x224>)
 80083b4:	78c9      	ldrb	r1, [r1, #3]
 80083b6:	430b      	orrs	r3, r1
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083be:	431a      	orrs	r2, r3
 80083c0:	4b63      	ldr	r3, [pc, #396]	; (8008550 <MX_LWIP_Init+0x224>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	0619      	lsls	r1, r3, #24
 80083c6:	4b62      	ldr	r3, [pc, #392]	; (8008550 <MX_LWIP_Init+0x224>)
 80083c8:	785b      	ldrb	r3, [r3, #1]
 80083ca:	041b      	lsls	r3, r3, #16
 80083cc:	4319      	orrs	r1, r3
 80083ce:	4b60      	ldr	r3, [pc, #384]	; (8008550 <MX_LWIP_Init+0x224>)
 80083d0:	789b      	ldrb	r3, [r3, #2]
 80083d2:	021b      	lsls	r3, r3, #8
 80083d4:	430b      	orrs	r3, r1
 80083d6:	495e      	ldr	r1, [pc, #376]	; (8008550 <MX_LWIP_Init+0x224>)
 80083d8:	78c9      	ldrb	r1, [r1, #3]
 80083da:	430b      	orrs	r3, r1
 80083dc:	0a1b      	lsrs	r3, r3, #8
 80083de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80083e2:	431a      	orrs	r2, r3
 80083e4:	4b5a      	ldr	r3, [pc, #360]	; (8008550 <MX_LWIP_Init+0x224>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	0619      	lsls	r1, r3, #24
 80083ea:	4b59      	ldr	r3, [pc, #356]	; (8008550 <MX_LWIP_Init+0x224>)
 80083ec:	785b      	ldrb	r3, [r3, #1]
 80083ee:	041b      	lsls	r3, r3, #16
 80083f0:	4319      	orrs	r1, r3
 80083f2:	4b57      	ldr	r3, [pc, #348]	; (8008550 <MX_LWIP_Init+0x224>)
 80083f4:	789b      	ldrb	r3, [r3, #2]
 80083f6:	021b      	lsls	r3, r3, #8
 80083f8:	430b      	orrs	r3, r1
 80083fa:	4955      	ldr	r1, [pc, #340]	; (8008550 <MX_LWIP_Init+0x224>)
 80083fc:	78c9      	ldrb	r1, [r1, #3]
 80083fe:	430b      	orrs	r3, r1
 8008400:	0e1b      	lsrs	r3, r3, #24
 8008402:	4313      	orrs	r3, r2
 8008404:	4a55      	ldr	r2, [pc, #340]	; (800855c <MX_LWIP_Init+0x230>)
 8008406:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008408:	4b52      	ldr	r3, [pc, #328]	; (8008554 <MX_LWIP_Init+0x228>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	061a      	lsls	r2, r3, #24
 800840e:	4b51      	ldr	r3, [pc, #324]	; (8008554 <MX_LWIP_Init+0x228>)
 8008410:	785b      	ldrb	r3, [r3, #1]
 8008412:	041b      	lsls	r3, r3, #16
 8008414:	431a      	orrs	r2, r3
 8008416:	4b4f      	ldr	r3, [pc, #316]	; (8008554 <MX_LWIP_Init+0x228>)
 8008418:	789b      	ldrb	r3, [r3, #2]
 800841a:	021b      	lsls	r3, r3, #8
 800841c:	4313      	orrs	r3, r2
 800841e:	4a4d      	ldr	r2, [pc, #308]	; (8008554 <MX_LWIP_Init+0x228>)
 8008420:	78d2      	ldrb	r2, [r2, #3]
 8008422:	4313      	orrs	r3, r2
 8008424:	061a      	lsls	r2, r3, #24
 8008426:	4b4b      	ldr	r3, [pc, #300]	; (8008554 <MX_LWIP_Init+0x228>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	0619      	lsls	r1, r3, #24
 800842c:	4b49      	ldr	r3, [pc, #292]	; (8008554 <MX_LWIP_Init+0x228>)
 800842e:	785b      	ldrb	r3, [r3, #1]
 8008430:	041b      	lsls	r3, r3, #16
 8008432:	4319      	orrs	r1, r3
 8008434:	4b47      	ldr	r3, [pc, #284]	; (8008554 <MX_LWIP_Init+0x228>)
 8008436:	789b      	ldrb	r3, [r3, #2]
 8008438:	021b      	lsls	r3, r3, #8
 800843a:	430b      	orrs	r3, r1
 800843c:	4945      	ldr	r1, [pc, #276]	; (8008554 <MX_LWIP_Init+0x228>)
 800843e:	78c9      	ldrb	r1, [r1, #3]
 8008440:	430b      	orrs	r3, r1
 8008442:	021b      	lsls	r3, r3, #8
 8008444:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008448:	431a      	orrs	r2, r3
 800844a:	4b42      	ldr	r3, [pc, #264]	; (8008554 <MX_LWIP_Init+0x228>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	0619      	lsls	r1, r3, #24
 8008450:	4b40      	ldr	r3, [pc, #256]	; (8008554 <MX_LWIP_Init+0x228>)
 8008452:	785b      	ldrb	r3, [r3, #1]
 8008454:	041b      	lsls	r3, r3, #16
 8008456:	4319      	orrs	r1, r3
 8008458:	4b3e      	ldr	r3, [pc, #248]	; (8008554 <MX_LWIP_Init+0x228>)
 800845a:	789b      	ldrb	r3, [r3, #2]
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	430b      	orrs	r3, r1
 8008460:	493c      	ldr	r1, [pc, #240]	; (8008554 <MX_LWIP_Init+0x228>)
 8008462:	78c9      	ldrb	r1, [r1, #3]
 8008464:	430b      	orrs	r3, r1
 8008466:	0a1b      	lsrs	r3, r3, #8
 8008468:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800846c:	431a      	orrs	r2, r3
 800846e:	4b39      	ldr	r3, [pc, #228]	; (8008554 <MX_LWIP_Init+0x228>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	0619      	lsls	r1, r3, #24
 8008474:	4b37      	ldr	r3, [pc, #220]	; (8008554 <MX_LWIP_Init+0x228>)
 8008476:	785b      	ldrb	r3, [r3, #1]
 8008478:	041b      	lsls	r3, r3, #16
 800847a:	4319      	orrs	r1, r3
 800847c:	4b35      	ldr	r3, [pc, #212]	; (8008554 <MX_LWIP_Init+0x228>)
 800847e:	789b      	ldrb	r3, [r3, #2]
 8008480:	021b      	lsls	r3, r3, #8
 8008482:	430b      	orrs	r3, r1
 8008484:	4933      	ldr	r1, [pc, #204]	; (8008554 <MX_LWIP_Init+0x228>)
 8008486:	78c9      	ldrb	r1, [r1, #3]
 8008488:	430b      	orrs	r3, r1
 800848a:	0e1b      	lsrs	r3, r3, #24
 800848c:	4313      	orrs	r3, r2
 800848e:	4a34      	ldr	r2, [pc, #208]	; (8008560 <MX_LWIP_Init+0x234>)
 8008490:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008492:	4b31      	ldr	r3, [pc, #196]	; (8008558 <MX_LWIP_Init+0x22c>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	061a      	lsls	r2, r3, #24
 8008498:	4b2f      	ldr	r3, [pc, #188]	; (8008558 <MX_LWIP_Init+0x22c>)
 800849a:	785b      	ldrb	r3, [r3, #1]
 800849c:	041b      	lsls	r3, r3, #16
 800849e:	431a      	orrs	r2, r3
 80084a0:	4b2d      	ldr	r3, [pc, #180]	; (8008558 <MX_LWIP_Init+0x22c>)
 80084a2:	789b      	ldrb	r3, [r3, #2]
 80084a4:	021b      	lsls	r3, r3, #8
 80084a6:	4313      	orrs	r3, r2
 80084a8:	4a2b      	ldr	r2, [pc, #172]	; (8008558 <MX_LWIP_Init+0x22c>)
 80084aa:	78d2      	ldrb	r2, [r2, #3]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	061a      	lsls	r2, r3, #24
 80084b0:	4b29      	ldr	r3, [pc, #164]	; (8008558 <MX_LWIP_Init+0x22c>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	0619      	lsls	r1, r3, #24
 80084b6:	4b28      	ldr	r3, [pc, #160]	; (8008558 <MX_LWIP_Init+0x22c>)
 80084b8:	785b      	ldrb	r3, [r3, #1]
 80084ba:	041b      	lsls	r3, r3, #16
 80084bc:	4319      	orrs	r1, r3
 80084be:	4b26      	ldr	r3, [pc, #152]	; (8008558 <MX_LWIP_Init+0x22c>)
 80084c0:	789b      	ldrb	r3, [r3, #2]
 80084c2:	021b      	lsls	r3, r3, #8
 80084c4:	430b      	orrs	r3, r1
 80084c6:	4924      	ldr	r1, [pc, #144]	; (8008558 <MX_LWIP_Init+0x22c>)
 80084c8:	78c9      	ldrb	r1, [r1, #3]
 80084ca:	430b      	orrs	r3, r1
 80084cc:	021b      	lsls	r3, r3, #8
 80084ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084d2:	431a      	orrs	r2, r3
 80084d4:	4b20      	ldr	r3, [pc, #128]	; (8008558 <MX_LWIP_Init+0x22c>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	0619      	lsls	r1, r3, #24
 80084da:	4b1f      	ldr	r3, [pc, #124]	; (8008558 <MX_LWIP_Init+0x22c>)
 80084dc:	785b      	ldrb	r3, [r3, #1]
 80084de:	041b      	lsls	r3, r3, #16
 80084e0:	4319      	orrs	r1, r3
 80084e2:	4b1d      	ldr	r3, [pc, #116]	; (8008558 <MX_LWIP_Init+0x22c>)
 80084e4:	789b      	ldrb	r3, [r3, #2]
 80084e6:	021b      	lsls	r3, r3, #8
 80084e8:	430b      	orrs	r3, r1
 80084ea:	491b      	ldr	r1, [pc, #108]	; (8008558 <MX_LWIP_Init+0x22c>)
 80084ec:	78c9      	ldrb	r1, [r1, #3]
 80084ee:	430b      	orrs	r3, r1
 80084f0:	0a1b      	lsrs	r3, r3, #8
 80084f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80084f6:	431a      	orrs	r2, r3
 80084f8:	4b17      	ldr	r3, [pc, #92]	; (8008558 <MX_LWIP_Init+0x22c>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	0619      	lsls	r1, r3, #24
 80084fe:	4b16      	ldr	r3, [pc, #88]	; (8008558 <MX_LWIP_Init+0x22c>)
 8008500:	785b      	ldrb	r3, [r3, #1]
 8008502:	041b      	lsls	r3, r3, #16
 8008504:	4319      	orrs	r1, r3
 8008506:	4b14      	ldr	r3, [pc, #80]	; (8008558 <MX_LWIP_Init+0x22c>)
 8008508:	789b      	ldrb	r3, [r3, #2]
 800850a:	021b      	lsls	r3, r3, #8
 800850c:	430b      	orrs	r3, r1
 800850e:	4912      	ldr	r1, [pc, #72]	; (8008558 <MX_LWIP_Init+0x22c>)
 8008510:	78c9      	ldrb	r1, [r1, #3]
 8008512:	430b      	orrs	r3, r1
 8008514:	0e1b      	lsrs	r3, r3, #24
 8008516:	4313      	orrs	r3, r2
 8008518:	4a12      	ldr	r2, [pc, #72]	; (8008564 <MX_LWIP_Init+0x238>)
 800851a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800851c:	4b12      	ldr	r3, [pc, #72]	; (8008568 <MX_LWIP_Init+0x23c>)
 800851e:	9302      	str	r3, [sp, #8]
 8008520:	4b12      	ldr	r3, [pc, #72]	; (800856c <MX_LWIP_Init+0x240>)
 8008522:	9301      	str	r3, [sp, #4]
 8008524:	2300      	movs	r3, #0
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	4b0e      	ldr	r3, [pc, #56]	; (8008564 <MX_LWIP_Init+0x238>)
 800852a:	4a0d      	ldr	r2, [pc, #52]	; (8008560 <MX_LWIP_Init+0x234>)
 800852c:	490b      	ldr	r1, [pc, #44]	; (800855c <MX_LWIP_Init+0x230>)
 800852e:	4810      	ldr	r0, [pc, #64]	; (8008570 <MX_LWIP_Init+0x244>)
 8008530:	f001 f900 	bl	8009734 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008534:	480e      	ldr	r0, [pc, #56]	; (8008570 <MX_LWIP_Init+0x244>)
 8008536:	f001 faab 	bl	8009a90 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800853a:	480d      	ldr	r0, [pc, #52]	; (8008570 <MX_LWIP_Init+0x244>)
 800853c:	f001 fab8 	bl	8009ab0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008540:	490c      	ldr	r1, [pc, #48]	; (8008574 <MX_LWIP_Init+0x248>)
 8008542:	480b      	ldr	r0, [pc, #44]	; (8008570 <MX_LWIP_Init+0x244>)
 8008544:	f001 fbb6 	bl	8009cb4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008548:	bf00      	nop
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	20000978 	.word	0x20000978
 8008554:	2000097c 	.word	0x2000097c
 8008558:	20000980 	.word	0x20000980
 800855c:	2000096c 	.word	0x2000096c
 8008560:	20000970 	.word	0x20000970
 8008564:	20000974 	.word	0x20000974
 8008568:	08012ef9 	.word	0x08012ef9
 800856c:	08008885 	.word	0x08008885
 8008570:	20000938 	.word	0x20000938
 8008574:	080085c9 	.word	0x080085c9

08008578 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8008580:	f7fb fdd6 	bl	8004130 <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	4b08      	ldr	r3, [pc, #32]	; (80085a8 <Ethernet_Link_Periodic_Handle+0x30>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	2b63      	cmp	r3, #99	; 0x63
 800858e:	d907      	bls.n	80085a0 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8008590:	f7fb fdce 	bl	8004130 <HAL_GetTick>
 8008594:	4603      	mov	r3, r0
 8008596:	4a04      	ldr	r2, [pc, #16]	; (80085a8 <Ethernet_Link_Periodic_Handle+0x30>)
 8008598:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fab6 	bl	8008b0c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	20000934 	.word	0x20000934

080085ac <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80085b0:	4804      	ldr	r0, [pc, #16]	; (80085c4 <MX_LWIP_Process+0x18>)
 80085b2:	f000 f947 	bl	8008844 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80085b6:	f008 fa77 	bl	8010aa8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80085ba:	4802      	ldr	r0, [pc, #8]	; (80085c4 <MX_LWIP_Process+0x18>)
 80085bc:	f7ff ffdc 	bl	8008578 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80085c0:	bf00      	nop
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	20000938 	.word	0x20000938

080085c8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80085e8:	4b40      	ldr	r3, [pc, #256]	; (80086ec <low_level_init+0x110>)
 80085ea:	4a41      	ldr	r2, [pc, #260]	; (80086f0 <low_level_init+0x114>)
 80085ec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80085ee:	2300      	movs	r3, #0
 80085f0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80085f2:	2380      	movs	r3, #128	; 0x80
 80085f4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80085f6:	23e1      	movs	r3, #225	; 0xe1
 80085f8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80085fa:	2300      	movs	r3, #0
 80085fc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80085fe:	2300      	movs	r3, #0
 8008600:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008602:	2300      	movs	r3, #0
 8008604:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008606:	4a39      	ldr	r2, [pc, #228]	; (80086ec <low_level_init+0x110>)
 8008608:	f107 0308 	add.w	r3, r7, #8
 800860c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800860e:	4b37      	ldr	r3, [pc, #220]	; (80086ec <low_level_init+0x110>)
 8008610:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008614:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008616:	4b35      	ldr	r3, [pc, #212]	; (80086ec <low_level_init+0x110>)
 8008618:	4a36      	ldr	r2, [pc, #216]	; (80086f4 <low_level_init+0x118>)
 800861a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800861c:	4b33      	ldr	r3, [pc, #204]	; (80086ec <low_level_init+0x110>)
 800861e:	4a36      	ldr	r2, [pc, #216]	; (80086f8 <low_level_init+0x11c>)
 8008620:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008622:	4b32      	ldr	r3, [pc, #200]	; (80086ec <low_level_init+0x110>)
 8008624:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008628:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800862a:	4830      	ldr	r0, [pc, #192]	; (80086ec <low_level_init+0x110>)
 800862c:	f7fb ff54 	bl	80044d8 <HAL_ETH_Init>
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008634:	2238      	movs	r2, #56	; 0x38
 8008636:	2100      	movs	r1, #0
 8008638:	4830      	ldr	r0, [pc, #192]	; (80086fc <low_level_init+0x120>)
 800863a:	f00c fb63 	bl	8014d04 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800863e:	4b2f      	ldr	r3, [pc, #188]	; (80086fc <low_level_init+0x120>)
 8008640:	2221      	movs	r2, #33	; 0x21
 8008642:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008644:	4b2d      	ldr	r3, [pc, #180]	; (80086fc <low_level_init+0x120>)
 8008646:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800864a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800864c:	4b2b      	ldr	r3, [pc, #172]	; (80086fc <low_level_init+0x120>)
 800864e:	2200      	movs	r2, #0
 8008650:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008652:	482b      	ldr	r0, [pc, #172]	; (8008700 <low_level_init+0x124>)
 8008654:	f000 ff36 	bl	80094c4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2206      	movs	r2, #6
 800865c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008660:	4b22      	ldr	r3, [pc, #136]	; (80086ec <low_level_init+0x110>)
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	781a      	ldrb	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800866c:	4b1f      	ldr	r3, [pc, #124]	; (80086ec <low_level_init+0x110>)
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	785a      	ldrb	r2, [r3, #1]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008678:	4b1c      	ldr	r3, [pc, #112]	; (80086ec <low_level_init+0x110>)
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	789a      	ldrb	r2, [r3, #2]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008684:	4b19      	ldr	r3, [pc, #100]	; (80086ec <low_level_init+0x110>)
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	78da      	ldrb	r2, [r3, #3]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008690:	4b16      	ldr	r3, [pc, #88]	; (80086ec <low_level_init+0x110>)
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	791a      	ldrb	r2, [r3, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800869c:	4b13      	ldr	r3, [pc, #76]	; (80086ec <low_level_init+0x110>)
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	795a      	ldrb	r2, [r3, #5]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80086ae:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80086b6:	f043 030a 	orr.w	r3, r3, #10
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d



/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80086c2:	4910      	ldr	r1, [pc, #64]	; (8008704 <low_level_init+0x128>)
 80086c4:	4810      	ldr	r0, [pc, #64]	; (8008708 <low_level_init+0x12c>)
 80086c6:	f7f9 fb6b 	bl	8001da0 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80086ca:	480f      	ldr	r0, [pc, #60]	; (8008708 <low_level_init+0x12c>)
 80086cc:	f7f9 fb9a 	bl	8001e04 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d103      	bne.n	80086de <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fa18 	bl	8008b0c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80086dc:	e001      	b.n	80086e2 <low_level_init+0x106>
    Error_Handler();
 80086de:	f00b f919 	bl	8013914 <Error_Handler>
}
 80086e2:	bf00      	nop
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	20005450 	.word	0x20005450
 80086f0:	40028000 	.word	0x40028000
 80086f4:	200053b0 	.word	0x200053b0
 80086f8:	20005310 	.word	0x20005310
 80086fc:	20005500 	.word	0x20005500
 8008700:	08018a64 	.word	0x08018a64
 8008704:	20000458 	.word	0x20000458
 8008708:	20005538 	.word	0x20005538

0800870c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b092      	sub	sp, #72	; 0x48
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800871a:	2300      	movs	r3, #0
 800871c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008724:	f107 030c 	add.w	r3, r7, #12
 8008728:	2230      	movs	r2, #48	; 0x30
 800872a:	2100      	movs	r1, #0
 800872c:	4618      	mov	r0, r3
 800872e:	f00c fae9 	bl	8014d04 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008732:	f107 030c 	add.w	r3, r7, #12
 8008736:	2230      	movs	r2, #48	; 0x30
 8008738:	2100      	movs	r1, #0
 800873a:	4618      	mov	r0, r3
 800873c:	f00c fae2 	bl	8014d04 <memset>

  for(q = p; q != NULL; q = q->next)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	643b      	str	r3, [r7, #64]	; 0x40
 8008744:	e045      	b.n	80087d2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008748:	2b03      	cmp	r3, #3
 800874a:	d902      	bls.n	8008752 <low_level_output+0x46>
      return ERR_IF;
 800874c:	f06f 030b 	mvn.w	r3, #11
 8008750:	e055      	b.n	80087fe <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8008752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008754:	6859      	ldr	r1, [r3, #4]
 8008756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008758:	4613      	mov	r3, r2
 800875a:	005b      	lsls	r3, r3, #1
 800875c:	4413      	add	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	3348      	adds	r3, #72	; 0x48
 8008762:	443b      	add	r3, r7
 8008764:	3b3c      	subs	r3, #60	; 0x3c
 8008766:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800876a:	895b      	ldrh	r3, [r3, #10]
 800876c:	4619      	mov	r1, r3
 800876e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008770:	4613      	mov	r3, r2
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	3348      	adds	r3, #72	; 0x48
 800877a:	443b      	add	r3, r7
 800877c:	3b38      	subs	r3, #56	; 0x38
 800877e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008782:	2b00      	cmp	r3, #0
 8008784:	d011      	beq.n	80087aa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008788:	1e5a      	subs	r2, r3, #1
 800878a:	f107 000c 	add.w	r0, r7, #12
 800878e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008790:	460b      	mov	r3, r1
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	440b      	add	r3, r1
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	18c1      	adds	r1, r0, r3
 800879a:	4613      	mov	r3, r2
 800879c:	005b      	lsls	r3, r3, #1
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	3348      	adds	r3, #72	; 0x48
 80087a4:	443b      	add	r3, r7
 80087a6:	3b34      	subs	r3, #52	; 0x34
 80087a8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80087aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d109      	bne.n	80087c6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80087b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087b4:	4613      	mov	r3, r2
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	4413      	add	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	3348      	adds	r3, #72	; 0x48
 80087be:	443b      	add	r3, r7
 80087c0:	3b34      	subs	r3, #52	; 0x34
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80087c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087c8:	3301      	adds	r3, #1
 80087ca:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80087cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	643b      	str	r3, [r7, #64]	; 0x40
 80087d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1b6      	bne.n	8008746 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	891b      	ldrh	r3, [r3, #8]
 80087dc:	461a      	mov	r2, r3
 80087de:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <low_level_output+0xfc>)
 80087e0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80087e2:	4a09      	ldr	r2, [pc, #36]	; (8008808 <low_level_output+0xfc>)
 80087e4:	f107 030c 	add.w	r3, r7, #12
 80087e8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80087ea:	4a07      	ldr	r2, [pc, #28]	; (8008808 <low_level_output+0xfc>)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80087f0:	2214      	movs	r2, #20
 80087f2:	4905      	ldr	r1, [pc, #20]	; (8008808 <low_level_output+0xfc>)
 80087f4:	4805      	ldr	r0, [pc, #20]	; (800880c <low_level_output+0x100>)
 80087f6:	f7fb ffa5 	bl	8004744 <HAL_ETH_Transmit>

  return errval;
 80087fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3748      	adds	r7, #72	; 0x48
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20005500 	.word	0x20005500
 800880c:	20005450 	.word	0x20005450

08008810 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800881c:	4b07      	ldr	r3, [pc, #28]	; (800883c <low_level_input+0x2c>)
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d105      	bne.n	8008830 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008824:	f107 030c 	add.w	r3, r7, #12
 8008828:	4619      	mov	r1, r3
 800882a:	4805      	ldr	r0, [pc, #20]	; (8008840 <low_level_input+0x30>)
 800882c:	f7fc f81e 	bl	800486c <HAL_ETH_ReadData>
  }

  return p;
 8008830:	68fb      	ldr	r3, [r7, #12]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	2000530c 	.word	0x2000530c
 8008840:	20005450 	.word	0x20005450

08008844 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800884c:	2300      	movs	r3, #0
 800884e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff ffdd 	bl	8008810 <low_level_input>
 8008856:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00a      	beq.n	8008874 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	6879      	ldr	r1, [r7, #4]
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	4798      	blx	r3
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f001 fda0 	bl	800a3b4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1ea      	bne.n	8008850 <ethernetif_input+0xc>
}
 800887a:	bf00      	nop
 800887c:	bf00      	nop
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d106      	bne.n	80088a0 <ethernetif_init+0x1c>
 8008892:	4b0e      	ldr	r3, [pc, #56]	; (80088cc <ethernetif_init+0x48>)
 8008894:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008898:	490d      	ldr	r1, [pc, #52]	; (80088d0 <ethernetif_init+0x4c>)
 800889a:	480e      	ldr	r0, [pc, #56]	; (80088d4 <ethernetif_init+0x50>)
 800889c:	f00c f954 	bl	8014b48 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2273      	movs	r2, #115	; 0x73
 80088a4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2274      	movs	r2, #116	; 0x74
 80088ac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a09      	ldr	r2, [pc, #36]	; (80088d8 <ethernetif_init+0x54>)
 80088b4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a08      	ldr	r2, [pc, #32]	; (80088dc <ethernetif_init+0x58>)
 80088ba:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff fe8d 	bl	80085dc <low_level_init>

  return ERR_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	08016018 	.word	0x08016018
 80088d0:	08016034 	.word	0x08016034
 80088d4:	08016044 	.word	0x08016044
 80088d8:	080113c5 	.word	0x080113c5
 80088dc:	0800870d 	.word	0x0800870d

080088e0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80088ec:	68f9      	ldr	r1, [r7, #12]
 80088ee:	4807      	ldr	r0, [pc, #28]	; (800890c <pbuf_free_custom+0x2c>)
 80088f0:	f000 feca 	bl	8009688 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80088f4:	4b06      	ldr	r3, [pc, #24]	; (8008910 <pbuf_free_custom+0x30>)
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d102      	bne.n	8008902 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80088fc:	4b04      	ldr	r3, [pc, #16]	; (8008910 <pbuf_free_custom+0x30>)
 80088fe:	2200      	movs	r2, #0
 8008900:	701a      	strb	r2, [r3, #0]
  }
}
 8008902:	bf00      	nop
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	08018a64 	.word	0x08018a64
 8008910:	2000530c 	.word	0x2000530c

08008914 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008918:	f7fb fc0a 	bl	8004130 <HAL_GetTick>
 800891c:	4603      	mov	r3, r0
}
 800891e:	4618      	mov	r0, r3
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08e      	sub	sp, #56	; 0x38
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800892c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	605a      	str	r2, [r3, #4]
 8008936:	609a      	str	r2, [r3, #8]
 8008938:	60da      	str	r2, [r3, #12]
 800893a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a46      	ldr	r2, [pc, #280]	; (8008a5c <HAL_ETH_MspInit+0x138>)
 8008942:	4293      	cmp	r3, r2
 8008944:	f040 8085 	bne.w	8008a52 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008948:	2300      	movs	r3, #0
 800894a:	623b      	str	r3, [r7, #32]
 800894c:	4b44      	ldr	r3, [pc, #272]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 800894e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008950:	4a43      	ldr	r2, [pc, #268]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 8008952:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008956:	6313      	str	r3, [r2, #48]	; 0x30
 8008958:	4b41      	ldr	r3, [pc, #260]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 800895a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008960:	623b      	str	r3, [r7, #32]
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	2300      	movs	r3, #0
 8008966:	61fb      	str	r3, [r7, #28]
 8008968:	4b3d      	ldr	r3, [pc, #244]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	4a3c      	ldr	r2, [pc, #240]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 800896e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008972:	6313      	str	r3, [r2, #48]	; 0x30
 8008974:	4b3a      	ldr	r3, [pc, #232]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 8008976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008978:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800897c:	61fb      	str	r3, [r7, #28]
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	2300      	movs	r3, #0
 8008982:	61bb      	str	r3, [r7, #24]
 8008984:	4b36      	ldr	r3, [pc, #216]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 8008986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008988:	4a35      	ldr	r2, [pc, #212]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 800898a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800898e:	6313      	str	r3, [r2, #48]	; 0x30
 8008990:	4b33      	ldr	r3, [pc, #204]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 8008992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008998:	61bb      	str	r3, [r7, #24]
 800899a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800899c:	2300      	movs	r3, #0
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	4b2f      	ldr	r3, [pc, #188]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 80089a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a4:	4a2e      	ldr	r2, [pc, #184]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 80089a6:	f043 0304 	orr.w	r3, r3, #4
 80089aa:	6313      	str	r3, [r2, #48]	; 0x30
 80089ac:	4b2c      	ldr	r3, [pc, #176]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 80089ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	617b      	str	r3, [r7, #20]
 80089b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089b8:	2300      	movs	r3, #0
 80089ba:	613b      	str	r3, [r7, #16]
 80089bc:	4b28      	ldr	r3, [pc, #160]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 80089be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c0:	4a27      	ldr	r2, [pc, #156]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 80089c2:	f043 0301 	orr.w	r3, r3, #1
 80089c6:	6313      	str	r3, [r2, #48]	; 0x30
 80089c8:	4b25      	ldr	r3, [pc, #148]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 80089ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	613b      	str	r3, [r7, #16]
 80089d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	4b21      	ldr	r3, [pc, #132]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 80089da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089dc:	4a20      	ldr	r2, [pc, #128]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 80089de:	f043 0302 	orr.w	r3, r3, #2
 80089e2:	6313      	str	r3, [r2, #48]	; 0x30
 80089e4:	4b1e      	ldr	r3, [pc, #120]	; (8008a60 <HAL_ETH_MspInit+0x13c>)
 80089e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e8:	f003 0302 	and.w	r3, r3, #2
 80089ec:	60fb      	str	r3, [r7, #12]
 80089ee:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80089f0:	2332      	movs	r3, #50	; 0x32
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089f4:	2302      	movs	r3, #2
 80089f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089fc:	2303      	movs	r3, #3
 80089fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008a00:	230b      	movs	r3, #11
 8008a02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4816      	ldr	r0, [pc, #88]	; (8008a64 <HAL_ETH_MspInit+0x140>)
 8008a0c:	f7fc fe66 	bl	80056dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008a10:	2386      	movs	r3, #134	; 0x86
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a14:	2302      	movs	r3, #2
 8008a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008a20:	230b      	movs	r3, #11
 8008a22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a28:	4619      	mov	r1, r3
 8008a2a:	480f      	ldr	r0, [pc, #60]	; (8008a68 <HAL_ETH_MspInit+0x144>)
 8008a2c:	f7fc fe56 	bl	80056dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8008a30:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a36:	2302      	movs	r3, #2
 8008a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008a42:	230b      	movs	r3, #11
 8008a44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4807      	ldr	r0, [pc, #28]	; (8008a6c <HAL_ETH_MspInit+0x148>)
 8008a4e:	f7fc fe45 	bl	80056dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008a52:	bf00      	nop
 8008a54:	3738      	adds	r7, #56	; 0x38
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	40028000 	.word	0x40028000
 8008a60:	40023800 	.word	0x40023800
 8008a64:	40020800 	.word	0x40020800
 8008a68:	40020000 	.word	0x40020000
 8008a6c:	40020400 	.word	0x40020400

08008a70 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008a74:	4802      	ldr	r0, [pc, #8]	; (8008a80 <ETH_PHY_IO_Init+0x10>)
 8008a76:	f7fc f9d5 	bl	8004e24 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	20005450 	.word	0x20005450

08008a84 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008a84:	b480      	push	{r7}
 8008a86:	af00      	add	r7, sp, #0
  return 0;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	68f9      	ldr	r1, [r7, #12]
 8008aa6:	4807      	ldr	r0, [pc, #28]	; (8008ac4 <ETH_PHY_IO_ReadReg+0x30>)
 8008aa8:	f7fc f824 	bl	8004af4 <HAL_ETH_ReadPHYRegister>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab6:	e000      	b.n	8008aba <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20005450 	.word	0x20005450

08008ac8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	68f9      	ldr	r1, [r7, #12]
 8008ada:	4807      	ldr	r0, [pc, #28]	; (8008af8 <ETH_PHY_IO_WriteReg+0x30>)
 8008adc:	f7fc f855 	bl	8004b8a <HAL_ETH_WritePHYRegister>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aea:	e000      	b.n	8008aee <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20005450 	.word	0x20005450

08008afc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008b00:	f7fb fb16 	bl	8004130 <HAL_GetTick>
 8008b04:	4603      	mov	r3, r0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	bd80      	pop	{r7, pc}
	...

08008b0c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b0a0      	sub	sp, #128	; 0x80
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8008b14:	f107 030c 	add.w	r3, r7, #12
 8008b18:	2264      	movs	r2, #100	; 0x64
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f00c f8f1 	bl	8014d04 <memset>
  int32_t PHYLinkState = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b2e:	2300      	movs	r3, #0
 8008b30:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008b32:	483a      	ldr	r0, [pc, #232]	; (8008c1c <ethernet_link_check_state+0x110>)
 8008b34:	f7f9 fa0e 	bl	8001f54 <LAN8742_GetLinkState>
 8008b38:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b40:	089b      	lsrs	r3, r3, #2
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00c      	beq.n	8008b66 <ethernet_link_check_state+0x5a>
 8008b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	dc09      	bgt.n	8008b66 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8008b52:	4833      	ldr	r0, [pc, #204]	; (8008c20 <ethernet_link_check_state+0x114>)
 8008b54:	f7fb fd9d 	bl	8004692 <HAL_ETH_Stop>
    netif_set_down(netif);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f001 f815 	bl	8009b88 <netif_set_down>
    netif_set_link_down(netif);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f001 f878 	bl	8009c54 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8008b64:	e055      	b.n	8008c12 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b6c:	f003 0304 	and.w	r3, r3, #4
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d14e      	bne.n	8008c12 <ethernet_link_check_state+0x106>
 8008b74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	dd4b      	ble.n	8008c12 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8008b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b7c:	3b02      	subs	r3, #2
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d82a      	bhi.n	8008bd8 <ethernet_link_check_state+0xcc>
 8008b82:	a201      	add	r2, pc, #4	; (adr r2, 8008b88 <ethernet_link_check_state+0x7c>)
 8008b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b88:	08008b99 	.word	0x08008b99
 8008b8c:	08008bab 	.word	0x08008bab
 8008b90:	08008bbb 	.word	0x08008bbb
 8008b94:	08008bcb 	.word	0x08008bcb
      duplex = ETH_FULLDUPLEX_MODE;
 8008b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b9c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008b9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ba2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008ba8:	e017      	b.n	8008bda <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008baa:	2300      	movs	r3, #0
 8008bac:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008bae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008bb2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008bb8:	e00f      	b.n	8008bda <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8008bba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bbe:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008bc8:	e007      	b.n	8008bda <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008bd6:	e000      	b.n	8008bda <ethernet_link_check_state+0xce>
      break;
 8008bd8:	bf00      	nop
    if(linkchanged)
 8008bda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d018      	beq.n	8008c12 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008be0:	f107 030c 	add.w	r3, r7, #12
 8008be4:	4619      	mov	r1, r3
 8008be6:	480e      	ldr	r0, [pc, #56]	; (8008c20 <ethernet_link_check_state+0x114>)
 8008be8:	f7fc f818 	bl	8004c1c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8008bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bf2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008bf4:	f107 030c 	add.w	r3, r7, #12
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4809      	ldr	r0, [pc, #36]	; (8008c20 <ethernet_link_check_state+0x114>)
 8008bfc:	f7fc f8f8 	bl	8004df0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8008c00:	4807      	ldr	r0, [pc, #28]	; (8008c20 <ethernet_link_check_state+0x114>)
 8008c02:	f7fb fce7 	bl	80045d4 <HAL_ETH_Start>
      netif_set_up(netif);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 ff52 	bl	8009ab0 <netif_set_up>
      netif_set_link_up(netif);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 ffed 	bl	8009bec <netif_set_link_up>
}
 8008c12:	bf00      	nop
 8008c14:	3780      	adds	r7, #128	; 0x80
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	20005538 	.word	0x20005538
 8008c20:	20005450 	.word	0x20005450

08008c24 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af02      	add	r7, sp, #8
 8008c2a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008c2c:	4812      	ldr	r0, [pc, #72]	; (8008c78 <HAL_ETH_RxAllocateCallback+0x54>)
 8008c2e:	f000 fcbd 	bl	80095ac <memp_malloc_pool>
 8008c32:	60f8      	str	r0, [r7, #12]
  if (p)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d014      	beq.n	8008c64 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f103 0220 	add.w	r2, r3, #32
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4a0d      	ldr	r2, [pc, #52]	; (8008c7c <HAL_ETH_RxAllocateCallback+0x58>)
 8008c48:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
 8008c52:	9201      	str	r2, [sp, #4]
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2241      	movs	r2, #65	; 0x41
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	f001 f9ef 	bl	800a040 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008c62:	e005      	b.n	8008c70 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008c64:	4b06      	ldr	r3, [pc, #24]	; (8008c80 <HAL_ETH_RxAllocateCallback+0x5c>)
 8008c66:	2201      	movs	r2, #1
 8008c68:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	601a      	str	r2, [r3, #0]
}
 8008c70:	bf00      	nop
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	08018a64 	.word	0x08018a64
 8008c7c:	080088e1 	.word	0x080088e1
 8008c80:	2000530c 	.word	0x2000530c

08008c84 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b089      	sub	sp, #36	; 0x24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
 8008c90:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	3b20      	subs	r3, #32
 8008ca2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	2200      	movs	r2, #0
 8008cae:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	887a      	ldrh	r2, [r7, #2]
 8008cb4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d103      	bne.n	8008cc6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	e003      	b.n	8008cce <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	69fa      	ldr	r2, [r7, #28]
 8008ccc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	69fa      	ldr	r2, [r7, #28]
 8008cd2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	61fb      	str	r3, [r7, #28]
 8008cda:	e009      	b.n	8008cf0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	891a      	ldrh	r2, [r3, #8]
 8008ce0:	887b      	ldrh	r3, [r7, #2]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	61fb      	str	r3, [r7, #28]
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1f2      	bne.n	8008cdc <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008cf6:	bf00      	nop
 8008cf8:	bf00      	nop
 8008cfa:	3724      	adds	r7, #36	; 0x24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008d0e:	88fb      	ldrh	r3, [r7, #6]
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	b21a      	sxth	r2, r3
 8008d14:	88fb      	ldrh	r3, [r7, #6]
 8008d16:	0a1b      	lsrs	r3, r3, #8
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	b21b      	sxth	r3, r3
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	b21b      	sxth	r3, r3
 8008d20:	b29b      	uxth	r3, r3
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	061a      	lsls	r2, r3, #24
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	021b      	lsls	r3, r3, #8
 8008d3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d42:	431a      	orrs	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	0a1b      	lsrs	r3, r3, #8
 8008d48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008d4c:	431a      	orrs	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	0e1b      	lsrs	r3, r3, #24
 8008d52:	4313      	orrs	r3, r2
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008d6a:	f000 f8d3 	bl	8008f14 <mem_init>
  memp_init();
 8008d6e:	f000 fbd9 	bl	8009524 <memp_init>
  pbuf_init();
  netif_init();
 8008d72:	f000 fcd7 	bl	8009724 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008d76:	f001 fdab 	bl	800a8d0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008d7a:	f007 fe4d 	bl	8010a18 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008d7e:	bf00      	nop
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	4603      	mov	r3, r0
 8008d90:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008d92:	4b05      	ldr	r3, [pc, #20]	; (8008da8 <ptr_to_mem+0x20>)
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	88fb      	ldrh	r3, [r7, #6]
 8008d98:	4413      	add	r3, r2
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	20005bc4 	.word	0x20005bc4

08008dac <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008db4:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <mem_to_ptr+0x20>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	b29b      	uxth	r3, r3
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	20005bc4 	.word	0x20005bc4

08008dd0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008dd0:	b590      	push	{r4, r7, lr}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008dd8:	4b45      	ldr	r3, [pc, #276]	; (8008ef0 <plug_holes+0x120>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d206      	bcs.n	8008df0 <plug_holes+0x20>
 8008de2:	4b44      	ldr	r3, [pc, #272]	; (8008ef4 <plug_holes+0x124>)
 8008de4:	f240 12df 	movw	r2, #479	; 0x1df
 8008de8:	4943      	ldr	r1, [pc, #268]	; (8008ef8 <plug_holes+0x128>)
 8008dea:	4844      	ldr	r0, [pc, #272]	; (8008efc <plug_holes+0x12c>)
 8008dec:	f00b feac 	bl	8014b48 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008df0:	4b43      	ldr	r3, [pc, #268]	; (8008f00 <plug_holes+0x130>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d306      	bcc.n	8008e08 <plug_holes+0x38>
 8008dfa:	4b3e      	ldr	r3, [pc, #248]	; (8008ef4 <plug_holes+0x124>)
 8008dfc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008e00:	4940      	ldr	r1, [pc, #256]	; (8008f04 <plug_holes+0x134>)
 8008e02:	483e      	ldr	r0, [pc, #248]	; (8008efc <plug_holes+0x12c>)
 8008e04:	f00b fea0 	bl	8014b48 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	791b      	ldrb	r3, [r3, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d006      	beq.n	8008e1e <plug_holes+0x4e>
 8008e10:	4b38      	ldr	r3, [pc, #224]	; (8008ef4 <plug_holes+0x124>)
 8008e12:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008e16:	493c      	ldr	r1, [pc, #240]	; (8008f08 <plug_holes+0x138>)
 8008e18:	4838      	ldr	r0, [pc, #224]	; (8008efc <plug_holes+0x12c>)
 8008e1a:	f00b fe95 	bl	8014b48 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008e26:	d906      	bls.n	8008e36 <plug_holes+0x66>
 8008e28:	4b32      	ldr	r3, [pc, #200]	; (8008ef4 <plug_holes+0x124>)
 8008e2a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008e2e:	4937      	ldr	r1, [pc, #220]	; (8008f0c <plug_holes+0x13c>)
 8008e30:	4832      	ldr	r0, [pc, #200]	; (8008efc <plug_holes+0x12c>)
 8008e32:	f00b fe89 	bl	8014b48 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7ff ffa4 	bl	8008d88 <ptr_to_mem>
 8008e40:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d024      	beq.n	8008e94 <plug_holes+0xc4>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	791b      	ldrb	r3, [r3, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d120      	bne.n	8008e94 <plug_holes+0xc4>
 8008e52:	4b2b      	ldr	r3, [pc, #172]	; (8008f00 <plug_holes+0x130>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d01b      	beq.n	8008e94 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008e5c:	4b2c      	ldr	r3, [pc, #176]	; (8008f10 <plug_holes+0x140>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d102      	bne.n	8008e6c <plug_holes+0x9c>
      lfree = mem;
 8008e66:	4a2a      	ldr	r2, [pc, #168]	; (8008f10 <plug_holes+0x140>)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	881a      	ldrh	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008e7c:	d00a      	beq.n	8008e94 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7ff ff80 	bl	8008d88 <ptr_to_mem>
 8008e88:	4604      	mov	r4, r0
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7ff ff8e 	bl	8008dac <mem_to_ptr>
 8008e90:	4603      	mov	r3, r0
 8008e92:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	885b      	ldrh	r3, [r3, #2]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7ff ff75 	bl	8008d88 <ptr_to_mem>
 8008e9e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d01f      	beq.n	8008ee8 <plug_holes+0x118>
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	791b      	ldrb	r3, [r3, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d11b      	bne.n	8008ee8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008eb0:	4b17      	ldr	r3, [pc, #92]	; (8008f10 <plug_holes+0x140>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d102      	bne.n	8008ec0 <plug_holes+0xf0>
      lfree = pmem;
 8008eba:	4a15      	ldr	r2, [pc, #84]	; (8008f10 <plug_holes+0x140>)
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	881a      	ldrh	r2, [r3, #0]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	881b      	ldrh	r3, [r3, #0]
 8008ecc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008ed0:	d00a      	beq.n	8008ee8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	881b      	ldrh	r3, [r3, #0]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff ff56 	bl	8008d88 <ptr_to_mem>
 8008edc:	4604      	mov	r4, r0
 8008ede:	68b8      	ldr	r0, [r7, #8]
 8008ee0:	f7ff ff64 	bl	8008dac <mem_to_ptr>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008ee8:	bf00      	nop
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd90      	pop	{r4, r7, pc}
 8008ef0:	20005bc4 	.word	0x20005bc4
 8008ef4:	0801606c 	.word	0x0801606c
 8008ef8:	0801609c 	.word	0x0801609c
 8008efc:	080160b4 	.word	0x080160b4
 8008f00:	20005bc8 	.word	0x20005bc8
 8008f04:	080160dc 	.word	0x080160dc
 8008f08:	080160f8 	.word	0x080160f8
 8008f0c:	08016114 	.word	0x08016114
 8008f10:	20005bcc 	.word	0x20005bcc

08008f14 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008f1a:	4b18      	ldr	r3, [pc, #96]	; (8008f7c <mem_init+0x68>)
 8008f1c:	3303      	adds	r3, #3
 8008f1e:	f023 0303 	bic.w	r3, r3, #3
 8008f22:	461a      	mov	r2, r3
 8008f24:	4b16      	ldr	r3, [pc, #88]	; (8008f80 <mem_init+0x6c>)
 8008f26:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008f28:	4b15      	ldr	r3, [pc, #84]	; (8008f80 <mem_init+0x6c>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008f34:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008f42:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8008f46:	f7ff ff1f 	bl	8008d88 <ptr_to_mem>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	4a0d      	ldr	r2, [pc, #52]	; (8008f84 <mem_init+0x70>)
 8008f4e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008f50:	4b0c      	ldr	r3, [pc, #48]	; (8008f84 <mem_init+0x70>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2201      	movs	r2, #1
 8008f56:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008f58:	4b0a      	ldr	r3, [pc, #40]	; (8008f84 <mem_init+0x70>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008f60:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008f62:	4b08      	ldr	r3, [pc, #32]	; (8008f84 <mem_init+0x70>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008f6a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008f6c:	4b04      	ldr	r3, [pc, #16]	; (8008f80 <mem_init+0x6c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a05      	ldr	r2, [pc, #20]	; (8008f88 <mem_init+0x74>)
 8008f72:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	20005570 	.word	0x20005570
 8008f80:	20005bc4 	.word	0x20005bc4
 8008f84:	20005bc8 	.word	0x20005bc8
 8008f88:	20005bcc 	.word	0x20005bcc

08008f8c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff ff09 	bl	8008dac <mem_to_ptr>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	881b      	ldrh	r3, [r3, #0]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7ff fef0 	bl	8008d88 <ptr_to_mem>
 8008fa8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	885b      	ldrh	r3, [r3, #2]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff feea 	bl	8008d88 <ptr_to_mem>
 8008fb4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008fbe:	d818      	bhi.n	8008ff2 <mem_link_valid+0x66>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	885b      	ldrh	r3, [r3, #2]
 8008fc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008fc8:	d813      	bhi.n	8008ff2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008fce:	8afa      	ldrh	r2, [r7, #22]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d004      	beq.n	8008fde <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	881b      	ldrh	r3, [r3, #0]
 8008fd8:	8afa      	ldrh	r2, [r7, #22]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d109      	bne.n	8008ff2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008fde:	4b08      	ldr	r3, [pc, #32]	; (8009000 <mem_link_valid+0x74>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d006      	beq.n	8008ff6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	885b      	ldrh	r3, [r3, #2]
 8008fec:	8afa      	ldrh	r2, [r7, #22]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d001      	beq.n	8008ff6 <mem_link_valid+0x6a>
    return 0;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	e000      	b.n	8008ff8 <mem_link_valid+0x6c>
  }
  return 1;
 8008ff6:	2301      	movs	r3, #1
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3718      	adds	r7, #24
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	20005bc8 	.word	0x20005bc8

08009004 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d04c      	beq.n	80090ac <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f003 0303 	and.w	r3, r3, #3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d007      	beq.n	800902c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800901c:	4b25      	ldr	r3, [pc, #148]	; (80090b4 <mem_free+0xb0>)
 800901e:	f240 2273 	movw	r2, #627	; 0x273
 8009022:	4925      	ldr	r1, [pc, #148]	; (80090b8 <mem_free+0xb4>)
 8009024:	4825      	ldr	r0, [pc, #148]	; (80090bc <mem_free+0xb8>)
 8009026:	f00b fd8f 	bl	8014b48 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800902a:	e040      	b.n	80090ae <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3b08      	subs	r3, #8
 8009030:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009032:	4b23      	ldr	r3, [pc, #140]	; (80090c0 <mem_free+0xbc>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	429a      	cmp	r2, r3
 800903a:	d306      	bcc.n	800904a <mem_free+0x46>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f103 020c 	add.w	r2, r3, #12
 8009042:	4b20      	ldr	r3, [pc, #128]	; (80090c4 <mem_free+0xc0>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	429a      	cmp	r2, r3
 8009048:	d907      	bls.n	800905a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800904a:	4b1a      	ldr	r3, [pc, #104]	; (80090b4 <mem_free+0xb0>)
 800904c:	f240 227f 	movw	r2, #639	; 0x27f
 8009050:	491d      	ldr	r1, [pc, #116]	; (80090c8 <mem_free+0xc4>)
 8009052:	481a      	ldr	r0, [pc, #104]	; (80090bc <mem_free+0xb8>)
 8009054:	f00b fd78 	bl	8014b48 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009058:	e029      	b.n	80090ae <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	791b      	ldrb	r3, [r3, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d107      	bne.n	8009072 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009062:	4b14      	ldr	r3, [pc, #80]	; (80090b4 <mem_free+0xb0>)
 8009064:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009068:	4918      	ldr	r1, [pc, #96]	; (80090cc <mem_free+0xc8>)
 800906a:	4814      	ldr	r0, [pc, #80]	; (80090bc <mem_free+0xb8>)
 800906c:	f00b fd6c 	bl	8014b48 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009070:	e01d      	b.n	80090ae <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f7ff ff8a 	bl	8008f8c <mem_link_valid>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d107      	bne.n	800908e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800907e:	4b0d      	ldr	r3, [pc, #52]	; (80090b4 <mem_free+0xb0>)
 8009080:	f240 2295 	movw	r2, #661	; 0x295
 8009084:	4912      	ldr	r1, [pc, #72]	; (80090d0 <mem_free+0xcc>)
 8009086:	480d      	ldr	r0, [pc, #52]	; (80090bc <mem_free+0xb8>)
 8009088:	f00b fd5e 	bl	8014b48 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800908c:	e00f      	b.n	80090ae <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009094:	4b0f      	ldr	r3, [pc, #60]	; (80090d4 <mem_free+0xd0>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	429a      	cmp	r2, r3
 800909c:	d202      	bcs.n	80090a4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800909e:	4a0d      	ldr	r2, [pc, #52]	; (80090d4 <mem_free+0xd0>)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f7ff fe93 	bl	8008dd0 <plug_holes>
 80090aa:	e000      	b.n	80090ae <mem_free+0xaa>
    return;
 80090ac:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	0801606c 	.word	0x0801606c
 80090b8:	08016140 	.word	0x08016140
 80090bc:	080160b4 	.word	0x080160b4
 80090c0:	20005bc4 	.word	0x20005bc4
 80090c4:	20005bc8 	.word	0x20005bc8
 80090c8:	08016164 	.word	0x08016164
 80090cc:	08016180 	.word	0x08016180
 80090d0:	080161a8 	.word	0x080161a8
 80090d4:	20005bcc 	.word	0x20005bcc

080090d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80090e4:	887b      	ldrh	r3, [r7, #2]
 80090e6:	3303      	adds	r3, #3
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	f023 0303 	bic.w	r3, r3, #3
 80090ee:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80090f0:	8bfb      	ldrh	r3, [r7, #30]
 80090f2:	2b0b      	cmp	r3, #11
 80090f4:	d801      	bhi.n	80090fa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80090f6:	230c      	movs	r3, #12
 80090f8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80090fa:	8bfb      	ldrh	r3, [r7, #30]
 80090fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009100:	d803      	bhi.n	800910a <mem_trim+0x32>
 8009102:	8bfa      	ldrh	r2, [r7, #30]
 8009104:	887b      	ldrh	r3, [r7, #2]
 8009106:	429a      	cmp	r2, r3
 8009108:	d201      	bcs.n	800910e <mem_trim+0x36>
    return NULL;
 800910a:	2300      	movs	r3, #0
 800910c:	e0cc      	b.n	80092a8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800910e:	4b68      	ldr	r3, [pc, #416]	; (80092b0 <mem_trim+0x1d8>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	429a      	cmp	r2, r3
 8009116:	d304      	bcc.n	8009122 <mem_trim+0x4a>
 8009118:	4b66      	ldr	r3, [pc, #408]	; (80092b4 <mem_trim+0x1dc>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	429a      	cmp	r2, r3
 8009120:	d306      	bcc.n	8009130 <mem_trim+0x58>
 8009122:	4b65      	ldr	r3, [pc, #404]	; (80092b8 <mem_trim+0x1e0>)
 8009124:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009128:	4964      	ldr	r1, [pc, #400]	; (80092bc <mem_trim+0x1e4>)
 800912a:	4865      	ldr	r0, [pc, #404]	; (80092c0 <mem_trim+0x1e8>)
 800912c:	f00b fd0c 	bl	8014b48 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009130:	4b5f      	ldr	r3, [pc, #380]	; (80092b0 <mem_trim+0x1d8>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	429a      	cmp	r2, r3
 8009138:	d304      	bcc.n	8009144 <mem_trim+0x6c>
 800913a:	4b5e      	ldr	r3, [pc, #376]	; (80092b4 <mem_trim+0x1dc>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	429a      	cmp	r2, r3
 8009142:	d301      	bcc.n	8009148 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	e0af      	b.n	80092a8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3b08      	subs	r3, #8
 800914c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800914e:	69b8      	ldr	r0, [r7, #24]
 8009150:	f7ff fe2c 	bl	8008dac <mem_to_ptr>
 8009154:	4603      	mov	r3, r0
 8009156:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	881a      	ldrh	r2, [r3, #0]
 800915c:	8afb      	ldrh	r3, [r7, #22]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	b29b      	uxth	r3, r3
 8009162:	3b08      	subs	r3, #8
 8009164:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009166:	8bfa      	ldrh	r2, [r7, #30]
 8009168:	8abb      	ldrh	r3, [r7, #20]
 800916a:	429a      	cmp	r2, r3
 800916c:	d906      	bls.n	800917c <mem_trim+0xa4>
 800916e:	4b52      	ldr	r3, [pc, #328]	; (80092b8 <mem_trim+0x1e0>)
 8009170:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009174:	4953      	ldr	r1, [pc, #332]	; (80092c4 <mem_trim+0x1ec>)
 8009176:	4852      	ldr	r0, [pc, #328]	; (80092c0 <mem_trim+0x1e8>)
 8009178:	f00b fce6 	bl	8014b48 <iprintf>
  if (newsize > size) {
 800917c:	8bfa      	ldrh	r2, [r7, #30]
 800917e:	8abb      	ldrh	r3, [r7, #20]
 8009180:	429a      	cmp	r2, r3
 8009182:	d901      	bls.n	8009188 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8009184:	2300      	movs	r3, #0
 8009186:	e08f      	b.n	80092a8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8009188:	8bfa      	ldrh	r2, [r7, #30]
 800918a:	8abb      	ldrh	r3, [r7, #20]
 800918c:	429a      	cmp	r2, r3
 800918e:	d101      	bne.n	8009194 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	e089      	b.n	80092a8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	881b      	ldrh	r3, [r3, #0]
 8009198:	4618      	mov	r0, r3
 800919a:	f7ff fdf5 	bl	8008d88 <ptr_to_mem>
 800919e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	791b      	ldrb	r3, [r3, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d13f      	bne.n	8009228 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	881b      	ldrh	r3, [r3, #0]
 80091ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80091b0:	d106      	bne.n	80091c0 <mem_trim+0xe8>
 80091b2:	4b41      	ldr	r3, [pc, #260]	; (80092b8 <mem_trim+0x1e0>)
 80091b4:	f240 22f5 	movw	r2, #757	; 0x2f5
 80091b8:	4943      	ldr	r1, [pc, #268]	; (80092c8 <mem_trim+0x1f0>)
 80091ba:	4841      	ldr	r0, [pc, #260]	; (80092c0 <mem_trim+0x1e8>)
 80091bc:	f00b fcc4 	bl	8014b48 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80091c6:	8afa      	ldrh	r2, [r7, #22]
 80091c8:	8bfb      	ldrh	r3, [r7, #30]
 80091ca:	4413      	add	r3, r2
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	3308      	adds	r3, #8
 80091d0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80091d2:	4b3e      	ldr	r3, [pc, #248]	; (80092cc <mem_trim+0x1f4>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d106      	bne.n	80091ea <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80091dc:	89fb      	ldrh	r3, [r7, #14]
 80091de:	4618      	mov	r0, r3
 80091e0:	f7ff fdd2 	bl	8008d88 <ptr_to_mem>
 80091e4:	4603      	mov	r3, r0
 80091e6:	4a39      	ldr	r2, [pc, #228]	; (80092cc <mem_trim+0x1f4>)
 80091e8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80091ea:	89fb      	ldrh	r3, [r7, #14]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7ff fdcb 	bl	8008d88 <ptr_to_mem>
 80091f2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	2200      	movs	r2, #0
 80091f8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	89ba      	ldrh	r2, [r7, #12]
 80091fe:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	8afa      	ldrh	r2, [r7, #22]
 8009204:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	89fa      	ldrh	r2, [r7, #14]
 800920a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009214:	d047      	beq.n	80092a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	4618      	mov	r0, r3
 800921c:	f7ff fdb4 	bl	8008d88 <ptr_to_mem>
 8009220:	4602      	mov	r2, r0
 8009222:	89fb      	ldrh	r3, [r7, #14]
 8009224:	8053      	strh	r3, [r2, #2]
 8009226:	e03e      	b.n	80092a6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009228:	8bfb      	ldrh	r3, [r7, #30]
 800922a:	f103 0214 	add.w	r2, r3, #20
 800922e:	8abb      	ldrh	r3, [r7, #20]
 8009230:	429a      	cmp	r2, r3
 8009232:	d838      	bhi.n	80092a6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009234:	8afa      	ldrh	r2, [r7, #22]
 8009236:	8bfb      	ldrh	r3, [r7, #30]
 8009238:	4413      	add	r3, r2
 800923a:	b29b      	uxth	r3, r3
 800923c:	3308      	adds	r3, #8
 800923e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009248:	d106      	bne.n	8009258 <mem_trim+0x180>
 800924a:	4b1b      	ldr	r3, [pc, #108]	; (80092b8 <mem_trim+0x1e0>)
 800924c:	f240 3216 	movw	r2, #790	; 0x316
 8009250:	491d      	ldr	r1, [pc, #116]	; (80092c8 <mem_trim+0x1f0>)
 8009252:	481b      	ldr	r0, [pc, #108]	; (80092c0 <mem_trim+0x1e8>)
 8009254:	f00b fc78 	bl	8014b48 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009258:	89fb      	ldrh	r3, [r7, #14]
 800925a:	4618      	mov	r0, r3
 800925c:	f7ff fd94 	bl	8008d88 <ptr_to_mem>
 8009260:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009262:	4b1a      	ldr	r3, [pc, #104]	; (80092cc <mem_trim+0x1f4>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	429a      	cmp	r2, r3
 800926a:	d202      	bcs.n	8009272 <mem_trim+0x19a>
      lfree = mem2;
 800926c:	4a17      	ldr	r2, [pc, #92]	; (80092cc <mem_trim+0x1f4>)
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	2200      	movs	r2, #0
 8009276:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	881a      	ldrh	r2, [r3, #0]
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	8afa      	ldrh	r2, [r7, #22]
 8009284:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	89fa      	ldrh	r2, [r7, #14]
 800928a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009294:	d007      	beq.n	80092a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	881b      	ldrh	r3, [r3, #0]
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff fd74 	bl	8008d88 <ptr_to_mem>
 80092a0:	4602      	mov	r2, r0
 80092a2:	89fb      	ldrh	r3, [r7, #14]
 80092a4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80092a6:	687b      	ldr	r3, [r7, #4]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3720      	adds	r7, #32
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	20005bc4 	.word	0x20005bc4
 80092b4:	20005bc8 	.word	0x20005bc8
 80092b8:	0801606c 	.word	0x0801606c
 80092bc:	080161dc 	.word	0x080161dc
 80092c0:	080160b4 	.word	0x080160b4
 80092c4:	080161f4 	.word	0x080161f4
 80092c8:	08016214 	.word	0x08016214
 80092cc:	20005bcc 	.word	0x20005bcc

080092d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b088      	sub	sp, #32
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80092da:	88fb      	ldrh	r3, [r7, #6]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <mem_malloc+0x14>
    return NULL;
 80092e0:	2300      	movs	r3, #0
 80092e2:	e0d9      	b.n	8009498 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80092e4:	88fb      	ldrh	r3, [r7, #6]
 80092e6:	3303      	adds	r3, #3
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	f023 0303 	bic.w	r3, r3, #3
 80092ee:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80092f0:	8bbb      	ldrh	r3, [r7, #28]
 80092f2:	2b0b      	cmp	r3, #11
 80092f4:	d801      	bhi.n	80092fa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80092f6:	230c      	movs	r3, #12
 80092f8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80092fa:	8bbb      	ldrh	r3, [r7, #28]
 80092fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009300:	d803      	bhi.n	800930a <mem_malloc+0x3a>
 8009302:	8bba      	ldrh	r2, [r7, #28]
 8009304:	88fb      	ldrh	r3, [r7, #6]
 8009306:	429a      	cmp	r2, r3
 8009308:	d201      	bcs.n	800930e <mem_malloc+0x3e>
    return NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	e0c4      	b.n	8009498 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800930e:	4b64      	ldr	r3, [pc, #400]	; (80094a0 <mem_malloc+0x1d0>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff fd4a 	bl	8008dac <mem_to_ptr>
 8009318:	4603      	mov	r3, r0
 800931a:	83fb      	strh	r3, [r7, #30]
 800931c:	e0b4      	b.n	8009488 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800931e:	8bfb      	ldrh	r3, [r7, #30]
 8009320:	4618      	mov	r0, r3
 8009322:	f7ff fd31 	bl	8008d88 <ptr_to_mem>
 8009326:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	791b      	ldrb	r3, [r3, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f040 80a4 	bne.w	800947a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	8bfb      	ldrh	r3, [r7, #30]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	f1a3 0208 	sub.w	r2, r3, #8
 8009340:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009342:	429a      	cmp	r2, r3
 8009344:	f0c0 8099 	bcc.w	800947a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	461a      	mov	r2, r3
 800934e:	8bfb      	ldrh	r3, [r7, #30]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	f1a3 0208 	sub.w	r2, r3, #8
 8009356:	8bbb      	ldrh	r3, [r7, #28]
 8009358:	3314      	adds	r3, #20
 800935a:	429a      	cmp	r2, r3
 800935c:	d333      	bcc.n	80093c6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800935e:	8bfa      	ldrh	r2, [r7, #30]
 8009360:	8bbb      	ldrh	r3, [r7, #28]
 8009362:	4413      	add	r3, r2
 8009364:	b29b      	uxth	r3, r3
 8009366:	3308      	adds	r3, #8
 8009368:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800936a:	8a7b      	ldrh	r3, [r7, #18]
 800936c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009370:	d106      	bne.n	8009380 <mem_malloc+0xb0>
 8009372:	4b4c      	ldr	r3, [pc, #304]	; (80094a4 <mem_malloc+0x1d4>)
 8009374:	f240 3287 	movw	r2, #903	; 0x387
 8009378:	494b      	ldr	r1, [pc, #300]	; (80094a8 <mem_malloc+0x1d8>)
 800937a:	484c      	ldr	r0, [pc, #304]	; (80094ac <mem_malloc+0x1dc>)
 800937c:	f00b fbe4 	bl	8014b48 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009380:	8a7b      	ldrh	r3, [r7, #18]
 8009382:	4618      	mov	r0, r3
 8009384:	f7ff fd00 	bl	8008d88 <ptr_to_mem>
 8009388:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	881a      	ldrh	r2, [r3, #0]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	8bfa      	ldrh	r2, [r7, #30]
 800939c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	8a7a      	ldrh	r2, [r7, #18]
 80093a2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2201      	movs	r2, #1
 80093a8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	881b      	ldrh	r3, [r3, #0]
 80093ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80093b2:	d00b      	beq.n	80093cc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7ff fce5 	bl	8008d88 <ptr_to_mem>
 80093be:	4602      	mov	r2, r0
 80093c0:	8a7b      	ldrh	r3, [r7, #18]
 80093c2:	8053      	strh	r3, [r2, #2]
 80093c4:	e002      	b.n	80093cc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2201      	movs	r2, #1
 80093ca:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80093cc:	4b34      	ldr	r3, [pc, #208]	; (80094a0 <mem_malloc+0x1d0>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d127      	bne.n	8009426 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80093d6:	4b32      	ldr	r3, [pc, #200]	; (80094a0 <mem_malloc+0x1d0>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80093dc:	e005      	b.n	80093ea <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff fcd0 	bl	8008d88 <ptr_to_mem>
 80093e8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	791b      	ldrb	r3, [r3, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d004      	beq.n	80093fc <mem_malloc+0x12c>
 80093f2:	4b2f      	ldr	r3, [pc, #188]	; (80094b0 <mem_malloc+0x1e0>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d1f0      	bne.n	80093de <mem_malloc+0x10e>
          }
          lfree = cur;
 80093fc:	4a28      	ldr	r2, [pc, #160]	; (80094a0 <mem_malloc+0x1d0>)
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009402:	4b27      	ldr	r3, [pc, #156]	; (80094a0 <mem_malloc+0x1d0>)
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	4b2a      	ldr	r3, [pc, #168]	; (80094b0 <mem_malloc+0x1e0>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	429a      	cmp	r2, r3
 800940c:	d00b      	beq.n	8009426 <mem_malloc+0x156>
 800940e:	4b24      	ldr	r3, [pc, #144]	; (80094a0 <mem_malloc+0x1d0>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	791b      	ldrb	r3, [r3, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d006      	beq.n	8009426 <mem_malloc+0x156>
 8009418:	4b22      	ldr	r3, [pc, #136]	; (80094a4 <mem_malloc+0x1d4>)
 800941a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800941e:	4925      	ldr	r1, [pc, #148]	; (80094b4 <mem_malloc+0x1e4>)
 8009420:	4822      	ldr	r0, [pc, #136]	; (80094ac <mem_malloc+0x1dc>)
 8009422:	f00b fb91 	bl	8014b48 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009426:	8bba      	ldrh	r2, [r7, #28]
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	4413      	add	r3, r2
 800942c:	3308      	adds	r3, #8
 800942e:	4a20      	ldr	r2, [pc, #128]	; (80094b0 <mem_malloc+0x1e0>)
 8009430:	6812      	ldr	r2, [r2, #0]
 8009432:	4293      	cmp	r3, r2
 8009434:	d906      	bls.n	8009444 <mem_malloc+0x174>
 8009436:	4b1b      	ldr	r3, [pc, #108]	; (80094a4 <mem_malloc+0x1d4>)
 8009438:	f240 32b9 	movw	r2, #953	; 0x3b9
 800943c:	491e      	ldr	r1, [pc, #120]	; (80094b8 <mem_malloc+0x1e8>)
 800943e:	481b      	ldr	r0, [pc, #108]	; (80094ac <mem_malloc+0x1dc>)
 8009440:	f00b fb82 	bl	8014b48 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f003 0303 	and.w	r3, r3, #3
 800944a:	2b00      	cmp	r3, #0
 800944c:	d006      	beq.n	800945c <mem_malloc+0x18c>
 800944e:	4b15      	ldr	r3, [pc, #84]	; (80094a4 <mem_malloc+0x1d4>)
 8009450:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009454:	4919      	ldr	r1, [pc, #100]	; (80094bc <mem_malloc+0x1ec>)
 8009456:	4815      	ldr	r0, [pc, #84]	; (80094ac <mem_malloc+0x1dc>)
 8009458:	f00b fb76 	bl	8014b48 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f003 0303 	and.w	r3, r3, #3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d006      	beq.n	8009474 <mem_malloc+0x1a4>
 8009466:	4b0f      	ldr	r3, [pc, #60]	; (80094a4 <mem_malloc+0x1d4>)
 8009468:	f240 32bd 	movw	r2, #957	; 0x3bd
 800946c:	4914      	ldr	r1, [pc, #80]	; (80094c0 <mem_malloc+0x1f0>)
 800946e:	480f      	ldr	r0, [pc, #60]	; (80094ac <mem_malloc+0x1dc>)
 8009470:	f00b fb6a 	bl	8014b48 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	3308      	adds	r3, #8
 8009478:	e00e      	b.n	8009498 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800947a:	8bfb      	ldrh	r3, [r7, #30]
 800947c:	4618      	mov	r0, r3
 800947e:	f7ff fc83 	bl	8008d88 <ptr_to_mem>
 8009482:	4603      	mov	r3, r0
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009488:	8bfa      	ldrh	r2, [r7, #30]
 800948a:	8bbb      	ldrh	r3, [r7, #28]
 800948c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009490:	429a      	cmp	r2, r3
 8009492:	f4ff af44 	bcc.w	800931e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3720      	adds	r7, #32
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	20005bcc 	.word	0x20005bcc
 80094a4:	0801606c 	.word	0x0801606c
 80094a8:	08016214 	.word	0x08016214
 80094ac:	080160b4 	.word	0x080160b4
 80094b0:	20005bc8 	.word	0x20005bc8
 80094b4:	08016228 	.word	0x08016228
 80094b8:	08016244 	.word	0x08016244
 80094bc:	08016274 	.word	0x08016274
 80094c0:	080162a4 	.word	0x080162a4

080094c4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	2200      	movs	r2, #0
 80094d2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	3303      	adds	r3, #3
 80094da:	f023 0303 	bic.w	r3, r3, #3
 80094de:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80094e0:	2300      	movs	r3, #0
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	e011      	b.n	800950a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	461a      	mov	r2, r3
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	4413      	add	r3, r2
 8009502:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	3301      	adds	r3, #1
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	885b      	ldrh	r3, [r3, #2]
 800950e:	461a      	mov	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4293      	cmp	r3, r2
 8009514:	dbe7      	blt.n	80094e6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009516:	bf00      	nop
 8009518:	bf00      	nop
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800952a:	2300      	movs	r3, #0
 800952c:	80fb      	strh	r3, [r7, #6]
 800952e:	e009      	b.n	8009544 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009530:	88fb      	ldrh	r3, [r7, #6]
 8009532:	4a08      	ldr	r2, [pc, #32]	; (8009554 <memp_init+0x30>)
 8009534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009538:	4618      	mov	r0, r3
 800953a:	f7ff ffc3 	bl	80094c4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800953e:	88fb      	ldrh	r3, [r7, #6]
 8009540:	3301      	adds	r3, #1
 8009542:	80fb      	strh	r3, [r7, #6]
 8009544:	88fb      	ldrh	r3, [r7, #6]
 8009546:	2b07      	cmp	r3, #7
 8009548:	d9f2      	bls.n	8009530 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800954a:	bf00      	nop
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	08018ad0 	.word	0x08018ad0

08009558 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d012      	beq.n	8009594 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	6812      	ldr	r2, [r2, #0]
 8009576:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f003 0303 	and.w	r3, r3, #3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d006      	beq.n	8009590 <do_memp_malloc_pool+0x38>
 8009582:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <do_memp_malloc_pool+0x48>)
 8009584:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009588:	4906      	ldr	r1, [pc, #24]	; (80095a4 <do_memp_malloc_pool+0x4c>)
 800958a:	4807      	ldr	r0, [pc, #28]	; (80095a8 <do_memp_malloc_pool+0x50>)
 800958c:	f00b fadc 	bl	8014b48 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	e000      	b.n	8009596 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	080162c8 	.word	0x080162c8
 80095a4:	080162f8 	.word	0x080162f8
 80095a8:	0801631c 	.word	0x0801631c

080095ac <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d106      	bne.n	80095c8 <memp_malloc_pool+0x1c>
 80095ba:	4b0a      	ldr	r3, [pc, #40]	; (80095e4 <memp_malloc_pool+0x38>)
 80095bc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80095c0:	4909      	ldr	r1, [pc, #36]	; (80095e8 <memp_malloc_pool+0x3c>)
 80095c2:	480a      	ldr	r0, [pc, #40]	; (80095ec <memp_malloc_pool+0x40>)
 80095c4:	f00b fac0 	bl	8014b48 <iprintf>
  if (desc == NULL) {
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <memp_malloc_pool+0x26>
    return NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	e003      	b.n	80095da <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7ff ffc0 	bl	8009558 <do_memp_malloc_pool>
 80095d8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	080162c8 	.word	0x080162c8
 80095e8:	08016344 	.word	0x08016344
 80095ec:	0801631c 	.word	0x0801631c

080095f0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80095fa:	79fb      	ldrb	r3, [r7, #7]
 80095fc:	2b07      	cmp	r3, #7
 80095fe:	d908      	bls.n	8009612 <memp_malloc+0x22>
 8009600:	4b0a      	ldr	r3, [pc, #40]	; (800962c <memp_malloc+0x3c>)
 8009602:	f240 1257 	movw	r2, #343	; 0x157
 8009606:	490a      	ldr	r1, [pc, #40]	; (8009630 <memp_malloc+0x40>)
 8009608:	480a      	ldr	r0, [pc, #40]	; (8009634 <memp_malloc+0x44>)
 800960a:	f00b fa9d 	bl	8014b48 <iprintf>
 800960e:	2300      	movs	r3, #0
 8009610:	e008      	b.n	8009624 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	4a08      	ldr	r2, [pc, #32]	; (8009638 <memp_malloc+0x48>)
 8009616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800961a:	4618      	mov	r0, r3
 800961c:	f7ff ff9c 	bl	8009558 <do_memp_malloc_pool>
 8009620:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009622:	68fb      	ldr	r3, [r7, #12]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	080162c8 	.word	0x080162c8
 8009630:	08016358 	.word	0x08016358
 8009634:	0801631c 	.word	0x0801631c
 8009638:	08018ad0 	.word	0x08018ad0

0800963c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	f003 0303 	and.w	r3, r3, #3
 800964c:	2b00      	cmp	r3, #0
 800964e:	d006      	beq.n	800965e <do_memp_free_pool+0x22>
 8009650:	4b0a      	ldr	r3, [pc, #40]	; (800967c <do_memp_free_pool+0x40>)
 8009652:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009656:	490a      	ldr	r1, [pc, #40]	; (8009680 <do_memp_free_pool+0x44>)
 8009658:	480a      	ldr	r0, [pc, #40]	; (8009684 <do_memp_free_pool+0x48>)
 800965a:	f00b fa75 	bl	8014b48 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009674:	bf00      	nop
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	080162c8 	.word	0x080162c8
 8009680:	08016378 	.word	0x08016378
 8009684:	0801631c 	.word	0x0801631c

08009688 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d106      	bne.n	80096a6 <memp_free_pool+0x1e>
 8009698:	4b0a      	ldr	r3, [pc, #40]	; (80096c4 <memp_free_pool+0x3c>)
 800969a:	f240 1295 	movw	r2, #405	; 0x195
 800969e:	490a      	ldr	r1, [pc, #40]	; (80096c8 <memp_free_pool+0x40>)
 80096a0:	480a      	ldr	r0, [pc, #40]	; (80096cc <memp_free_pool+0x44>)
 80096a2:	f00b fa51 	bl	8014b48 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d007      	beq.n	80096bc <memp_free_pool+0x34>
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d004      	beq.n	80096bc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7ff ffc1 	bl	800963c <do_memp_free_pool>
 80096ba:	e000      	b.n	80096be <memp_free_pool+0x36>
    return;
 80096bc:	bf00      	nop
}
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	080162c8 	.word	0x080162c8
 80096c8:	08016344 	.word	0x08016344
 80096cc:	0801631c 	.word	0x0801631c

080096d0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	6039      	str	r1, [r7, #0]
 80096da:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	2b07      	cmp	r3, #7
 80096e0:	d907      	bls.n	80096f2 <memp_free+0x22>
 80096e2:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <memp_free+0x44>)
 80096e4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80096e8:	490b      	ldr	r1, [pc, #44]	; (8009718 <memp_free+0x48>)
 80096ea:	480c      	ldr	r0, [pc, #48]	; (800971c <memp_free+0x4c>)
 80096ec:	f00b fa2c 	bl	8014b48 <iprintf>
 80096f0:	e00c      	b.n	800970c <memp_free+0x3c>

  if (mem == NULL) {
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d008      	beq.n	800970a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80096f8:	79fb      	ldrb	r3, [r7, #7]
 80096fa:	4a09      	ldr	r2, [pc, #36]	; (8009720 <memp_free+0x50>)
 80096fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	4618      	mov	r0, r3
 8009704:	f7ff ff9a 	bl	800963c <do_memp_free_pool>
 8009708:	e000      	b.n	800970c <memp_free+0x3c>
    return;
 800970a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	080162c8 	.word	0x080162c8
 8009718:	08016398 	.word	0x08016398
 800971c:	0801631c 	.word	0x0801631c
 8009720:	08018ad0 	.word	0x08018ad0

08009724 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009724:	b480      	push	{r7}
 8009726:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009728:	bf00      	nop
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
	...

08009734 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
 8009740:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d108      	bne.n	800975a <netif_add+0x26>
 8009748:	4b57      	ldr	r3, [pc, #348]	; (80098a8 <netif_add+0x174>)
 800974a:	f240 1227 	movw	r2, #295	; 0x127
 800974e:	4957      	ldr	r1, [pc, #348]	; (80098ac <netif_add+0x178>)
 8009750:	4857      	ldr	r0, [pc, #348]	; (80098b0 <netif_add+0x17c>)
 8009752:	f00b f9f9 	bl	8014b48 <iprintf>
 8009756:	2300      	movs	r3, #0
 8009758:	e0a2      	b.n	80098a0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	2b00      	cmp	r3, #0
 800975e:	d108      	bne.n	8009772 <netif_add+0x3e>
 8009760:	4b51      	ldr	r3, [pc, #324]	; (80098a8 <netif_add+0x174>)
 8009762:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009766:	4953      	ldr	r1, [pc, #332]	; (80098b4 <netif_add+0x180>)
 8009768:	4851      	ldr	r0, [pc, #324]	; (80098b0 <netif_add+0x17c>)
 800976a:	f00b f9ed 	bl	8014b48 <iprintf>
 800976e:	2300      	movs	r3, #0
 8009770:	e096      	b.n	80098a0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009778:	4b4f      	ldr	r3, [pc, #316]	; (80098b8 <netif_add+0x184>)
 800977a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009782:	4b4d      	ldr	r3, [pc, #308]	; (80098b8 <netif_add+0x184>)
 8009784:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d101      	bne.n	8009790 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800978c:	4b4a      	ldr	r3, [pc, #296]	; (80098b8 <netif_add+0x184>)
 800978e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	4a45      	ldr	r2, [pc, #276]	; (80098bc <netif_add+0x188>)
 80097a6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6a3a      	ldr	r2, [r7, #32]
 80097c0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80097c2:	4b3f      	ldr	r3, [pc, #252]	; (80098c0 <netif_add+0x18c>)
 80097c4:	781a      	ldrb	r2, [r3, #0]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097d0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	68b9      	ldr	r1, [r7, #8]
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f000 f90f 	bl	80099fc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	4798      	blx	r3
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <netif_add+0xba>
    return NULL;
 80097ea:	2300      	movs	r3, #0
 80097ec:	e058      	b.n	80098a0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097f4:	2bff      	cmp	r3, #255	; 0xff
 80097f6:	d103      	bne.n	8009800 <netif_add+0xcc>
        netif->num = 0;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009800:	2300      	movs	r3, #0
 8009802:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009804:	4b2f      	ldr	r3, [pc, #188]	; (80098c4 <netif_add+0x190>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	617b      	str	r3, [r7, #20]
 800980a:	e02b      	b.n	8009864 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800980c:	697a      	ldr	r2, [r7, #20]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	429a      	cmp	r2, r3
 8009812:	d106      	bne.n	8009822 <netif_add+0xee>
 8009814:	4b24      	ldr	r3, [pc, #144]	; (80098a8 <netif_add+0x174>)
 8009816:	f240 128b 	movw	r2, #395	; 0x18b
 800981a:	492b      	ldr	r1, [pc, #172]	; (80098c8 <netif_add+0x194>)
 800981c:	4824      	ldr	r0, [pc, #144]	; (80098b0 <netif_add+0x17c>)
 800981e:	f00b f993 	bl	8014b48 <iprintf>
        num_netifs++;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	3301      	adds	r3, #1
 8009826:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	2bff      	cmp	r3, #255	; 0xff
 800982c:	dd06      	ble.n	800983c <netif_add+0x108>
 800982e:	4b1e      	ldr	r3, [pc, #120]	; (80098a8 <netif_add+0x174>)
 8009830:	f240 128d 	movw	r2, #397	; 0x18d
 8009834:	4925      	ldr	r1, [pc, #148]	; (80098cc <netif_add+0x198>)
 8009836:	481e      	ldr	r0, [pc, #120]	; (80098b0 <netif_add+0x17c>)
 8009838:	f00b f986 	bl	8014b48 <iprintf>
        if (netif2->num == netif->num) {
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009848:	429a      	cmp	r2, r3
 800984a:	d108      	bne.n	800985e <netif_add+0x12a>
          netif->num++;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009852:	3301      	adds	r3, #1
 8009854:	b2da      	uxtb	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800985c:	e005      	b.n	800986a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	617b      	str	r3, [r7, #20]
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1d0      	bne.n	800980c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1be      	bne.n	80097ee <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009876:	2bfe      	cmp	r3, #254	; 0xfe
 8009878:	d103      	bne.n	8009882 <netif_add+0x14e>
    netif_num = 0;
 800987a:	4b11      	ldr	r3, [pc, #68]	; (80098c0 <netif_add+0x18c>)
 800987c:	2200      	movs	r2, #0
 800987e:	701a      	strb	r2, [r3, #0]
 8009880:	e006      	b.n	8009890 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009888:	3301      	adds	r3, #1
 800988a:	b2da      	uxtb	r2, r3
 800988c:	4b0c      	ldr	r3, [pc, #48]	; (80098c0 <netif_add+0x18c>)
 800988e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009890:	4b0c      	ldr	r3, [pc, #48]	; (80098c4 <netif_add+0x190>)
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009898:	4a0a      	ldr	r2, [pc, #40]	; (80098c4 <netif_add+0x190>)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800989e:	68fb      	ldr	r3, [r7, #12]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	080163b4 	.word	0x080163b4
 80098ac:	08016448 	.word	0x08016448
 80098b0:	08016404 	.word	0x08016404
 80098b4:	08016464 	.word	0x08016464
 80098b8:	08018b30 	.word	0x08018b30
 80098bc:	08009cd7 	.word	0x08009cd7
 80098c0:	2000e4a0 	.word	0x2000e4a0
 80098c4:	2000e498 	.word	0x2000e498
 80098c8:	08016488 	.word	0x08016488
 80098cc:	0801649c 	.word	0x0801649c

080098d0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f002 fd6f 	bl	800c3c0 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80098e2:	bf00      	nop
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
	...

080098ec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d106      	bne.n	800990c <netif_do_set_ipaddr+0x20>
 80098fe:	4b1d      	ldr	r3, [pc, #116]	; (8009974 <netif_do_set_ipaddr+0x88>)
 8009900:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009904:	491c      	ldr	r1, [pc, #112]	; (8009978 <netif_do_set_ipaddr+0x8c>)
 8009906:	481d      	ldr	r0, [pc, #116]	; (800997c <netif_do_set_ipaddr+0x90>)
 8009908:	f00b f91e 	bl	8014b48 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d106      	bne.n	8009920 <netif_do_set_ipaddr+0x34>
 8009912:	4b18      	ldr	r3, [pc, #96]	; (8009974 <netif_do_set_ipaddr+0x88>)
 8009914:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009918:	4917      	ldr	r1, [pc, #92]	; (8009978 <netif_do_set_ipaddr+0x8c>)
 800991a:	4818      	ldr	r0, [pc, #96]	; (800997c <netif_do_set_ipaddr+0x90>)
 800991c:	f00b f914 	bl	8014b48 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3304      	adds	r3, #4
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	429a      	cmp	r2, r3
 800992c:	d01c      	beq.n	8009968 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	3304      	adds	r3, #4
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800993e:	f107 0314 	add.w	r3, r7, #20
 8009942:	4619      	mov	r1, r3
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7ff ffc3 	bl	80098d0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <netif_do_set_ipaddr+0x6a>
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	e000      	b.n	8009958 <netif_do_set_ipaddr+0x6c>
 8009956:	2300      	movs	r3, #0
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800995c:	2101      	movs	r1, #1
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f000 f8d2 	bl	8009b08 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009964:	2301      	movs	r3, #1
 8009966:	e000      	b.n	800996a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3718      	adds	r7, #24
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	080163b4 	.word	0x080163b4
 8009978:	080164cc 	.word	0x080164cc
 800997c:	08016404 	.word	0x08016404

08009980 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	3308      	adds	r3, #8
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	d00a      	beq.n	80099b0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <netif_do_set_netmask+0x26>
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	e000      	b.n	80099a8 <netif_do_set_netmask+0x28>
 80099a6:	2300      	movs	r3, #0
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80099ac:	2301      	movs	r3, #1
 80099ae:	e000      	b.n	80099b2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3714      	adds	r7, #20
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr

080099be <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80099be:	b480      	push	{r7}
 80099c0:	b085      	sub	sp, #20
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	60f8      	str	r0, [r7, #12]
 80099c6:	60b9      	str	r1, [r7, #8]
 80099c8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	330c      	adds	r3, #12
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d00a      	beq.n	80099ee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <netif_do_set_gw+0x26>
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	e000      	b.n	80099e6 <netif_do_set_gw+0x28>
 80099e4:	2300      	movs	r3, #0
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80099ea:	2301      	movs	r3, #1
 80099ec:	e000      	b.n	80099f0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3714      	adds	r7, #20
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b088      	sub	sp, #32
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d101      	bne.n	8009a1c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009a18:	4b1c      	ldr	r3, [pc, #112]	; (8009a8c <netif_set_addr+0x90>)
 8009a1a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009a22:	4b1a      	ldr	r3, [pc, #104]	; (8009a8c <netif_set_addr+0x90>)
 8009a24:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d101      	bne.n	8009a30 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009a2c:	4b17      	ldr	r3, [pc, #92]	; (8009a8c <netif_set_addr+0x90>)
 8009a2e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <netif_set_addr+0x42>
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d101      	bne.n	8009a42 <netif_set_addr+0x46>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e000      	b.n	8009a44 <netif_set_addr+0x48>
 8009a42:	2300      	movs	r3, #0
 8009a44:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d006      	beq.n	8009a5a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009a4c:	f107 0310 	add.w	r3, r7, #16
 8009a50:	461a      	mov	r2, r3
 8009a52:	68b9      	ldr	r1, [r7, #8]
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f7ff ff49 	bl	80098ec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	6879      	ldr	r1, [r7, #4]
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7ff ff8e 	bl	8009980 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009a64:	69ba      	ldr	r2, [r7, #24]
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f7ff ffa8 	bl	80099be <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d106      	bne.n	8009a82 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009a74:	f107 0310 	add.w	r3, r7, #16
 8009a78:	461a      	mov	r2, r3
 8009a7a:	68b9      	ldr	r1, [r7, #8]
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f7ff ff35 	bl	80098ec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009a82:	bf00      	nop
 8009a84:	3720      	adds	r7, #32
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	08018b30 	.word	0x08018b30

08009a90 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009a98:	4a04      	ldr	r2, [pc, #16]	; (8009aac <netif_set_default+0x1c>)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009a9e:	bf00      	nop
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	2000e49c 	.word	0x2000e49c

08009ab0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d107      	bne.n	8009ace <netif_set_up+0x1e>
 8009abe:	4b0f      	ldr	r3, [pc, #60]	; (8009afc <netif_set_up+0x4c>)
 8009ac0:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009ac4:	490e      	ldr	r1, [pc, #56]	; (8009b00 <netif_set_up+0x50>)
 8009ac6:	480f      	ldr	r0, [pc, #60]	; (8009b04 <netif_set_up+0x54>)
 8009ac8:	f00b f83e 	bl	8014b48 <iprintf>
 8009acc:	e013      	b.n	8009af6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ad4:	f003 0301 	and.w	r3, r3, #1
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d10c      	bne.n	8009af6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ae2:	f043 0301 	orr.w	r3, r3, #1
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009aee:	2103      	movs	r1, #3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f809 	bl	8009b08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	080163b4 	.word	0x080163b4
 8009b00:	0801653c 	.word	0x0801653c
 8009b04:	08016404 	.word	0x08016404

08009b08 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d106      	bne.n	8009b28 <netif_issue_reports+0x20>
 8009b1a:	4b18      	ldr	r3, [pc, #96]	; (8009b7c <netif_issue_reports+0x74>)
 8009b1c:	f240 326d 	movw	r2, #877	; 0x36d
 8009b20:	4917      	ldr	r1, [pc, #92]	; (8009b80 <netif_issue_reports+0x78>)
 8009b22:	4818      	ldr	r0, [pc, #96]	; (8009b84 <netif_issue_reports+0x7c>)
 8009b24:	f00b f810 	bl	8014b48 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b2e:	f003 0304 	and.w	r3, r3, #4
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d01e      	beq.n	8009b74 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b3c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d017      	beq.n	8009b74 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009b44:	78fb      	ldrb	r3, [r7, #3]
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d013      	beq.n	8009b76 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	3304      	adds	r3, #4
 8009b52:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00e      	beq.n	8009b76 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b5e:	f003 0308 	and.w	r3, r3, #8
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d007      	beq.n	8009b76 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	3304      	adds	r3, #4
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f007 ff17 	bl	80119a0 <etharp_request>
 8009b72:	e000      	b.n	8009b76 <netif_issue_reports+0x6e>
    return;
 8009b74:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	080163b4 	.word	0x080163b4
 8009b80:	08016558 	.word	0x08016558
 8009b84:	08016404 	.word	0x08016404

08009b88 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d107      	bne.n	8009ba6 <netif_set_down+0x1e>
 8009b96:	4b12      	ldr	r3, [pc, #72]	; (8009be0 <netif_set_down+0x58>)
 8009b98:	f240 329b 	movw	r2, #923	; 0x39b
 8009b9c:	4911      	ldr	r1, [pc, #68]	; (8009be4 <netif_set_down+0x5c>)
 8009b9e:	4812      	ldr	r0, [pc, #72]	; (8009be8 <netif_set_down+0x60>)
 8009ba0:	f00a ffd2 	bl	8014b48 <iprintf>
 8009ba4:	e019      	b.n	8009bda <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bac:	f003 0301 	and.w	r3, r3, #1
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d012      	beq.n	8009bda <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bba:	f023 0301 	bic.w	r3, r3, #1
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bcc:	f003 0308 	and.w	r3, r3, #8
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f007 faa1 	bl	801111c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	080163b4 	.word	0x080163b4
 8009be4:	0801657c 	.word	0x0801657c
 8009be8:	08016404 	.word	0x08016404

08009bec <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d107      	bne.n	8009c0a <netif_set_link_up+0x1e>
 8009bfa:	4b13      	ldr	r3, [pc, #76]	; (8009c48 <netif_set_link_up+0x5c>)
 8009bfc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009c00:	4912      	ldr	r1, [pc, #72]	; (8009c4c <netif_set_link_up+0x60>)
 8009c02:	4813      	ldr	r0, [pc, #76]	; (8009c50 <netif_set_link_up+0x64>)
 8009c04:	f00a ffa0 	bl	8014b48 <iprintf>
 8009c08:	e01b      	b.n	8009c42 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c10:	f003 0304 	and.w	r3, r3, #4
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d114      	bne.n	8009c42 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c1e:	f043 0304 	orr.w	r3, r3, #4
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009c2a:	2103      	movs	r1, #3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f7ff ff6b 	bl	8009b08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	69db      	ldr	r3, [r3, #28]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d003      	beq.n	8009c42 <netif_set_link_up+0x56>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	080163b4 	.word	0x080163b4
 8009c4c:	0801659c 	.word	0x0801659c
 8009c50:	08016404 	.word	0x08016404

08009c54 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d107      	bne.n	8009c72 <netif_set_link_down+0x1e>
 8009c62:	4b11      	ldr	r3, [pc, #68]	; (8009ca8 <netif_set_link_down+0x54>)
 8009c64:	f240 4206 	movw	r2, #1030	; 0x406
 8009c68:	4910      	ldr	r1, [pc, #64]	; (8009cac <netif_set_link_down+0x58>)
 8009c6a:	4811      	ldr	r0, [pc, #68]	; (8009cb0 <netif_set_link_down+0x5c>)
 8009c6c:	f00a ff6c 	bl	8014b48 <iprintf>
 8009c70:	e017      	b.n	8009ca2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c78:	f003 0304 	and.w	r3, r3, #4
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d010      	beq.n	8009ca2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c86:	f023 0304 	bic.w	r3, r3, #4
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <netif_set_link_down+0x4e>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	69db      	ldr	r3, [r3, #28]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	080163b4 	.word	0x080163b4
 8009cac:	080165c0 	.word	0x080165c0
 8009cb0:	08016404 	.word	0x08016404

08009cb4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	61da      	str	r2, [r3, #28]
  }
}
 8009cca:	bf00      	nop
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b085      	sub	sp, #20
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	60f8      	str	r0, [r7, #12]
 8009cde:	60b9      	str	r1, [r7, #8]
 8009ce0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009ce2:	f06f 030b 	mvn.w	r3, #11
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
	...

08009cf4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009cfe:	79fb      	ldrb	r3, [r7, #7]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d013      	beq.n	8009d2c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009d04:	4b0d      	ldr	r3, [pc, #52]	; (8009d3c <netif_get_by_index+0x48>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	60fb      	str	r3, [r7, #12]
 8009d0a:	e00c      	b.n	8009d26 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d12:	3301      	adds	r3, #1
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	79fa      	ldrb	r2, [r7, #7]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d101      	bne.n	8009d20 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	e006      	b.n	8009d2e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	60fb      	str	r3, [r7, #12]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1ef      	bne.n	8009d0c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	2000e498 	.word	0x2000e498

08009d40 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009d46:	4b0c      	ldr	r3, [pc, #48]	; (8009d78 <pbuf_free_ooseq+0x38>)
 8009d48:	2200      	movs	r2, #0
 8009d4a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009d4c:	4b0b      	ldr	r3, [pc, #44]	; (8009d7c <pbuf_free_ooseq+0x3c>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	607b      	str	r3, [r7, #4]
 8009d52:	e00a      	b.n	8009d6a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f002 fb6d 	bl	800c43c <tcp_free_ooseq>
      return;
 8009d62:	e005      	b.n	8009d70 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	607b      	str	r3, [r7, #4]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1f1      	bne.n	8009d54 <pbuf_free_ooseq+0x14>
    }
  }
}
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	2000e4a1 	.word	0x2000e4a1
 8009d7c:	2000e4b0 	.word	0x2000e4b0

08009d80 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009d80:	b480      	push	{r7}
 8009d82:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009d84:	4b03      	ldr	r3, [pc, #12]	; (8009d94 <pbuf_pool_is_empty+0x14>)
 8009d86:	2201      	movs	r2, #1
 8009d88:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009d8a:	bf00      	nop
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	2000e4a1 	.word	0x2000e4a1

08009d98 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	4611      	mov	r1, r2
 8009da4:	461a      	mov	r2, r3
 8009da6:	460b      	mov	r3, r1
 8009da8:	80fb      	strh	r3, [r7, #6]
 8009daa:	4613      	mov	r3, r2
 8009dac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2200      	movs	r2, #0
 8009db2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	88fa      	ldrh	r2, [r7, #6]
 8009dbe:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	88ba      	ldrh	r2, [r7, #4]
 8009dc4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009dc6:	8b3b      	ldrh	r3, [r7, #24]
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	7f3a      	ldrb	r2, [r7, #28]
 8009dd2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	73da      	strb	r2, [r3, #15]
}
 8009de0:	bf00      	nop
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08c      	sub	sp, #48	; 0x30
 8009df0:	af02      	add	r7, sp, #8
 8009df2:	4603      	mov	r3, r0
 8009df4:	71fb      	strb	r3, [r7, #7]
 8009df6:	460b      	mov	r3, r1
 8009df8:	80bb      	strh	r3, [r7, #4]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009dfe:	79fb      	ldrb	r3, [r7, #7]
 8009e00:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009e02:	887b      	ldrh	r3, [r7, #2]
 8009e04:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009e08:	d07f      	beq.n	8009f0a <pbuf_alloc+0x11e>
 8009e0a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009e0e:	f300 80c8 	bgt.w	8009fa2 <pbuf_alloc+0x1b6>
 8009e12:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009e16:	d010      	beq.n	8009e3a <pbuf_alloc+0x4e>
 8009e18:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009e1c:	f300 80c1 	bgt.w	8009fa2 <pbuf_alloc+0x1b6>
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d002      	beq.n	8009e2a <pbuf_alloc+0x3e>
 8009e24:	2b41      	cmp	r3, #65	; 0x41
 8009e26:	f040 80bc 	bne.w	8009fa2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009e2a:	887a      	ldrh	r2, [r7, #2]
 8009e2c:	88bb      	ldrh	r3, [r7, #4]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	2000      	movs	r0, #0
 8009e32:	f000 f8d1 	bl	8009fd8 <pbuf_alloc_reference>
 8009e36:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009e38:	e0bd      	b.n	8009fb6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009e42:	88bb      	ldrh	r3, [r7, #4]
 8009e44:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009e46:	2007      	movs	r0, #7
 8009e48:	f7ff fbd2 	bl	80095f0 <memp_malloc>
 8009e4c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d109      	bne.n	8009e68 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009e54:	f7ff ff94 	bl	8009d80 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <pbuf_alloc+0x78>
            pbuf_free(p);
 8009e5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e60:	f000 faa8 	bl	800a3b4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009e64:	2300      	movs	r3, #0
 8009e66:	e0a7      	b.n	8009fb8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009e68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e6a:	3303      	adds	r3, #3
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	8b7a      	ldrh	r2, [r7, #26]
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	bf28      	it	cs
 8009e80:	4613      	movcs	r3, r2
 8009e82:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009e84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009e86:	3310      	adds	r3, #16
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	3303      	adds	r3, #3
 8009e8e:	f023 0303 	bic.w	r3, r3, #3
 8009e92:	4618      	mov	r0, r3
 8009e94:	89f9      	ldrh	r1, [r7, #14]
 8009e96:	8b7a      	ldrh	r2, [r7, #26]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	9301      	str	r3, [sp, #4]
 8009e9c:	887b      	ldrh	r3, [r7, #2]
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	4601      	mov	r1, r0
 8009ea4:	6938      	ldr	r0, [r7, #16]
 8009ea6:	f7ff ff77 	bl	8009d98 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	f003 0303 	and.w	r3, r3, #3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d006      	beq.n	8009ec4 <pbuf_alloc+0xd8>
 8009eb6:	4b42      	ldr	r3, [pc, #264]	; (8009fc0 <pbuf_alloc+0x1d4>)
 8009eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ebc:	4941      	ldr	r1, [pc, #260]	; (8009fc4 <pbuf_alloc+0x1d8>)
 8009ebe:	4842      	ldr	r0, [pc, #264]	; (8009fc8 <pbuf_alloc+0x1dc>)
 8009ec0:	f00a fe42 	bl	8014b48 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009ec4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ec6:	3303      	adds	r3, #3
 8009ec8:	f023 0303 	bic.w	r3, r3, #3
 8009ecc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009ed0:	d106      	bne.n	8009ee0 <pbuf_alloc+0xf4>
 8009ed2:	4b3b      	ldr	r3, [pc, #236]	; (8009fc0 <pbuf_alloc+0x1d4>)
 8009ed4:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009ed8:	493c      	ldr	r1, [pc, #240]	; (8009fcc <pbuf_alloc+0x1e0>)
 8009eda:	483b      	ldr	r0, [pc, #236]	; (8009fc8 <pbuf_alloc+0x1dc>)
 8009edc:	f00a fe34 	bl	8014b48 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d102      	bne.n	8009eec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8009eea:	e002      	b.n	8009ef2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009ef6:	8b7a      	ldrh	r2, [r7, #26]
 8009ef8:	89fb      	ldrh	r3, [r7, #14]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009efe:	2300      	movs	r3, #0
 8009f00:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8009f02:	8b7b      	ldrh	r3, [r7, #26]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d19e      	bne.n	8009e46 <pbuf_alloc+0x5a>
      break;
 8009f08:	e055      	b.n	8009fb6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009f0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f0c:	3303      	adds	r3, #3
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	f023 0303 	bic.w	r3, r3, #3
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	88bb      	ldrh	r3, [r7, #4]
 8009f18:	3303      	adds	r3, #3
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	f023 0303 	bic.w	r3, r3, #3
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	4413      	add	r3, r2
 8009f24:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009f26:	8b3b      	ldrh	r3, [r7, #24]
 8009f28:	3310      	adds	r3, #16
 8009f2a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009f2c:	8b3a      	ldrh	r2, [r7, #24]
 8009f2e:	88bb      	ldrh	r3, [r7, #4]
 8009f30:	3303      	adds	r3, #3
 8009f32:	f023 0303 	bic.w	r3, r3, #3
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d306      	bcc.n	8009f48 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009f3a:	8afa      	ldrh	r2, [r7, #22]
 8009f3c:	88bb      	ldrh	r3, [r7, #4]
 8009f3e:	3303      	adds	r3, #3
 8009f40:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d201      	bcs.n	8009f4c <pbuf_alloc+0x160>
        return NULL;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	e035      	b.n	8009fb8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009f4c:	8afb      	ldrh	r3, [r7, #22]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7ff f9be 	bl	80092d0 <mem_malloc>
 8009f54:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8009f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <pbuf_alloc+0x174>
        return NULL;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	e02b      	b.n	8009fb8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009f60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f62:	3310      	adds	r3, #16
 8009f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f66:	4413      	add	r3, r2
 8009f68:	3303      	adds	r3, #3
 8009f6a:	f023 0303 	bic.w	r3, r3, #3
 8009f6e:	4618      	mov	r0, r3
 8009f70:	88b9      	ldrh	r1, [r7, #4]
 8009f72:	88ba      	ldrh	r2, [r7, #4]
 8009f74:	2300      	movs	r3, #0
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	887b      	ldrh	r3, [r7, #2]
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	4601      	mov	r1, r0
 8009f80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f82:	f7ff ff09 	bl	8009d98 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	f003 0303 	and.w	r3, r3, #3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d010      	beq.n	8009fb4 <pbuf_alloc+0x1c8>
 8009f92:	4b0b      	ldr	r3, [pc, #44]	; (8009fc0 <pbuf_alloc+0x1d4>)
 8009f94:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009f98:	490d      	ldr	r1, [pc, #52]	; (8009fd0 <pbuf_alloc+0x1e4>)
 8009f9a:	480b      	ldr	r0, [pc, #44]	; (8009fc8 <pbuf_alloc+0x1dc>)
 8009f9c:	f00a fdd4 	bl	8014b48 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009fa0:	e008      	b.n	8009fb4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009fa2:	4b07      	ldr	r3, [pc, #28]	; (8009fc0 <pbuf_alloc+0x1d4>)
 8009fa4:	f240 1227 	movw	r2, #295	; 0x127
 8009fa8:	490a      	ldr	r1, [pc, #40]	; (8009fd4 <pbuf_alloc+0x1e8>)
 8009faa:	4807      	ldr	r0, [pc, #28]	; (8009fc8 <pbuf_alloc+0x1dc>)
 8009fac:	f00a fdcc 	bl	8014b48 <iprintf>
      return NULL;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	e001      	b.n	8009fb8 <pbuf_alloc+0x1cc>
      break;
 8009fb4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3728      	adds	r7, #40	; 0x28
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	080165e4 	.word	0x080165e4
 8009fc4:	08016614 	.word	0x08016614
 8009fc8:	08016644 	.word	0x08016644
 8009fcc:	0801666c 	.word	0x0801666c
 8009fd0:	080166a0 	.word	0x080166a0
 8009fd4:	080166cc 	.word	0x080166cc

08009fd8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af02      	add	r7, sp, #8
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	807b      	strh	r3, [r7, #2]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009fe8:	883b      	ldrh	r3, [r7, #0]
 8009fea:	2b41      	cmp	r3, #65	; 0x41
 8009fec:	d009      	beq.n	800a002 <pbuf_alloc_reference+0x2a>
 8009fee:	883b      	ldrh	r3, [r7, #0]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d006      	beq.n	800a002 <pbuf_alloc_reference+0x2a>
 8009ff4:	4b0f      	ldr	r3, [pc, #60]	; (800a034 <pbuf_alloc_reference+0x5c>)
 8009ff6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009ffa:	490f      	ldr	r1, [pc, #60]	; (800a038 <pbuf_alloc_reference+0x60>)
 8009ffc:	480f      	ldr	r0, [pc, #60]	; (800a03c <pbuf_alloc_reference+0x64>)
 8009ffe:	f00a fda3 	bl	8014b48 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a002:	2006      	movs	r0, #6
 800a004:	f7ff faf4 	bl	80095f0 <memp_malloc>
 800a008:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a010:	2300      	movs	r3, #0
 800a012:	e00b      	b.n	800a02c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a014:	8879      	ldrh	r1, [r7, #2]
 800a016:	887a      	ldrh	r2, [r7, #2]
 800a018:	2300      	movs	r3, #0
 800a01a:	9301      	str	r3, [sp, #4]
 800a01c:	883b      	ldrh	r3, [r7, #0]
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	460b      	mov	r3, r1
 800a022:	6879      	ldr	r1, [r7, #4]
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f7ff feb7 	bl	8009d98 <pbuf_init_alloced_pbuf>
  return p;
 800a02a:	68fb      	ldr	r3, [r7, #12]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	080165e4 	.word	0x080165e4
 800a038:	080166e8 	.word	0x080166e8
 800a03c:	08016644 	.word	0x08016644

0800a040 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b088      	sub	sp, #32
 800a044:	af02      	add	r7, sp, #8
 800a046:	607b      	str	r3, [r7, #4]
 800a048:	4603      	mov	r3, r0
 800a04a:	73fb      	strb	r3, [r7, #15]
 800a04c:	460b      	mov	r3, r1
 800a04e:	81bb      	strh	r3, [r7, #12]
 800a050:	4613      	mov	r3, r2
 800a052:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a058:	8a7b      	ldrh	r3, [r7, #18]
 800a05a:	3303      	adds	r3, #3
 800a05c:	f023 0203 	bic.w	r2, r3, #3
 800a060:	89bb      	ldrh	r3, [r7, #12]
 800a062:	441a      	add	r2, r3
 800a064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a066:	429a      	cmp	r2, r3
 800a068:	d901      	bls.n	800a06e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a06a:	2300      	movs	r3, #0
 800a06c:	e018      	b.n	800a0a0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a06e:	6a3b      	ldr	r3, [r7, #32]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d007      	beq.n	800a084 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a074:	8a7b      	ldrh	r3, [r7, #18]
 800a076:	3303      	adds	r3, #3
 800a078:	f023 0303 	bic.w	r3, r3, #3
 800a07c:	6a3a      	ldr	r2, [r7, #32]
 800a07e:	4413      	add	r3, r2
 800a080:	617b      	str	r3, [r7, #20]
 800a082:	e001      	b.n	800a088 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a084:	2300      	movs	r3, #0
 800a086:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	89b9      	ldrh	r1, [r7, #12]
 800a08c:	89ba      	ldrh	r2, [r7, #12]
 800a08e:	2302      	movs	r3, #2
 800a090:	9301      	str	r3, [sp, #4]
 800a092:	897b      	ldrh	r3, [r7, #10]
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	460b      	mov	r3, r1
 800a098:	6979      	ldr	r1, [r7, #20]
 800a09a:	f7ff fe7d 	bl	8009d98 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a09e:	687b      	ldr	r3, [r7, #4]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3718      	adds	r7, #24
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d106      	bne.n	800a0c8 <pbuf_realloc+0x20>
 800a0ba:	4b3a      	ldr	r3, [pc, #232]	; (800a1a4 <pbuf_realloc+0xfc>)
 800a0bc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a0c0:	4939      	ldr	r1, [pc, #228]	; (800a1a8 <pbuf_realloc+0x100>)
 800a0c2:	483a      	ldr	r0, [pc, #232]	; (800a1ac <pbuf_realloc+0x104>)
 800a0c4:	f00a fd40 	bl	8014b48 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	891b      	ldrh	r3, [r3, #8]
 800a0cc:	887a      	ldrh	r2, [r7, #2]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d263      	bcs.n	800a19a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	891a      	ldrh	r2, [r3, #8]
 800a0d6:	887b      	ldrh	r3, [r7, #2]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a0dc:	887b      	ldrh	r3, [r7, #2]
 800a0de:	817b      	strh	r3, [r7, #10]
  q = p;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a0e4:	e018      	b.n	800a118 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	895b      	ldrh	r3, [r3, #10]
 800a0ea:	897a      	ldrh	r2, [r7, #10]
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	891a      	ldrh	r2, [r3, #8]
 800a0f4:	893b      	ldrh	r3, [r7, #8]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d106      	bne.n	800a118 <pbuf_realloc+0x70>
 800a10a:	4b26      	ldr	r3, [pc, #152]	; (800a1a4 <pbuf_realloc+0xfc>)
 800a10c:	f240 12af 	movw	r2, #431	; 0x1af
 800a110:	4927      	ldr	r1, [pc, #156]	; (800a1b0 <pbuf_realloc+0x108>)
 800a112:	4826      	ldr	r0, [pc, #152]	; (800a1ac <pbuf_realloc+0x104>)
 800a114:	f00a fd18 	bl	8014b48 <iprintf>
  while (rem_len > q->len) {
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	895b      	ldrh	r3, [r3, #10]
 800a11c:	897a      	ldrh	r2, [r7, #10]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d8e1      	bhi.n	800a0e6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	7b1b      	ldrb	r3, [r3, #12]
 800a126:	f003 030f 	and.w	r3, r3, #15
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d121      	bne.n	800a172 <pbuf_realloc+0xca>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	895b      	ldrh	r3, [r3, #10]
 800a132:	897a      	ldrh	r2, [r7, #10]
 800a134:	429a      	cmp	r2, r3
 800a136:	d01c      	beq.n	800a172 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	7b5b      	ldrb	r3, [r3, #13]
 800a13c:	f003 0302 	and.w	r3, r3, #2
 800a140:	2b00      	cmp	r3, #0
 800a142:	d116      	bne.n	800a172 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	685a      	ldr	r2, [r3, #4]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	897b      	ldrh	r3, [r7, #10]
 800a150:	4413      	add	r3, r2
 800a152:	b29b      	uxth	r3, r3
 800a154:	4619      	mov	r1, r3
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f7fe ffbe 	bl	80090d8 <mem_trim>
 800a15c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d106      	bne.n	800a172 <pbuf_realloc+0xca>
 800a164:	4b0f      	ldr	r3, [pc, #60]	; (800a1a4 <pbuf_realloc+0xfc>)
 800a166:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a16a:	4912      	ldr	r1, [pc, #72]	; (800a1b4 <pbuf_realloc+0x10c>)
 800a16c:	480f      	ldr	r0, [pc, #60]	; (800a1ac <pbuf_realloc+0x104>)
 800a16e:	f00a fceb 	bl	8014b48 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	897a      	ldrh	r2, [r7, #10]
 800a176:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	895a      	ldrh	r2, [r3, #10]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d004      	beq.n	800a192 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f911 	bl	800a3b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	e000      	b.n	800a19c <pbuf_realloc+0xf4>
    return;
 800a19a:	bf00      	nop

}
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	080165e4 	.word	0x080165e4
 800a1a8:	080166fc 	.word	0x080166fc
 800a1ac:	08016644 	.word	0x08016644
 800a1b0:	08016714 	.word	0x08016714
 800a1b4:	0801672c 	.word	0x0801672c

0800a1b8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d106      	bne.n	800a1da <pbuf_add_header_impl+0x22>
 800a1cc:	4b2b      	ldr	r3, [pc, #172]	; (800a27c <pbuf_add_header_impl+0xc4>)
 800a1ce:	f240 12df 	movw	r2, #479	; 0x1df
 800a1d2:	492b      	ldr	r1, [pc, #172]	; (800a280 <pbuf_add_header_impl+0xc8>)
 800a1d4:	482b      	ldr	r0, [pc, #172]	; (800a284 <pbuf_add_header_impl+0xcc>)
 800a1d6:	f00a fcb7 	bl	8014b48 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d003      	beq.n	800a1e8 <pbuf_add_header_impl+0x30>
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1e6:	d301      	bcc.n	800a1ec <pbuf_add_header_impl+0x34>
    return 1;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e043      	b.n	800a274 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <pbuf_add_header_impl+0x3e>
    return 0;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e03e      	b.n	800a274 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	891a      	ldrh	r2, [r3, #8]
 800a1fe:	8a7b      	ldrh	r3, [r7, #18]
 800a200:	4413      	add	r3, r2
 800a202:	b29b      	uxth	r3, r3
 800a204:	8a7a      	ldrh	r2, [r7, #18]
 800a206:	429a      	cmp	r2, r3
 800a208:	d901      	bls.n	800a20e <pbuf_add_header_impl+0x56>
    return 1;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e032      	b.n	800a274 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	7b1b      	ldrb	r3, [r3, #12]
 800a212:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a214:	8a3b      	ldrh	r3, [r7, #16]
 800a216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00c      	beq.n	800a238 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	685a      	ldr	r2, [r3, #4]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	425b      	negs	r3, r3
 800a226:	4413      	add	r3, r2
 800a228:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	3310      	adds	r3, #16
 800a22e:	697a      	ldr	r2, [r7, #20]
 800a230:	429a      	cmp	r2, r3
 800a232:	d20d      	bcs.n	800a250 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a234:	2301      	movs	r3, #1
 800a236:	e01d      	b.n	800a274 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a238:	79fb      	ldrb	r3, [r7, #7]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d006      	beq.n	800a24c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	425b      	negs	r3, r3
 800a246:	4413      	add	r3, r2
 800a248:	617b      	str	r3, [r7, #20]
 800a24a:	e001      	b.n	800a250 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e011      	b.n	800a274 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	895a      	ldrh	r2, [r3, #10]
 800a25a:	8a7b      	ldrh	r3, [r7, #18]
 800a25c:	4413      	add	r3, r2
 800a25e:	b29a      	uxth	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	891a      	ldrh	r2, [r3, #8]
 800a268:	8a7b      	ldrh	r3, [r7, #18]
 800a26a:	4413      	add	r3, r2
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	811a      	strh	r2, [r3, #8]


  return 0;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	080165e4 	.word	0x080165e4
 800a280:	08016748 	.word	0x08016748
 800a284:	08016644 	.word	0x08016644

0800a288 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a292:	2200      	movs	r2, #0
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7ff ff8e 	bl	800a1b8 <pbuf_add_header_impl>
 800a29c:	4603      	mov	r3, r0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
	...

0800a2a8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d106      	bne.n	800a2c6 <pbuf_remove_header+0x1e>
 800a2b8:	4b20      	ldr	r3, [pc, #128]	; (800a33c <pbuf_remove_header+0x94>)
 800a2ba:	f240 224b 	movw	r2, #587	; 0x24b
 800a2be:	4920      	ldr	r1, [pc, #128]	; (800a340 <pbuf_remove_header+0x98>)
 800a2c0:	4820      	ldr	r0, [pc, #128]	; (800a344 <pbuf_remove_header+0x9c>)
 800a2c2:	f00a fc41 	bl	8014b48 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d003      	beq.n	800a2d4 <pbuf_remove_header+0x2c>
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2d2:	d301      	bcc.n	800a2d8 <pbuf_remove_header+0x30>
    return 1;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e02c      	b.n	800a332 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d101      	bne.n	800a2e2 <pbuf_remove_header+0x3a>
    return 0;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	e027      	b.n	800a332 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	895b      	ldrh	r3, [r3, #10]
 800a2ea:	89fa      	ldrh	r2, [r7, #14]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d908      	bls.n	800a302 <pbuf_remove_header+0x5a>
 800a2f0:	4b12      	ldr	r3, [pc, #72]	; (800a33c <pbuf_remove_header+0x94>)
 800a2f2:	f240 2255 	movw	r2, #597	; 0x255
 800a2f6:	4914      	ldr	r1, [pc, #80]	; (800a348 <pbuf_remove_header+0xa0>)
 800a2f8:	4812      	ldr	r0, [pc, #72]	; (800a344 <pbuf_remove_header+0x9c>)
 800a2fa:	f00a fc25 	bl	8014b48 <iprintf>
 800a2fe:	2301      	movs	r3, #1
 800a300:	e017      	b.n	800a332 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	441a      	add	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	895a      	ldrh	r2, [r3, #10]
 800a318:	89fb      	ldrh	r3, [r7, #14]
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	891a      	ldrh	r2, [r3, #8]
 800a326:	89fb      	ldrh	r3, [r7, #14]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	080165e4 	.word	0x080165e4
 800a340:	08016748 	.word	0x08016748
 800a344:	08016644 	.word	0x08016644
 800a348:	08016754 	.word	0x08016754

0800a34c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	460b      	mov	r3, r1
 800a356:	807b      	strh	r3, [r7, #2]
 800a358:	4613      	mov	r3, r2
 800a35a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a35c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a360:	2b00      	cmp	r3, #0
 800a362:	da08      	bge.n	800a376 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a364:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a368:	425b      	negs	r3, r3
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7ff ff9b 	bl	800a2a8 <pbuf_remove_header>
 800a372:	4603      	mov	r3, r0
 800a374:	e007      	b.n	800a386 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a376:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a37a:	787a      	ldrb	r2, [r7, #1]
 800a37c:	4619      	mov	r1, r3
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7ff ff1a 	bl	800a1b8 <pbuf_add_header_impl>
 800a384:	4603      	mov	r3, r0
  }
}
 800a386:	4618      	mov	r0, r3
 800a388:	3708      	adds	r7, #8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b082      	sub	sp, #8
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	460b      	mov	r3, r1
 800a398:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a39a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7ff ffd2 	bl	800a34c <pbuf_header_impl>
 800a3a8:	4603      	mov	r3, r0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10b      	bne.n	800a3da <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d106      	bne.n	800a3d6 <pbuf_free+0x22>
 800a3c8:	4b38      	ldr	r3, [pc, #224]	; (800a4ac <pbuf_free+0xf8>)
 800a3ca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a3ce:	4938      	ldr	r1, [pc, #224]	; (800a4b0 <pbuf_free+0xfc>)
 800a3d0:	4838      	ldr	r0, [pc, #224]	; (800a4b4 <pbuf_free+0x100>)
 800a3d2:	f00a fbb9 	bl	8014b48 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	e063      	b.n	800a4a2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a3de:	e05c      	b.n	800a49a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	7b9b      	ldrb	r3, [r3, #14]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d106      	bne.n	800a3f6 <pbuf_free+0x42>
 800a3e8:	4b30      	ldr	r3, [pc, #192]	; (800a4ac <pbuf_free+0xf8>)
 800a3ea:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a3ee:	4932      	ldr	r1, [pc, #200]	; (800a4b8 <pbuf_free+0x104>)
 800a3f0:	4830      	ldr	r0, [pc, #192]	; (800a4b4 <pbuf_free+0x100>)
 800a3f2:	f00a fba9 	bl	8014b48 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	7b9b      	ldrb	r3, [r3, #14]
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	739a      	strb	r2, [r3, #14]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	7b9b      	ldrb	r3, [r3, #14]
 800a406:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a408:	7dbb      	ldrb	r3, [r7, #22]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d143      	bne.n	800a496 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	7b1b      	ldrb	r3, [r3, #12]
 800a418:	f003 030f 	and.w	r3, r3, #15
 800a41c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	7b5b      	ldrb	r3, [r3, #13]
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	2b00      	cmp	r3, #0
 800a428:	d011      	beq.n	800a44e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d106      	bne.n	800a444 <pbuf_free+0x90>
 800a436:	4b1d      	ldr	r3, [pc, #116]	; (800a4ac <pbuf_free+0xf8>)
 800a438:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a43c:	491f      	ldr	r1, [pc, #124]	; (800a4bc <pbuf_free+0x108>)
 800a43e:	481d      	ldr	r0, [pc, #116]	; (800a4b4 <pbuf_free+0x100>)
 800a440:	f00a fb82 	bl	8014b48 <iprintf>
        pc->custom_free_function(p);
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	4798      	blx	r3
 800a44c:	e01d      	b.n	800a48a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
 800a450:	2b02      	cmp	r3, #2
 800a452:	d104      	bne.n	800a45e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a454:	6879      	ldr	r1, [r7, #4]
 800a456:	2007      	movs	r0, #7
 800a458:	f7ff f93a 	bl	80096d0 <memp_free>
 800a45c:	e015      	b.n	800a48a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d104      	bne.n	800a46e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a464:	6879      	ldr	r1, [r7, #4]
 800a466:	2006      	movs	r0, #6
 800a468:	f7ff f932 	bl	80096d0 <memp_free>
 800a46c:	e00d      	b.n	800a48a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d103      	bne.n	800a47c <pbuf_free+0xc8>
          mem_free(p);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7fe fdc5 	bl	8009004 <mem_free>
 800a47a:	e006      	b.n	800a48a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a47c:	4b0b      	ldr	r3, [pc, #44]	; (800a4ac <pbuf_free+0xf8>)
 800a47e:	f240 320f 	movw	r2, #783	; 0x30f
 800a482:	490f      	ldr	r1, [pc, #60]	; (800a4c0 <pbuf_free+0x10c>)
 800a484:	480b      	ldr	r0, [pc, #44]	; (800a4b4 <pbuf_free+0x100>)
 800a486:	f00a fb5f 	bl	8014b48 <iprintf>
        }
      }
      count++;
 800a48a:	7dfb      	ldrb	r3, [r7, #23]
 800a48c:	3301      	adds	r3, #1
 800a48e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	607b      	str	r3, [r7, #4]
 800a494:	e001      	b.n	800a49a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a496:	2300      	movs	r3, #0
 800a498:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d19f      	bne.n	800a3e0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3718      	adds	r7, #24
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	080165e4 	.word	0x080165e4
 800a4b0:	08016748 	.word	0x08016748
 800a4b4:	08016644 	.word	0x08016644
 800a4b8:	08016774 	.word	0x08016774
 800a4bc:	0801678c 	.word	0x0801678c
 800a4c0:	080167b0 	.word	0x080167b0

0800a4c4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a4d0:	e005      	b.n	800a4de <pbuf_clen+0x1a>
    ++len;
 800a4d2:	89fb      	ldrh	r3, [r7, #14]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1f6      	bne.n	800a4d2 <pbuf_clen+0xe>
  }
  return len;
 800a4e4:	89fb      	ldrh	r3, [r7, #14]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
	...

0800a4f4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d010      	beq.n	800a524 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	7b9b      	ldrb	r3, [r3, #14]
 800a506:	3301      	adds	r3, #1
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	7b9b      	ldrb	r3, [r3, #14]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d106      	bne.n	800a524 <pbuf_ref+0x30>
 800a516:	4b05      	ldr	r3, [pc, #20]	; (800a52c <pbuf_ref+0x38>)
 800a518:	f240 3242 	movw	r2, #834	; 0x342
 800a51c:	4904      	ldr	r1, [pc, #16]	; (800a530 <pbuf_ref+0x3c>)
 800a51e:	4805      	ldr	r0, [pc, #20]	; (800a534 <pbuf_ref+0x40>)
 800a520:	f00a fb12 	bl	8014b48 <iprintf>
  }
}
 800a524:	bf00      	nop
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	080165e4 	.word	0x080165e4
 800a530:	080167c4 	.word	0x080167c4
 800a534:	08016644 	.word	0x08016644

0800a538 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d002      	beq.n	800a54e <pbuf_cat+0x16>
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d107      	bne.n	800a55e <pbuf_cat+0x26>
 800a54e:	4b20      	ldr	r3, [pc, #128]	; (800a5d0 <pbuf_cat+0x98>)
 800a550:	f240 3259 	movw	r2, #857	; 0x359
 800a554:	491f      	ldr	r1, [pc, #124]	; (800a5d4 <pbuf_cat+0x9c>)
 800a556:	4820      	ldr	r0, [pc, #128]	; (800a5d8 <pbuf_cat+0xa0>)
 800a558:	f00a faf6 	bl	8014b48 <iprintf>
 800a55c:	e034      	b.n	800a5c8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	60fb      	str	r3, [r7, #12]
 800a562:	e00a      	b.n	800a57a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	891a      	ldrh	r2, [r3, #8]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	891b      	ldrh	r3, [r3, #8]
 800a56c:	4413      	add	r3, r2
 800a56e:	b29a      	uxth	r2, r3
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	60fb      	str	r3, [r7, #12]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1f0      	bne.n	800a564 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	891a      	ldrh	r2, [r3, #8]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	895b      	ldrh	r3, [r3, #10]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d006      	beq.n	800a59c <pbuf_cat+0x64>
 800a58e:	4b10      	ldr	r3, [pc, #64]	; (800a5d0 <pbuf_cat+0x98>)
 800a590:	f240 3262 	movw	r2, #866	; 0x362
 800a594:	4911      	ldr	r1, [pc, #68]	; (800a5dc <pbuf_cat+0xa4>)
 800a596:	4810      	ldr	r0, [pc, #64]	; (800a5d8 <pbuf_cat+0xa0>)
 800a598:	f00a fad6 	bl	8014b48 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d006      	beq.n	800a5b2 <pbuf_cat+0x7a>
 800a5a4:	4b0a      	ldr	r3, [pc, #40]	; (800a5d0 <pbuf_cat+0x98>)
 800a5a6:	f240 3263 	movw	r2, #867	; 0x363
 800a5aa:	490d      	ldr	r1, [pc, #52]	; (800a5e0 <pbuf_cat+0xa8>)
 800a5ac:	480a      	ldr	r0, [pc, #40]	; (800a5d8 <pbuf_cat+0xa0>)
 800a5ae:	f00a facb 	bl	8014b48 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	891a      	ldrh	r2, [r3, #8]
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	891b      	ldrh	r3, [r3, #8]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	080165e4 	.word	0x080165e4
 800a5d4:	080167d8 	.word	0x080167d8
 800a5d8:	08016644 	.word	0x08016644
 800a5dc:	08016810 	.word	0x08016810
 800a5e0:	08016840 	.word	0x08016840

0800a5e4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d008      	beq.n	800a60e <pbuf_copy+0x2a>
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d005      	beq.n	800a60e <pbuf_copy+0x2a>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	891a      	ldrh	r2, [r3, #8]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	891b      	ldrh	r3, [r3, #8]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d209      	bcs.n	800a622 <pbuf_copy+0x3e>
 800a60e:	4b57      	ldr	r3, [pc, #348]	; (800a76c <pbuf_copy+0x188>)
 800a610:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a614:	4956      	ldr	r1, [pc, #344]	; (800a770 <pbuf_copy+0x18c>)
 800a616:	4857      	ldr	r0, [pc, #348]	; (800a774 <pbuf_copy+0x190>)
 800a618:	f00a fa96 	bl	8014b48 <iprintf>
 800a61c:	f06f 030f 	mvn.w	r3, #15
 800a620:	e09f      	b.n	800a762 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	895b      	ldrh	r3, [r3, #10]
 800a626:	461a      	mov	r2, r3
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	1ad2      	subs	r2, r2, r3
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	895b      	ldrh	r3, [r3, #10]
 800a630:	4619      	mov	r1, r3
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	1acb      	subs	r3, r1, r3
 800a636:	429a      	cmp	r2, r3
 800a638:	d306      	bcc.n	800a648 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	895b      	ldrh	r3, [r3, #10]
 800a63e:	461a      	mov	r2, r3
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	60fb      	str	r3, [r7, #12]
 800a646:	e005      	b.n	800a654 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	895b      	ldrh	r3, [r3, #10]
 800a64c:	461a      	mov	r2, r3
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685a      	ldr	r2, [r3, #4]
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	18d0      	adds	r0, r2, r3
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	4413      	add	r3, r2
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4619      	mov	r1, r3
 800a668:	f00a fbd1 	bl	8014e0e <memcpy>
    offset_to += len;
 800a66c:	697a      	ldr	r2, [r7, #20]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	4413      	add	r3, r2
 800a672:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a674:	693a      	ldr	r2, [r7, #16]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	4413      	add	r3, r2
 800a67a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	895b      	ldrh	r3, [r3, #10]
 800a680:	461a      	mov	r2, r3
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	4293      	cmp	r3, r2
 800a686:	d906      	bls.n	800a696 <pbuf_copy+0xb2>
 800a688:	4b38      	ldr	r3, [pc, #224]	; (800a76c <pbuf_copy+0x188>)
 800a68a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a68e:	493a      	ldr	r1, [pc, #232]	; (800a778 <pbuf_copy+0x194>)
 800a690:	4838      	ldr	r0, [pc, #224]	; (800a774 <pbuf_copy+0x190>)
 800a692:	f00a fa59 	bl	8014b48 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	895b      	ldrh	r3, [r3, #10]
 800a69a:	461a      	mov	r2, r3
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d906      	bls.n	800a6b0 <pbuf_copy+0xcc>
 800a6a2:	4b32      	ldr	r3, [pc, #200]	; (800a76c <pbuf_copy+0x188>)
 800a6a4:	f240 32da 	movw	r2, #986	; 0x3da
 800a6a8:	4934      	ldr	r1, [pc, #208]	; (800a77c <pbuf_copy+0x198>)
 800a6aa:	4832      	ldr	r0, [pc, #200]	; (800a774 <pbuf_copy+0x190>)
 800a6ac:	f00a fa4c 	bl	8014b48 <iprintf>
    if (offset_from >= p_from->len) {
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	895b      	ldrh	r3, [r3, #10]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d304      	bcc.n	800a6c6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	895b      	ldrh	r3, [r3, #10]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d114      	bne.n	800a6fc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10c      	bne.n	800a6fc <pbuf_copy+0x118>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d009      	beq.n	800a6fc <pbuf_copy+0x118>
 800a6e8:	4b20      	ldr	r3, [pc, #128]	; (800a76c <pbuf_copy+0x188>)
 800a6ea:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a6ee:	4924      	ldr	r1, [pc, #144]	; (800a780 <pbuf_copy+0x19c>)
 800a6f0:	4820      	ldr	r0, [pc, #128]	; (800a774 <pbuf_copy+0x190>)
 800a6f2:	f00a fa29 	bl	8014b48 <iprintf>
 800a6f6:	f06f 030f 	mvn.w	r3, #15
 800a6fa:	e032      	b.n	800a762 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d013      	beq.n	800a72a <pbuf_copy+0x146>
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	895a      	ldrh	r2, [r3, #10]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	891b      	ldrh	r3, [r3, #8]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d10d      	bne.n	800a72a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d009      	beq.n	800a72a <pbuf_copy+0x146>
 800a716:	4b15      	ldr	r3, [pc, #84]	; (800a76c <pbuf_copy+0x188>)
 800a718:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a71c:	4919      	ldr	r1, [pc, #100]	; (800a784 <pbuf_copy+0x1a0>)
 800a71e:	4815      	ldr	r0, [pc, #84]	; (800a774 <pbuf_copy+0x190>)
 800a720:	f00a fa12 	bl	8014b48 <iprintf>
 800a724:	f06f 0305 	mvn.w	r3, #5
 800a728:	e01b      	b.n	800a762 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d013      	beq.n	800a758 <pbuf_copy+0x174>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	895a      	ldrh	r2, [r3, #10]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	891b      	ldrh	r3, [r3, #8]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d10d      	bne.n	800a758 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d009      	beq.n	800a758 <pbuf_copy+0x174>
 800a744:	4b09      	ldr	r3, [pc, #36]	; (800a76c <pbuf_copy+0x188>)
 800a746:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a74a:	490e      	ldr	r1, [pc, #56]	; (800a784 <pbuf_copy+0x1a0>)
 800a74c:	4809      	ldr	r0, [pc, #36]	; (800a774 <pbuf_copy+0x190>)
 800a74e:	f00a f9fb 	bl	8014b48 <iprintf>
 800a752:	f06f 0305 	mvn.w	r3, #5
 800a756:	e004      	b.n	800a762 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f47f af61 	bne.w	800a622 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3718      	adds	r7, #24
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	080165e4 	.word	0x080165e4
 800a770:	0801688c 	.word	0x0801688c
 800a774:	08016644 	.word	0x08016644
 800a778:	080168bc 	.word	0x080168bc
 800a77c:	080168d4 	.word	0x080168d4
 800a780:	080168f0 	.word	0x080168f0
 800a784:	08016900 	.word	0x08016900

0800a788 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	4611      	mov	r1, r2
 800a794:	461a      	mov	r2, r3
 800a796:	460b      	mov	r3, r1
 800a798:	80fb      	strh	r3, [r7, #6]
 800a79a:	4613      	mov	r3, r2
 800a79c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d108      	bne.n	800a7be <pbuf_copy_partial+0x36>
 800a7ac:	4b2b      	ldr	r3, [pc, #172]	; (800a85c <pbuf_copy_partial+0xd4>)
 800a7ae:	f240 420a 	movw	r2, #1034	; 0x40a
 800a7b2:	492b      	ldr	r1, [pc, #172]	; (800a860 <pbuf_copy_partial+0xd8>)
 800a7b4:	482b      	ldr	r0, [pc, #172]	; (800a864 <pbuf_copy_partial+0xdc>)
 800a7b6:	f00a f9c7 	bl	8014b48 <iprintf>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	e04a      	b.n	800a854 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d108      	bne.n	800a7d6 <pbuf_copy_partial+0x4e>
 800a7c4:	4b25      	ldr	r3, [pc, #148]	; (800a85c <pbuf_copy_partial+0xd4>)
 800a7c6:	f240 420b 	movw	r2, #1035	; 0x40b
 800a7ca:	4927      	ldr	r1, [pc, #156]	; (800a868 <pbuf_copy_partial+0xe0>)
 800a7cc:	4825      	ldr	r0, [pc, #148]	; (800a864 <pbuf_copy_partial+0xdc>)
 800a7ce:	f00a f9bb 	bl	8014b48 <iprintf>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	e03e      	b.n	800a854 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	61fb      	str	r3, [r7, #28]
 800a7da:	e034      	b.n	800a846 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a7dc:	88bb      	ldrh	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00a      	beq.n	800a7f8 <pbuf_copy_partial+0x70>
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	895b      	ldrh	r3, [r3, #10]
 800a7e6:	88ba      	ldrh	r2, [r7, #4]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d305      	bcc.n	800a7f8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	895b      	ldrh	r3, [r3, #10]
 800a7f0:	88ba      	ldrh	r2, [r7, #4]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	80bb      	strh	r3, [r7, #4]
 800a7f6:	e023      	b.n	800a840 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	895a      	ldrh	r2, [r3, #10]
 800a7fc:	88bb      	ldrh	r3, [r7, #4]
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a802:	8b3a      	ldrh	r2, [r7, #24]
 800a804:	88fb      	ldrh	r3, [r7, #6]
 800a806:	429a      	cmp	r2, r3
 800a808:	d901      	bls.n	800a80e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a80a:	88fb      	ldrh	r3, [r7, #6]
 800a80c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a80e:	8b7b      	ldrh	r3, [r7, #26]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	18d0      	adds	r0, r2, r3
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	685a      	ldr	r2, [r3, #4]
 800a818:	88bb      	ldrh	r3, [r7, #4]
 800a81a:	4413      	add	r3, r2
 800a81c:	8b3a      	ldrh	r2, [r7, #24]
 800a81e:	4619      	mov	r1, r3
 800a820:	f00a faf5 	bl	8014e0e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a824:	8afa      	ldrh	r2, [r7, #22]
 800a826:	8b3b      	ldrh	r3, [r7, #24]
 800a828:	4413      	add	r3, r2
 800a82a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a82c:	8b7a      	ldrh	r2, [r7, #26]
 800a82e:	8b3b      	ldrh	r3, [r7, #24]
 800a830:	4413      	add	r3, r2
 800a832:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a834:	88fa      	ldrh	r2, [r7, #6]
 800a836:	8b3b      	ldrh	r3, [r7, #24]
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	61fb      	str	r3, [r7, #28]
 800a846:	88fb      	ldrh	r3, [r7, #6]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <pbuf_copy_partial+0xca>
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1c4      	bne.n	800a7dc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a852:	8afb      	ldrh	r3, [r7, #22]
}
 800a854:	4618      	mov	r0, r3
 800a856:	3720      	adds	r7, #32
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	080165e4 	.word	0x080165e4
 800a860:	0801692c 	.word	0x0801692c
 800a864:	08016644 	.word	0x08016644
 800a868:	0801694c 	.word	0x0801694c

0800a86c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	4603      	mov	r3, r0
 800a874:	603a      	str	r2, [r7, #0]
 800a876:	71fb      	strb	r3, [r7, #7]
 800a878:	460b      	mov	r3, r1
 800a87a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	8919      	ldrh	r1, [r3, #8]
 800a880:	88ba      	ldrh	r2, [r7, #4]
 800a882:	79fb      	ldrb	r3, [r7, #7]
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff fab1 	bl	8009dec <pbuf_alloc>
 800a88a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d101      	bne.n	800a896 <pbuf_clone+0x2a>
    return NULL;
 800a892:	2300      	movs	r3, #0
 800a894:	e011      	b.n	800a8ba <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f7ff fea3 	bl	800a5e4 <pbuf_copy>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a8a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d006      	beq.n	800a8b8 <pbuf_clone+0x4c>
 800a8aa:	4b06      	ldr	r3, [pc, #24]	; (800a8c4 <pbuf_clone+0x58>)
 800a8ac:	f240 5224 	movw	r2, #1316	; 0x524
 800a8b0:	4905      	ldr	r1, [pc, #20]	; (800a8c8 <pbuf_clone+0x5c>)
 800a8b2:	4806      	ldr	r0, [pc, #24]	; (800a8cc <pbuf_clone+0x60>)
 800a8b4:	f00a f948 	bl	8014b48 <iprintf>
  return q;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	080165e4 	.word	0x080165e4
 800a8c8:	08016a58 	.word	0x08016a58
 800a8cc:	08016644 	.word	0x08016644

0800a8d0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a8d4:	f00a f838 	bl	8014948 <rand>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	4b01      	ldr	r3, [pc, #4]	; (800a8f0 <tcp_init+0x20>)
 800a8ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a8ec:	bf00      	nop
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	2000046c 	.word	0x2000046c

0800a8f4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	7d1b      	ldrb	r3, [r3, #20]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d105      	bne.n	800a910 <tcp_free+0x1c>
 800a904:	4b06      	ldr	r3, [pc, #24]	; (800a920 <tcp_free+0x2c>)
 800a906:	22d4      	movs	r2, #212	; 0xd4
 800a908:	4906      	ldr	r1, [pc, #24]	; (800a924 <tcp_free+0x30>)
 800a90a:	4807      	ldr	r0, [pc, #28]	; (800a928 <tcp_free+0x34>)
 800a90c:	f00a f91c 	bl	8014b48 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a910:	6879      	ldr	r1, [r7, #4]
 800a912:	2000      	movs	r0, #0
 800a914:	f7fe fedc 	bl	80096d0 <memp_free>
}
 800a918:	bf00      	nop
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	08016ae4 	.word	0x08016ae4
 800a924:	08016b14 	.word	0x08016b14
 800a928:	08016b28 	.word	0x08016b28

0800a92c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	7d1b      	ldrb	r3, [r3, #20]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d105      	bne.n	800a948 <tcp_free_listen+0x1c>
 800a93c:	4b06      	ldr	r3, [pc, #24]	; (800a958 <tcp_free_listen+0x2c>)
 800a93e:	22df      	movs	r2, #223	; 0xdf
 800a940:	4906      	ldr	r1, [pc, #24]	; (800a95c <tcp_free_listen+0x30>)
 800a942:	4807      	ldr	r0, [pc, #28]	; (800a960 <tcp_free_listen+0x34>)
 800a944:	f00a f900 	bl	8014b48 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a948:	6879      	ldr	r1, [r7, #4]
 800a94a:	2001      	movs	r0, #1
 800a94c:	f7fe fec0 	bl	80096d0 <memp_free>
}
 800a950:	bf00      	nop
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	08016ae4 	.word	0x08016ae4
 800a95c:	08016b50 	.word	0x08016b50
 800a960:	08016b28 	.word	0x08016b28

0800a964 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a968:	f001 f85c 	bl	800ba24 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a96c:	4b07      	ldr	r3, [pc, #28]	; (800a98c <tcp_tmr+0x28>)
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	3301      	adds	r3, #1
 800a972:	b2da      	uxtb	r2, r3
 800a974:	4b05      	ldr	r3, [pc, #20]	; (800a98c <tcp_tmr+0x28>)
 800a976:	701a      	strb	r2, [r3, #0]
 800a978:	4b04      	ldr	r3, [pc, #16]	; (800a98c <tcp_tmr+0x28>)
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	2b00      	cmp	r3, #0
 800a982:	d001      	beq.n	800a988 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a984:	f000 fd0e 	bl	800b3a4 <tcp_slowtmr>
  }
}
 800a988:	bf00      	nop
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	2000e4b9 	.word	0x2000e4b9

0800a990 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d105      	bne.n	800a9ac <tcp_remove_listener+0x1c>
 800a9a0:	4b0d      	ldr	r3, [pc, #52]	; (800a9d8 <tcp_remove_listener+0x48>)
 800a9a2:	22ff      	movs	r2, #255	; 0xff
 800a9a4:	490d      	ldr	r1, [pc, #52]	; (800a9dc <tcp_remove_listener+0x4c>)
 800a9a6:	480e      	ldr	r0, [pc, #56]	; (800a9e0 <tcp_remove_listener+0x50>)
 800a9a8:	f00a f8ce 	bl	8014b48 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	60fb      	str	r3, [r7, #12]
 800a9b0:	e00a      	b.n	800a9c8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d102      	bne.n	800a9c2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	60fb      	str	r3, [r7, #12]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1f1      	bne.n	800a9b2 <tcp_remove_listener+0x22>
    }
  }
}
 800a9ce:	bf00      	nop
 800a9d0:	bf00      	nop
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	08016ae4 	.word	0x08016ae4
 800a9dc:	08016b6c 	.word	0x08016b6c
 800a9e0:	08016b28 	.word	0x08016b28

0800a9e4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d106      	bne.n	800aa00 <tcp_listen_closed+0x1c>
 800a9f2:	4b14      	ldr	r3, [pc, #80]	; (800aa44 <tcp_listen_closed+0x60>)
 800a9f4:	f240 1211 	movw	r2, #273	; 0x111
 800a9f8:	4913      	ldr	r1, [pc, #76]	; (800aa48 <tcp_listen_closed+0x64>)
 800a9fa:	4814      	ldr	r0, [pc, #80]	; (800aa4c <tcp_listen_closed+0x68>)
 800a9fc:	f00a f8a4 	bl	8014b48 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	7d1b      	ldrb	r3, [r3, #20]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d006      	beq.n	800aa16 <tcp_listen_closed+0x32>
 800aa08:	4b0e      	ldr	r3, [pc, #56]	; (800aa44 <tcp_listen_closed+0x60>)
 800aa0a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800aa0e:	4910      	ldr	r1, [pc, #64]	; (800aa50 <tcp_listen_closed+0x6c>)
 800aa10:	480e      	ldr	r0, [pc, #56]	; (800aa4c <tcp_listen_closed+0x68>)
 800aa12:	f00a f899 	bl	8014b48 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aa16:	2301      	movs	r3, #1
 800aa18:	60fb      	str	r3, [r7, #12]
 800aa1a:	e00b      	b.n	800aa34 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800aa1c:	4a0d      	ldr	r2, [pc, #52]	; (800aa54 <tcp_listen_closed+0x70>)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	6879      	ldr	r1, [r7, #4]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7ff ffb1 	bl	800a990 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	3301      	adds	r3, #1
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	d9f0      	bls.n	800aa1c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800aa3a:	bf00      	nop
 800aa3c:	bf00      	nop
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	08016ae4 	.word	0x08016ae4
 800aa48:	08016b94 	.word	0x08016b94
 800aa4c:	08016b28 	.word	0x08016b28
 800aa50:	08016ba0 	.word	0x08016ba0
 800aa54:	08018b08 	.word	0x08018b08

0800aa58 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800aa58:	b5b0      	push	{r4, r5, r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af04      	add	r7, sp, #16
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d106      	bne.n	800aa78 <tcp_close_shutdown+0x20>
 800aa6a:	4b63      	ldr	r3, [pc, #396]	; (800abf8 <tcp_close_shutdown+0x1a0>)
 800aa6c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800aa70:	4962      	ldr	r1, [pc, #392]	; (800abfc <tcp_close_shutdown+0x1a4>)
 800aa72:	4863      	ldr	r0, [pc, #396]	; (800ac00 <tcp_close_shutdown+0x1a8>)
 800aa74:	f00a f868 	bl	8014b48 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800aa78:	78fb      	ldrb	r3, [r7, #3]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d066      	beq.n	800ab4c <tcp_close_shutdown+0xf4>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	7d1b      	ldrb	r3, [r3, #20]
 800aa82:	2b04      	cmp	r3, #4
 800aa84:	d003      	beq.n	800aa8e <tcp_close_shutdown+0x36>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	7d1b      	ldrb	r3, [r3, #20]
 800aa8a:	2b07      	cmp	r3, #7
 800aa8c:	d15e      	bne.n	800ab4c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d104      	bne.n	800aaa0 <tcp_close_shutdown+0x48>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa9a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aa9e:	d055      	beq.n	800ab4c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	8b5b      	ldrh	r3, [r3, #26]
 800aaa4:	f003 0310 	and.w	r3, r3, #16
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d106      	bne.n	800aaba <tcp_close_shutdown+0x62>
 800aaac:	4b52      	ldr	r3, [pc, #328]	; (800abf8 <tcp_close_shutdown+0x1a0>)
 800aaae:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800aab2:	4954      	ldr	r1, [pc, #336]	; (800ac04 <tcp_close_shutdown+0x1ac>)
 800aab4:	4852      	ldr	r0, [pc, #328]	; (800ac00 <tcp_close_shutdown+0x1a8>)
 800aab6:	f00a f847 	bl	8014b48 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800aac2:	687d      	ldr	r5, [r7, #4]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	3304      	adds	r3, #4
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	8ad2      	ldrh	r2, [r2, #22]
 800aacc:	6879      	ldr	r1, [r7, #4]
 800aace:	8b09      	ldrh	r1, [r1, #24]
 800aad0:	9102      	str	r1, [sp, #8]
 800aad2:	9201      	str	r2, [sp, #4]
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	462b      	mov	r3, r5
 800aad8:	4622      	mov	r2, r4
 800aada:	4601      	mov	r1, r0
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f005 fd19 	bl	8010514 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f001 faf6 	bl	800c0d4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800aae8:	4b47      	ldr	r3, [pc, #284]	; (800ac08 <tcp_close_shutdown+0x1b0>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d105      	bne.n	800aafe <tcp_close_shutdown+0xa6>
 800aaf2:	4b45      	ldr	r3, [pc, #276]	; (800ac08 <tcp_close_shutdown+0x1b0>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	4a43      	ldr	r2, [pc, #268]	; (800ac08 <tcp_close_shutdown+0x1b0>)
 800aafa:	6013      	str	r3, [r2, #0]
 800aafc:	e013      	b.n	800ab26 <tcp_close_shutdown+0xce>
 800aafe:	4b42      	ldr	r3, [pc, #264]	; (800ac08 <tcp_close_shutdown+0x1b0>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	e00c      	b.n	800ab20 <tcp_close_shutdown+0xc8>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d104      	bne.n	800ab1a <tcp_close_shutdown+0xc2>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	68da      	ldr	r2, [r3, #12]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	60da      	str	r2, [r3, #12]
 800ab18:	e005      	b.n	800ab26 <tcp_close_shutdown+0xce>
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1ef      	bne.n	800ab06 <tcp_close_shutdown+0xae>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	60da      	str	r2, [r3, #12]
 800ab2c:	4b37      	ldr	r3, [pc, #220]	; (800ac0c <tcp_close_shutdown+0x1b4>)
 800ab2e:	2201      	movs	r2, #1
 800ab30:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ab32:	4b37      	ldr	r3, [pc, #220]	; (800ac10 <tcp_close_shutdown+0x1b8>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d102      	bne.n	800ab42 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ab3c:	f003 ff8e 	bl	800ea5c <tcp_trigger_input_pcb_close>
 800ab40:	e002      	b.n	800ab48 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f7ff fed6 	bl	800a8f4 <tcp_free>
      }
      return ERR_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	e050      	b.n	800abee <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	7d1b      	ldrb	r3, [r3, #20]
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d03b      	beq.n	800abcc <tcp_close_shutdown+0x174>
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	dc44      	bgt.n	800abe2 <tcp_close_shutdown+0x18a>
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d002      	beq.n	800ab62 <tcp_close_shutdown+0x10a>
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d02a      	beq.n	800abb6 <tcp_close_shutdown+0x15e>
 800ab60:	e03f      	b.n	800abe2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	8adb      	ldrh	r3, [r3, #22]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d021      	beq.n	800abae <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ab6a:	4b2a      	ldr	r3, [pc, #168]	; (800ac14 <tcp_close_shutdown+0x1bc>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d105      	bne.n	800ab80 <tcp_close_shutdown+0x128>
 800ab74:	4b27      	ldr	r3, [pc, #156]	; (800ac14 <tcp_close_shutdown+0x1bc>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	4a26      	ldr	r2, [pc, #152]	; (800ac14 <tcp_close_shutdown+0x1bc>)
 800ab7c:	6013      	str	r3, [r2, #0]
 800ab7e:	e013      	b.n	800aba8 <tcp_close_shutdown+0x150>
 800ab80:	4b24      	ldr	r3, [pc, #144]	; (800ac14 <tcp_close_shutdown+0x1bc>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	60bb      	str	r3, [r7, #8]
 800ab86:	e00c      	b.n	800aba2 <tcp_close_shutdown+0x14a>
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d104      	bne.n	800ab9c <tcp_close_shutdown+0x144>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68da      	ldr	r2, [r3, #12]
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	60da      	str	r2, [r3, #12]
 800ab9a:	e005      	b.n	800aba8 <tcp_close_shutdown+0x150>
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	60bb      	str	r3, [r7, #8]
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1ef      	bne.n	800ab88 <tcp_close_shutdown+0x130>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f7ff fea0 	bl	800a8f4 <tcp_free>
      break;
 800abb4:	e01a      	b.n	800abec <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7ff ff14 	bl	800a9e4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	4816      	ldr	r0, [pc, #88]	; (800ac18 <tcp_close_shutdown+0x1c0>)
 800abc0:	f001 fad8 	bl	800c174 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f7ff feb1 	bl	800a92c <tcp_free_listen>
      break;
 800abca:	e00f      	b.n	800abec <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800abcc:	6879      	ldr	r1, [r7, #4]
 800abce:	480e      	ldr	r0, [pc, #56]	; (800ac08 <tcp_close_shutdown+0x1b0>)
 800abd0:	f001 fad0 	bl	800c174 <tcp_pcb_remove>
 800abd4:	4b0d      	ldr	r3, [pc, #52]	; (800ac0c <tcp_close_shutdown+0x1b4>)
 800abd6:	2201      	movs	r2, #1
 800abd8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7ff fe8a 	bl	800a8f4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800abe0:	e004      	b.n	800abec <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f81a 	bl	800ac1c <tcp_close_shutdown_fin>
 800abe8:	4603      	mov	r3, r0
 800abea:	e000      	b.n	800abee <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bdb0      	pop	{r4, r5, r7, pc}
 800abf6:	bf00      	nop
 800abf8:	08016ae4 	.word	0x08016ae4
 800abfc:	08016bb8 	.word	0x08016bb8
 800ac00:	08016b28 	.word	0x08016b28
 800ac04:	08016bd8 	.word	0x08016bd8
 800ac08:	2000e4b0 	.word	0x2000e4b0
 800ac0c:	2000e4b8 	.word	0x2000e4b8
 800ac10:	2000e4f0 	.word	0x2000e4f0
 800ac14:	2000e4a8 	.word	0x2000e4a8
 800ac18:	2000e4ac 	.word	0x2000e4ac

0800ac1c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d106      	bne.n	800ac38 <tcp_close_shutdown_fin+0x1c>
 800ac2a:	4b2e      	ldr	r3, [pc, #184]	; (800ace4 <tcp_close_shutdown_fin+0xc8>)
 800ac2c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ac30:	492d      	ldr	r1, [pc, #180]	; (800ace8 <tcp_close_shutdown_fin+0xcc>)
 800ac32:	482e      	ldr	r0, [pc, #184]	; (800acec <tcp_close_shutdown_fin+0xd0>)
 800ac34:	f009 ff88 	bl	8014b48 <iprintf>

  switch (pcb->state) {
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	7d1b      	ldrb	r3, [r3, #20]
 800ac3c:	2b07      	cmp	r3, #7
 800ac3e:	d020      	beq.n	800ac82 <tcp_close_shutdown_fin+0x66>
 800ac40:	2b07      	cmp	r3, #7
 800ac42:	dc2b      	bgt.n	800ac9c <tcp_close_shutdown_fin+0x80>
 800ac44:	2b03      	cmp	r3, #3
 800ac46:	d002      	beq.n	800ac4e <tcp_close_shutdown_fin+0x32>
 800ac48:	2b04      	cmp	r3, #4
 800ac4a:	d00d      	beq.n	800ac68 <tcp_close_shutdown_fin+0x4c>
 800ac4c:	e026      	b.n	800ac9c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f004 fd6e 	bl	800f730 <tcp_send_fin>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ac58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d11f      	bne.n	800aca0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2205      	movs	r2, #5
 800ac64:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ac66:	e01b      	b.n	800aca0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f004 fd61 	bl	800f730 <tcp_send_fin>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ac72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d114      	bne.n	800aca4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2205      	movs	r2, #5
 800ac7e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ac80:	e010      	b.n	800aca4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f004 fd54 	bl	800f730 <tcp_send_fin>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ac8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d109      	bne.n	800aca8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2209      	movs	r2, #9
 800ac98:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ac9a:	e005      	b.n	800aca8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	e01c      	b.n	800acda <tcp_close_shutdown_fin+0xbe>
      break;
 800aca0:	bf00      	nop
 800aca2:	e002      	b.n	800acaa <tcp_close_shutdown_fin+0x8e>
      break;
 800aca4:	bf00      	nop
 800aca6:	e000      	b.n	800acaa <tcp_close_shutdown_fin+0x8e>
      break;
 800aca8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800acaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d103      	bne.n	800acba <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f004 fe7a 	bl	800f9ac <tcp_output>
 800acb8:	e00d      	b.n	800acd6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800acba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc2:	d108      	bne.n	800acd6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	8b5b      	ldrh	r3, [r3, #26]
 800acc8:	f043 0308 	orr.w	r3, r3, #8
 800accc:	b29a      	uxth	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	e001      	b.n	800acda <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800acd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	08016ae4 	.word	0x08016ae4
 800ace8:	08016b94 	.word	0x08016b94
 800acec:	08016b28 	.word	0x08016b28

0800acf0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d109      	bne.n	800ad12 <tcp_close+0x22>
 800acfe:	4b0f      	ldr	r3, [pc, #60]	; (800ad3c <tcp_close+0x4c>)
 800ad00:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ad04:	490e      	ldr	r1, [pc, #56]	; (800ad40 <tcp_close+0x50>)
 800ad06:	480f      	ldr	r0, [pc, #60]	; (800ad44 <tcp_close+0x54>)
 800ad08:	f009 ff1e 	bl	8014b48 <iprintf>
 800ad0c:	f06f 030f 	mvn.w	r3, #15
 800ad10:	e00f      	b.n	800ad32 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	7d1b      	ldrb	r3, [r3, #20]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d006      	beq.n	800ad28 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	8b5b      	ldrh	r3, [r3, #26]
 800ad1e:	f043 0310 	orr.w	r3, r3, #16
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ad28:	2101      	movs	r1, #1
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7ff fe94 	bl	800aa58 <tcp_close_shutdown>
 800ad30:	4603      	mov	r3, r0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	08016ae4 	.word	0x08016ae4
 800ad40:	08016bf4 	.word	0x08016bf4
 800ad44:	08016b28 	.word	0x08016b28

0800ad48 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b08e      	sub	sp, #56	; 0x38
 800ad4c:	af04      	add	r7, sp, #16
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d107      	bne.n	800ad68 <tcp_abandon+0x20>
 800ad58:	4b52      	ldr	r3, [pc, #328]	; (800aea4 <tcp_abandon+0x15c>)
 800ad5a:	f240 223d 	movw	r2, #573	; 0x23d
 800ad5e:	4952      	ldr	r1, [pc, #328]	; (800aea8 <tcp_abandon+0x160>)
 800ad60:	4852      	ldr	r0, [pc, #328]	; (800aeac <tcp_abandon+0x164>)
 800ad62:	f009 fef1 	bl	8014b48 <iprintf>
 800ad66:	e099      	b.n	800ae9c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	7d1b      	ldrb	r3, [r3, #20]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d106      	bne.n	800ad7e <tcp_abandon+0x36>
 800ad70:	4b4c      	ldr	r3, [pc, #304]	; (800aea4 <tcp_abandon+0x15c>)
 800ad72:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ad76:	494e      	ldr	r1, [pc, #312]	; (800aeb0 <tcp_abandon+0x168>)
 800ad78:	484c      	ldr	r0, [pc, #304]	; (800aeac <tcp_abandon+0x164>)
 800ad7a:	f009 fee5 	bl	8014b48 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	7d1b      	ldrb	r3, [r3, #20]
 800ad82:	2b0a      	cmp	r3, #10
 800ad84:	d107      	bne.n	800ad96 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	484a      	ldr	r0, [pc, #296]	; (800aeb4 <tcp_abandon+0x16c>)
 800ad8a:	f001 f9f3 	bl	800c174 <tcp_pcb_remove>
    tcp_free(pcb);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7ff fdb0 	bl	800a8f4 <tcp_free>
 800ad94:	e082      	b.n	800ae9c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ad96:	2300      	movs	r3, #0
 800ad98:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ada2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adb0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	7d1b      	ldrb	r3, [r3, #20]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d126      	bne.n	800ae0e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	8adb      	ldrh	r3, [r3, #22]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d02e      	beq.n	800ae26 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800adc8:	4b3b      	ldr	r3, [pc, #236]	; (800aeb8 <tcp_abandon+0x170>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	429a      	cmp	r2, r3
 800add0:	d105      	bne.n	800adde <tcp_abandon+0x96>
 800add2:	4b39      	ldr	r3, [pc, #228]	; (800aeb8 <tcp_abandon+0x170>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	4a37      	ldr	r2, [pc, #220]	; (800aeb8 <tcp_abandon+0x170>)
 800adda:	6013      	str	r3, [r2, #0]
 800addc:	e013      	b.n	800ae06 <tcp_abandon+0xbe>
 800adde:	4b36      	ldr	r3, [pc, #216]	; (800aeb8 <tcp_abandon+0x170>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	61fb      	str	r3, [r7, #28]
 800ade4:	e00c      	b.n	800ae00 <tcp_abandon+0xb8>
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	429a      	cmp	r2, r3
 800adee:	d104      	bne.n	800adfa <tcp_abandon+0xb2>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	68da      	ldr	r2, [r3, #12]
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	60da      	str	r2, [r3, #12]
 800adf8:	e005      	b.n	800ae06 <tcp_abandon+0xbe>
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	61fb      	str	r3, [r7, #28]
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1ef      	bne.n	800ade6 <tcp_abandon+0x9e>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	60da      	str	r2, [r3, #12]
 800ae0c:	e00b      	b.n	800ae26 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	8adb      	ldrh	r3, [r3, #22]
 800ae16:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ae18:	6879      	ldr	r1, [r7, #4]
 800ae1a:	4828      	ldr	r0, [pc, #160]	; (800aebc <tcp_abandon+0x174>)
 800ae1c:	f001 f9aa 	bl	800c174 <tcp_pcb_remove>
 800ae20:	4b27      	ldr	r3, [pc, #156]	; (800aec0 <tcp_abandon+0x178>)
 800ae22:	2201      	movs	r2, #1
 800ae24:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d004      	beq.n	800ae38 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae32:	4618      	mov	r0, r3
 800ae34:	f000 fed6 	bl	800bbe4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d004      	beq.n	800ae4a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fecd 	bl	800bbe4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d004      	beq.n	800ae5c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 fec4 	bl	800bbe4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00e      	beq.n	800ae80 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ae62:	6879      	ldr	r1, [r7, #4]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	3304      	adds	r3, #4
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	8b12      	ldrh	r2, [r2, #24]
 800ae6c:	9202      	str	r2, [sp, #8]
 800ae6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ae70:	9201      	str	r2, [sp, #4]
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	460b      	mov	r3, r1
 800ae76:	697a      	ldr	r2, [r7, #20]
 800ae78:	69b9      	ldr	r1, [r7, #24]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f005 fb4a 	bl	8010514 <tcp_rst>
    }
    last_state = pcb->state;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	7d1b      	ldrb	r3, [r3, #20]
 800ae84:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7ff fd34 	bl	800a8f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d004      	beq.n	800ae9c <tcp_abandon+0x154>
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	f06f 010c 	mvn.w	r1, #12
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	4798      	blx	r3
  }
}
 800ae9c:	3728      	adds	r7, #40	; 0x28
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	08016ae4 	.word	0x08016ae4
 800aea8:	08016c28 	.word	0x08016c28
 800aeac:	08016b28 	.word	0x08016b28
 800aeb0:	08016c44 	.word	0x08016c44
 800aeb4:	2000e4b4 	.word	0x2000e4b4
 800aeb8:	2000e4a8 	.word	0x2000e4a8
 800aebc:	2000e4b0 	.word	0x2000e4b0
 800aec0:	2000e4b8 	.word	0x2000e4b8

0800aec4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800aecc:	2101      	movs	r1, #1
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f7ff ff3a 	bl	800ad48 <tcp_abandon>
}
 800aed4:	bf00      	nop
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b088      	sub	sp, #32
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	4613      	mov	r3, r2
 800aee8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800aeea:	2304      	movs	r3, #4
 800aeec:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d101      	bne.n	800aef8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800aef4:	4b3e      	ldr	r3, [pc, #248]	; (800aff0 <tcp_bind+0x114>)
 800aef6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d109      	bne.n	800af12 <tcp_bind+0x36>
 800aefe:	4b3d      	ldr	r3, [pc, #244]	; (800aff4 <tcp_bind+0x118>)
 800af00:	f240 22a9 	movw	r2, #681	; 0x2a9
 800af04:	493c      	ldr	r1, [pc, #240]	; (800aff8 <tcp_bind+0x11c>)
 800af06:	483d      	ldr	r0, [pc, #244]	; (800affc <tcp_bind+0x120>)
 800af08:	f009 fe1e 	bl	8014b48 <iprintf>
 800af0c:	f06f 030f 	mvn.w	r3, #15
 800af10:	e06a      	b.n	800afe8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	7d1b      	ldrb	r3, [r3, #20]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d009      	beq.n	800af2e <tcp_bind+0x52>
 800af1a:	4b36      	ldr	r3, [pc, #216]	; (800aff4 <tcp_bind+0x118>)
 800af1c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800af20:	4937      	ldr	r1, [pc, #220]	; (800b000 <tcp_bind+0x124>)
 800af22:	4836      	ldr	r0, [pc, #216]	; (800affc <tcp_bind+0x120>)
 800af24:	f009 fe10 	bl	8014b48 <iprintf>
 800af28:	f06f 0305 	mvn.w	r3, #5
 800af2c:	e05c      	b.n	800afe8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800af2e:	88fb      	ldrh	r3, [r7, #6]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d109      	bne.n	800af48 <tcp_bind+0x6c>
    port = tcp_new_port();
 800af34:	f000 f9f0 	bl	800b318 <tcp_new_port>
 800af38:	4603      	mov	r3, r0
 800af3a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800af3c:	88fb      	ldrh	r3, [r7, #6]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d135      	bne.n	800afae <tcp_bind+0xd2>
      return ERR_BUF;
 800af42:	f06f 0301 	mvn.w	r3, #1
 800af46:	e04f      	b.n	800afe8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800af48:	2300      	movs	r3, #0
 800af4a:	61fb      	str	r3, [r7, #28]
 800af4c:	e02b      	b.n	800afa6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800af4e:	4a2d      	ldr	r2, [pc, #180]	; (800b004 <tcp_bind+0x128>)
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	61bb      	str	r3, [r7, #24]
 800af5a:	e01e      	b.n	800af9a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	8adb      	ldrh	r3, [r3, #22]
 800af60:	88fa      	ldrh	r2, [r7, #6]
 800af62:	429a      	cmp	r2, r3
 800af64:	d116      	bne.n	800af94 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800af66:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d010      	beq.n	800af8e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00c      	beq.n	800af8e <tcp_bind+0xb2>
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d009      	beq.n	800af8e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d005      	beq.n	800af8e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d102      	bne.n	800af94 <tcp_bind+0xb8>
              return ERR_USE;
 800af8e:	f06f 0307 	mvn.w	r3, #7
 800af92:	e029      	b.n	800afe8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	61bb      	str	r3, [r7, #24]
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1dd      	bne.n	800af5c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	3301      	adds	r3, #1
 800afa4:	61fb      	str	r3, [r7, #28]
 800afa6:	69fa      	ldr	r2, [r7, #28]
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	429a      	cmp	r2, r3
 800afac:	dbcf      	blt.n	800af4e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00c      	beq.n	800afce <tcp_bind+0xf2>
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d008      	beq.n	800afce <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d002      	beq.n	800afc8 <tcp_bind+0xec>
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	e000      	b.n	800afca <tcp_bind+0xee>
 800afc8:	2300      	movs	r3, #0
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	88fa      	ldrh	r2, [r7, #6]
 800afd2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800afd4:	4b0c      	ldr	r3, [pc, #48]	; (800b008 <tcp_bind+0x12c>)
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	60da      	str	r2, [r3, #12]
 800afdc:	4a0a      	ldr	r2, [pc, #40]	; (800b008 <tcp_bind+0x12c>)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6013      	str	r3, [r2, #0]
 800afe2:	f005 fc59 	bl	8010898 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800afe6:	2300      	movs	r3, #0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3720      	adds	r7, #32
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	08018b30 	.word	0x08018b30
 800aff4:	08016ae4 	.word	0x08016ae4
 800aff8:	08016c78 	.word	0x08016c78
 800affc:	08016b28 	.word	0x08016b28
 800b000:	08016c90 	.word	0x08016c90
 800b004:	08018b08 	.word	0x08018b08
 800b008:	2000e4a8 	.word	0x2000e4a8

0800b00c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	4613      	mov	r3, r2
 800b018:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d106      	bne.n	800b02e <tcp_accept_null+0x22>
 800b020:	4b07      	ldr	r3, [pc, #28]	; (800b040 <tcp_accept_null+0x34>)
 800b022:	f240 320f 	movw	r2, #783	; 0x30f
 800b026:	4907      	ldr	r1, [pc, #28]	; (800b044 <tcp_accept_null+0x38>)
 800b028:	4807      	ldr	r0, [pc, #28]	; (800b048 <tcp_accept_null+0x3c>)
 800b02a:	f009 fd8d 	bl	8014b48 <iprintf>

  tcp_abort(pcb);
 800b02e:	68b8      	ldr	r0, [r7, #8]
 800b030:	f7ff ff48 	bl	800aec4 <tcp_abort>

  return ERR_ABRT;
 800b034:	f06f 030c 	mvn.w	r3, #12
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	08016ae4 	.word	0x08016ae4
 800b044:	08016cb8 	.word	0x08016cb8
 800b048:	08016b28 	.word	0x08016b28

0800b04c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	460b      	mov	r3, r1
 800b056:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800b058:	78fb      	ldrb	r3, [r7, #3]
 800b05a:	2200      	movs	r2, #0
 800b05c:	4619      	mov	r1, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f806 	bl	800b070 <tcp_listen_with_backlog_and_err>
 800b064:	4603      	mov	r3, r0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
	...

0800b070 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b088      	sub	sp, #32
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	460b      	mov	r3, r1
 800b07a:	607a      	str	r2, [r7, #4]
 800b07c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800b07e:	2300      	movs	r3, #0
 800b080:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d109      	bne.n	800b09c <tcp_listen_with_backlog_and_err+0x2c>
 800b088:	4b47      	ldr	r3, [pc, #284]	; (800b1a8 <tcp_listen_with_backlog_and_err+0x138>)
 800b08a:	f240 3259 	movw	r2, #857	; 0x359
 800b08e:	4947      	ldr	r1, [pc, #284]	; (800b1ac <tcp_listen_with_backlog_and_err+0x13c>)
 800b090:	4847      	ldr	r0, [pc, #284]	; (800b1b0 <tcp_listen_with_backlog_and_err+0x140>)
 800b092:	f009 fd59 	bl	8014b48 <iprintf>
 800b096:	23f0      	movs	r3, #240	; 0xf0
 800b098:	76fb      	strb	r3, [r7, #27]
 800b09a:	e079      	b.n	800b190 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	7d1b      	ldrb	r3, [r3, #20]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d009      	beq.n	800b0b8 <tcp_listen_with_backlog_and_err+0x48>
 800b0a4:	4b40      	ldr	r3, [pc, #256]	; (800b1a8 <tcp_listen_with_backlog_and_err+0x138>)
 800b0a6:	f240 325a 	movw	r2, #858	; 0x35a
 800b0aa:	4942      	ldr	r1, [pc, #264]	; (800b1b4 <tcp_listen_with_backlog_and_err+0x144>)
 800b0ac:	4840      	ldr	r0, [pc, #256]	; (800b1b0 <tcp_listen_with_backlog_and_err+0x140>)
 800b0ae:	f009 fd4b 	bl	8014b48 <iprintf>
 800b0b2:	23f1      	movs	r3, #241	; 0xf1
 800b0b4:	76fb      	strb	r3, [r7, #27]
 800b0b6:	e06b      	b.n	800b190 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	7d1b      	ldrb	r3, [r3, #20]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d104      	bne.n	800b0ca <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800b0c4:	23f7      	movs	r3, #247	; 0xf7
 800b0c6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800b0c8:	e062      	b.n	800b190 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800b0ca:	2001      	movs	r0, #1
 800b0cc:	f7fe fa90 	bl	80095f0 <memp_malloc>
 800b0d0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d102      	bne.n	800b0de <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800b0d8:	23ff      	movs	r3, #255	; 0xff
 800b0da:	76fb      	strb	r3, [r7, #27]
    goto done;
 800b0dc:	e058      	b.n	800b190 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	691a      	ldr	r2, [r3, #16]
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	8ada      	ldrh	r2, [r3, #22]
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800b0ee:	69fb      	ldr	r3, [r7, #28]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	7d5a      	ldrb	r2, [r3, #21]
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	7a5a      	ldrb	r2, [r3, #9]
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	2200      	movs	r2, #0
 800b108:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	7ada      	ldrb	r2, [r3, #11]
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	7a9a      	ldrb	r2, [r3, #10]
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	8adb      	ldrh	r3, [r3, #22]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d021      	beq.n	800b16e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b12a:	4b23      	ldr	r3, [pc, #140]	; (800b1b8 <tcp_listen_with_backlog_and_err+0x148>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	429a      	cmp	r2, r3
 800b132:	d105      	bne.n	800b140 <tcp_listen_with_backlog_and_err+0xd0>
 800b134:	4b20      	ldr	r3, [pc, #128]	; (800b1b8 <tcp_listen_with_backlog_and_err+0x148>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	4a1f      	ldr	r2, [pc, #124]	; (800b1b8 <tcp_listen_with_backlog_and_err+0x148>)
 800b13c:	6013      	str	r3, [r2, #0]
 800b13e:	e013      	b.n	800b168 <tcp_listen_with_backlog_and_err+0xf8>
 800b140:	4b1d      	ldr	r3, [pc, #116]	; (800b1b8 <tcp_listen_with_backlog_and_err+0x148>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	617b      	str	r3, [r7, #20]
 800b146:	e00c      	b.n	800b162 <tcp_listen_with_backlog_and_err+0xf2>
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d104      	bne.n	800b15c <tcp_listen_with_backlog_and_err+0xec>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	68da      	ldr	r2, [r3, #12]
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	60da      	str	r2, [r3, #12]
 800b15a:	e005      	b.n	800b168 <tcp_listen_with_backlog_and_err+0xf8>
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	617b      	str	r3, [r7, #20]
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d1ef      	bne.n	800b148 <tcp_listen_with_backlog_and_err+0xd8>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f7ff fbc0 	bl	800a8f4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	4a11      	ldr	r2, [pc, #68]	; (800b1bc <tcp_listen_with_backlog_and_err+0x14c>)
 800b178:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800b17a:	4b11      	ldr	r3, [pc, #68]	; (800b1c0 <tcp_listen_with_backlog_and_err+0x150>)
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	60da      	str	r2, [r3, #12]
 800b182:	4a0f      	ldr	r2, [pc, #60]	; (800b1c0 <tcp_listen_with_backlog_and_err+0x150>)
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	6013      	str	r3, [r2, #0]
 800b188:	f005 fb86 	bl	8010898 <tcp_timer_needed>
  res = ERR_OK;
 800b18c:	2300      	movs	r3, #0
 800b18e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d002      	beq.n	800b19c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	7efa      	ldrb	r2, [r7, #27]
 800b19a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800b19c:	69fb      	ldr	r3, [r7, #28]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3720      	adds	r7, #32
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	08016ae4 	.word	0x08016ae4
 800b1ac:	08016cd8 	.word	0x08016cd8
 800b1b0:	08016b28 	.word	0x08016b28
 800b1b4:	08016d08 	.word	0x08016d08
 800b1b8:	2000e4a8 	.word	0x2000e4a8
 800b1bc:	0800b00d 	.word	0x0800b00d
 800b1c0:	2000e4ac 	.word	0x2000e4ac

0800b1c4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d106      	bne.n	800b1e0 <tcp_update_rcv_ann_wnd+0x1c>
 800b1d2:	4b25      	ldr	r3, [pc, #148]	; (800b268 <tcp_update_rcv_ann_wnd+0xa4>)
 800b1d4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b1d8:	4924      	ldr	r1, [pc, #144]	; (800b26c <tcp_update_rcv_ann_wnd+0xa8>)
 800b1da:	4825      	ldr	r0, [pc, #148]	; (800b270 <tcp_update_rcv_ann_wnd+0xac>)
 800b1dc:	f009 fcb4 	bl	8014b48 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b1e8:	4413      	add	r3, r2
 800b1ea:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b1f4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b1f8:	bf28      	it	cs
 800b1fa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b1fe:	b292      	uxth	r2, r2
 800b200:	4413      	add	r3, r2
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	1ad3      	subs	r3, r2, r3
 800b206:	2b00      	cmp	r3, #0
 800b208:	db08      	blt.n	800b21c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	e020      	b.n	800b25e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	2b00      	cmp	r3, #0
 800b228:	dd03      	ble.n	800b232 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b230:	e014      	b.n	800b25c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b244:	d306      	bcc.n	800b254 <tcp_update_rcv_ann_wnd+0x90>
 800b246:	4b08      	ldr	r3, [pc, #32]	; (800b268 <tcp_update_rcv_ann_wnd+0xa4>)
 800b248:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b24c:	4909      	ldr	r1, [pc, #36]	; (800b274 <tcp_update_rcv_ann_wnd+0xb0>)
 800b24e:	4808      	ldr	r0, [pc, #32]	; (800b270 <tcp_update_rcv_ann_wnd+0xac>)
 800b250:	f009 fc7a 	bl	8014b48 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	b29a      	uxth	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b25c:	2300      	movs	r3, #0
  }
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	08016ae4 	.word	0x08016ae4
 800b26c:	08016d40 	.word	0x08016d40
 800b270:	08016b28 	.word	0x08016b28
 800b274:	08016d64 	.word	0x08016d64

0800b278 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	460b      	mov	r3, r1
 800b282:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d107      	bne.n	800b29a <tcp_recved+0x22>
 800b28a:	4b1f      	ldr	r3, [pc, #124]	; (800b308 <tcp_recved+0x90>)
 800b28c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b290:	491e      	ldr	r1, [pc, #120]	; (800b30c <tcp_recved+0x94>)
 800b292:	481f      	ldr	r0, [pc, #124]	; (800b310 <tcp_recved+0x98>)
 800b294:	f009 fc58 	bl	8014b48 <iprintf>
 800b298:	e032      	b.n	800b300 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	7d1b      	ldrb	r3, [r3, #20]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d106      	bne.n	800b2b0 <tcp_recved+0x38>
 800b2a2:	4b19      	ldr	r3, [pc, #100]	; (800b308 <tcp_recved+0x90>)
 800b2a4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b2a8:	491a      	ldr	r1, [pc, #104]	; (800b314 <tcp_recved+0x9c>)
 800b2aa:	4819      	ldr	r0, [pc, #100]	; (800b310 <tcp_recved+0x98>)
 800b2ac:	f009 fc4c 	bl	8014b48 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b2b4:	887b      	ldrh	r3, [r7, #2]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b2ba:	89fb      	ldrh	r3, [r7, #14]
 800b2bc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b2c0:	d804      	bhi.n	800b2cc <tcp_recved+0x54>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2c6:	89fa      	ldrh	r2, [r7, #14]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d204      	bcs.n	800b2d6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b2d2:	851a      	strh	r2, [r3, #40]	; 0x28
 800b2d4:	e002      	b.n	800b2dc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	89fa      	ldrh	r2, [r7, #14]
 800b2da:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7ff ff71 	bl	800b1c4 <tcp_update_rcv_ann_wnd>
 800b2e2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b2ea:	d309      	bcc.n	800b300 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	8b5b      	ldrh	r3, [r3, #26]
 800b2f0:	f043 0302 	orr.w	r3, r3, #2
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f004 fb56 	bl	800f9ac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	08016ae4 	.word	0x08016ae4
 800b30c:	08016d80 	.word	0x08016d80
 800b310:	08016b28 	.word	0x08016b28
 800b314:	08016d98 	.word	0x08016d98

0800b318 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800b31e:	2300      	movs	r3, #0
 800b320:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800b322:	4b1e      	ldr	r3, [pc, #120]	; (800b39c <tcp_new_port+0x84>)
 800b324:	881b      	ldrh	r3, [r3, #0]
 800b326:	3301      	adds	r3, #1
 800b328:	b29a      	uxth	r2, r3
 800b32a:	4b1c      	ldr	r3, [pc, #112]	; (800b39c <tcp_new_port+0x84>)
 800b32c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800b32e:	4b1b      	ldr	r3, [pc, #108]	; (800b39c <tcp_new_port+0x84>)
 800b330:	881b      	ldrh	r3, [r3, #0]
 800b332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b336:	4293      	cmp	r3, r2
 800b338:	d103      	bne.n	800b342 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b33a:	4b18      	ldr	r3, [pc, #96]	; (800b39c <tcp_new_port+0x84>)
 800b33c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b340:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b342:	2300      	movs	r3, #0
 800b344:	71fb      	strb	r3, [r7, #7]
 800b346:	e01e      	b.n	800b386 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b348:	79fb      	ldrb	r3, [r7, #7]
 800b34a:	4a15      	ldr	r2, [pc, #84]	; (800b3a0 <tcp_new_port+0x88>)
 800b34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	603b      	str	r3, [r7, #0]
 800b354:	e011      	b.n	800b37a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	8ada      	ldrh	r2, [r3, #22]
 800b35a:	4b10      	ldr	r3, [pc, #64]	; (800b39c <tcp_new_port+0x84>)
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d108      	bne.n	800b374 <tcp_new_port+0x5c>
        n++;
 800b362:	88bb      	ldrh	r3, [r7, #4]
 800b364:	3301      	adds	r3, #1
 800b366:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b368:	88bb      	ldrh	r3, [r7, #4]
 800b36a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b36e:	d3d8      	bcc.n	800b322 <tcp_new_port+0xa>
          return 0;
 800b370:	2300      	movs	r3, #0
 800b372:	e00d      	b.n	800b390 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	603b      	str	r3, [r7, #0]
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1ea      	bne.n	800b356 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b380:	79fb      	ldrb	r3, [r7, #7]
 800b382:	3301      	adds	r3, #1
 800b384:	71fb      	strb	r3, [r7, #7]
 800b386:	79fb      	ldrb	r3, [r7, #7]
 800b388:	2b03      	cmp	r3, #3
 800b38a:	d9dd      	bls.n	800b348 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800b38c:	4b03      	ldr	r3, [pc, #12]	; (800b39c <tcp_new_port+0x84>)
 800b38e:	881b      	ldrh	r3, [r3, #0]
}
 800b390:	4618      	mov	r0, r3
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	2000046c 	.word	0x2000046c
 800b3a0:	08018b08 	.word	0x08018b08

0800b3a4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b3a4:	b5b0      	push	{r4, r5, r7, lr}
 800b3a6:	b090      	sub	sp, #64	; 0x40
 800b3a8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b3b0:	4b94      	ldr	r3, [pc, #592]	; (800b604 <tcp_slowtmr+0x260>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	4a93      	ldr	r2, [pc, #588]	; (800b604 <tcp_slowtmr+0x260>)
 800b3b8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b3ba:	4b93      	ldr	r3, [pc, #588]	; (800b608 <tcp_slowtmr+0x264>)
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	4b91      	ldr	r3, [pc, #580]	; (800b608 <tcp_slowtmr+0x264>)
 800b3c4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b3ca:	4b90      	ldr	r3, [pc, #576]	; (800b60c <tcp_slowtmr+0x268>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b3d0:	e29f      	b.n	800b912 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d4:	7d1b      	ldrb	r3, [r3, #20]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d106      	bne.n	800b3e8 <tcp_slowtmr+0x44>
 800b3da:	4b8d      	ldr	r3, [pc, #564]	; (800b610 <tcp_slowtmr+0x26c>)
 800b3dc:	f240 42be 	movw	r2, #1214	; 0x4be
 800b3e0:	498c      	ldr	r1, [pc, #560]	; (800b614 <tcp_slowtmr+0x270>)
 800b3e2:	488d      	ldr	r0, [pc, #564]	; (800b618 <tcp_slowtmr+0x274>)
 800b3e4:	f009 fbb0 	bl	8014b48 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ea:	7d1b      	ldrb	r3, [r3, #20]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d106      	bne.n	800b3fe <tcp_slowtmr+0x5a>
 800b3f0:	4b87      	ldr	r3, [pc, #540]	; (800b610 <tcp_slowtmr+0x26c>)
 800b3f2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b3f6:	4989      	ldr	r1, [pc, #548]	; (800b61c <tcp_slowtmr+0x278>)
 800b3f8:	4887      	ldr	r0, [pc, #540]	; (800b618 <tcp_slowtmr+0x274>)
 800b3fa:	f009 fba5 	bl	8014b48 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b400:	7d1b      	ldrb	r3, [r3, #20]
 800b402:	2b0a      	cmp	r3, #10
 800b404:	d106      	bne.n	800b414 <tcp_slowtmr+0x70>
 800b406:	4b82      	ldr	r3, [pc, #520]	; (800b610 <tcp_slowtmr+0x26c>)
 800b408:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b40c:	4984      	ldr	r1, [pc, #528]	; (800b620 <tcp_slowtmr+0x27c>)
 800b40e:	4882      	ldr	r0, [pc, #520]	; (800b618 <tcp_slowtmr+0x274>)
 800b410:	f009 fb9a 	bl	8014b48 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b416:	7f9a      	ldrb	r2, [r3, #30]
 800b418:	4b7b      	ldr	r3, [pc, #492]	; (800b608 <tcp_slowtmr+0x264>)
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d105      	bne.n	800b42c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b422:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b42a:	e272      	b.n	800b912 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b42c:	4b76      	ldr	r3, [pc, #472]	; (800b608 <tcp_slowtmr+0x264>)
 800b42e:	781a      	ldrb	r2, [r3, #0]
 800b430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b432:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b442:	7d1b      	ldrb	r3, [r3, #20]
 800b444:	2b02      	cmp	r3, #2
 800b446:	d10a      	bne.n	800b45e <tcp_slowtmr+0xba>
 800b448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b44e:	2b05      	cmp	r3, #5
 800b450:	d905      	bls.n	800b45e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b456:	3301      	adds	r3, #1
 800b458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b45c:	e11e      	b.n	800b69c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b460:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b464:	2b0b      	cmp	r3, #11
 800b466:	d905      	bls.n	800b474 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b46c:	3301      	adds	r3, #1
 800b46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b472:	e113      	b.n	800b69c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b476:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d075      	beq.n	800b56a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b482:	2b00      	cmp	r3, #0
 800b484:	d006      	beq.n	800b494 <tcp_slowtmr+0xf0>
 800b486:	4b62      	ldr	r3, [pc, #392]	; (800b610 <tcp_slowtmr+0x26c>)
 800b488:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b48c:	4965      	ldr	r1, [pc, #404]	; (800b624 <tcp_slowtmr+0x280>)
 800b48e:	4862      	ldr	r0, [pc, #392]	; (800b618 <tcp_slowtmr+0x274>)
 800b490:	f009 fb5a 	bl	8014b48 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d106      	bne.n	800b4aa <tcp_slowtmr+0x106>
 800b49c:	4b5c      	ldr	r3, [pc, #368]	; (800b610 <tcp_slowtmr+0x26c>)
 800b49e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b4a2:	4961      	ldr	r1, [pc, #388]	; (800b628 <tcp_slowtmr+0x284>)
 800b4a4:	485c      	ldr	r0, [pc, #368]	; (800b618 <tcp_slowtmr+0x274>)
 800b4a6:	f009 fb4f 	bl	8014b48 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b4b0:	2b0b      	cmp	r3, #11
 800b4b2:	d905      	bls.n	800b4c0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4be:	e0ed      	b.n	800b69c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	4a58      	ldr	r2, [pc, #352]	; (800b62c <tcp_slowtmr+0x288>)
 800b4ca:	5cd3      	ldrb	r3, [r2, r3]
 800b4cc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b4d4:	7c7a      	ldrb	r2, [r7, #17]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d907      	bls.n	800b4ea <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	b2da      	uxtb	r2, r3
 800b4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b4f0:	7c7a      	ldrb	r2, [r7, #17]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	f200 80d2 	bhi.w	800b69c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b502:	2b00      	cmp	r3, #0
 800b504:	d108      	bne.n	800b518 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b508:	f005 f8f8 	bl	80106fc <tcp_zero_window_probe>
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d014      	beq.n	800b53c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b512:	2300      	movs	r3, #0
 800b514:	623b      	str	r3, [r7, #32]
 800b516:	e011      	b.n	800b53c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b51e:	4619      	mov	r1, r3
 800b520:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b522:	f003 ffbd 	bl	800f4a0 <tcp_split_unsent_seg>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d107      	bne.n	800b53c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b52c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b52e:	f004 fa3d 	bl	800f9ac <tcp_output>
 800b532:	4603      	mov	r3, r0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d101      	bne.n	800b53c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b53c:	6a3b      	ldr	r3, [r7, #32]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f000 80ac 	beq.w	800b69c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b546:	2200      	movs	r2, #0
 800b548:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b552:	2b06      	cmp	r3, #6
 800b554:	f200 80a2 	bhi.w	800b69c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b55e:	3301      	adds	r3, #1
 800b560:	b2da      	uxtb	r2, r3
 800b562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b564:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b568:	e098      	b.n	800b69c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b570:	2b00      	cmp	r3, #0
 800b572:	db0f      	blt.n	800b594 <tcp_slowtmr+0x1f0>
 800b574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b576:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b57a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b57e:	4293      	cmp	r3, r2
 800b580:	d008      	beq.n	800b594 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b584:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b588:	b29b      	uxth	r3, r3
 800b58a:	3301      	adds	r3, #1
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	b21a      	sxth	r2, r3
 800b590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b592:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b596:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	db7b      	blt.n	800b69c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b5a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5a6:	f004 fcf5 	bl	800ff94 <tcp_rexmit_rto_prepare>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d007      	beq.n	800b5c0 <tcp_slowtmr+0x21c>
 800b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d171      	bne.n	800b69c <tcp_slowtmr+0x2f8>
 800b5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d06d      	beq.n	800b69c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c2:	7d1b      	ldrb	r3, [r3, #20]
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d03a      	beq.n	800b63e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b5ce:	2b0c      	cmp	r3, #12
 800b5d0:	bf28      	it	cs
 800b5d2:	230c      	movcs	r3, #12
 800b5d4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b5dc:	10db      	asrs	r3, r3, #3
 800b5de:	b21b      	sxth	r3, r3
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b5e8:	4413      	add	r3, r2
 800b5ea:	7efa      	ldrb	r2, [r7, #27]
 800b5ec:	4910      	ldr	r1, [pc, #64]	; (800b630 <tcp_slowtmr+0x28c>)
 800b5ee:	5c8a      	ldrb	r2, [r1, r2]
 800b5f0:	4093      	lsls	r3, r2
 800b5f2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	dc1a      	bgt.n	800b634 <tcp_slowtmr+0x290>
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	b21a      	sxth	r2, r3
 800b602:	e019      	b.n	800b638 <tcp_slowtmr+0x294>
 800b604:	2000e4a4 	.word	0x2000e4a4
 800b608:	2000e4ba 	.word	0x2000e4ba
 800b60c:	2000e4b0 	.word	0x2000e4b0
 800b610:	08016ae4 	.word	0x08016ae4
 800b614:	08016e28 	.word	0x08016e28
 800b618:	08016b28 	.word	0x08016b28
 800b61c:	08016e54 	.word	0x08016e54
 800b620:	08016e80 	.word	0x08016e80
 800b624:	08016eb0 	.word	0x08016eb0
 800b628:	08016ee4 	.word	0x08016ee4
 800b62c:	08018b00 	.word	0x08018b00
 800b630:	08018af0 	.word	0x08018af0
 800b634:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b640:	2200      	movs	r2, #0
 800b642:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b646:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b650:	4293      	cmp	r3, r2
 800b652:	bf28      	it	cs
 800b654:	4613      	movcs	r3, r2
 800b656:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b658:	8a7b      	ldrh	r3, [r7, #18]
 800b65a:	085b      	lsrs	r3, r3, #1
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b660:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b666:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	b29b      	uxth	r3, r3
 800b672:	429a      	cmp	r2, r3
 800b674:	d206      	bcs.n	800b684 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b67a:	005b      	lsls	r3, r3, #1
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b680:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b686:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b690:	2200      	movs	r2, #0
 800b692:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b696:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b698:	f004 fcec 	bl	8010074 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69e:	7d1b      	ldrb	r3, [r3, #20]
 800b6a0:	2b06      	cmp	r3, #6
 800b6a2:	d111      	bne.n	800b6c8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a6:	8b5b      	ldrh	r3, [r3, #26]
 800b6a8:	f003 0310 	and.w	r3, r3, #16
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00b      	beq.n	800b6c8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b6b0:	4b9d      	ldr	r3, [pc, #628]	; (800b928 <tcp_slowtmr+0x584>)
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b6:	6a1b      	ldr	r3, [r3, #32]
 800b6b8:	1ad3      	subs	r3, r2, r3
 800b6ba:	2b28      	cmp	r3, #40	; 0x28
 800b6bc:	d904      	bls.n	800b6c8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b6be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ca:	7a5b      	ldrb	r3, [r3, #9]
 800b6cc:	f003 0308 	and.w	r3, r3, #8
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d04c      	beq.n	800b76e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	d003      	beq.n	800b6e4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6de:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b6e0:	2b07      	cmp	r3, #7
 800b6e2:	d144      	bne.n	800b76e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b6e4:	4b90      	ldr	r3, [pc, #576]	; (800b928 <tcp_slowtmr+0x584>)
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ea:	6a1b      	ldr	r3, [r3, #32]
 800b6ec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6f4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b6f8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b6fc:	498b      	ldr	r1, [pc, #556]	; (800b92c <tcp_slowtmr+0x588>)
 800b6fe:	fba1 1303 	umull	r1, r3, r1, r3
 800b702:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b704:	429a      	cmp	r2, r3
 800b706:	d90a      	bls.n	800b71e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b70c:	3301      	adds	r3, #1
 800b70e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b712:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b716:	3301      	adds	r3, #1
 800b718:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b71c:	e027      	b.n	800b76e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b71e:	4b82      	ldr	r3, [pc, #520]	; (800b928 <tcp_slowtmr+0x584>)
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b730:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b734:	4618      	mov	r0, r3
 800b736:	4b7e      	ldr	r3, [pc, #504]	; (800b930 <tcp_slowtmr+0x58c>)
 800b738:	fb00 f303 	mul.w	r3, r0, r3
 800b73c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b73e:	497b      	ldr	r1, [pc, #492]	; (800b92c <tcp_slowtmr+0x588>)
 800b740:	fba1 1303 	umull	r1, r3, r1, r3
 800b744:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b746:	429a      	cmp	r2, r3
 800b748:	d911      	bls.n	800b76e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b74a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b74c:	f004 ff96 	bl	801067c <tcp_keepalive>
 800b750:	4603      	mov	r3, r0
 800b752:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b756:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d107      	bne.n	800b76e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b760:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b764:	3301      	adds	r3, #1
 800b766:	b2da      	uxtb	r2, r3
 800b768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b772:	2b00      	cmp	r3, #0
 800b774:	d011      	beq.n	800b79a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b776:	4b6c      	ldr	r3, [pc, #432]	; (800b928 <tcp_slowtmr+0x584>)
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77c:	6a1b      	ldr	r3, [r3, #32]
 800b77e:	1ad2      	subs	r2, r2, r3
 800b780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b782:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b786:	4619      	mov	r1, r3
 800b788:	460b      	mov	r3, r1
 800b78a:	005b      	lsls	r3, r3, #1
 800b78c:	440b      	add	r3, r1
 800b78e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b790:	429a      	cmp	r2, r3
 800b792:	d302      	bcc.n	800b79a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b796:	f000 fe51 	bl	800c43c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79c:	7d1b      	ldrb	r3, [r3, #20]
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d10b      	bne.n	800b7ba <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7a2:	4b61      	ldr	r3, [pc, #388]	; (800b928 <tcp_slowtmr+0x584>)
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a8:	6a1b      	ldr	r3, [r3, #32]
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	2b28      	cmp	r3, #40	; 0x28
 800b7ae:	d904      	bls.n	800b7ba <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7bc:	7d1b      	ldrb	r3, [r3, #20]
 800b7be:	2b09      	cmp	r3, #9
 800b7c0:	d10b      	bne.n	800b7da <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b7c2:	4b59      	ldr	r3, [pc, #356]	; (800b928 <tcp_slowtmr+0x584>)
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	2bf0      	cmp	r3, #240	; 0xf0
 800b7ce:	d904      	bls.n	800b7da <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b7da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d060      	beq.n	800b8a4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7e8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b7ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7ec:	f000 fc72 	bl	800c0d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d010      	beq.n	800b818 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b7f6:	4b4f      	ldr	r3, [pc, #316]	; (800b934 <tcp_slowtmr+0x590>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d106      	bne.n	800b80e <tcp_slowtmr+0x46a>
 800b800:	4b4d      	ldr	r3, [pc, #308]	; (800b938 <tcp_slowtmr+0x594>)
 800b802:	f240 526d 	movw	r2, #1389	; 0x56d
 800b806:	494d      	ldr	r1, [pc, #308]	; (800b93c <tcp_slowtmr+0x598>)
 800b808:	484d      	ldr	r0, [pc, #308]	; (800b940 <tcp_slowtmr+0x59c>)
 800b80a:	f009 f99d 	bl	8014b48 <iprintf>
        prev->next = pcb->next;
 800b80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b810:	68da      	ldr	r2, [r3, #12]
 800b812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b814:	60da      	str	r2, [r3, #12]
 800b816:	e00f      	b.n	800b838 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b818:	4b46      	ldr	r3, [pc, #280]	; (800b934 <tcp_slowtmr+0x590>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b81e:	429a      	cmp	r2, r3
 800b820:	d006      	beq.n	800b830 <tcp_slowtmr+0x48c>
 800b822:	4b45      	ldr	r3, [pc, #276]	; (800b938 <tcp_slowtmr+0x594>)
 800b824:	f240 5271 	movw	r2, #1393	; 0x571
 800b828:	4946      	ldr	r1, [pc, #280]	; (800b944 <tcp_slowtmr+0x5a0>)
 800b82a:	4845      	ldr	r0, [pc, #276]	; (800b940 <tcp_slowtmr+0x59c>)
 800b82c:	f009 f98c 	bl	8014b48 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	4a3f      	ldr	r2, [pc, #252]	; (800b934 <tcp_slowtmr+0x590>)
 800b836:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b838:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d013      	beq.n	800b868 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b842:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b846:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b848:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84c:	3304      	adds	r3, #4
 800b84e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b850:	8ad2      	ldrh	r2, [r2, #22]
 800b852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b854:	8b09      	ldrh	r1, [r1, #24]
 800b856:	9102      	str	r1, [sp, #8]
 800b858:	9201      	str	r2, [sp, #4]
 800b85a:	9300      	str	r3, [sp, #0]
 800b85c:	462b      	mov	r3, r5
 800b85e:	4622      	mov	r2, r4
 800b860:	4601      	mov	r1, r0
 800b862:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b864:	f004 fe56 	bl	8010514 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86a:	691b      	ldr	r3, [r3, #16]
 800b86c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b870:	7d1b      	ldrb	r3, [r3, #20]
 800b872:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b876:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b87e:	6838      	ldr	r0, [r7, #0]
 800b880:	f7ff f838 	bl	800a8f4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b884:	4b30      	ldr	r3, [pc, #192]	; (800b948 <tcp_slowtmr+0x5a4>)
 800b886:	2200      	movs	r2, #0
 800b888:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d004      	beq.n	800b89a <tcp_slowtmr+0x4f6>
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f06f 010c 	mvn.w	r1, #12
 800b896:	68b8      	ldr	r0, [r7, #8]
 800b898:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b89a:	4b2b      	ldr	r3, [pc, #172]	; (800b948 <tcp_slowtmr+0x5a4>)
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d037      	beq.n	800b912 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b8a2:	e590      	b.n	800b3c6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b0:	7f1b      	ldrb	r3, [r3, #28]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8bc:	7f1a      	ldrb	r2, [r3, #28]
 800b8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c0:	7f5b      	ldrb	r3, [r3, #29]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d325      	bcc.n	800b912 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b8cc:	4b1e      	ldr	r3, [pc, #120]	; (800b948 <tcp_slowtmr+0x5a4>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00b      	beq.n	800b8f4 <tcp_slowtmr+0x550>
 800b8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8e4:	6912      	ldr	r2, [r2, #16]
 800b8e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8e8:	4610      	mov	r0, r2
 800b8ea:	4798      	blx	r3
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b8f2:	e002      	b.n	800b8fa <tcp_slowtmr+0x556>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b8fa:	4b13      	ldr	r3, [pc, #76]	; (800b948 <tcp_slowtmr+0x5a4>)
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d000      	beq.n	800b904 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800b902:	e560      	b.n	800b3c6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b904:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d102      	bne.n	800b912 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b90c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b90e:	f004 f84d 	bl	800f9ac <tcp_output>
  while (pcb != NULL) {
 800b912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b914:	2b00      	cmp	r3, #0
 800b916:	f47f ad5c 	bne.w	800b3d2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b91a:	2300      	movs	r3, #0
 800b91c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b91e:	4b0b      	ldr	r3, [pc, #44]	; (800b94c <tcp_slowtmr+0x5a8>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b924:	e067      	b.n	800b9f6 <tcp_slowtmr+0x652>
 800b926:	bf00      	nop
 800b928:	2000e4a4 	.word	0x2000e4a4
 800b92c:	10624dd3 	.word	0x10624dd3
 800b930:	000124f8 	.word	0x000124f8
 800b934:	2000e4b0 	.word	0x2000e4b0
 800b938:	08016ae4 	.word	0x08016ae4
 800b93c:	08016f1c 	.word	0x08016f1c
 800b940:	08016b28 	.word	0x08016b28
 800b944:	08016f48 	.word	0x08016f48
 800b948:	2000e4b8 	.word	0x2000e4b8
 800b94c:	2000e4b4 	.word	0x2000e4b4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b952:	7d1b      	ldrb	r3, [r3, #20]
 800b954:	2b0a      	cmp	r3, #10
 800b956:	d006      	beq.n	800b966 <tcp_slowtmr+0x5c2>
 800b958:	4b2b      	ldr	r3, [pc, #172]	; (800ba08 <tcp_slowtmr+0x664>)
 800b95a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b95e:	492b      	ldr	r1, [pc, #172]	; (800ba0c <tcp_slowtmr+0x668>)
 800b960:	482b      	ldr	r0, [pc, #172]	; (800ba10 <tcp_slowtmr+0x66c>)
 800b962:	f009 f8f1 	bl	8014b48 <iprintf>
    pcb_remove = 0;
 800b966:	2300      	movs	r3, #0
 800b968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b96c:	4b29      	ldr	r3, [pc, #164]	; (800ba14 <tcp_slowtmr+0x670>)
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b972:	6a1b      	ldr	r3, [r3, #32]
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	2bf0      	cmp	r3, #240	; 0xf0
 800b978:	d904      	bls.n	800b984 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b97a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b97e:	3301      	adds	r3, #1
 800b980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d02f      	beq.n	800b9ec <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b98c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b98e:	f000 fba1 	bl	800c0d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b994:	2b00      	cmp	r3, #0
 800b996:	d010      	beq.n	800b9ba <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b998:	4b1f      	ldr	r3, [pc, #124]	; (800ba18 <tcp_slowtmr+0x674>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d106      	bne.n	800b9b0 <tcp_slowtmr+0x60c>
 800b9a2:	4b19      	ldr	r3, [pc, #100]	; (800ba08 <tcp_slowtmr+0x664>)
 800b9a4:	f240 52af 	movw	r2, #1455	; 0x5af
 800b9a8:	491c      	ldr	r1, [pc, #112]	; (800ba1c <tcp_slowtmr+0x678>)
 800b9aa:	4819      	ldr	r0, [pc, #100]	; (800ba10 <tcp_slowtmr+0x66c>)
 800b9ac:	f009 f8cc 	bl	8014b48 <iprintf>
        prev->next = pcb->next;
 800b9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b2:	68da      	ldr	r2, [r3, #12]
 800b9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b6:	60da      	str	r2, [r3, #12]
 800b9b8:	e00f      	b.n	800b9da <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b9ba:	4b17      	ldr	r3, [pc, #92]	; (800ba18 <tcp_slowtmr+0x674>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d006      	beq.n	800b9d2 <tcp_slowtmr+0x62e>
 800b9c4:	4b10      	ldr	r3, [pc, #64]	; (800ba08 <tcp_slowtmr+0x664>)
 800b9c6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b9ca:	4915      	ldr	r1, [pc, #84]	; (800ba20 <tcp_slowtmr+0x67c>)
 800b9cc:	4810      	ldr	r0, [pc, #64]	; (800ba10 <tcp_slowtmr+0x66c>)
 800b9ce:	f009 f8bb 	bl	8014b48 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	4a10      	ldr	r2, [pc, #64]	; (800ba18 <tcp_slowtmr+0x674>)
 800b9d8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9dc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b9e4:	69f8      	ldr	r0, [r7, #28]
 800b9e6:	f7fe ff85 	bl	800a8f4 <tcp_free>
 800b9ea:	e004      	b.n	800b9f6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800b9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d1a9      	bne.n	800b950 <tcp_slowtmr+0x5ac>
    }
  }
}
 800b9fc:	bf00      	nop
 800b9fe:	bf00      	nop
 800ba00:	3730      	adds	r7, #48	; 0x30
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bdb0      	pop	{r4, r5, r7, pc}
 800ba06:	bf00      	nop
 800ba08:	08016ae4 	.word	0x08016ae4
 800ba0c:	08016f74 	.word	0x08016f74
 800ba10:	08016b28 	.word	0x08016b28
 800ba14:	2000e4a4 	.word	0x2000e4a4
 800ba18:	2000e4b4 	.word	0x2000e4b4
 800ba1c:	08016fa4 	.word	0x08016fa4
 800ba20:	08016fcc 	.word	0x08016fcc

0800ba24 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ba2a:	4b2d      	ldr	r3, [pc, #180]	; (800bae0 <tcp_fasttmr+0xbc>)
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	3301      	adds	r3, #1
 800ba30:	b2da      	uxtb	r2, r3
 800ba32:	4b2b      	ldr	r3, [pc, #172]	; (800bae0 <tcp_fasttmr+0xbc>)
 800ba34:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ba36:	4b2b      	ldr	r3, [pc, #172]	; (800bae4 <tcp_fasttmr+0xc0>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ba3c:	e048      	b.n	800bad0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	7f9a      	ldrb	r2, [r3, #30]
 800ba42:	4b27      	ldr	r3, [pc, #156]	; (800bae0 <tcp_fasttmr+0xbc>)
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d03f      	beq.n	800baca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ba4a:	4b25      	ldr	r3, [pc, #148]	; (800bae0 <tcp_fasttmr+0xbc>)
 800ba4c:	781a      	ldrb	r2, [r3, #0]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	8b5b      	ldrh	r3, [r3, #26]
 800ba56:	f003 0301 	and.w	r3, r3, #1
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d010      	beq.n	800ba80 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	8b5b      	ldrh	r3, [r3, #26]
 800ba62:	f043 0302 	orr.w	r3, r3, #2
 800ba66:	b29a      	uxth	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f003 ff9d 	bl	800f9ac <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	8b5b      	ldrh	r3, [r3, #26]
 800ba76:	f023 0303 	bic.w	r3, r3, #3
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	8b5b      	ldrh	r3, [r3, #26]
 800ba84:	f003 0308 	and.w	r3, r3, #8
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d009      	beq.n	800baa0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	8b5b      	ldrh	r3, [r3, #26]
 800ba90:	f023 0308 	bic.w	r3, r3, #8
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f7ff f8be 	bl	800ac1c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00a      	beq.n	800bac4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800baae:	4b0e      	ldr	r3, [pc, #56]	; (800bae8 <tcp_fasttmr+0xc4>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 f819 	bl	800baec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800baba:	4b0b      	ldr	r3, [pc, #44]	; (800bae8 <tcp_fasttmr+0xc4>)
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d000      	beq.n	800bac4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bac2:	e7b8      	b.n	800ba36 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	607b      	str	r3, [r7, #4]
 800bac8:	e002      	b.n	800bad0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1b3      	bne.n	800ba3e <tcp_fasttmr+0x1a>
    }
  }
}
 800bad6:	bf00      	nop
 800bad8:	bf00      	nop
 800bada:	3708      	adds	r7, #8
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	2000e4ba 	.word	0x2000e4ba
 800bae4:	2000e4b0 	.word	0x2000e4b0
 800bae8:	2000e4b8 	.word	0x2000e4b8

0800baec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800baec:	b590      	push	{r4, r7, lr}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d109      	bne.n	800bb0e <tcp_process_refused_data+0x22>
 800bafa:	4b37      	ldr	r3, [pc, #220]	; (800bbd8 <tcp_process_refused_data+0xec>)
 800bafc:	f240 6209 	movw	r2, #1545	; 0x609
 800bb00:	4936      	ldr	r1, [pc, #216]	; (800bbdc <tcp_process_refused_data+0xf0>)
 800bb02:	4837      	ldr	r0, [pc, #220]	; (800bbe0 <tcp_process_refused_data+0xf4>)
 800bb04:	f009 f820 	bl	8014b48 <iprintf>
 800bb08:	f06f 030f 	mvn.w	r3, #15
 800bb0c:	e060      	b.n	800bbd0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb12:	7b5b      	ldrb	r3, [r3, #13]
 800bb14:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb1a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00b      	beq.n	800bb44 <tcp_process_refused_data+0x58>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6918      	ldr	r0, [r3, #16]
 800bb36:	2300      	movs	r3, #0
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	6879      	ldr	r1, [r7, #4]
 800bb3c:	47a0      	blx	r4
 800bb3e:	4603      	mov	r3, r0
 800bb40:	73fb      	strb	r3, [r7, #15]
 800bb42:	e007      	b.n	800bb54 <tcp_process_refused_data+0x68>
 800bb44:	2300      	movs	r3, #0
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	6879      	ldr	r1, [r7, #4]
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	f000 f8a4 	bl	800bc98 <tcp_recv_null>
 800bb50:	4603      	mov	r3, r0
 800bb52:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bb54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d12a      	bne.n	800bbb2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	f003 0320 	and.w	r3, r3, #32
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d033      	beq.n	800bbce <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb6a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bb6e:	d005      	beq.n	800bb7c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb74:	3301      	adds	r3, #1
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00b      	beq.n	800bb9e <tcp_process_refused_data+0xb2>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6918      	ldr	r0, [r3, #16]
 800bb90:	2300      	movs	r3, #0
 800bb92:	2200      	movs	r2, #0
 800bb94:	6879      	ldr	r1, [r7, #4]
 800bb96:	47a0      	blx	r4
 800bb98:	4603      	mov	r3, r0
 800bb9a:	73fb      	strb	r3, [r7, #15]
 800bb9c:	e001      	b.n	800bba2 <tcp_process_refused_data+0xb6>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800bba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bba6:	f113 0f0d 	cmn.w	r3, #13
 800bbaa:	d110      	bne.n	800bbce <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800bbac:	f06f 030c 	mvn.w	r3, #12
 800bbb0:	e00e      	b.n	800bbd0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800bbb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbb6:	f113 0f0d 	cmn.w	r3, #13
 800bbba:	d102      	bne.n	800bbc2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800bbbc:	f06f 030c 	mvn.w	r3, #12
 800bbc0:	e006      	b.n	800bbd0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	68ba      	ldr	r2, [r7, #8]
 800bbc6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800bbc8:	f06f 0304 	mvn.w	r3, #4
 800bbcc:	e000      	b.n	800bbd0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3714      	adds	r7, #20
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd90      	pop	{r4, r7, pc}
 800bbd8:	08016ae4 	.word	0x08016ae4
 800bbdc:	08016ff4 	.word	0x08016ff4
 800bbe0:	08016b28 	.word	0x08016b28

0800bbe4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800bbec:	e007      	b.n	800bbfe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 f80a 	bl	800bc0e <tcp_seg_free>
    seg = next;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1f4      	bne.n	800bbee <tcp_segs_free+0xa>
  }
}
 800bc04:	bf00      	nop
 800bc06:	bf00      	nop
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b082      	sub	sp, #8
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00c      	beq.n	800bc36 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d004      	beq.n	800bc2e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fe fbc3 	bl	800a3b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	2002      	movs	r0, #2
 800bc32:	f7fd fd4d 	bl	80096d0 <memp_free>
  }
}
 800bc36:	bf00      	nop
 800bc38:	3708      	adds	r7, #8
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
	...

0800bc40 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d106      	bne.n	800bc5c <tcp_seg_copy+0x1c>
 800bc4e:	4b0f      	ldr	r3, [pc, #60]	; (800bc8c <tcp_seg_copy+0x4c>)
 800bc50:	f240 6282 	movw	r2, #1666	; 0x682
 800bc54:	490e      	ldr	r1, [pc, #56]	; (800bc90 <tcp_seg_copy+0x50>)
 800bc56:	480f      	ldr	r0, [pc, #60]	; (800bc94 <tcp_seg_copy+0x54>)
 800bc58:	f008 ff76 	bl	8014b48 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800bc5c:	2002      	movs	r0, #2
 800bc5e:	f7fd fcc7 	bl	80095f0 <memp_malloc>
 800bc62:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <tcp_seg_copy+0x2e>
    return NULL;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e00a      	b.n	800bc84 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800bc6e:	2210      	movs	r2, #16
 800bc70:	6879      	ldr	r1, [r7, #4]
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f009 f8cb 	bl	8014e0e <memcpy>
  pbuf_ref(cseg->p);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7fe fc39 	bl	800a4f4 <pbuf_ref>
  return cseg;
 800bc82:	68fb      	ldr	r3, [r7, #12]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3710      	adds	r7, #16
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	08016ae4 	.word	0x08016ae4
 800bc90:	08017038 	.word	0x08017038
 800bc94:	08016b28 	.word	0x08016b28

0800bc98 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
 800bca4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d109      	bne.n	800bcc0 <tcp_recv_null+0x28>
 800bcac:	4b12      	ldr	r3, [pc, #72]	; (800bcf8 <tcp_recv_null+0x60>)
 800bcae:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bcb2:	4912      	ldr	r1, [pc, #72]	; (800bcfc <tcp_recv_null+0x64>)
 800bcb4:	4812      	ldr	r0, [pc, #72]	; (800bd00 <tcp_recv_null+0x68>)
 800bcb6:	f008 ff47 	bl	8014b48 <iprintf>
 800bcba:	f06f 030f 	mvn.w	r3, #15
 800bcbe:	e016      	b.n	800bcee <tcp_recv_null+0x56>

  if (p != NULL) {
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d009      	beq.n	800bcda <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	891b      	ldrh	r3, [r3, #8]
 800bcca:	4619      	mov	r1, r3
 800bccc:	68b8      	ldr	r0, [r7, #8]
 800bcce:	f7ff fad3 	bl	800b278 <tcp_recved>
    pbuf_free(p);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7fe fb6e 	bl	800a3b4 <pbuf_free>
 800bcd8:	e008      	b.n	800bcec <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800bcda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d104      	bne.n	800bcec <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800bce2:	68b8      	ldr	r0, [r7, #8]
 800bce4:	f7ff f804 	bl	800acf0 <tcp_close>
 800bce8:	4603      	mov	r3, r0
 800bcea:	e000      	b.n	800bcee <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	08016ae4 	.word	0x08016ae4
 800bcfc:	08017054 	.word	0x08017054
 800bd00:	08016b28 	.word	0x08016b28

0800bd04 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bd0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	db01      	blt.n	800bd1a <tcp_kill_prio+0x16>
 800bd16:	79fb      	ldrb	r3, [r7, #7]
 800bd18:	e000      	b.n	800bd1c <tcp_kill_prio+0x18>
 800bd1a:	237f      	movs	r3, #127	; 0x7f
 800bd1c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800bd1e:	7afb      	ldrb	r3, [r7, #11]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d034      	beq.n	800bd8e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800bd24:	7afb      	ldrb	r3, [r7, #11]
 800bd26:	3b01      	subs	r3, #1
 800bd28:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd32:	4b19      	ldr	r3, [pc, #100]	; (800bd98 <tcp_kill_prio+0x94>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	617b      	str	r3, [r7, #20]
 800bd38:	e01f      	b.n	800bd7a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	7d5b      	ldrb	r3, [r3, #21]
 800bd3e:	7afa      	ldrb	r2, [r7, #11]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d80c      	bhi.n	800bd5e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800bd48:	7afa      	ldrb	r2, [r7, #11]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d112      	bne.n	800bd74 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bd4e:	4b13      	ldr	r3, [pc, #76]	; (800bd9c <tcp_kill_prio+0x98>)
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	6a1b      	ldr	r3, [r3, #32]
 800bd56:	1ad3      	subs	r3, r2, r3
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d80a      	bhi.n	800bd74 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800bd5e:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <tcp_kill_prio+0x98>)
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	6a1b      	ldr	r3, [r3, #32]
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	7d5b      	ldrb	r3, [r3, #21]
 800bd72:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	617b      	str	r3, [r7, #20]
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d1dc      	bne.n	800bd3a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d004      	beq.n	800bd90 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bd86:	6938      	ldr	r0, [r7, #16]
 800bd88:	f7ff f89c 	bl	800aec4 <tcp_abort>
 800bd8c:	e000      	b.n	800bd90 <tcp_kill_prio+0x8c>
    return;
 800bd8e:	bf00      	nop
  }
}
 800bd90:	3718      	adds	r7, #24
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	2000e4b0 	.word	0x2000e4b0
 800bd9c:	2000e4a4 	.word	0x2000e4a4

0800bda0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	4603      	mov	r3, r0
 800bda8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800bdaa:	79fb      	ldrb	r3, [r7, #7]
 800bdac:	2b08      	cmp	r3, #8
 800bdae:	d009      	beq.n	800bdc4 <tcp_kill_state+0x24>
 800bdb0:	79fb      	ldrb	r3, [r7, #7]
 800bdb2:	2b09      	cmp	r3, #9
 800bdb4:	d006      	beq.n	800bdc4 <tcp_kill_state+0x24>
 800bdb6:	4b1a      	ldr	r3, [pc, #104]	; (800be20 <tcp_kill_state+0x80>)
 800bdb8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800bdbc:	4919      	ldr	r1, [pc, #100]	; (800be24 <tcp_kill_state+0x84>)
 800bdbe:	481a      	ldr	r0, [pc, #104]	; (800be28 <tcp_kill_state+0x88>)
 800bdc0:	f008 fec2 	bl	8014b48 <iprintf>

  inactivity = 0;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bdcc:	4b17      	ldr	r3, [pc, #92]	; (800be2c <tcp_kill_state+0x8c>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	617b      	str	r3, [r7, #20]
 800bdd2:	e017      	b.n	800be04 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	7d1b      	ldrb	r3, [r3, #20]
 800bdd8:	79fa      	ldrb	r2, [r7, #7]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d10f      	bne.n	800bdfe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bdde:	4b14      	ldr	r3, [pc, #80]	; (800be30 <tcp_kill_state+0x90>)
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	6a1b      	ldr	r3, [r3, #32]
 800bde6:	1ad3      	subs	r3, r2, r3
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d807      	bhi.n	800bdfe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800bdee:	4b10      	ldr	r3, [pc, #64]	; (800be30 <tcp_kill_state+0x90>)
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	617b      	str	r3, [r7, #20]
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1e4      	bne.n	800bdd4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d003      	beq.n	800be18 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800be10:	2100      	movs	r1, #0
 800be12:	6938      	ldr	r0, [r7, #16]
 800be14:	f7fe ff98 	bl	800ad48 <tcp_abandon>
  }
}
 800be18:	bf00      	nop
 800be1a:	3718      	adds	r7, #24
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	08016ae4 	.word	0x08016ae4
 800be24:	08017070 	.word	0x08017070
 800be28:	08016b28 	.word	0x08016b28
 800be2c:	2000e4b0 	.word	0x2000e4b0
 800be30:	2000e4a4 	.word	0x2000e4a4

0800be34 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800be3e:	2300      	movs	r3, #0
 800be40:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800be42:	4b12      	ldr	r3, [pc, #72]	; (800be8c <tcp_kill_timewait+0x58>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	e012      	b.n	800be70 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800be4a:	4b11      	ldr	r3, [pc, #68]	; (800be90 <tcp_kill_timewait+0x5c>)
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6a1b      	ldr	r3, [r3, #32]
 800be52:	1ad3      	subs	r3, r2, r3
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	429a      	cmp	r2, r3
 800be58:	d807      	bhi.n	800be6a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800be5a:	4b0d      	ldr	r3, [pc, #52]	; (800be90 <tcp_kill_timewait+0x5c>)
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6a1b      	ldr	r3, [r3, #32]
 800be62:	1ad3      	subs	r3, r2, r3
 800be64:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	60fb      	str	r3, [r7, #12]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d1e9      	bne.n	800be4a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d002      	beq.n	800be82 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800be7c:	68b8      	ldr	r0, [r7, #8]
 800be7e:	f7ff f821 	bl	800aec4 <tcp_abort>
  }
}
 800be82:	bf00      	nop
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	2000e4b4 	.word	0x2000e4b4
 800be90:	2000e4a4 	.word	0x2000e4a4

0800be94 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800be9a:	4b10      	ldr	r3, [pc, #64]	; (800bedc <tcp_handle_closepend+0x48>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bea0:	e014      	b.n	800becc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	8b5b      	ldrh	r3, [r3, #26]
 800beac:	f003 0308 	and.w	r3, r3, #8
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d009      	beq.n	800bec8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	8b5b      	ldrh	r3, [r3, #26]
 800beb8:	f023 0308 	bic.w	r3, r3, #8
 800bebc:	b29a      	uxth	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f7fe feaa 	bl	800ac1c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d1e7      	bne.n	800bea2 <tcp_handle_closepend+0xe>
  }
}
 800bed2:	bf00      	nop
 800bed4:	bf00      	nop
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	2000e4b0 	.word	0x2000e4b0

0800bee0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	4603      	mov	r3, r0
 800bee8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800beea:	2000      	movs	r0, #0
 800beec:	f7fd fb80 	bl	80095f0 <memp_malloc>
 800bef0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d126      	bne.n	800bf46 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bef8:	f7ff ffcc 	bl	800be94 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800befc:	f7ff ff9a 	bl	800be34 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bf00:	2000      	movs	r0, #0
 800bf02:	f7fd fb75 	bl	80095f0 <memp_malloc>
 800bf06:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d11b      	bne.n	800bf46 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bf0e:	2009      	movs	r0, #9
 800bf10:	f7ff ff46 	bl	800bda0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bf14:	2000      	movs	r0, #0
 800bf16:	f7fd fb6b 	bl	80095f0 <memp_malloc>
 800bf1a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d111      	bne.n	800bf46 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bf22:	2008      	movs	r0, #8
 800bf24:	f7ff ff3c 	bl	800bda0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bf28:	2000      	movs	r0, #0
 800bf2a:	f7fd fb61 	bl	80095f0 <memp_malloc>
 800bf2e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d107      	bne.n	800bf46 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bf36:	79fb      	ldrb	r3, [r7, #7]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7ff fee3 	bl	800bd04 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bf3e:	2000      	movs	r0, #0
 800bf40:	f7fd fb56 	bl	80095f0 <memp_malloc>
 800bf44:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d03f      	beq.n	800bfcc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bf4c:	229c      	movs	r2, #156	; 0x9c
 800bf4e:	2100      	movs	r1, #0
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f008 fed7 	bl	8014d04 <memset>
    pcb->prio = prio;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	79fa      	ldrb	r2, [r7, #7]
 800bf5a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bf62:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bf6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2240      	movs	r2, #64	; 0x40
 800bf7a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bf82:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2206      	movs	r2, #6
 800bf88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2206      	movs	r2, #6
 800bf90:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf98:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800bfa2:	4b0d      	ldr	r3, [pc, #52]	; (800bfd8 <tcp_alloc+0xf8>)
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bfaa:	4b0c      	ldr	r3, [pc, #48]	; (800bfdc <tcp_alloc+0xfc>)
 800bfac:	781a      	ldrb	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bfb8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	4a08      	ldr	r2, [pc, #32]	; (800bfe0 <tcp_alloc+0x100>)
 800bfc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	4a07      	ldr	r2, [pc, #28]	; (800bfe4 <tcp_alloc+0x104>)
 800bfc8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	2000e4a4 	.word	0x2000e4a4
 800bfdc:	2000e4ba 	.word	0x2000e4ba
 800bfe0:	0800bc99 	.word	0x0800bc99
 800bfe4:	006ddd00 	.word	0x006ddd00

0800bfe8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800bfec:	2040      	movs	r0, #64	; 0x40
 800bfee:	f7ff ff77 	bl	800bee0 <tcp_alloc>
 800bff2:	4603      	mov	r3, r0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	611a      	str	r2, [r3, #16]
  }
}
 800c00e:	bf00      	nop
 800c010:	370c      	adds	r7, #12
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
	...

0800c01c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00e      	beq.n	800c04a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	7d1b      	ldrb	r3, [r3, #20]
 800c030:	2b01      	cmp	r3, #1
 800c032:	d106      	bne.n	800c042 <tcp_recv+0x26>
 800c034:	4b07      	ldr	r3, [pc, #28]	; (800c054 <tcp_recv+0x38>)
 800c036:	f240 72df 	movw	r2, #2015	; 0x7df
 800c03a:	4907      	ldr	r1, [pc, #28]	; (800c058 <tcp_recv+0x3c>)
 800c03c:	4807      	ldr	r0, [pc, #28]	; (800c05c <tcp_recv+0x40>)
 800c03e:	f008 fd83 	bl	8014b48 <iprintf>
    pcb->recv = recv;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	683a      	ldr	r2, [r7, #0]
 800c046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800c04a:	bf00      	nop
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	08016ae4 	.word	0x08016ae4
 800c058:	08017080 	.word	0x08017080
 800c05c:	08016b28 	.word	0x08016b28

0800c060 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00e      	beq.n	800c08e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	7d1b      	ldrb	r3, [r3, #20]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d106      	bne.n	800c086 <tcp_err+0x26>
 800c078:	4b07      	ldr	r3, [pc, #28]	; (800c098 <tcp_err+0x38>)
 800c07a:	f640 020d 	movw	r2, #2061	; 0x80d
 800c07e:	4907      	ldr	r1, [pc, #28]	; (800c09c <tcp_err+0x3c>)
 800c080:	4807      	ldr	r0, [pc, #28]	; (800c0a0 <tcp_err+0x40>)
 800c082:	f008 fd61 	bl	8014b48 <iprintf>
    pcb->errf = err;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	683a      	ldr	r2, [r7, #0]
 800c08a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800c08e:	bf00      	nop
 800c090:	3708      	adds	r7, #8
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	08016ae4 	.word	0x08016ae4
 800c09c:	080170d0 	.word	0x080170d0
 800c0a0:	08016b28 	.word	0x08016b28

0800c0a4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d008      	beq.n	800c0c6 <tcp_accept+0x22>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	7d1b      	ldrb	r3, [r3, #20]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d104      	bne.n	800c0c6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	683a      	ldr	r2, [r7, #0]
 800c0c4:	619a      	str	r2, [r3, #24]
  }
}
 800c0c6:	bf00      	nop
 800c0c8:	3714      	adds	r7, #20
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
	...

0800c0d4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d107      	bne.n	800c0f2 <tcp_pcb_purge+0x1e>
 800c0e2:	4b21      	ldr	r3, [pc, #132]	; (800c168 <tcp_pcb_purge+0x94>)
 800c0e4:	f640 0251 	movw	r2, #2129	; 0x851
 800c0e8:	4920      	ldr	r1, [pc, #128]	; (800c16c <tcp_pcb_purge+0x98>)
 800c0ea:	4821      	ldr	r0, [pc, #132]	; (800c170 <tcp_pcb_purge+0x9c>)
 800c0ec:	f008 fd2c 	bl	8014b48 <iprintf>
 800c0f0:	e037      	b.n	800c162 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	7d1b      	ldrb	r3, [r3, #20]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d033      	beq.n	800c162 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c0fe:	2b0a      	cmp	r3, #10
 800c100:	d02f      	beq.n	800c162 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c106:	2b01      	cmp	r3, #1
 800c108:	d02b      	beq.n	800c162 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d007      	beq.n	800c122 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c116:	4618      	mov	r0, r3
 800c118:	f7fe f94c 	bl	800a3b4 <pbuf_free>
      pcb->refused_data = NULL;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c126:	2b00      	cmp	r3, #0
 800c128:	d002      	beq.n	800c130 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f986 	bl	800c43c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c136:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7ff fd51 	bl	800bbe4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c146:	4618      	mov	r0, r3
 800c148:	f7ff fd4c 	bl	800bbe4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	66da      	str	r2, [r3, #108]	; 0x6c
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	08016ae4 	.word	0x08016ae4
 800c16c:	08017130 	.word	0x08017130
 800c170:	08016b28 	.word	0x08016b28

0800c174 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d106      	bne.n	800c192 <tcp_pcb_remove+0x1e>
 800c184:	4b3e      	ldr	r3, [pc, #248]	; (800c280 <tcp_pcb_remove+0x10c>)
 800c186:	f640 0283 	movw	r2, #2179	; 0x883
 800c18a:	493e      	ldr	r1, [pc, #248]	; (800c284 <tcp_pcb_remove+0x110>)
 800c18c:	483e      	ldr	r0, [pc, #248]	; (800c288 <tcp_pcb_remove+0x114>)
 800c18e:	f008 fcdb 	bl	8014b48 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d106      	bne.n	800c1a6 <tcp_pcb_remove+0x32>
 800c198:	4b39      	ldr	r3, [pc, #228]	; (800c280 <tcp_pcb_remove+0x10c>)
 800c19a:	f640 0284 	movw	r2, #2180	; 0x884
 800c19e:	493b      	ldr	r1, [pc, #236]	; (800c28c <tcp_pcb_remove+0x118>)
 800c1a0:	4839      	ldr	r0, [pc, #228]	; (800c288 <tcp_pcb_remove+0x114>)
 800c1a2:	f008 fcd1 	bl	8014b48 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d105      	bne.n	800c1bc <tcp_pcb_remove+0x48>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68da      	ldr	r2, [r3, #12]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	601a      	str	r2, [r3, #0]
 800c1ba:	e013      	b.n	800c1e4 <tcp_pcb_remove+0x70>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	60fb      	str	r3, [r7, #12]
 800c1c2:	e00c      	b.n	800c1de <tcp_pcb_remove+0x6a>
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	683a      	ldr	r2, [r7, #0]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d104      	bne.n	800c1d8 <tcp_pcb_remove+0x64>
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	68da      	ldr	r2, [r3, #12]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	60da      	str	r2, [r3, #12]
 800c1d6:	e005      	b.n	800c1e4 <tcp_pcb_remove+0x70>
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	60fb      	str	r3, [r7, #12]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1ef      	bne.n	800c1c4 <tcp_pcb_remove+0x50>
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c1ea:	6838      	ldr	r0, [r7, #0]
 800c1ec:	f7ff ff72 	bl	800c0d4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	7d1b      	ldrb	r3, [r3, #20]
 800c1f4:	2b0a      	cmp	r3, #10
 800c1f6:	d013      	beq.n	800c220 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d00f      	beq.n	800c220 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	8b5b      	ldrh	r3, [r3, #26]
 800c204:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d009      	beq.n	800c220 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	8b5b      	ldrh	r3, [r3, #26]
 800c210:	f043 0302 	orr.w	r3, r3, #2
 800c214:	b29a      	uxth	r2, r3
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c21a:	6838      	ldr	r0, [r7, #0]
 800c21c:	f003 fbc6 	bl	800f9ac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	7d1b      	ldrb	r3, [r3, #20]
 800c224:	2b01      	cmp	r3, #1
 800c226:	d020      	beq.n	800c26a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d006      	beq.n	800c23e <tcp_pcb_remove+0xca>
 800c230:	4b13      	ldr	r3, [pc, #76]	; (800c280 <tcp_pcb_remove+0x10c>)
 800c232:	f640 0293 	movw	r2, #2195	; 0x893
 800c236:	4916      	ldr	r1, [pc, #88]	; (800c290 <tcp_pcb_remove+0x11c>)
 800c238:	4813      	ldr	r0, [pc, #76]	; (800c288 <tcp_pcb_remove+0x114>)
 800c23a:	f008 fc85 	bl	8014b48 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c242:	2b00      	cmp	r3, #0
 800c244:	d006      	beq.n	800c254 <tcp_pcb_remove+0xe0>
 800c246:	4b0e      	ldr	r3, [pc, #56]	; (800c280 <tcp_pcb_remove+0x10c>)
 800c248:	f640 0294 	movw	r2, #2196	; 0x894
 800c24c:	4911      	ldr	r1, [pc, #68]	; (800c294 <tcp_pcb_remove+0x120>)
 800c24e:	480e      	ldr	r0, [pc, #56]	; (800c288 <tcp_pcb_remove+0x114>)
 800c250:	f008 fc7a 	bl	8014b48 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d006      	beq.n	800c26a <tcp_pcb_remove+0xf6>
 800c25c:	4b08      	ldr	r3, [pc, #32]	; (800c280 <tcp_pcb_remove+0x10c>)
 800c25e:	f640 0296 	movw	r2, #2198	; 0x896
 800c262:	490d      	ldr	r1, [pc, #52]	; (800c298 <tcp_pcb_remove+0x124>)
 800c264:	4808      	ldr	r0, [pc, #32]	; (800c288 <tcp_pcb_remove+0x114>)
 800c266:	f008 fc6f 	bl	8014b48 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	2200      	movs	r2, #0
 800c26e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	2200      	movs	r2, #0
 800c274:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c276:	bf00      	nop
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	08016ae4 	.word	0x08016ae4
 800c284:	0801714c 	.word	0x0801714c
 800c288:	08016b28 	.word	0x08016b28
 800c28c:	08017168 	.word	0x08017168
 800c290:	08017188 	.word	0x08017188
 800c294:	080171a0 	.word	0x080171a0
 800c298:	080171bc 	.word	0x080171bc

0800c29c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d106      	bne.n	800c2b8 <tcp_next_iss+0x1c>
 800c2aa:	4b0a      	ldr	r3, [pc, #40]	; (800c2d4 <tcp_next_iss+0x38>)
 800c2ac:	f640 02af 	movw	r2, #2223	; 0x8af
 800c2b0:	4909      	ldr	r1, [pc, #36]	; (800c2d8 <tcp_next_iss+0x3c>)
 800c2b2:	480a      	ldr	r0, [pc, #40]	; (800c2dc <tcp_next_iss+0x40>)
 800c2b4:	f008 fc48 	bl	8014b48 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c2b8:	4b09      	ldr	r3, [pc, #36]	; (800c2e0 <tcp_next_iss+0x44>)
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	4b09      	ldr	r3, [pc, #36]	; (800c2e4 <tcp_next_iss+0x48>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	4a07      	ldr	r2, [pc, #28]	; (800c2e0 <tcp_next_iss+0x44>)
 800c2c4:	6013      	str	r3, [r2, #0]
  return iss;
 800c2c6:	4b06      	ldr	r3, [pc, #24]	; (800c2e0 <tcp_next_iss+0x44>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	08016ae4 	.word	0x08016ae4
 800c2d8:	080171d4 	.word	0x080171d4
 800c2dc:	08016b28 	.word	0x08016b28
 800c2e0:	20000470 	.word	0x20000470
 800c2e4:	2000e4a4 	.word	0x2000e4a4

0800c2e8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b086      	sub	sp, #24
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
 800c2f4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d106      	bne.n	800c30a <tcp_eff_send_mss_netif+0x22>
 800c2fc:	4b14      	ldr	r3, [pc, #80]	; (800c350 <tcp_eff_send_mss_netif+0x68>)
 800c2fe:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c302:	4914      	ldr	r1, [pc, #80]	; (800c354 <tcp_eff_send_mss_netif+0x6c>)
 800c304:	4814      	ldr	r0, [pc, #80]	; (800c358 <tcp_eff_send_mss_netif+0x70>)
 800c306:	f008 fc1f 	bl	8014b48 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d101      	bne.n	800c314 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c310:	89fb      	ldrh	r3, [r7, #14]
 800c312:	e019      	b.n	800c348 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c318:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c31a:	8afb      	ldrh	r3, [r7, #22]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d012      	beq.n	800c346 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c320:	2328      	movs	r3, #40	; 0x28
 800c322:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c324:	8afa      	ldrh	r2, [r7, #22]
 800c326:	8abb      	ldrh	r3, [r7, #20]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d904      	bls.n	800c336 <tcp_eff_send_mss_netif+0x4e>
 800c32c:	8afa      	ldrh	r2, [r7, #22]
 800c32e:	8abb      	ldrh	r3, [r7, #20]
 800c330:	1ad3      	subs	r3, r2, r3
 800c332:	b29b      	uxth	r3, r3
 800c334:	e000      	b.n	800c338 <tcp_eff_send_mss_netif+0x50>
 800c336:	2300      	movs	r3, #0
 800c338:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c33a:	8a7a      	ldrh	r2, [r7, #18]
 800c33c:	89fb      	ldrh	r3, [r7, #14]
 800c33e:	4293      	cmp	r3, r2
 800c340:	bf28      	it	cs
 800c342:	4613      	movcs	r3, r2
 800c344:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c346:	89fb      	ldrh	r3, [r7, #14]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3718      	adds	r7, #24
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	08016ae4 	.word	0x08016ae4
 800c354:	080171f0 	.word	0x080171f0
 800c358:	08016b28 	.word	0x08016b28

0800c35c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d119      	bne.n	800c3a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c370:	4b10      	ldr	r3, [pc, #64]	; (800c3b4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c372:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c376:	4910      	ldr	r1, [pc, #64]	; (800c3b8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c378:	4810      	ldr	r0, [pc, #64]	; (800c3bc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c37a:	f008 fbe5 	bl	8014b48 <iprintf>

  while (pcb != NULL) {
 800c37e:	e011      	b.n	800c3a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d108      	bne.n	800c39e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f7fe fd96 	bl	800aec4 <tcp_abort>
      pcb = next;
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	60fb      	str	r3, [r7, #12]
 800c39c:	e002      	b.n	800c3a4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1ea      	bne.n	800c380 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c3aa:	bf00      	nop
 800c3ac:	bf00      	nop
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	08016ae4 	.word	0x08016ae4
 800c3b8:	08017218 	.word	0x08017218
 800c3bc:	08016b28 	.word	0x08016b28

0800c3c0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d02a      	beq.n	800c426 <tcp_netif_ip_addr_changed+0x66>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d026      	beq.n	800c426 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c3d8:	4b15      	ldr	r3, [pc, #84]	; (800c430 <tcp_netif_ip_addr_changed+0x70>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4619      	mov	r1, r3
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f7ff ffbc 	bl	800c35c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c3e4:	4b13      	ldr	r3, [pc, #76]	; (800c434 <tcp_netif_ip_addr_changed+0x74>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f7ff ffb6 	bl	800c35c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d017      	beq.n	800c426 <tcp_netif_ip_addr_changed+0x66>
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d013      	beq.n	800c426 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c3fe:	4b0e      	ldr	r3, [pc, #56]	; (800c438 <tcp_netif_ip_addr_changed+0x78>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	60fb      	str	r3, [r7, #12]
 800c404:	e00c      	b.n	800c420 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d103      	bne.n	800c41a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	68db      	ldr	r3, [r3, #12]
 800c41e:	60fb      	str	r3, [r7, #12]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1ef      	bne.n	800c406 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c426:	bf00      	nop
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	2000e4b0 	.word	0x2000e4b0
 800c434:	2000e4a8 	.word	0x2000e4a8
 800c438:	2000e4ac 	.word	0x2000e4ac

0800c43c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d007      	beq.n	800c45c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c450:	4618      	mov	r0, r3
 800c452:	f7ff fbc7 	bl	800bbe4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2200      	movs	r2, #0
 800c45a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c45c:	bf00      	nop
 800c45e:	3708      	adds	r7, #8
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c464:	b590      	push	{r4, r7, lr}
 800c466:	b08d      	sub	sp, #52	; 0x34
 800c468:	af04      	add	r7, sp, #16
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d105      	bne.n	800c480 <tcp_input+0x1c>
 800c474:	4b9b      	ldr	r3, [pc, #620]	; (800c6e4 <tcp_input+0x280>)
 800c476:	2283      	movs	r2, #131	; 0x83
 800c478:	499b      	ldr	r1, [pc, #620]	; (800c6e8 <tcp_input+0x284>)
 800c47a:	489c      	ldr	r0, [pc, #624]	; (800c6ec <tcp_input+0x288>)
 800c47c:	f008 fb64 	bl	8014b48 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	4a9a      	ldr	r2, [pc, #616]	; (800c6f0 <tcp_input+0x28c>)
 800c486:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	895b      	ldrh	r3, [r3, #10]
 800c48c:	2b13      	cmp	r3, #19
 800c48e:	f240 83d1 	bls.w	800cc34 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c492:	4b98      	ldr	r3, [pc, #608]	; (800c6f4 <tcp_input+0x290>)
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	4a97      	ldr	r2, [pc, #604]	; (800c6f4 <tcp_input+0x290>)
 800c498:	6812      	ldr	r2, [r2, #0]
 800c49a:	4611      	mov	r1, r2
 800c49c:	4618      	mov	r0, r3
 800c49e:	f005 feab 	bl	80121f8 <ip4_addr_isbroadcast_u32>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f040 83c7 	bne.w	800cc38 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c4aa:	4b92      	ldr	r3, [pc, #584]	; (800c6f4 <tcp_input+0x290>)
 800c4ac:	695b      	ldr	r3, [r3, #20]
 800c4ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c4b2:	2be0      	cmp	r3, #224	; 0xe0
 800c4b4:	f000 83c0 	beq.w	800cc38 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c4b8:	4b8d      	ldr	r3, [pc, #564]	; (800c6f0 <tcp_input+0x28c>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	899b      	ldrh	r3, [r3, #12]
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fc fc1f 	bl	8008d04 <lwip_htons>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	0b1b      	lsrs	r3, r3, #12
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c4d2:	7cbb      	ldrb	r3, [r7, #18]
 800c4d4:	2b13      	cmp	r3, #19
 800c4d6:	f240 83b1 	bls.w	800cc3c <tcp_input+0x7d8>
 800c4da:	7cbb      	ldrb	r3, [r7, #18]
 800c4dc:	b29a      	uxth	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	891b      	ldrh	r3, [r3, #8]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	f200 83aa 	bhi.w	800cc3c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c4e8:	7cbb      	ldrb	r3, [r7, #18]
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	3b14      	subs	r3, #20
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	4b81      	ldr	r3, [pc, #516]	; (800c6f8 <tcp_input+0x294>)
 800c4f2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c4f4:	4b81      	ldr	r3, [pc, #516]	; (800c6fc <tcp_input+0x298>)
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	895a      	ldrh	r2, [r3, #10]
 800c4fe:	7cbb      	ldrb	r3, [r7, #18]
 800c500:	b29b      	uxth	r3, r3
 800c502:	429a      	cmp	r2, r3
 800c504:	d309      	bcc.n	800c51a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c506:	4b7c      	ldr	r3, [pc, #496]	; (800c6f8 <tcp_input+0x294>)
 800c508:	881a      	ldrh	r2, [r3, #0]
 800c50a:	4b7d      	ldr	r3, [pc, #500]	; (800c700 <tcp_input+0x29c>)
 800c50c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c50e:	7cbb      	ldrb	r3, [r7, #18]
 800c510:	4619      	mov	r1, r3
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7fd fec8 	bl	800a2a8 <pbuf_remove_header>
 800c518:	e04e      	b.n	800c5b8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d105      	bne.n	800c52e <tcp_input+0xca>
 800c522:	4b70      	ldr	r3, [pc, #448]	; (800c6e4 <tcp_input+0x280>)
 800c524:	22c2      	movs	r2, #194	; 0xc2
 800c526:	4977      	ldr	r1, [pc, #476]	; (800c704 <tcp_input+0x2a0>)
 800c528:	4870      	ldr	r0, [pc, #448]	; (800c6ec <tcp_input+0x288>)
 800c52a:	f008 fb0d 	bl	8014b48 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c52e:	2114      	movs	r1, #20
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7fd feb9 	bl	800a2a8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	895a      	ldrh	r2, [r3, #10]
 800c53a:	4b71      	ldr	r3, [pc, #452]	; (800c700 <tcp_input+0x29c>)
 800c53c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c53e:	4b6e      	ldr	r3, [pc, #440]	; (800c6f8 <tcp_input+0x294>)
 800c540:	881a      	ldrh	r2, [r3, #0]
 800c542:	4b6f      	ldr	r3, [pc, #444]	; (800c700 <tcp_input+0x29c>)
 800c544:	881b      	ldrh	r3, [r3, #0]
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c54a:	4b6d      	ldr	r3, [pc, #436]	; (800c700 <tcp_input+0x29c>)
 800c54c:	881b      	ldrh	r3, [r3, #0]
 800c54e:	4619      	mov	r1, r3
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7fd fea9 	bl	800a2a8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	895b      	ldrh	r3, [r3, #10]
 800c55c:	8a3a      	ldrh	r2, [r7, #16]
 800c55e:	429a      	cmp	r2, r3
 800c560:	f200 836e 	bhi.w	800cc40 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	4a64      	ldr	r2, [pc, #400]	; (800c6fc <tcp_input+0x298>)
 800c56c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	8a3a      	ldrh	r2, [r7, #16]
 800c574:	4611      	mov	r1, r2
 800c576:	4618      	mov	r0, r3
 800c578:	f7fd fe96 	bl	800a2a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	891a      	ldrh	r2, [r3, #8]
 800c580:	8a3b      	ldrh	r3, [r7, #16]
 800c582:	1ad3      	subs	r3, r2, r3
 800c584:	b29a      	uxth	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	895b      	ldrh	r3, [r3, #10]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d005      	beq.n	800c59e <tcp_input+0x13a>
 800c592:	4b54      	ldr	r3, [pc, #336]	; (800c6e4 <tcp_input+0x280>)
 800c594:	22df      	movs	r2, #223	; 0xdf
 800c596:	495c      	ldr	r1, [pc, #368]	; (800c708 <tcp_input+0x2a4>)
 800c598:	4854      	ldr	r0, [pc, #336]	; (800c6ec <tcp_input+0x288>)
 800c59a:	f008 fad5 	bl	8014b48 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	891a      	ldrh	r2, [r3, #8]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	891b      	ldrh	r3, [r3, #8]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d005      	beq.n	800c5b8 <tcp_input+0x154>
 800c5ac:	4b4d      	ldr	r3, [pc, #308]	; (800c6e4 <tcp_input+0x280>)
 800c5ae:	22e0      	movs	r2, #224	; 0xe0
 800c5b0:	4956      	ldr	r1, [pc, #344]	; (800c70c <tcp_input+0x2a8>)
 800c5b2:	484e      	ldr	r0, [pc, #312]	; (800c6ec <tcp_input+0x288>)
 800c5b4:	f008 fac8 	bl	8014b48 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c5b8:	4b4d      	ldr	r3, [pc, #308]	; (800c6f0 <tcp_input+0x28c>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	881b      	ldrh	r3, [r3, #0]
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	4a4b      	ldr	r2, [pc, #300]	; (800c6f0 <tcp_input+0x28c>)
 800c5c2:	6814      	ldr	r4, [r2, #0]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7fc fb9d 	bl	8008d04 <lwip_htons>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c5ce:	4b48      	ldr	r3, [pc, #288]	; (800c6f0 <tcp_input+0x28c>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	885b      	ldrh	r3, [r3, #2]
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	4a46      	ldr	r2, [pc, #280]	; (800c6f0 <tcp_input+0x28c>)
 800c5d8:	6814      	ldr	r4, [r2, #0]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fc fb92 	bl	8008d04 <lwip_htons>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c5e4:	4b42      	ldr	r3, [pc, #264]	; (800c6f0 <tcp_input+0x28c>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	4a41      	ldr	r2, [pc, #260]	; (800c6f0 <tcp_input+0x28c>)
 800c5ec:	6814      	ldr	r4, [r2, #0]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7fc fb9d 	bl	8008d2e <lwip_htonl>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	6063      	str	r3, [r4, #4]
 800c5f8:	6863      	ldr	r3, [r4, #4]
 800c5fa:	4a45      	ldr	r2, [pc, #276]	; (800c710 <tcp_input+0x2ac>)
 800c5fc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c5fe:	4b3c      	ldr	r3, [pc, #240]	; (800c6f0 <tcp_input+0x28c>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	4a3a      	ldr	r2, [pc, #232]	; (800c6f0 <tcp_input+0x28c>)
 800c606:	6814      	ldr	r4, [r2, #0]
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fc fb90 	bl	8008d2e <lwip_htonl>
 800c60e:	4603      	mov	r3, r0
 800c610:	60a3      	str	r3, [r4, #8]
 800c612:	68a3      	ldr	r3, [r4, #8]
 800c614:	4a3f      	ldr	r2, [pc, #252]	; (800c714 <tcp_input+0x2b0>)
 800c616:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c618:	4b35      	ldr	r3, [pc, #212]	; (800c6f0 <tcp_input+0x28c>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	89db      	ldrh	r3, [r3, #14]
 800c61e:	b29b      	uxth	r3, r3
 800c620:	4a33      	ldr	r2, [pc, #204]	; (800c6f0 <tcp_input+0x28c>)
 800c622:	6814      	ldr	r4, [r2, #0]
 800c624:	4618      	mov	r0, r3
 800c626:	f7fc fb6d 	bl	8008d04 <lwip_htons>
 800c62a:	4603      	mov	r3, r0
 800c62c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c62e:	4b30      	ldr	r3, [pc, #192]	; (800c6f0 <tcp_input+0x28c>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	899b      	ldrh	r3, [r3, #12]
 800c634:	b29b      	uxth	r3, r3
 800c636:	4618      	mov	r0, r3
 800c638:	f7fc fb64 	bl	8008d04 <lwip_htons>
 800c63c:	4603      	mov	r3, r0
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c644:	b2da      	uxtb	r2, r3
 800c646:	4b34      	ldr	r3, [pc, #208]	; (800c718 <tcp_input+0x2b4>)
 800c648:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	891a      	ldrh	r2, [r3, #8]
 800c64e:	4b33      	ldr	r3, [pc, #204]	; (800c71c <tcp_input+0x2b8>)
 800c650:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c652:	4b31      	ldr	r3, [pc, #196]	; (800c718 <tcp_input+0x2b4>)
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	f003 0303 	and.w	r3, r3, #3
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00c      	beq.n	800c678 <tcp_input+0x214>
    tcplen++;
 800c65e:	4b2f      	ldr	r3, [pc, #188]	; (800c71c <tcp_input+0x2b8>)
 800c660:	881b      	ldrh	r3, [r3, #0]
 800c662:	3301      	adds	r3, #1
 800c664:	b29a      	uxth	r2, r3
 800c666:	4b2d      	ldr	r3, [pc, #180]	; (800c71c <tcp_input+0x2b8>)
 800c668:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	891a      	ldrh	r2, [r3, #8]
 800c66e:	4b2b      	ldr	r3, [pc, #172]	; (800c71c <tcp_input+0x2b8>)
 800c670:	881b      	ldrh	r3, [r3, #0]
 800c672:	429a      	cmp	r2, r3
 800c674:	f200 82e6 	bhi.w	800cc44 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c678:	2300      	movs	r3, #0
 800c67a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c67c:	4b28      	ldr	r3, [pc, #160]	; (800c720 <tcp_input+0x2bc>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	61fb      	str	r3, [r7, #28]
 800c682:	e09d      	b.n	800c7c0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	7d1b      	ldrb	r3, [r3, #20]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d105      	bne.n	800c698 <tcp_input+0x234>
 800c68c:	4b15      	ldr	r3, [pc, #84]	; (800c6e4 <tcp_input+0x280>)
 800c68e:	22fb      	movs	r2, #251	; 0xfb
 800c690:	4924      	ldr	r1, [pc, #144]	; (800c724 <tcp_input+0x2c0>)
 800c692:	4816      	ldr	r0, [pc, #88]	; (800c6ec <tcp_input+0x288>)
 800c694:	f008 fa58 	bl	8014b48 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	7d1b      	ldrb	r3, [r3, #20]
 800c69c:	2b0a      	cmp	r3, #10
 800c69e:	d105      	bne.n	800c6ac <tcp_input+0x248>
 800c6a0:	4b10      	ldr	r3, [pc, #64]	; (800c6e4 <tcp_input+0x280>)
 800c6a2:	22fc      	movs	r2, #252	; 0xfc
 800c6a4:	4920      	ldr	r1, [pc, #128]	; (800c728 <tcp_input+0x2c4>)
 800c6a6:	4811      	ldr	r0, [pc, #68]	; (800c6ec <tcp_input+0x288>)
 800c6a8:	f008 fa4e 	bl	8014b48 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	7d1b      	ldrb	r3, [r3, #20]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d105      	bne.n	800c6c0 <tcp_input+0x25c>
 800c6b4:	4b0b      	ldr	r3, [pc, #44]	; (800c6e4 <tcp_input+0x280>)
 800c6b6:	22fd      	movs	r2, #253	; 0xfd
 800c6b8:	491c      	ldr	r1, [pc, #112]	; (800c72c <tcp_input+0x2c8>)
 800c6ba:	480c      	ldr	r0, [pc, #48]	; (800c6ec <tcp_input+0x288>)
 800c6bc:	f008 fa44 	bl	8014b48 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	7a1b      	ldrb	r3, [r3, #8]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d033      	beq.n	800c730 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	7a1a      	ldrb	r2, [r3, #8]
 800c6cc:	4b09      	ldr	r3, [pc, #36]	; (800c6f4 <tcp_input+0x290>)
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d029      	beq.n	800c730 <tcp_input+0x2cc>
      prev = pcb;
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	61bb      	str	r3, [r7, #24]
      continue;
 800c6e0:	e06b      	b.n	800c7ba <tcp_input+0x356>
 800c6e2:	bf00      	nop
 800c6e4:	0801724c 	.word	0x0801724c
 800c6e8:	08017280 	.word	0x08017280
 800c6ec:	08017298 	.word	0x08017298
 800c6f0:	2000e4cc 	.word	0x2000e4cc
 800c6f4:	20005558 	.word	0x20005558
 800c6f8:	2000e4d0 	.word	0x2000e4d0
 800c6fc:	2000e4d4 	.word	0x2000e4d4
 800c700:	2000e4d2 	.word	0x2000e4d2
 800c704:	080172c0 	.word	0x080172c0
 800c708:	080172d0 	.word	0x080172d0
 800c70c:	080172dc 	.word	0x080172dc
 800c710:	2000e4dc 	.word	0x2000e4dc
 800c714:	2000e4e0 	.word	0x2000e4e0
 800c718:	2000e4e8 	.word	0x2000e4e8
 800c71c:	2000e4e6 	.word	0x2000e4e6
 800c720:	2000e4b0 	.word	0x2000e4b0
 800c724:	080172fc 	.word	0x080172fc
 800c728:	08017324 	.word	0x08017324
 800c72c:	08017350 	.word	0x08017350
    }

    if (pcb->remote_port == tcphdr->src &&
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	8b1a      	ldrh	r2, [r3, #24]
 800c734:	4b72      	ldr	r3, [pc, #456]	; (800c900 <tcp_input+0x49c>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	881b      	ldrh	r3, [r3, #0]
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d13a      	bne.n	800c7b6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	8ada      	ldrh	r2, [r3, #22]
 800c744:	4b6e      	ldr	r3, [pc, #440]	; (800c900 <tcp_input+0x49c>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	885b      	ldrh	r3, [r3, #2]
 800c74a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d132      	bne.n	800c7b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	685a      	ldr	r2, [r3, #4]
 800c754:	4b6b      	ldr	r3, [pc, #428]	; (800c904 <tcp_input+0x4a0>)
 800c756:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c758:	429a      	cmp	r2, r3
 800c75a:	d12c      	bne.n	800c7b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	4b68      	ldr	r3, [pc, #416]	; (800c904 <tcp_input+0x4a0>)
 800c762:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c764:	429a      	cmp	r2, r3
 800c766:	d126      	bne.n	800c7b6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	69fa      	ldr	r2, [r7, #28]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d106      	bne.n	800c780 <tcp_input+0x31c>
 800c772:	4b65      	ldr	r3, [pc, #404]	; (800c908 <tcp_input+0x4a4>)
 800c774:	f240 120d 	movw	r2, #269	; 0x10d
 800c778:	4964      	ldr	r1, [pc, #400]	; (800c90c <tcp_input+0x4a8>)
 800c77a:	4865      	ldr	r0, [pc, #404]	; (800c910 <tcp_input+0x4ac>)
 800c77c:	f008 f9e4 	bl	8014b48 <iprintf>
      if (prev != NULL) {
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00a      	beq.n	800c79c <tcp_input+0x338>
        prev->next = pcb->next;
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	68da      	ldr	r2, [r3, #12]
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c78e:	4b61      	ldr	r3, [pc, #388]	; (800c914 <tcp_input+0x4b0>)
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c796:	4a5f      	ldr	r2, [pc, #380]	; (800c914 <tcp_input+0x4b0>)
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	69fa      	ldr	r2, [r7, #28]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d111      	bne.n	800c7ca <tcp_input+0x366>
 800c7a6:	4b58      	ldr	r3, [pc, #352]	; (800c908 <tcp_input+0x4a4>)
 800c7a8:	f240 1215 	movw	r2, #277	; 0x115
 800c7ac:	495a      	ldr	r1, [pc, #360]	; (800c918 <tcp_input+0x4b4>)
 800c7ae:	4858      	ldr	r0, [pc, #352]	; (800c910 <tcp_input+0x4ac>)
 800c7b0:	f008 f9ca 	bl	8014b48 <iprintf>
      break;
 800c7b4:	e009      	b.n	800c7ca <tcp_input+0x366>
    }
    prev = pcb;
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	61fb      	str	r3, [r7, #28]
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	f47f af5e 	bne.w	800c684 <tcp_input+0x220>
 800c7c8:	e000      	b.n	800c7cc <tcp_input+0x368>
      break;
 800c7ca:	bf00      	nop
  }

  if (pcb == NULL) {
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	f040 80aa 	bne.w	800c928 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7d4:	4b51      	ldr	r3, [pc, #324]	; (800c91c <tcp_input+0x4b8>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	61fb      	str	r3, [r7, #28]
 800c7da:	e03f      	b.n	800c85c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	7d1b      	ldrb	r3, [r3, #20]
 800c7e0:	2b0a      	cmp	r3, #10
 800c7e2:	d006      	beq.n	800c7f2 <tcp_input+0x38e>
 800c7e4:	4b48      	ldr	r3, [pc, #288]	; (800c908 <tcp_input+0x4a4>)
 800c7e6:	f240 121f 	movw	r2, #287	; 0x11f
 800c7ea:	494d      	ldr	r1, [pc, #308]	; (800c920 <tcp_input+0x4bc>)
 800c7ec:	4848      	ldr	r0, [pc, #288]	; (800c910 <tcp_input+0x4ac>)
 800c7ee:	f008 f9ab 	bl	8014b48 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	7a1b      	ldrb	r3, [r3, #8]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d009      	beq.n	800c80e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	7a1a      	ldrb	r2, [r3, #8]
 800c7fe:	4b41      	ldr	r3, [pc, #260]	; (800c904 <tcp_input+0x4a0>)
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c806:	3301      	adds	r3, #1
 800c808:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d122      	bne.n	800c854 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	8b1a      	ldrh	r2, [r3, #24]
 800c812:	4b3b      	ldr	r3, [pc, #236]	; (800c900 <tcp_input+0x49c>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	881b      	ldrh	r3, [r3, #0]
 800c818:	b29b      	uxth	r3, r3
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d11b      	bne.n	800c856 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	8ada      	ldrh	r2, [r3, #22]
 800c822:	4b37      	ldr	r3, [pc, #220]	; (800c900 <tcp_input+0x49c>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	885b      	ldrh	r3, [r3, #2]
 800c828:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d113      	bne.n	800c856 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	685a      	ldr	r2, [r3, #4]
 800c832:	4b34      	ldr	r3, [pc, #208]	; (800c904 <tcp_input+0x4a0>)
 800c834:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c836:	429a      	cmp	r2, r3
 800c838:	d10d      	bne.n	800c856 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	4b31      	ldr	r3, [pc, #196]	; (800c904 <tcp_input+0x4a0>)
 800c840:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c842:	429a      	cmp	r2, r3
 800c844:	d107      	bne.n	800c856 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c846:	69f8      	ldr	r0, [r7, #28]
 800c848:	f000 fb56 	bl	800cef8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7fd fdb1 	bl	800a3b4 <pbuf_free>
        return;
 800c852:	e1fd      	b.n	800cc50 <tcp_input+0x7ec>
        continue;
 800c854:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	61fb      	str	r3, [r7, #28]
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d1bc      	bne.n	800c7dc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c862:	2300      	movs	r3, #0
 800c864:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c866:	4b2f      	ldr	r3, [pc, #188]	; (800c924 <tcp_input+0x4c0>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	617b      	str	r3, [r7, #20]
 800c86c:	e02a      	b.n	800c8c4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	7a1b      	ldrb	r3, [r3, #8]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d00c      	beq.n	800c890 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	7a1a      	ldrb	r2, [r3, #8]
 800c87a:	4b22      	ldr	r3, [pc, #136]	; (800c904 <tcp_input+0x4a0>)
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c882:	3301      	adds	r3, #1
 800c884:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c886:	429a      	cmp	r2, r3
 800c888:	d002      	beq.n	800c890 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	61bb      	str	r3, [r7, #24]
        continue;
 800c88e:	e016      	b.n	800c8be <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	8ada      	ldrh	r2, [r3, #22]
 800c894:	4b1a      	ldr	r3, [pc, #104]	; (800c900 <tcp_input+0x49c>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	885b      	ldrh	r3, [r3, #2]
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d10c      	bne.n	800c8ba <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	4b17      	ldr	r3, [pc, #92]	; (800c904 <tcp_input+0x4a0>)
 800c8a6:	695b      	ldr	r3, [r3, #20]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d00f      	beq.n	800c8cc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00d      	beq.n	800c8ce <tcp_input+0x46a>
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d009      	beq.n	800c8ce <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	68db      	ldr	r3, [r3, #12]
 800c8c2:	617b      	str	r3, [r7, #20]
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1d1      	bne.n	800c86e <tcp_input+0x40a>
 800c8ca:	e000      	b.n	800c8ce <tcp_input+0x46a>
            break;
 800c8cc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d029      	beq.n	800c928 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00a      	beq.n	800c8f0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	68da      	ldr	r2, [r3, #12]
 800c8de:	69bb      	ldr	r3, [r7, #24]
 800c8e0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c8e2:	4b10      	ldr	r3, [pc, #64]	; (800c924 <tcp_input+0x4c0>)
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c8ea:	4a0e      	ldr	r2, [pc, #56]	; (800c924 <tcp_input+0x4c0>)
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c8f0:	6978      	ldr	r0, [r7, #20]
 800c8f2:	f000 fa03 	bl	800ccfc <tcp_listen_input>
      }
      pbuf_free(p);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f7fd fd5c 	bl	800a3b4 <pbuf_free>
      return;
 800c8fc:	e1a8      	b.n	800cc50 <tcp_input+0x7ec>
 800c8fe:	bf00      	nop
 800c900:	2000e4cc 	.word	0x2000e4cc
 800c904:	20005558 	.word	0x20005558
 800c908:	0801724c 	.word	0x0801724c
 800c90c:	08017378 	.word	0x08017378
 800c910:	08017298 	.word	0x08017298
 800c914:	2000e4b0 	.word	0x2000e4b0
 800c918:	080173a4 	.word	0x080173a4
 800c91c:	2000e4b4 	.word	0x2000e4b4
 800c920:	080173d0 	.word	0x080173d0
 800c924:	2000e4ac 	.word	0x2000e4ac
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f000 8158 	beq.w	800cbe0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c930:	4b95      	ldr	r3, [pc, #596]	; (800cb88 <tcp_input+0x724>)
 800c932:	2200      	movs	r2, #0
 800c934:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	891a      	ldrh	r2, [r3, #8]
 800c93a:	4b93      	ldr	r3, [pc, #588]	; (800cb88 <tcp_input+0x724>)
 800c93c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c93e:	4a92      	ldr	r2, [pc, #584]	; (800cb88 <tcp_input+0x724>)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c944:	4b91      	ldr	r3, [pc, #580]	; (800cb8c <tcp_input+0x728>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a8f      	ldr	r2, [pc, #572]	; (800cb88 <tcp_input+0x724>)
 800c94a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c94c:	4b90      	ldr	r3, [pc, #576]	; (800cb90 <tcp_input+0x72c>)
 800c94e:	2200      	movs	r2, #0
 800c950:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c952:	4b90      	ldr	r3, [pc, #576]	; (800cb94 <tcp_input+0x730>)
 800c954:	2200      	movs	r2, #0
 800c956:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c958:	4b8f      	ldr	r3, [pc, #572]	; (800cb98 <tcp_input+0x734>)
 800c95a:	2200      	movs	r2, #0
 800c95c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c95e:	4b8f      	ldr	r3, [pc, #572]	; (800cb9c <tcp_input+0x738>)
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	f003 0308 	and.w	r3, r3, #8
 800c966:	2b00      	cmp	r3, #0
 800c968:	d006      	beq.n	800c978 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	7b5b      	ldrb	r3, [r3, #13]
 800c96e:	f043 0301 	orr.w	r3, r3, #1
 800c972:	b2da      	uxtb	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d017      	beq.n	800c9b0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c980:	69f8      	ldr	r0, [r7, #28]
 800c982:	f7ff f8b3 	bl	800baec <tcp_process_refused_data>
 800c986:	4603      	mov	r3, r0
 800c988:	f113 0f0d 	cmn.w	r3, #13
 800c98c:	d007      	beq.n	800c99e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c992:	2b00      	cmp	r3, #0
 800c994:	d00c      	beq.n	800c9b0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c996:	4b82      	ldr	r3, [pc, #520]	; (800cba0 <tcp_input+0x73c>)
 800c998:	881b      	ldrh	r3, [r3, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d008      	beq.n	800c9b0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c99e:	69fb      	ldr	r3, [r7, #28]
 800c9a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f040 80e3 	bne.w	800cb6e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c9a8:	69f8      	ldr	r0, [r7, #28]
 800c9aa:	f003 fe05 	bl	80105b8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c9ae:	e0de      	b.n	800cb6e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800c9b0:	4a7c      	ldr	r2, [pc, #496]	; (800cba4 <tcp_input+0x740>)
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c9b6:	69f8      	ldr	r0, [r7, #28]
 800c9b8:	f000 fb18 	bl	800cfec <tcp_process>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c9c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c9c4:	f113 0f0d 	cmn.w	r3, #13
 800c9c8:	f000 80d3 	beq.w	800cb72 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800c9cc:	4b71      	ldr	r3, [pc, #452]	; (800cb94 <tcp_input+0x730>)
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	f003 0308 	and.w	r3, r3, #8
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d015      	beq.n	800ca04 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d008      	beq.n	800c9f4 <tcp_input+0x590>
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9e8:	69fa      	ldr	r2, [r7, #28]
 800c9ea:	6912      	ldr	r2, [r2, #16]
 800c9ec:	f06f 010d 	mvn.w	r1, #13
 800c9f0:	4610      	mov	r0, r2
 800c9f2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c9f4:	69f9      	ldr	r1, [r7, #28]
 800c9f6:	486c      	ldr	r0, [pc, #432]	; (800cba8 <tcp_input+0x744>)
 800c9f8:	f7ff fbbc 	bl	800c174 <tcp_pcb_remove>
        tcp_free(pcb);
 800c9fc:	69f8      	ldr	r0, [r7, #28]
 800c9fe:	f7fd ff79 	bl	800a8f4 <tcp_free>
 800ca02:	e0da      	b.n	800cbba <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ca04:	2300      	movs	r3, #0
 800ca06:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ca08:	4b63      	ldr	r3, [pc, #396]	; (800cb98 <tcp_input+0x734>)
 800ca0a:	881b      	ldrh	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d01d      	beq.n	800ca4c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ca10:	4b61      	ldr	r3, [pc, #388]	; (800cb98 <tcp_input+0x734>)
 800ca12:	881b      	ldrh	r3, [r3, #0]
 800ca14:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ca16:	69fb      	ldr	r3, [r7, #28]
 800ca18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00a      	beq.n	800ca36 <tcp_input+0x5d2>
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca26:	69fa      	ldr	r2, [r7, #28]
 800ca28:	6910      	ldr	r0, [r2, #16]
 800ca2a:	89fa      	ldrh	r2, [r7, #14]
 800ca2c:	69f9      	ldr	r1, [r7, #28]
 800ca2e:	4798      	blx	r3
 800ca30:	4603      	mov	r3, r0
 800ca32:	74fb      	strb	r3, [r7, #19]
 800ca34:	e001      	b.n	800ca3a <tcp_input+0x5d6>
 800ca36:	2300      	movs	r3, #0
 800ca38:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ca3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca3e:	f113 0f0d 	cmn.w	r3, #13
 800ca42:	f000 8098 	beq.w	800cb76 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ca46:	4b54      	ldr	r3, [pc, #336]	; (800cb98 <tcp_input+0x734>)
 800ca48:	2200      	movs	r2, #0
 800ca4a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ca4c:	69f8      	ldr	r0, [r7, #28]
 800ca4e:	f000 f915 	bl	800cc7c <tcp_input_delayed_close>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f040 8090 	bne.w	800cb7a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ca5a:	4b4d      	ldr	r3, [pc, #308]	; (800cb90 <tcp_input+0x72c>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d041      	beq.n	800cae6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d006      	beq.n	800ca78 <tcp_input+0x614>
 800ca6a:	4b50      	ldr	r3, [pc, #320]	; (800cbac <tcp_input+0x748>)
 800ca6c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ca70:	494f      	ldr	r1, [pc, #316]	; (800cbb0 <tcp_input+0x74c>)
 800ca72:	4850      	ldr	r0, [pc, #320]	; (800cbb4 <tcp_input+0x750>)
 800ca74:	f008 f868 	bl	8014b48 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	8b5b      	ldrh	r3, [r3, #26]
 800ca7c:	f003 0310 	and.w	r3, r3, #16
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d008      	beq.n	800ca96 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ca84:	4b42      	ldr	r3, [pc, #264]	; (800cb90 <tcp_input+0x72c>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7fd fc93 	bl	800a3b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ca8e:	69f8      	ldr	r0, [r7, #28]
 800ca90:	f7fe fa18 	bl	800aec4 <tcp_abort>
            goto aborted;
 800ca94:	e091      	b.n	800cbba <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00c      	beq.n	800caba <tcp_input+0x656>
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	6918      	ldr	r0, [r3, #16]
 800caaa:	4b39      	ldr	r3, [pc, #228]	; (800cb90 <tcp_input+0x72c>)
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	2300      	movs	r3, #0
 800cab0:	69f9      	ldr	r1, [r7, #28]
 800cab2:	47a0      	blx	r4
 800cab4:	4603      	mov	r3, r0
 800cab6:	74fb      	strb	r3, [r7, #19]
 800cab8:	e008      	b.n	800cacc <tcp_input+0x668>
 800caba:	4b35      	ldr	r3, [pc, #212]	; (800cb90 <tcp_input+0x72c>)
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	2300      	movs	r3, #0
 800cac0:	69f9      	ldr	r1, [r7, #28]
 800cac2:	2000      	movs	r0, #0
 800cac4:	f7ff f8e8 	bl	800bc98 <tcp_recv_null>
 800cac8:	4603      	mov	r3, r0
 800caca:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800cacc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cad0:	f113 0f0d 	cmn.w	r3, #13
 800cad4:	d053      	beq.n	800cb7e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800cad6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800cade:	4b2c      	ldr	r3, [pc, #176]	; (800cb90 <tcp_input+0x72c>)
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800cae6:	4b2b      	ldr	r3, [pc, #172]	; (800cb94 <tcp_input+0x730>)
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	f003 0320 	and.w	r3, r3, #32
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d030      	beq.n	800cb54 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d009      	beq.n	800cb0e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cafe:	7b5a      	ldrb	r2, [r3, #13]
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb04:	f042 0220 	orr.w	r2, r2, #32
 800cb08:	b2d2      	uxtb	r2, r2
 800cb0a:	735a      	strb	r2, [r3, #13]
 800cb0c:	e022      	b.n	800cb54 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb12:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cb16:	d005      	beq.n	800cb24 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00b      	beq.n	800cb46 <tcp_input+0x6e2>
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	6918      	ldr	r0, [r3, #16]
 800cb38:	2300      	movs	r3, #0
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	69f9      	ldr	r1, [r7, #28]
 800cb3e:	47a0      	blx	r4
 800cb40:	4603      	mov	r3, r0
 800cb42:	74fb      	strb	r3, [r7, #19]
 800cb44:	e001      	b.n	800cb4a <tcp_input+0x6e6>
 800cb46:	2300      	movs	r3, #0
 800cb48:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cb4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb4e:	f113 0f0d 	cmn.w	r3, #13
 800cb52:	d016      	beq.n	800cb82 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cb54:	4b13      	ldr	r3, [pc, #76]	; (800cba4 <tcp_input+0x740>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800cb5a:	69f8      	ldr	r0, [r7, #28]
 800cb5c:	f000 f88e 	bl	800cc7c <tcp_input_delayed_close>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d128      	bne.n	800cbb8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800cb66:	69f8      	ldr	r0, [r7, #28]
 800cb68:	f002 ff20 	bl	800f9ac <tcp_output>
 800cb6c:	e025      	b.n	800cbba <tcp_input+0x756>
        goto aborted;
 800cb6e:	bf00      	nop
 800cb70:	e023      	b.n	800cbba <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800cb72:	bf00      	nop
 800cb74:	e021      	b.n	800cbba <tcp_input+0x756>
              goto aborted;
 800cb76:	bf00      	nop
 800cb78:	e01f      	b.n	800cbba <tcp_input+0x756>
          goto aborted;
 800cb7a:	bf00      	nop
 800cb7c:	e01d      	b.n	800cbba <tcp_input+0x756>
            goto aborted;
 800cb7e:	bf00      	nop
 800cb80:	e01b      	b.n	800cbba <tcp_input+0x756>
              goto aborted;
 800cb82:	bf00      	nop
 800cb84:	e019      	b.n	800cbba <tcp_input+0x756>
 800cb86:	bf00      	nop
 800cb88:	2000e4bc 	.word	0x2000e4bc
 800cb8c:	2000e4cc 	.word	0x2000e4cc
 800cb90:	2000e4ec 	.word	0x2000e4ec
 800cb94:	2000e4e9 	.word	0x2000e4e9
 800cb98:	2000e4e4 	.word	0x2000e4e4
 800cb9c:	2000e4e8 	.word	0x2000e4e8
 800cba0:	2000e4e6 	.word	0x2000e4e6
 800cba4:	2000e4f0 	.word	0x2000e4f0
 800cba8:	2000e4b0 	.word	0x2000e4b0
 800cbac:	0801724c 	.word	0x0801724c
 800cbb0:	08017400 	.word	0x08017400
 800cbb4:	08017298 	.word	0x08017298
          goto aborted;
 800cbb8:	bf00      	nop
    tcp_input_pcb = NULL;
 800cbba:	4b27      	ldr	r3, [pc, #156]	; (800cc58 <tcp_input+0x7f4>)
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800cbc0:	4b26      	ldr	r3, [pc, #152]	; (800cc5c <tcp_input+0x7f8>)
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800cbc6:	4b26      	ldr	r3, [pc, #152]	; (800cc60 <tcp_input+0x7fc>)
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d03f      	beq.n	800cc4e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800cbce:	4b24      	ldr	r3, [pc, #144]	; (800cc60 <tcp_input+0x7fc>)
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fd fbee 	bl	800a3b4 <pbuf_free>
      inseg.p = NULL;
 800cbd8:	4b21      	ldr	r3, [pc, #132]	; (800cc60 <tcp_input+0x7fc>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800cbde:	e036      	b.n	800cc4e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cbe0:	4b20      	ldr	r3, [pc, #128]	; (800cc64 <tcp_input+0x800>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	899b      	ldrh	r3, [r3, #12]
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7fc f88b 	bl	8008d04 <lwip_htons>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	f003 0304 	and.w	r3, r3, #4
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d118      	bne.n	800cc2c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbfa:	4b1b      	ldr	r3, [pc, #108]	; (800cc68 <tcp_input+0x804>)
 800cbfc:	6819      	ldr	r1, [r3, #0]
 800cbfe:	4b1b      	ldr	r3, [pc, #108]	; (800cc6c <tcp_input+0x808>)
 800cc00:	881b      	ldrh	r3, [r3, #0]
 800cc02:	461a      	mov	r2, r3
 800cc04:	4b1a      	ldr	r3, [pc, #104]	; (800cc70 <tcp_input+0x80c>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cc0a:	4b16      	ldr	r3, [pc, #88]	; (800cc64 <tcp_input+0x800>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc0e:	885b      	ldrh	r3, [r3, #2]
 800cc10:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cc12:	4a14      	ldr	r2, [pc, #80]	; (800cc64 <tcp_input+0x800>)
 800cc14:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc16:	8812      	ldrh	r2, [r2, #0]
 800cc18:	b292      	uxth	r2, r2
 800cc1a:	9202      	str	r2, [sp, #8]
 800cc1c:	9301      	str	r3, [sp, #4]
 800cc1e:	4b15      	ldr	r3, [pc, #84]	; (800cc74 <tcp_input+0x810>)
 800cc20:	9300      	str	r3, [sp, #0]
 800cc22:	4b15      	ldr	r3, [pc, #84]	; (800cc78 <tcp_input+0x814>)
 800cc24:	4602      	mov	r2, r0
 800cc26:	2000      	movs	r0, #0
 800cc28:	f003 fc74 	bl	8010514 <tcp_rst>
    pbuf_free(p);
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f7fd fbc1 	bl	800a3b4 <pbuf_free>
  return;
 800cc32:	e00c      	b.n	800cc4e <tcp_input+0x7ea>
    goto dropped;
 800cc34:	bf00      	nop
 800cc36:	e006      	b.n	800cc46 <tcp_input+0x7e2>
    goto dropped;
 800cc38:	bf00      	nop
 800cc3a:	e004      	b.n	800cc46 <tcp_input+0x7e2>
    goto dropped;
 800cc3c:	bf00      	nop
 800cc3e:	e002      	b.n	800cc46 <tcp_input+0x7e2>
      goto dropped;
 800cc40:	bf00      	nop
 800cc42:	e000      	b.n	800cc46 <tcp_input+0x7e2>
      goto dropped;
 800cc44:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f7fd fbb4 	bl	800a3b4 <pbuf_free>
 800cc4c:	e000      	b.n	800cc50 <tcp_input+0x7ec>
  return;
 800cc4e:	bf00      	nop
}
 800cc50:	3724      	adds	r7, #36	; 0x24
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd90      	pop	{r4, r7, pc}
 800cc56:	bf00      	nop
 800cc58:	2000e4f0 	.word	0x2000e4f0
 800cc5c:	2000e4ec 	.word	0x2000e4ec
 800cc60:	2000e4bc 	.word	0x2000e4bc
 800cc64:	2000e4cc 	.word	0x2000e4cc
 800cc68:	2000e4e0 	.word	0x2000e4e0
 800cc6c:	2000e4e6 	.word	0x2000e4e6
 800cc70:	2000e4dc 	.word	0x2000e4dc
 800cc74:	20005568 	.word	0x20005568
 800cc78:	2000556c 	.word	0x2000556c

0800cc7c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d106      	bne.n	800cc98 <tcp_input_delayed_close+0x1c>
 800cc8a:	4b17      	ldr	r3, [pc, #92]	; (800cce8 <tcp_input_delayed_close+0x6c>)
 800cc8c:	f240 225a 	movw	r2, #602	; 0x25a
 800cc90:	4916      	ldr	r1, [pc, #88]	; (800ccec <tcp_input_delayed_close+0x70>)
 800cc92:	4817      	ldr	r0, [pc, #92]	; (800ccf0 <tcp_input_delayed_close+0x74>)
 800cc94:	f007 ff58 	bl	8014b48 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800cc98:	4b16      	ldr	r3, [pc, #88]	; (800ccf4 <tcp_input_delayed_close+0x78>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	f003 0310 	and.w	r3, r3, #16
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d01c      	beq.n	800ccde <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	8b5b      	ldrh	r3, [r3, #26]
 800cca8:	f003 0310 	and.w	r3, r3, #16
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d10d      	bne.n	800cccc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d008      	beq.n	800cccc <tcp_input_delayed_close+0x50>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	6912      	ldr	r2, [r2, #16]
 800ccc4:	f06f 010e 	mvn.w	r1, #14
 800ccc8:	4610      	mov	r0, r2
 800ccca:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cccc:	6879      	ldr	r1, [r7, #4]
 800ccce:	480a      	ldr	r0, [pc, #40]	; (800ccf8 <tcp_input_delayed_close+0x7c>)
 800ccd0:	f7ff fa50 	bl	800c174 <tcp_pcb_remove>
    tcp_free(pcb);
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f7fd fe0d 	bl	800a8f4 <tcp_free>
    return 1;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e000      	b.n	800cce0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ccde:	2300      	movs	r3, #0
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	0801724c 	.word	0x0801724c
 800ccec:	0801741c 	.word	0x0801741c
 800ccf0:	08017298 	.word	0x08017298
 800ccf4:	2000e4e9 	.word	0x2000e4e9
 800ccf8:	2000e4b0 	.word	0x2000e4b0

0800ccfc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ccfc:	b590      	push	{r4, r7, lr}
 800ccfe:	b08b      	sub	sp, #44	; 0x2c
 800cd00:	af04      	add	r7, sp, #16
 800cd02:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800cd04:	4b6f      	ldr	r3, [pc, #444]	; (800cec4 <tcp_listen_input+0x1c8>)
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	f003 0304 	and.w	r3, r3, #4
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	f040 80d2 	bne.w	800ceb6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d106      	bne.n	800cd26 <tcp_listen_input+0x2a>
 800cd18:	4b6b      	ldr	r3, [pc, #428]	; (800cec8 <tcp_listen_input+0x1cc>)
 800cd1a:	f240 2281 	movw	r2, #641	; 0x281
 800cd1e:	496b      	ldr	r1, [pc, #428]	; (800cecc <tcp_listen_input+0x1d0>)
 800cd20:	486b      	ldr	r0, [pc, #428]	; (800ced0 <tcp_listen_input+0x1d4>)
 800cd22:	f007 ff11 	bl	8014b48 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800cd26:	4b67      	ldr	r3, [pc, #412]	; (800cec4 <tcp_listen_input+0x1c8>)
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	f003 0310 	and.w	r3, r3, #16
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d019      	beq.n	800cd66 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd32:	4b68      	ldr	r3, [pc, #416]	; (800ced4 <tcp_listen_input+0x1d8>)
 800cd34:	6819      	ldr	r1, [r3, #0]
 800cd36:	4b68      	ldr	r3, [pc, #416]	; (800ced8 <tcp_listen_input+0x1dc>)
 800cd38:	881b      	ldrh	r3, [r3, #0]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	4b67      	ldr	r3, [pc, #412]	; (800cedc <tcp_listen_input+0x1e0>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd42:	4b67      	ldr	r3, [pc, #412]	; (800cee0 <tcp_listen_input+0x1e4>)
 800cd44:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd46:	885b      	ldrh	r3, [r3, #2]
 800cd48:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd4a:	4a65      	ldr	r2, [pc, #404]	; (800cee0 <tcp_listen_input+0x1e4>)
 800cd4c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd4e:	8812      	ldrh	r2, [r2, #0]
 800cd50:	b292      	uxth	r2, r2
 800cd52:	9202      	str	r2, [sp, #8]
 800cd54:	9301      	str	r3, [sp, #4]
 800cd56:	4b63      	ldr	r3, [pc, #396]	; (800cee4 <tcp_listen_input+0x1e8>)
 800cd58:	9300      	str	r3, [sp, #0]
 800cd5a:	4b63      	ldr	r3, [pc, #396]	; (800cee8 <tcp_listen_input+0x1ec>)
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f003 fbd8 	bl	8010514 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800cd64:	e0a9      	b.n	800ceba <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800cd66:	4b57      	ldr	r3, [pc, #348]	; (800cec4 <tcp_listen_input+0x1c8>)
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	f003 0302 	and.w	r3, r3, #2
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f000 80a3 	beq.w	800ceba <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	7d5b      	ldrb	r3, [r3, #21]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7ff f8b1 	bl	800bee0 <tcp_alloc>
 800cd7e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d111      	bne.n	800cdaa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00a      	beq.n	800cda4 <tcp_listen_input+0xa8>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	699b      	ldr	r3, [r3, #24]
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	6910      	ldr	r0, [r2, #16]
 800cd96:	f04f 32ff 	mov.w	r2, #4294967295
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	4798      	blx	r3
 800cd9e:	4603      	mov	r3, r0
 800cda0:	73bb      	strb	r3, [r7, #14]
      return;
 800cda2:	e08b      	b.n	800cebc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cda4:	23f0      	movs	r3, #240	; 0xf0
 800cda6:	73bb      	strb	r3, [r7, #14]
      return;
 800cda8:	e088      	b.n	800cebc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cdaa:	4b50      	ldr	r3, [pc, #320]	; (800ceec <tcp_listen_input+0x1f0>)
 800cdac:	695a      	ldr	r2, [r3, #20]
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cdb2:	4b4e      	ldr	r3, [pc, #312]	; (800ceec <tcp_listen_input+0x1f0>)
 800cdb4:	691a      	ldr	r2, [r3, #16]
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	8ada      	ldrh	r2, [r3, #22]
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800cdc2:	4b47      	ldr	r3, [pc, #284]	; (800cee0 <tcp_listen_input+0x1e4>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	881b      	ldrh	r3, [r3, #0]
 800cdc8:	b29a      	uxth	r2, r3
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	2203      	movs	r2, #3
 800cdd2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cdd4:	4b41      	ldr	r3, [pc, #260]	; (800cedc <tcp_listen_input+0x1e0>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	1c5a      	adds	r2, r3, #1
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800cde6:	6978      	ldr	r0, [r7, #20]
 800cde8:	f7ff fa58 	bl	800c29c <tcp_next_iss>
 800cdec:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	693a      	ldr	r2, [r7, #16]
 800cdf2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	693a      	ldr	r2, [r7, #16]
 800cdf8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	693a      	ldr	r2, [r7, #16]
 800cdfe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	693a      	ldr	r2, [r7, #16]
 800ce04:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ce06:	4b35      	ldr	r3, [pc, #212]	; (800cedc <tcp_listen_input+0x1e0>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	1e5a      	subs	r2, r3, #1
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	691a      	ldr	r2, [r3, #16]
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	7a5b      	ldrb	r3, [r3, #9]
 800ce22:	f003 030c 	and.w	r3, r3, #12
 800ce26:	b2da      	uxtb	r2, r3
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	7a1a      	ldrb	r2, [r3, #8]
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ce34:	4b2e      	ldr	r3, [pc, #184]	; (800cef0 <tcp_listen_input+0x1f4>)
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	60da      	str	r2, [r3, #12]
 800ce3c:	4a2c      	ldr	r2, [pc, #176]	; (800cef0 <tcp_listen_input+0x1f4>)
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	6013      	str	r3, [r2, #0]
 800ce42:	f003 fd29 	bl	8010898 <tcp_timer_needed>
 800ce46:	4b2b      	ldr	r3, [pc, #172]	; (800cef4 <tcp_listen_input+0x1f8>)
 800ce48:	2201      	movs	r2, #1
 800ce4a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ce4c:	6978      	ldr	r0, [r7, #20]
 800ce4e:	f001 fd8f 	bl	800e970 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ce52:	4b23      	ldr	r3, [pc, #140]	; (800cee0 <tcp_listen_input+0x1e4>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	89db      	ldrh	r3, [r3, #14]
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	3304      	adds	r3, #4
 800ce74:	4618      	mov	r0, r3
 800ce76:	f004 ff33 	bl	8011ce0 <ip4_route>
 800ce7a:	4601      	mov	r1, r0
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	3304      	adds	r3, #4
 800ce80:	461a      	mov	r2, r3
 800ce82:	4620      	mov	r0, r4
 800ce84:	f7ff fa30 	bl	800c2e8 <tcp_eff_send_mss_netif>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ce90:	2112      	movs	r1, #18
 800ce92:	6978      	ldr	r0, [r7, #20]
 800ce94:	f002 fc9c 	bl	800f7d0 <tcp_enqueue_flags>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ce9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d004      	beq.n	800ceae <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800cea4:	2100      	movs	r1, #0
 800cea6:	6978      	ldr	r0, [r7, #20]
 800cea8:	f7fd ff4e 	bl	800ad48 <tcp_abandon>
      return;
 800ceac:	e006      	b.n	800cebc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ceae:	6978      	ldr	r0, [r7, #20]
 800ceb0:	f002 fd7c 	bl	800f9ac <tcp_output>
  return;
 800ceb4:	e001      	b.n	800ceba <tcp_listen_input+0x1be>
    return;
 800ceb6:	bf00      	nop
 800ceb8:	e000      	b.n	800cebc <tcp_listen_input+0x1c0>
  return;
 800ceba:	bf00      	nop
}
 800cebc:	371c      	adds	r7, #28
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd90      	pop	{r4, r7, pc}
 800cec2:	bf00      	nop
 800cec4:	2000e4e8 	.word	0x2000e4e8
 800cec8:	0801724c 	.word	0x0801724c
 800cecc:	08017444 	.word	0x08017444
 800ced0:	08017298 	.word	0x08017298
 800ced4:	2000e4e0 	.word	0x2000e4e0
 800ced8:	2000e4e6 	.word	0x2000e4e6
 800cedc:	2000e4dc 	.word	0x2000e4dc
 800cee0:	2000e4cc 	.word	0x2000e4cc
 800cee4:	20005568 	.word	0x20005568
 800cee8:	2000556c 	.word	0x2000556c
 800ceec:	20005558 	.word	0x20005558
 800cef0:	2000e4b0 	.word	0x2000e4b0
 800cef4:	2000e4b8 	.word	0x2000e4b8

0800cef8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b086      	sub	sp, #24
 800cefc:	af04      	add	r7, sp, #16
 800cefe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cf00:	4b2f      	ldr	r3, [pc, #188]	; (800cfc0 <tcp_timewait_input+0xc8>)
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	f003 0304 	and.w	r3, r3, #4
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d153      	bne.n	800cfb4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d106      	bne.n	800cf20 <tcp_timewait_input+0x28>
 800cf12:	4b2c      	ldr	r3, [pc, #176]	; (800cfc4 <tcp_timewait_input+0xcc>)
 800cf14:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cf18:	492b      	ldr	r1, [pc, #172]	; (800cfc8 <tcp_timewait_input+0xd0>)
 800cf1a:	482c      	ldr	r0, [pc, #176]	; (800cfcc <tcp_timewait_input+0xd4>)
 800cf1c:	f007 fe14 	bl	8014b48 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cf20:	4b27      	ldr	r3, [pc, #156]	; (800cfc0 <tcp_timewait_input+0xc8>)
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	f003 0302 	and.w	r3, r3, #2
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d02a      	beq.n	800cf82 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cf2c:	4b28      	ldr	r3, [pc, #160]	; (800cfd0 <tcp_timewait_input+0xd8>)
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	db2d      	blt.n	800cf96 <tcp_timewait_input+0x9e>
 800cf3a:	4b25      	ldr	r3, [pc, #148]	; (800cfd0 <tcp_timewait_input+0xd8>)
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf42:	6879      	ldr	r1, [r7, #4]
 800cf44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cf46:	440b      	add	r3, r1
 800cf48:	1ad3      	subs	r3, r2, r3
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	dc23      	bgt.n	800cf96 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf4e:	4b21      	ldr	r3, [pc, #132]	; (800cfd4 <tcp_timewait_input+0xdc>)
 800cf50:	6819      	ldr	r1, [r3, #0]
 800cf52:	4b21      	ldr	r3, [pc, #132]	; (800cfd8 <tcp_timewait_input+0xe0>)
 800cf54:	881b      	ldrh	r3, [r3, #0]
 800cf56:	461a      	mov	r2, r3
 800cf58:	4b1d      	ldr	r3, [pc, #116]	; (800cfd0 <tcp_timewait_input+0xd8>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf5e:	4b1f      	ldr	r3, [pc, #124]	; (800cfdc <tcp_timewait_input+0xe4>)
 800cf60:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf62:	885b      	ldrh	r3, [r3, #2]
 800cf64:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf66:	4a1d      	ldr	r2, [pc, #116]	; (800cfdc <tcp_timewait_input+0xe4>)
 800cf68:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf6a:	8812      	ldrh	r2, [r2, #0]
 800cf6c:	b292      	uxth	r2, r2
 800cf6e:	9202      	str	r2, [sp, #8]
 800cf70:	9301      	str	r3, [sp, #4]
 800cf72:	4b1b      	ldr	r3, [pc, #108]	; (800cfe0 <tcp_timewait_input+0xe8>)
 800cf74:	9300      	str	r3, [sp, #0]
 800cf76:	4b1b      	ldr	r3, [pc, #108]	; (800cfe4 <tcp_timewait_input+0xec>)
 800cf78:	4602      	mov	r2, r0
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f003 faca 	bl	8010514 <tcp_rst>
      return;
 800cf80:	e01b      	b.n	800cfba <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cf82:	4b0f      	ldr	r3, [pc, #60]	; (800cfc0 <tcp_timewait_input+0xc8>)
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	f003 0301 	and.w	r3, r3, #1
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d003      	beq.n	800cf96 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cf8e:	4b16      	ldr	r3, [pc, #88]	; (800cfe8 <tcp_timewait_input+0xf0>)
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cf96:	4b10      	ldr	r3, [pc, #64]	; (800cfd8 <tcp_timewait_input+0xe0>)
 800cf98:	881b      	ldrh	r3, [r3, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00c      	beq.n	800cfb8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	8b5b      	ldrh	r3, [r3, #26]
 800cfa2:	f043 0302 	orr.w	r3, r3, #2
 800cfa6:	b29a      	uxth	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f002 fcfd 	bl	800f9ac <tcp_output>
  }
  return;
 800cfb2:	e001      	b.n	800cfb8 <tcp_timewait_input+0xc0>
    return;
 800cfb4:	bf00      	nop
 800cfb6:	e000      	b.n	800cfba <tcp_timewait_input+0xc2>
  return;
 800cfb8:	bf00      	nop
}
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	2000e4e8 	.word	0x2000e4e8
 800cfc4:	0801724c 	.word	0x0801724c
 800cfc8:	08017464 	.word	0x08017464
 800cfcc:	08017298 	.word	0x08017298
 800cfd0:	2000e4dc 	.word	0x2000e4dc
 800cfd4:	2000e4e0 	.word	0x2000e4e0
 800cfd8:	2000e4e6 	.word	0x2000e4e6
 800cfdc:	2000e4cc 	.word	0x2000e4cc
 800cfe0:	20005568 	.word	0x20005568
 800cfe4:	2000556c 	.word	0x2000556c
 800cfe8:	2000e4a4 	.word	0x2000e4a4

0800cfec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cfec:	b590      	push	{r4, r7, lr}
 800cfee:	b08d      	sub	sp, #52	; 0x34
 800cff0:	af04      	add	r7, sp, #16
 800cff2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cff4:	2300      	movs	r3, #0
 800cff6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cff8:	2300      	movs	r3, #0
 800cffa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d106      	bne.n	800d010 <tcp_process+0x24>
 800d002:	4b9d      	ldr	r3, [pc, #628]	; (800d278 <tcp_process+0x28c>)
 800d004:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d008:	499c      	ldr	r1, [pc, #624]	; (800d27c <tcp_process+0x290>)
 800d00a:	489d      	ldr	r0, [pc, #628]	; (800d280 <tcp_process+0x294>)
 800d00c:	f007 fd9c 	bl	8014b48 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d010:	4b9c      	ldr	r3, [pc, #624]	; (800d284 <tcp_process+0x298>)
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	f003 0304 	and.w	r3, r3, #4
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d04e      	beq.n	800d0ba <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	7d1b      	ldrb	r3, [r3, #20]
 800d020:	2b02      	cmp	r3, #2
 800d022:	d108      	bne.n	800d036 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d028:	4b97      	ldr	r3, [pc, #604]	; (800d288 <tcp_process+0x29c>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d123      	bne.n	800d078 <tcp_process+0x8c>
        acceptable = 1;
 800d030:	2301      	movs	r3, #1
 800d032:	76fb      	strb	r3, [r7, #27]
 800d034:	e020      	b.n	800d078 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d03a:	4b94      	ldr	r3, [pc, #592]	; (800d28c <tcp_process+0x2a0>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d102      	bne.n	800d048 <tcp_process+0x5c>
        acceptable = 1;
 800d042:	2301      	movs	r3, #1
 800d044:	76fb      	strb	r3, [r7, #27]
 800d046:	e017      	b.n	800d078 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d048:	4b90      	ldr	r3, [pc, #576]	; (800d28c <tcp_process+0x2a0>)
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d050:	1ad3      	subs	r3, r2, r3
 800d052:	2b00      	cmp	r3, #0
 800d054:	db10      	blt.n	800d078 <tcp_process+0x8c>
 800d056:	4b8d      	ldr	r3, [pc, #564]	; (800d28c <tcp_process+0x2a0>)
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05e:	6879      	ldr	r1, [r7, #4]
 800d060:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d062:	440b      	add	r3, r1
 800d064:	1ad3      	subs	r3, r2, r3
 800d066:	2b00      	cmp	r3, #0
 800d068:	dc06      	bgt.n	800d078 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	8b5b      	ldrh	r3, [r3, #26]
 800d06e:	f043 0302 	orr.w	r3, r3, #2
 800d072:	b29a      	uxth	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d078:	7efb      	ldrb	r3, [r7, #27]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d01b      	beq.n	800d0b6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	7d1b      	ldrb	r3, [r3, #20]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d106      	bne.n	800d094 <tcp_process+0xa8>
 800d086:	4b7c      	ldr	r3, [pc, #496]	; (800d278 <tcp_process+0x28c>)
 800d088:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d08c:	4980      	ldr	r1, [pc, #512]	; (800d290 <tcp_process+0x2a4>)
 800d08e:	487c      	ldr	r0, [pc, #496]	; (800d280 <tcp_process+0x294>)
 800d090:	f007 fd5a 	bl	8014b48 <iprintf>
      recv_flags |= TF_RESET;
 800d094:	4b7f      	ldr	r3, [pc, #508]	; (800d294 <tcp_process+0x2a8>)
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	f043 0308 	orr.w	r3, r3, #8
 800d09c:	b2da      	uxtb	r2, r3
 800d09e:	4b7d      	ldr	r3, [pc, #500]	; (800d294 <tcp_process+0x2a8>)
 800d0a0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	8b5b      	ldrh	r3, [r3, #26]
 800d0a6:	f023 0301 	bic.w	r3, r3, #1
 800d0aa:	b29a      	uxth	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d0b0:	f06f 030d 	mvn.w	r3, #13
 800d0b4:	e37a      	b.n	800d7ac <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	e378      	b.n	800d7ac <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d0ba:	4b72      	ldr	r3, [pc, #456]	; (800d284 <tcp_process+0x298>)
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	f003 0302 	and.w	r3, r3, #2
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d010      	beq.n	800d0e8 <tcp_process+0xfc>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	7d1b      	ldrb	r3, [r3, #20]
 800d0ca:	2b02      	cmp	r3, #2
 800d0cc:	d00c      	beq.n	800d0e8 <tcp_process+0xfc>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	7d1b      	ldrb	r3, [r3, #20]
 800d0d2:	2b03      	cmp	r3, #3
 800d0d4:	d008      	beq.n	800d0e8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	8b5b      	ldrh	r3, [r3, #26]
 800d0da:	f043 0302 	orr.w	r3, r3, #2
 800d0de:	b29a      	uxth	r2, r3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	e361      	b.n	800d7ac <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	8b5b      	ldrh	r3, [r3, #26]
 800d0ec:	f003 0310 	and.w	r3, r3, #16
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d103      	bne.n	800d0fc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d0f4:	4b68      	ldr	r3, [pc, #416]	; (800d298 <tcp_process+0x2ac>)
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f001 fc2f 	bl	800e970 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	7d1b      	ldrb	r3, [r3, #20]
 800d116:	3b02      	subs	r3, #2
 800d118:	2b07      	cmp	r3, #7
 800d11a:	f200 8337 	bhi.w	800d78c <tcp_process+0x7a0>
 800d11e:	a201      	add	r2, pc, #4	; (adr r2, 800d124 <tcp_process+0x138>)
 800d120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d124:	0800d145 	.word	0x0800d145
 800d128:	0800d375 	.word	0x0800d375
 800d12c:	0800d4ed 	.word	0x0800d4ed
 800d130:	0800d517 	.word	0x0800d517
 800d134:	0800d63b 	.word	0x0800d63b
 800d138:	0800d4ed 	.word	0x0800d4ed
 800d13c:	0800d6c7 	.word	0x0800d6c7
 800d140:	0800d757 	.word	0x0800d757
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d144:	4b4f      	ldr	r3, [pc, #316]	; (800d284 <tcp_process+0x298>)
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	f003 0310 	and.w	r3, r3, #16
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f000 80e4 	beq.w	800d31a <tcp_process+0x32e>
 800d152:	4b4c      	ldr	r3, [pc, #304]	; (800d284 <tcp_process+0x298>)
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	f003 0302 	and.w	r3, r3, #2
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f000 80dd 	beq.w	800d31a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d164:	1c5a      	adds	r2, r3, #1
 800d166:	4b48      	ldr	r3, [pc, #288]	; (800d288 <tcp_process+0x29c>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	f040 80d5 	bne.w	800d31a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d170:	4b46      	ldr	r3, [pc, #280]	; (800d28c <tcp_process+0x2a0>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	1c5a      	adds	r2, r3, #1
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d182:	4b41      	ldr	r3, [pc, #260]	; (800d288 <tcp_process+0x29c>)
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d18a:	4b44      	ldr	r3, [pc, #272]	; (800d29c <tcp_process+0x2b0>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	89db      	ldrh	r3, [r3, #14]
 800d190:	b29a      	uxth	r2, r3
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d1a4:	4b39      	ldr	r3, [pc, #228]	; (800d28c <tcp_process+0x2a0>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	1e5a      	subs	r2, r3, #1
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2204      	movs	r2, #4
 800d1b2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	3304      	adds	r3, #4
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f004 fd8f 	bl	8011ce0 <ip4_route>
 800d1c2:	4601      	mov	r1, r0
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	3304      	adds	r3, #4
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f7ff f88c 	bl	800c2e8 <tcp_eff_send_mss_netif>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1dc:	009a      	lsls	r2, r3, #2
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1e2:	005b      	lsls	r3, r3, #1
 800d1e4:	f241 111c 	movw	r1, #4380	; 0x111c
 800d1e8:	428b      	cmp	r3, r1
 800d1ea:	bf38      	it	cc
 800d1ec:	460b      	movcc	r3, r1
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d204      	bcs.n	800d1fc <tcp_process+0x210>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	e00d      	b.n	800d218 <tcp_process+0x22c>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d200:	005b      	lsls	r3, r3, #1
 800d202:	f241 121c 	movw	r2, #4380	; 0x111c
 800d206:	4293      	cmp	r3, r2
 800d208:	d904      	bls.n	800d214 <tcp_process+0x228>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d20e:	005b      	lsls	r3, r3, #1
 800d210:	b29b      	uxth	r3, r3
 800d212:	e001      	b.n	800d218 <tcp_process+0x22c>
 800d214:	f241 131c 	movw	r3, #4380	; 0x111c
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d224:	2b00      	cmp	r3, #0
 800d226:	d106      	bne.n	800d236 <tcp_process+0x24a>
 800d228:	4b13      	ldr	r3, [pc, #76]	; (800d278 <tcp_process+0x28c>)
 800d22a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d22e:	491c      	ldr	r1, [pc, #112]	; (800d2a0 <tcp_process+0x2b4>)
 800d230:	4813      	ldr	r0, [pc, #76]	; (800d280 <tcp_process+0x294>)
 800d232:	f007 fc89 	bl	8014b48 <iprintf>
        --pcb->snd_queuelen;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d23c:	3b01      	subs	r3, #1
 800d23e:	b29a      	uxth	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d24a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d12a      	bne.n	800d2a8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d256:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d106      	bne.n	800d26c <tcp_process+0x280>
 800d25e:	4b06      	ldr	r3, [pc, #24]	; (800d278 <tcp_process+0x28c>)
 800d260:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d264:	490f      	ldr	r1, [pc, #60]	; (800d2a4 <tcp_process+0x2b8>)
 800d266:	4806      	ldr	r0, [pc, #24]	; (800d280 <tcp_process+0x294>)
 800d268:	f007 fc6e 	bl	8014b48 <iprintf>
          pcb->unsent = rseg->next;
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	66da      	str	r2, [r3, #108]	; 0x6c
 800d274:	e01c      	b.n	800d2b0 <tcp_process+0x2c4>
 800d276:	bf00      	nop
 800d278:	0801724c 	.word	0x0801724c
 800d27c:	08017484 	.word	0x08017484
 800d280:	08017298 	.word	0x08017298
 800d284:	2000e4e8 	.word	0x2000e4e8
 800d288:	2000e4e0 	.word	0x2000e4e0
 800d28c:	2000e4dc 	.word	0x2000e4dc
 800d290:	080174a0 	.word	0x080174a0
 800d294:	2000e4e9 	.word	0x2000e4e9
 800d298:	2000e4a4 	.word	0x2000e4a4
 800d29c:	2000e4cc 	.word	0x2000e4cc
 800d2a0:	080174c0 	.word	0x080174c0
 800d2a4:	080174d8 	.word	0x080174d8
        } else {
          pcb->unacked = rseg->next;
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d2b0:	69f8      	ldr	r0, [r7, #28]
 800d2b2:	f7fe fcac 	bl	800bc0e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d104      	bne.n	800d2c8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2c4:	861a      	strh	r2, [r3, #48]	; 0x30
 800d2c6:	e006      	b.n	800d2d6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00a      	beq.n	800d2f6 <tcp_process+0x30a>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	6910      	ldr	r0, [r2, #16]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	6879      	ldr	r1, [r7, #4]
 800d2ee:	4798      	blx	r3
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	76bb      	strb	r3, [r7, #26]
 800d2f4:	e001      	b.n	800d2fa <tcp_process+0x30e>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d2fa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d2fe:	f113 0f0d 	cmn.w	r3, #13
 800d302:	d102      	bne.n	800d30a <tcp_process+0x31e>
          return ERR_ABRT;
 800d304:	f06f 030c 	mvn.w	r3, #12
 800d308:	e250      	b.n	800d7ac <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	8b5b      	ldrh	r3, [r3, #26]
 800d30e:	f043 0302 	orr.w	r3, r3, #2
 800d312:	b29a      	uxth	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d318:	e23a      	b.n	800d790 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d31a:	4b98      	ldr	r3, [pc, #608]	; (800d57c <tcp_process+0x590>)
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	f003 0310 	and.w	r3, r3, #16
 800d322:	2b00      	cmp	r3, #0
 800d324:	f000 8234 	beq.w	800d790 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d328:	4b95      	ldr	r3, [pc, #596]	; (800d580 <tcp_process+0x594>)
 800d32a:	6819      	ldr	r1, [r3, #0]
 800d32c:	4b95      	ldr	r3, [pc, #596]	; (800d584 <tcp_process+0x598>)
 800d32e:	881b      	ldrh	r3, [r3, #0]
 800d330:	461a      	mov	r2, r3
 800d332:	4b95      	ldr	r3, [pc, #596]	; (800d588 <tcp_process+0x59c>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d338:	4b94      	ldr	r3, [pc, #592]	; (800d58c <tcp_process+0x5a0>)
 800d33a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d33c:	885b      	ldrh	r3, [r3, #2]
 800d33e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d340:	4a92      	ldr	r2, [pc, #584]	; (800d58c <tcp_process+0x5a0>)
 800d342:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d344:	8812      	ldrh	r2, [r2, #0]
 800d346:	b292      	uxth	r2, r2
 800d348:	9202      	str	r2, [sp, #8]
 800d34a:	9301      	str	r3, [sp, #4]
 800d34c:	4b90      	ldr	r3, [pc, #576]	; (800d590 <tcp_process+0x5a4>)
 800d34e:	9300      	str	r3, [sp, #0]
 800d350:	4b90      	ldr	r3, [pc, #576]	; (800d594 <tcp_process+0x5a8>)
 800d352:	4602      	mov	r2, r0
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f003 f8dd 	bl	8010514 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d360:	2b05      	cmp	r3, #5
 800d362:	f200 8215 	bhi.w	800d790 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f002 fea9 	bl	80100c4 <tcp_rexmit_rto>
      break;
 800d372:	e20d      	b.n	800d790 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d374:	4b81      	ldr	r3, [pc, #516]	; (800d57c <tcp_process+0x590>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	f003 0310 	and.w	r3, r3, #16
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f000 80a1 	beq.w	800d4c4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d382:	4b7f      	ldr	r3, [pc, #508]	; (800d580 <tcp_process+0x594>)
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d38a:	1ad3      	subs	r3, r2, r3
 800d38c:	3b01      	subs	r3, #1
 800d38e:	2b00      	cmp	r3, #0
 800d390:	db7e      	blt.n	800d490 <tcp_process+0x4a4>
 800d392:	4b7b      	ldr	r3, [pc, #492]	; (800d580 <tcp_process+0x594>)
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d39a:	1ad3      	subs	r3, r2, r3
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	dc77      	bgt.n	800d490 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2204      	movs	r2, #4
 800d3a4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d102      	bne.n	800d3b4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d3ae:	23fa      	movs	r3, #250	; 0xfa
 800d3b0:	76bb      	strb	r3, [r7, #26]
 800d3b2:	e01d      	b.n	800d3f0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3b8:	699b      	ldr	r3, [r3, #24]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d106      	bne.n	800d3cc <tcp_process+0x3e0>
 800d3be:	4b76      	ldr	r3, [pc, #472]	; (800d598 <tcp_process+0x5ac>)
 800d3c0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d3c4:	4975      	ldr	r1, [pc, #468]	; (800d59c <tcp_process+0x5b0>)
 800d3c6:	4876      	ldr	r0, [pc, #472]	; (800d5a0 <tcp_process+0x5b4>)
 800d3c8:	f007 fbbe 	bl	8014b48 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3d0:	699b      	ldr	r3, [r3, #24]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d00a      	beq.n	800d3ec <tcp_process+0x400>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3da:	699b      	ldr	r3, [r3, #24]
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	6910      	ldr	r0, [r2, #16]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	6879      	ldr	r1, [r7, #4]
 800d3e4:	4798      	blx	r3
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	76bb      	strb	r3, [r7, #26]
 800d3ea:	e001      	b.n	800d3f0 <tcp_process+0x404>
 800d3ec:	23f0      	movs	r3, #240	; 0xf0
 800d3ee:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d3f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d00a      	beq.n	800d40e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d3f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d3fc:	f113 0f0d 	cmn.w	r3, #13
 800d400:	d002      	beq.n	800d408 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f7fd fd5e 	bl	800aec4 <tcp_abort>
            }
            return ERR_ABRT;
 800d408:	f06f 030c 	mvn.w	r3, #12
 800d40c:	e1ce      	b.n	800d7ac <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 fae0 	bl	800d9d4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d414:	4b63      	ldr	r3, [pc, #396]	; (800d5a4 <tcp_process+0x5b8>)
 800d416:	881b      	ldrh	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d005      	beq.n	800d428 <tcp_process+0x43c>
            recv_acked--;
 800d41c:	4b61      	ldr	r3, [pc, #388]	; (800d5a4 <tcp_process+0x5b8>)
 800d41e:	881b      	ldrh	r3, [r3, #0]
 800d420:	3b01      	subs	r3, #1
 800d422:	b29a      	uxth	r2, r3
 800d424:	4b5f      	ldr	r3, [pc, #380]	; (800d5a4 <tcp_process+0x5b8>)
 800d426:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d42c:	009a      	lsls	r2, r3, #2
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d432:	005b      	lsls	r3, r3, #1
 800d434:	f241 111c 	movw	r1, #4380	; 0x111c
 800d438:	428b      	cmp	r3, r1
 800d43a:	bf38      	it	cc
 800d43c:	460b      	movcc	r3, r1
 800d43e:	429a      	cmp	r2, r3
 800d440:	d204      	bcs.n	800d44c <tcp_process+0x460>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	b29b      	uxth	r3, r3
 800d44a:	e00d      	b.n	800d468 <tcp_process+0x47c>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d450:	005b      	lsls	r3, r3, #1
 800d452:	f241 121c 	movw	r2, #4380	; 0x111c
 800d456:	4293      	cmp	r3, r2
 800d458:	d904      	bls.n	800d464 <tcp_process+0x478>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d45e:	005b      	lsls	r3, r3, #1
 800d460:	b29b      	uxth	r3, r3
 800d462:	e001      	b.n	800d468 <tcp_process+0x47c>
 800d464:	f241 131c 	movw	r3, #4380	; 0x111c
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d46e:	4b4e      	ldr	r3, [pc, #312]	; (800d5a8 <tcp_process+0x5bc>)
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	f003 0320 	and.w	r3, r3, #32
 800d476:	2b00      	cmp	r3, #0
 800d478:	d037      	beq.n	800d4ea <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	8b5b      	ldrh	r3, [r3, #26]
 800d47e:	f043 0302 	orr.w	r3, r3, #2
 800d482:	b29a      	uxth	r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2207      	movs	r2, #7
 800d48c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d48e:	e02c      	b.n	800d4ea <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d490:	4b3b      	ldr	r3, [pc, #236]	; (800d580 <tcp_process+0x594>)
 800d492:	6819      	ldr	r1, [r3, #0]
 800d494:	4b3b      	ldr	r3, [pc, #236]	; (800d584 <tcp_process+0x598>)
 800d496:	881b      	ldrh	r3, [r3, #0]
 800d498:	461a      	mov	r2, r3
 800d49a:	4b3b      	ldr	r3, [pc, #236]	; (800d588 <tcp_process+0x59c>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d4a0:	4b3a      	ldr	r3, [pc, #232]	; (800d58c <tcp_process+0x5a0>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4a4:	885b      	ldrh	r3, [r3, #2]
 800d4a6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d4a8:	4a38      	ldr	r2, [pc, #224]	; (800d58c <tcp_process+0x5a0>)
 800d4aa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4ac:	8812      	ldrh	r2, [r2, #0]
 800d4ae:	b292      	uxth	r2, r2
 800d4b0:	9202      	str	r2, [sp, #8]
 800d4b2:	9301      	str	r3, [sp, #4]
 800d4b4:	4b36      	ldr	r3, [pc, #216]	; (800d590 <tcp_process+0x5a4>)
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	4b36      	ldr	r3, [pc, #216]	; (800d594 <tcp_process+0x5a8>)
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f003 f829 	bl	8010514 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d4c2:	e167      	b.n	800d794 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d4c4:	4b2d      	ldr	r3, [pc, #180]	; (800d57c <tcp_process+0x590>)
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	f003 0302 	and.w	r3, r3, #2
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	f000 8161 	beq.w	800d794 <tcp_process+0x7a8>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d6:	1e5a      	subs	r2, r3, #1
 800d4d8:	4b2b      	ldr	r3, [pc, #172]	; (800d588 <tcp_process+0x59c>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	f040 8159 	bne.w	800d794 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f002 fe10 	bl	8010108 <tcp_rexmit>
      break;
 800d4e8:	e154      	b.n	800d794 <tcp_process+0x7a8>
 800d4ea:	e153      	b.n	800d794 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 fa71 	bl	800d9d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d4f2:	4b2d      	ldr	r3, [pc, #180]	; (800d5a8 <tcp_process+0x5bc>)
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	f003 0320 	and.w	r3, r3, #32
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	f000 814c 	beq.w	800d798 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	8b5b      	ldrh	r3, [r3, #26]
 800d504:	f043 0302 	orr.w	r3, r3, #2
 800d508:	b29a      	uxth	r2, r3
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2207      	movs	r2, #7
 800d512:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d514:	e140      	b.n	800d798 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 fa5c 	bl	800d9d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d51c:	4b22      	ldr	r3, [pc, #136]	; (800d5a8 <tcp_process+0x5bc>)
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	f003 0320 	and.w	r3, r3, #32
 800d524:	2b00      	cmp	r3, #0
 800d526:	d071      	beq.n	800d60c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d528:	4b14      	ldr	r3, [pc, #80]	; (800d57c <tcp_process+0x590>)
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	f003 0310 	and.w	r3, r3, #16
 800d530:	2b00      	cmp	r3, #0
 800d532:	d060      	beq.n	800d5f6 <tcp_process+0x60a>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d538:	4b11      	ldr	r3, [pc, #68]	; (800d580 <tcp_process+0x594>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d15a      	bne.n	800d5f6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d544:	2b00      	cmp	r3, #0
 800d546:	d156      	bne.n	800d5f6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	8b5b      	ldrh	r3, [r3, #26]
 800d54c:	f043 0302 	orr.w	r3, r3, #2
 800d550:	b29a      	uxth	r2, r3
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f7fe fdbc 	bl	800c0d4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d55c:	4b13      	ldr	r3, [pc, #76]	; (800d5ac <tcp_process+0x5c0>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	429a      	cmp	r2, r3
 800d564:	d105      	bne.n	800d572 <tcp_process+0x586>
 800d566:	4b11      	ldr	r3, [pc, #68]	; (800d5ac <tcp_process+0x5c0>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	4a0f      	ldr	r2, [pc, #60]	; (800d5ac <tcp_process+0x5c0>)
 800d56e:	6013      	str	r3, [r2, #0]
 800d570:	e02e      	b.n	800d5d0 <tcp_process+0x5e4>
 800d572:	4b0e      	ldr	r3, [pc, #56]	; (800d5ac <tcp_process+0x5c0>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	617b      	str	r3, [r7, #20]
 800d578:	e027      	b.n	800d5ca <tcp_process+0x5de>
 800d57a:	bf00      	nop
 800d57c:	2000e4e8 	.word	0x2000e4e8
 800d580:	2000e4e0 	.word	0x2000e4e0
 800d584:	2000e4e6 	.word	0x2000e4e6
 800d588:	2000e4dc 	.word	0x2000e4dc
 800d58c:	2000e4cc 	.word	0x2000e4cc
 800d590:	20005568 	.word	0x20005568
 800d594:	2000556c 	.word	0x2000556c
 800d598:	0801724c 	.word	0x0801724c
 800d59c:	080174ec 	.word	0x080174ec
 800d5a0:	08017298 	.word	0x08017298
 800d5a4:	2000e4e4 	.word	0x2000e4e4
 800d5a8:	2000e4e9 	.word	0x2000e4e9
 800d5ac:	2000e4b0 	.word	0x2000e4b0
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d104      	bne.n	800d5c4 <tcp_process+0x5d8>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	68da      	ldr	r2, [r3, #12]
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	60da      	str	r2, [r3, #12]
 800d5c2:	e005      	b.n	800d5d0 <tcp_process+0x5e4>
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	617b      	str	r3, [r7, #20]
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d1ef      	bne.n	800d5b0 <tcp_process+0x5c4>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	60da      	str	r2, [r3, #12]
 800d5d6:	4b77      	ldr	r3, [pc, #476]	; (800d7b4 <tcp_process+0x7c8>)
 800d5d8:	2201      	movs	r2, #1
 800d5da:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	220a      	movs	r2, #10
 800d5e0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d5e2:	4b75      	ldr	r3, [pc, #468]	; (800d7b8 <tcp_process+0x7cc>)
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	60da      	str	r2, [r3, #12]
 800d5ea:	4a73      	ldr	r2, [pc, #460]	; (800d7b8 <tcp_process+0x7cc>)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6013      	str	r3, [r2, #0]
 800d5f0:	f003 f952 	bl	8010898 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d5f4:	e0d2      	b.n	800d79c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	8b5b      	ldrh	r3, [r3, #26]
 800d5fa:	f043 0302 	orr.w	r3, r3, #2
 800d5fe:	b29a      	uxth	r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2208      	movs	r2, #8
 800d608:	751a      	strb	r2, [r3, #20]
      break;
 800d60a:	e0c7      	b.n	800d79c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d60c:	4b6b      	ldr	r3, [pc, #428]	; (800d7bc <tcp_process+0x7d0>)
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	f003 0310 	and.w	r3, r3, #16
 800d614:	2b00      	cmp	r3, #0
 800d616:	f000 80c1 	beq.w	800d79c <tcp_process+0x7b0>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d61e:	4b68      	ldr	r3, [pc, #416]	; (800d7c0 <tcp_process+0x7d4>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	429a      	cmp	r2, r3
 800d624:	f040 80ba 	bne.w	800d79c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f040 80b5 	bne.w	800d79c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2206      	movs	r2, #6
 800d636:	751a      	strb	r2, [r3, #20]
      break;
 800d638:	e0b0      	b.n	800d79c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 f9ca 	bl	800d9d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d640:	4b60      	ldr	r3, [pc, #384]	; (800d7c4 <tcp_process+0x7d8>)
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	f003 0320 	and.w	r3, r3, #32
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f000 80a9 	beq.w	800d7a0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	8b5b      	ldrh	r3, [r3, #26]
 800d652:	f043 0302 	orr.w	r3, r3, #2
 800d656:	b29a      	uxth	r2, r3
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f7fe fd39 	bl	800c0d4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d662:	4b59      	ldr	r3, [pc, #356]	; (800d7c8 <tcp_process+0x7dc>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d105      	bne.n	800d678 <tcp_process+0x68c>
 800d66c:	4b56      	ldr	r3, [pc, #344]	; (800d7c8 <tcp_process+0x7dc>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	4a55      	ldr	r2, [pc, #340]	; (800d7c8 <tcp_process+0x7dc>)
 800d674:	6013      	str	r3, [r2, #0]
 800d676:	e013      	b.n	800d6a0 <tcp_process+0x6b4>
 800d678:	4b53      	ldr	r3, [pc, #332]	; (800d7c8 <tcp_process+0x7dc>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	613b      	str	r3, [r7, #16]
 800d67e:	e00c      	b.n	800d69a <tcp_process+0x6ae>
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	68db      	ldr	r3, [r3, #12]
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	429a      	cmp	r2, r3
 800d688:	d104      	bne.n	800d694 <tcp_process+0x6a8>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	68da      	ldr	r2, [r3, #12]
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	60da      	str	r2, [r3, #12]
 800d692:	e005      	b.n	800d6a0 <tcp_process+0x6b4>
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	613b      	str	r3, [r7, #16]
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d1ef      	bne.n	800d680 <tcp_process+0x694>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	60da      	str	r2, [r3, #12]
 800d6a6:	4b43      	ldr	r3, [pc, #268]	; (800d7b4 <tcp_process+0x7c8>)
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	220a      	movs	r2, #10
 800d6b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d6b2:	4b41      	ldr	r3, [pc, #260]	; (800d7b8 <tcp_process+0x7cc>)
 800d6b4:	681a      	ldr	r2, [r3, #0]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	60da      	str	r2, [r3, #12]
 800d6ba:	4a3f      	ldr	r2, [pc, #252]	; (800d7b8 <tcp_process+0x7cc>)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6013      	str	r3, [r2, #0]
 800d6c0:	f003 f8ea 	bl	8010898 <tcp_timer_needed>
      }
      break;
 800d6c4:	e06c      	b.n	800d7a0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 f984 	bl	800d9d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d6cc:	4b3b      	ldr	r3, [pc, #236]	; (800d7bc <tcp_process+0x7d0>)
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	f003 0310 	and.w	r3, r3, #16
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d065      	beq.n	800d7a4 <tcp_process+0x7b8>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6dc:	4b38      	ldr	r3, [pc, #224]	; (800d7c0 <tcp_process+0x7d4>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d15f      	bne.n	800d7a4 <tcp_process+0x7b8>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d15b      	bne.n	800d7a4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f7fe fcf1 	bl	800c0d4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d6f2:	4b35      	ldr	r3, [pc, #212]	; (800d7c8 <tcp_process+0x7dc>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	687a      	ldr	r2, [r7, #4]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d105      	bne.n	800d708 <tcp_process+0x71c>
 800d6fc:	4b32      	ldr	r3, [pc, #200]	; (800d7c8 <tcp_process+0x7dc>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	4a31      	ldr	r2, [pc, #196]	; (800d7c8 <tcp_process+0x7dc>)
 800d704:	6013      	str	r3, [r2, #0]
 800d706:	e013      	b.n	800d730 <tcp_process+0x744>
 800d708:	4b2f      	ldr	r3, [pc, #188]	; (800d7c8 <tcp_process+0x7dc>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	60fb      	str	r3, [r7, #12]
 800d70e:	e00c      	b.n	800d72a <tcp_process+0x73e>
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	429a      	cmp	r2, r3
 800d718:	d104      	bne.n	800d724 <tcp_process+0x738>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	68da      	ldr	r2, [r3, #12]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	60da      	str	r2, [r3, #12]
 800d722:	e005      	b.n	800d730 <tcp_process+0x744>
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	60fb      	str	r3, [r7, #12]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d1ef      	bne.n	800d710 <tcp_process+0x724>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	60da      	str	r2, [r3, #12]
 800d736:	4b1f      	ldr	r3, [pc, #124]	; (800d7b4 <tcp_process+0x7c8>)
 800d738:	2201      	movs	r2, #1
 800d73a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	220a      	movs	r2, #10
 800d740:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d742:	4b1d      	ldr	r3, [pc, #116]	; (800d7b8 <tcp_process+0x7cc>)
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	60da      	str	r2, [r3, #12]
 800d74a:	4a1b      	ldr	r2, [pc, #108]	; (800d7b8 <tcp_process+0x7cc>)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6013      	str	r3, [r2, #0]
 800d750:	f003 f8a2 	bl	8010898 <tcp_timer_needed>
      }
      break;
 800d754:	e026      	b.n	800d7a4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 f93c 	bl	800d9d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d75c:	4b17      	ldr	r3, [pc, #92]	; (800d7bc <tcp_process+0x7d0>)
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	f003 0310 	and.w	r3, r3, #16
 800d764:	2b00      	cmp	r3, #0
 800d766:	d01f      	beq.n	800d7a8 <tcp_process+0x7bc>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d76c:	4b14      	ldr	r3, [pc, #80]	; (800d7c0 <tcp_process+0x7d4>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	429a      	cmp	r2, r3
 800d772:	d119      	bne.n	800d7a8 <tcp_process+0x7bc>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d115      	bne.n	800d7a8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d77c:	4b11      	ldr	r3, [pc, #68]	; (800d7c4 <tcp_process+0x7d8>)
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	f043 0310 	orr.w	r3, r3, #16
 800d784:	b2da      	uxtb	r2, r3
 800d786:	4b0f      	ldr	r3, [pc, #60]	; (800d7c4 <tcp_process+0x7d8>)
 800d788:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d78a:	e00d      	b.n	800d7a8 <tcp_process+0x7bc>
    default:
      break;
 800d78c:	bf00      	nop
 800d78e:	e00c      	b.n	800d7aa <tcp_process+0x7be>
      break;
 800d790:	bf00      	nop
 800d792:	e00a      	b.n	800d7aa <tcp_process+0x7be>
      break;
 800d794:	bf00      	nop
 800d796:	e008      	b.n	800d7aa <tcp_process+0x7be>
      break;
 800d798:	bf00      	nop
 800d79a:	e006      	b.n	800d7aa <tcp_process+0x7be>
      break;
 800d79c:	bf00      	nop
 800d79e:	e004      	b.n	800d7aa <tcp_process+0x7be>
      break;
 800d7a0:	bf00      	nop
 800d7a2:	e002      	b.n	800d7aa <tcp_process+0x7be>
      break;
 800d7a4:	bf00      	nop
 800d7a6:	e000      	b.n	800d7aa <tcp_process+0x7be>
      break;
 800d7a8:	bf00      	nop
  }
  return ERR_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3724      	adds	r7, #36	; 0x24
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd90      	pop	{r4, r7, pc}
 800d7b4:	2000e4b8 	.word	0x2000e4b8
 800d7b8:	2000e4b4 	.word	0x2000e4b4
 800d7bc:	2000e4e8 	.word	0x2000e4e8
 800d7c0:	2000e4e0 	.word	0x2000e4e0
 800d7c4:	2000e4e9 	.word	0x2000e4e9
 800d7c8:	2000e4b0 	.word	0x2000e4b0

0800d7cc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d7cc:	b590      	push	{r4, r7, lr}
 800d7ce:	b085      	sub	sp, #20
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d106      	bne.n	800d7ea <tcp_oos_insert_segment+0x1e>
 800d7dc:	4b3b      	ldr	r3, [pc, #236]	; (800d8cc <tcp_oos_insert_segment+0x100>)
 800d7de:	f240 421f 	movw	r2, #1055	; 0x41f
 800d7e2:	493b      	ldr	r1, [pc, #236]	; (800d8d0 <tcp_oos_insert_segment+0x104>)
 800d7e4:	483b      	ldr	r0, [pc, #236]	; (800d8d4 <tcp_oos_insert_segment+0x108>)
 800d7e6:	f007 f9af 	bl	8014b48 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	899b      	ldrh	r3, [r3, #12]
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7fb fa86 	bl	8008d04 <lwip_htons>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	f003 0301 	and.w	r3, r3, #1
 800d800:	2b00      	cmp	r3, #0
 800d802:	d028      	beq.n	800d856 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d804:	6838      	ldr	r0, [r7, #0]
 800d806:	f7fe f9ed 	bl	800bbe4 <tcp_segs_free>
    next = NULL;
 800d80a:	2300      	movs	r3, #0
 800d80c:	603b      	str	r3, [r7, #0]
 800d80e:	e056      	b.n	800d8be <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	68db      	ldr	r3, [r3, #12]
 800d814:	899b      	ldrh	r3, [r3, #12]
 800d816:	b29b      	uxth	r3, r3
 800d818:	4618      	mov	r0, r3
 800d81a:	f7fb fa73 	bl	8008d04 <lwip_htons>
 800d81e:	4603      	mov	r3, r0
 800d820:	b2db      	uxtb	r3, r3
 800d822:	f003 0301 	and.w	r3, r3, #1
 800d826:	2b00      	cmp	r3, #0
 800d828:	d00d      	beq.n	800d846 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	899b      	ldrh	r3, [r3, #12]
 800d830:	b29c      	uxth	r4, r3
 800d832:	2001      	movs	r0, #1
 800d834:	f7fb fa66 	bl	8008d04 <lwip_htons>
 800d838:	4603      	mov	r3, r0
 800d83a:	461a      	mov	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	68db      	ldr	r3, [r3, #12]
 800d840:	4322      	orrs	r2, r4
 800d842:	b292      	uxth	r2, r2
 800d844:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f7fe f9dc 	bl	800bc0e <tcp_seg_free>
    while (next &&
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00e      	beq.n	800d87a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	891b      	ldrh	r3, [r3, #8]
 800d860:	461a      	mov	r2, r3
 800d862:	4b1d      	ldr	r3, [pc, #116]	; (800d8d8 <tcp_oos_insert_segment+0x10c>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	441a      	add	r2, r3
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	6839      	ldr	r1, [r7, #0]
 800d870:	8909      	ldrh	r1, [r1, #8]
 800d872:	440b      	add	r3, r1
 800d874:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d876:	2b00      	cmp	r3, #0
 800d878:	daca      	bge.n	800d810 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d01e      	beq.n	800d8be <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	891b      	ldrh	r3, [r3, #8]
 800d884:	461a      	mov	r2, r3
 800d886:	4b14      	ldr	r3, [pc, #80]	; (800d8d8 <tcp_oos_insert_segment+0x10c>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	441a      	add	r2, r3
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d894:	2b00      	cmp	r3, #0
 800d896:	dd12      	ble.n	800d8be <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	b29a      	uxth	r2, r3
 800d8a0:	4b0d      	ldr	r3, [pc, #52]	; (800d8d8 <tcp_oos_insert_segment+0x10c>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	1ad3      	subs	r3, r2, r3
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	685a      	ldr	r2, [r3, #4]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	891b      	ldrh	r3, [r3, #8]
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	4610      	mov	r0, r2
 800d8ba:	f7fc fbf5 	bl	800a0a8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	683a      	ldr	r2, [r7, #0]
 800d8c2:	601a      	str	r2, [r3, #0]
}
 800d8c4:	bf00      	nop
 800d8c6:	3714      	adds	r7, #20
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd90      	pop	{r4, r7, pc}
 800d8cc:	0801724c 	.word	0x0801724c
 800d8d0:	0801750c 	.word	0x0801750c
 800d8d4:	08017298 	.word	0x08017298
 800d8d8:	2000e4dc 	.word	0x2000e4dc

0800d8dc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d8dc:	b5b0      	push	{r4, r5, r7, lr}
 800d8de:	b086      	sub	sp, #24
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	60f8      	str	r0, [r7, #12]
 800d8e4:	60b9      	str	r1, [r7, #8]
 800d8e6:	607a      	str	r2, [r7, #4]
 800d8e8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d8ea:	e03e      	b.n	800d96a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7fc fde2 	bl	800a4c4 <pbuf_clen>
 800d900:	4603      	mov	r3, r0
 800d902:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d90a:	8a7a      	ldrh	r2, [r7, #18]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d906      	bls.n	800d91e <tcp_free_acked_segments+0x42>
 800d910:	4b2a      	ldr	r3, [pc, #168]	; (800d9bc <tcp_free_acked_segments+0xe0>)
 800d912:	f240 4257 	movw	r2, #1111	; 0x457
 800d916:	492a      	ldr	r1, [pc, #168]	; (800d9c0 <tcp_free_acked_segments+0xe4>)
 800d918:	482a      	ldr	r0, [pc, #168]	; (800d9c4 <tcp_free_acked_segments+0xe8>)
 800d91a:	f007 f915 	bl	8014b48 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d924:	8a7b      	ldrh	r3, [r7, #18]
 800d926:	1ad3      	subs	r3, r2, r3
 800d928:	b29a      	uxth	r2, r3
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	891a      	ldrh	r2, [r3, #8]
 800d934:	4b24      	ldr	r3, [pc, #144]	; (800d9c8 <tcp_free_acked_segments+0xec>)
 800d936:	881b      	ldrh	r3, [r3, #0]
 800d938:	4413      	add	r3, r2
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	4b22      	ldr	r3, [pc, #136]	; (800d9c8 <tcp_free_acked_segments+0xec>)
 800d93e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d940:	6978      	ldr	r0, [r7, #20]
 800d942:	f7fe f964 	bl	800bc0e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d00c      	beq.n	800d96a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d109      	bne.n	800d96a <tcp_free_acked_segments+0x8e>
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d106      	bne.n	800d96a <tcp_free_acked_segments+0x8e>
 800d95c:	4b17      	ldr	r3, [pc, #92]	; (800d9bc <tcp_free_acked_segments+0xe0>)
 800d95e:	f240 4261 	movw	r2, #1121	; 0x461
 800d962:	491a      	ldr	r1, [pc, #104]	; (800d9cc <tcp_free_acked_segments+0xf0>)
 800d964:	4817      	ldr	r0, [pc, #92]	; (800d9c4 <tcp_free_acked_segments+0xe8>)
 800d966:	f007 f8ef 	bl	8014b48 <iprintf>
  while (seg_list != NULL &&
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d020      	beq.n	800d9b2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	4618      	mov	r0, r3
 800d978:	f7fb f9d9 	bl	8008d2e <lwip_htonl>
 800d97c:	4604      	mov	r4, r0
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	891b      	ldrh	r3, [r3, #8]
 800d982:	461d      	mov	r5, r3
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	899b      	ldrh	r3, [r3, #12]
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fb f9b9 	bl	8008d04 <lwip_htons>
 800d992:	4603      	mov	r3, r0
 800d994:	b2db      	uxtb	r3, r3
 800d996:	f003 0303 	and.w	r3, r3, #3
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d001      	beq.n	800d9a2 <tcp_free_acked_segments+0xc6>
 800d99e:	2301      	movs	r3, #1
 800d9a0:	e000      	b.n	800d9a4 <tcp_free_acked_segments+0xc8>
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	442b      	add	r3, r5
 800d9a6:	18e2      	adds	r2, r4, r3
 800d9a8:	4b09      	ldr	r3, [pc, #36]	; (800d9d0 <tcp_free_acked_segments+0xf4>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	dd9c      	ble.n	800d8ec <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d9b2:	68bb      	ldr	r3, [r7, #8]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3718      	adds	r7, #24
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bdb0      	pop	{r4, r5, r7, pc}
 800d9bc:	0801724c 	.word	0x0801724c
 800d9c0:	08017534 	.word	0x08017534
 800d9c4:	08017298 	.word	0x08017298
 800d9c8:	2000e4e4 	.word	0x2000e4e4
 800d9cc:	0801755c 	.word	0x0801755c
 800d9d0:	2000e4e0 	.word	0x2000e4e0

0800d9d4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d9d4:	b5b0      	push	{r4, r5, r7, lr}
 800d9d6:	b094      	sub	sp, #80	; 0x50
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d106      	bne.n	800d9f4 <tcp_receive+0x20>
 800d9e6:	4b91      	ldr	r3, [pc, #580]	; (800dc2c <tcp_receive+0x258>)
 800d9e8:	f240 427b 	movw	r2, #1147	; 0x47b
 800d9ec:	4990      	ldr	r1, [pc, #576]	; (800dc30 <tcp_receive+0x25c>)
 800d9ee:	4891      	ldr	r0, [pc, #580]	; (800dc34 <tcp_receive+0x260>)
 800d9f0:	f007 f8aa 	bl	8014b48 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	7d1b      	ldrb	r3, [r3, #20]
 800d9f8:	2b03      	cmp	r3, #3
 800d9fa:	d806      	bhi.n	800da0a <tcp_receive+0x36>
 800d9fc:	4b8b      	ldr	r3, [pc, #556]	; (800dc2c <tcp_receive+0x258>)
 800d9fe:	f240 427c 	movw	r2, #1148	; 0x47c
 800da02:	498d      	ldr	r1, [pc, #564]	; (800dc38 <tcp_receive+0x264>)
 800da04:	488b      	ldr	r0, [pc, #556]	; (800dc34 <tcp_receive+0x260>)
 800da06:	f007 f89f 	bl	8014b48 <iprintf>

  if (flags & TCP_ACK) {
 800da0a:	4b8c      	ldr	r3, [pc, #560]	; (800dc3c <tcp_receive+0x268>)
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	f003 0310 	and.w	r3, r3, #16
 800da12:	2b00      	cmp	r3, #0
 800da14:	f000 8264 	beq.w	800dee0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da1e:	461a      	mov	r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da24:	4413      	add	r3, r2
 800da26:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da2c:	4b84      	ldr	r3, [pc, #528]	; (800dc40 <tcp_receive+0x26c>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	2b00      	cmp	r3, #0
 800da34:	db1b      	blt.n	800da6e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da3a:	4b81      	ldr	r3, [pc, #516]	; (800dc40 <tcp_receive+0x26c>)
 800da3c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800da3e:	429a      	cmp	r2, r3
 800da40:	d106      	bne.n	800da50 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da46:	4b7f      	ldr	r3, [pc, #508]	; (800dc44 <tcp_receive+0x270>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	1ad3      	subs	r3, r2, r3
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	db0e      	blt.n	800da6e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da54:	4b7b      	ldr	r3, [pc, #492]	; (800dc44 <tcp_receive+0x270>)
 800da56:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800da58:	429a      	cmp	r2, r3
 800da5a:	d125      	bne.n	800daa8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800da5c:	4b7a      	ldr	r3, [pc, #488]	; (800dc48 <tcp_receive+0x274>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	89db      	ldrh	r3, [r3, #14]
 800da62:	b29a      	uxth	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d91c      	bls.n	800daa8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800da6e:	4b76      	ldr	r3, [pc, #472]	; (800dc48 <tcp_receive+0x274>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	89db      	ldrh	r3, [r3, #14]
 800da74:	b29a      	uxth	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da88:	429a      	cmp	r2, r3
 800da8a:	d205      	bcs.n	800da98 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800da98:	4b69      	ldr	r3, [pc, #420]	; (800dc40 <tcp_receive+0x26c>)
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800daa0:	4b68      	ldr	r3, [pc, #416]	; (800dc44 <tcp_receive+0x270>)
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800daa8:	4b66      	ldr	r3, [pc, #408]	; (800dc44 <tcp_receive+0x270>)
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	dc58      	bgt.n	800db68 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800dab6:	4b65      	ldr	r3, [pc, #404]	; (800dc4c <tcp_receive+0x278>)
 800dab8:	881b      	ldrh	r3, [r3, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d14b      	bne.n	800db56 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800dac8:	4413      	add	r3, r2
 800daca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dacc:	429a      	cmp	r2, r3
 800dace:	d142      	bne.n	800db56 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	db3d      	blt.n	800db56 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dade:	4b59      	ldr	r3, [pc, #356]	; (800dc44 <tcp_receive+0x270>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d137      	bne.n	800db56 <tcp_receive+0x182>
              found_dupack = 1;
 800dae6:	2301      	movs	r3, #1
 800dae8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800daf0:	2bff      	cmp	r3, #255	; 0xff
 800daf2:	d007      	beq.n	800db04 <tcp_receive+0x130>
                ++pcb->dupacks;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dafa:	3301      	adds	r3, #1
 800dafc:	b2da      	uxtb	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800db0a:	2b03      	cmp	r3, #3
 800db0c:	d91b      	bls.n	800db46 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db18:	4413      	add	r3, r2
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800db22:	429a      	cmp	r2, r3
 800db24:	d30a      	bcc.n	800db3c <tcp_receive+0x168>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db30:	4413      	add	r3, r2
 800db32:	b29a      	uxth	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800db3a:	e004      	b.n	800db46 <tcp_receive+0x172>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800db4c:	2b02      	cmp	r3, #2
 800db4e:	d902      	bls.n	800db56 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f002 fb45 	bl	80101e0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800db56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f040 8161 	bne.w	800de20 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2200      	movs	r2, #0
 800db62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db66:	e15b      	b.n	800de20 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db68:	4b36      	ldr	r3, [pc, #216]	; (800dc44 <tcp_receive+0x270>)
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db70:	1ad3      	subs	r3, r2, r3
 800db72:	3b01      	subs	r3, #1
 800db74:	2b00      	cmp	r3, #0
 800db76:	f2c0 814e 	blt.w	800de16 <tcp_receive+0x442>
 800db7a:	4b32      	ldr	r3, [pc, #200]	; (800dc44 <tcp_receive+0x270>)
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db82:	1ad3      	subs	r3, r2, r3
 800db84:	2b00      	cmp	r3, #0
 800db86:	f300 8146 	bgt.w	800de16 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	8b5b      	ldrh	r3, [r3, #26]
 800db8e:	f003 0304 	and.w	r3, r3, #4
 800db92:	2b00      	cmp	r3, #0
 800db94:	d010      	beq.n	800dbb8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	8b5b      	ldrh	r3, [r3, #26]
 800db9a:	f023 0304 	bic.w	r3, r3, #4
 800db9e:	b29a      	uxth	r2, r3
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dbc6:	10db      	asrs	r3, r3, #3
 800dbc8:	b21b      	sxth	r3, r3
 800dbca:	b29a      	uxth	r2, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	4413      	add	r3, r2
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	b21a      	sxth	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800dbe0:	4b18      	ldr	r3, [pc, #96]	; (800dc44 <tcp_receive+0x270>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	b29a      	uxth	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	1ad3      	subs	r3, r2, r3
 800dbee:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800dbf8:	4b12      	ldr	r3, [pc, #72]	; (800dc44 <tcp_receive+0x270>)
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	7d1b      	ldrb	r3, [r3, #20]
 800dc04:	2b03      	cmp	r3, #3
 800dc06:	f240 8097 	bls.w	800dd38 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d245      	bcs.n	800dca6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	8b5b      	ldrh	r3, [r3, #26]
 800dc1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d014      	beq.n	800dc50 <tcp_receive+0x27c>
 800dc26:	2301      	movs	r3, #1
 800dc28:	e013      	b.n	800dc52 <tcp_receive+0x27e>
 800dc2a:	bf00      	nop
 800dc2c:	0801724c 	.word	0x0801724c
 800dc30:	0801757c 	.word	0x0801757c
 800dc34:	08017298 	.word	0x08017298
 800dc38:	08017598 	.word	0x08017598
 800dc3c:	2000e4e8 	.word	0x2000e4e8
 800dc40:	2000e4dc 	.word	0x2000e4dc
 800dc44:	2000e4e0 	.word	0x2000e4e0
 800dc48:	2000e4cc 	.word	0x2000e4cc
 800dc4c:	2000e4e6 	.word	0x2000e4e6
 800dc50:	2302      	movs	r3, #2
 800dc52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800dc56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc60:	fb12 f303 	smulbb	r3, r2, r3
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	bf28      	it	cs
 800dc6c:	4613      	movcs	r3, r2
 800dc6e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dc78:	4413      	add	r3, r2
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d309      	bcc.n	800dc9a <tcp_receive+0x2c6>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dc8e:	4413      	add	r3, r2
 800dc90:	b29a      	uxth	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dc98:	e04e      	b.n	800dd38 <tcp_receive+0x364>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dca0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dca4:	e048      	b.n	800dd38 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dcac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dcae:	4413      	add	r3, r2
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d309      	bcc.n	800dcd0 <tcp_receive+0x2fc>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dcc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dcc4:	4413      	add	r3, r2
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dcce:	e004      	b.n	800dcda <tcp_receive+0x306>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d326      	bcc.n	800dd38 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dcf6:	1ad3      	subs	r3, r2, r3
 800dcf8:	b29a      	uxth	r2, r3
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd0a:	4413      	add	r3, r2
 800dd0c:	b29a      	uxth	r2, r3
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d30a      	bcc.n	800dd2e <tcp_receive+0x35a>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd22:	4413      	add	r3, r2
 800dd24:	b29a      	uxth	r2, r3
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dd2c:	e004      	b.n	800dd38 <tcp_receive+0x364>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd34:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd40:	4a98      	ldr	r2, [pc, #608]	; (800dfa4 <tcp_receive+0x5d0>)
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f7ff fdca 	bl	800d8dc <tcp_free_acked_segments>
 800dd48:	4602      	mov	r2, r0
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd56:	4a94      	ldr	r2, [pc, #592]	; (800dfa8 <tcp_receive+0x5d4>)
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f7ff fdbf 	bl	800d8dc <tcp_free_acked_segments>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d104      	bne.n	800dd76 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd72:	861a      	strh	r2, [r3, #48]	; 0x30
 800dd74:	e002      	b.n	800dd7c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d103      	bne.n	800dd92 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800dd98:	4b84      	ldr	r3, [pc, #528]	; (800dfac <tcp_receive+0x5d8>)
 800dd9a:	881b      	ldrh	r3, [r3, #0]
 800dd9c:	4413      	add	r3, r2
 800dd9e:	b29a      	uxth	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	8b5b      	ldrh	r3, [r3, #26]
 800ddaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d035      	beq.n	800de1e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d118      	bne.n	800ddec <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d00c      	beq.n	800dddc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7fa ffad 	bl	8008d2e <lwip_htonl>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	dc20      	bgt.n	800de1e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	8b5b      	ldrh	r3, [r3, #26]
 800dde0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dde4:	b29a      	uxth	r2, r3
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ddea:	e018      	b.n	800de1e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddf4:	68db      	ldr	r3, [r3, #12]
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7fa ff98 	bl	8008d2e <lwip_htonl>
 800ddfe:	4603      	mov	r3, r0
 800de00:	1ae3      	subs	r3, r4, r3
 800de02:	2b00      	cmp	r3, #0
 800de04:	dc0b      	bgt.n	800de1e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	8b5b      	ldrh	r3, [r3, #26]
 800de0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de0e:	b29a      	uxth	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800de14:	e003      	b.n	800de1e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f002 fbce 	bl	80105b8 <tcp_send_empty_ack>
 800de1c:	e000      	b.n	800de20 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800de1e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de24:	2b00      	cmp	r3, #0
 800de26:	d05b      	beq.n	800dee0 <tcp_receive+0x50c>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de2c:	4b60      	ldr	r3, [pc, #384]	; (800dfb0 <tcp_receive+0x5dc>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	1ad3      	subs	r3, r2, r3
 800de32:	2b00      	cmp	r3, #0
 800de34:	da54      	bge.n	800dee0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800de36:	4b5f      	ldr	r3, [pc, #380]	; (800dfb4 <tcp_receive+0x5e0>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	b29a      	uxth	r2, r3
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de40:	b29b      	uxth	r3, r3
 800de42:	1ad3      	subs	r3, r2, r3
 800de44:	b29b      	uxth	r3, r3
 800de46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800de4a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de54:	10db      	asrs	r3, r3, #3
 800de56:	b21b      	sxth	r3, r3
 800de58:	b29b      	uxth	r3, r3
 800de5a:	1ad3      	subs	r3, r2, r3
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de68:	b29a      	uxth	r2, r3
 800de6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800de6e:	4413      	add	r3, r2
 800de70:	b29b      	uxth	r3, r3
 800de72:	b21a      	sxth	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800de78:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	da05      	bge.n	800de8c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800de80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800de84:	425b      	negs	r3, r3
 800de86:	b29b      	uxth	r3, r3
 800de88:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800de8c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de96:	109b      	asrs	r3, r3, #2
 800de98:	b21b      	sxth	r3, r3
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	1ad3      	subs	r3, r2, r3
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800deaa:	b29a      	uxth	r2, r3
 800deac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800deb0:	4413      	add	r3, r2
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	b21a      	sxth	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dec0:	10db      	asrs	r3, r3, #3
 800dec2:	b21b      	sxth	r3, r3
 800dec4:	b29a      	uxth	r2, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800decc:	b29b      	uxth	r3, r3
 800dece:	4413      	add	r3, r2
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	b21a      	sxth	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2200      	movs	r2, #0
 800dede:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800dee0:	4b35      	ldr	r3, [pc, #212]	; (800dfb8 <tcp_receive+0x5e4>)
 800dee2:	881b      	ldrh	r3, [r3, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f000 84e2 	beq.w	800e8ae <tcp_receive+0xeda>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	7d1b      	ldrb	r3, [r3, #20]
 800deee:	2b06      	cmp	r3, #6
 800def0:	f200 84dd 	bhi.w	800e8ae <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800def8:	4b30      	ldr	r3, [pc, #192]	; (800dfbc <tcp_receive+0x5e8>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	1ad3      	subs	r3, r2, r3
 800defe:	3b01      	subs	r3, #1
 800df00:	2b00      	cmp	r3, #0
 800df02:	f2c0 808f 	blt.w	800e024 <tcp_receive+0x650>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df0a:	4b2b      	ldr	r3, [pc, #172]	; (800dfb8 <tcp_receive+0x5e4>)
 800df0c:	881b      	ldrh	r3, [r3, #0]
 800df0e:	4619      	mov	r1, r3
 800df10:	4b2a      	ldr	r3, [pc, #168]	; (800dfbc <tcp_receive+0x5e8>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	440b      	add	r3, r1
 800df16:	1ad3      	subs	r3, r2, r3
 800df18:	3301      	adds	r3, #1
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	f300 8082 	bgt.w	800e024 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800df20:	4b27      	ldr	r3, [pc, #156]	; (800dfc0 <tcp_receive+0x5ec>)
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df2a:	4b24      	ldr	r3, [pc, #144]	; (800dfbc <tcp_receive+0x5e8>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	1ad3      	subs	r3, r2, r3
 800df30:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800df32:	4b23      	ldr	r3, [pc, #140]	; (800dfc0 <tcp_receive+0x5ec>)
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d106      	bne.n	800df48 <tcp_receive+0x574>
 800df3a:	4b22      	ldr	r3, [pc, #136]	; (800dfc4 <tcp_receive+0x5f0>)
 800df3c:	f240 5294 	movw	r2, #1428	; 0x594
 800df40:	4921      	ldr	r1, [pc, #132]	; (800dfc8 <tcp_receive+0x5f4>)
 800df42:	4822      	ldr	r0, [pc, #136]	; (800dfcc <tcp_receive+0x5f8>)
 800df44:	f006 fe00 	bl	8014b48 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800df48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800df4e:	4293      	cmp	r3, r2
 800df50:	d906      	bls.n	800df60 <tcp_receive+0x58c>
 800df52:	4b1c      	ldr	r3, [pc, #112]	; (800dfc4 <tcp_receive+0x5f0>)
 800df54:	f240 5295 	movw	r2, #1429	; 0x595
 800df58:	491d      	ldr	r1, [pc, #116]	; (800dfd0 <tcp_receive+0x5fc>)
 800df5a:	481c      	ldr	r0, [pc, #112]	; (800dfcc <tcp_receive+0x5f8>)
 800df5c:	f006 fdf4 	bl	8014b48 <iprintf>
      off = (u16_t)off32;
 800df60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800df66:	4b16      	ldr	r3, [pc, #88]	; (800dfc0 <tcp_receive+0x5ec>)
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	891b      	ldrh	r3, [r3, #8]
 800df6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df70:	429a      	cmp	r2, r3
 800df72:	d906      	bls.n	800df82 <tcp_receive+0x5ae>
 800df74:	4b13      	ldr	r3, [pc, #76]	; (800dfc4 <tcp_receive+0x5f0>)
 800df76:	f240 5297 	movw	r2, #1431	; 0x597
 800df7a:	4916      	ldr	r1, [pc, #88]	; (800dfd4 <tcp_receive+0x600>)
 800df7c:	4813      	ldr	r0, [pc, #76]	; (800dfcc <tcp_receive+0x5f8>)
 800df7e:	f006 fde3 	bl	8014b48 <iprintf>
      inseg.len -= off;
 800df82:	4b0f      	ldr	r3, [pc, #60]	; (800dfc0 <tcp_receive+0x5ec>)
 800df84:	891a      	ldrh	r2, [r3, #8]
 800df86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df8a:	1ad3      	subs	r3, r2, r3
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	4b0c      	ldr	r3, [pc, #48]	; (800dfc0 <tcp_receive+0x5ec>)
 800df90:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800df92:	4b0b      	ldr	r3, [pc, #44]	; (800dfc0 <tcp_receive+0x5ec>)
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	891a      	ldrh	r2, [r3, #8]
 800df98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df9c:	1ad3      	subs	r3, r2, r3
 800df9e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800dfa0:	e02a      	b.n	800dff8 <tcp_receive+0x624>
 800dfa2:	bf00      	nop
 800dfa4:	080175b4 	.word	0x080175b4
 800dfa8:	080175bc 	.word	0x080175bc
 800dfac:	2000e4e4 	.word	0x2000e4e4
 800dfb0:	2000e4e0 	.word	0x2000e4e0
 800dfb4:	2000e4a4 	.word	0x2000e4a4
 800dfb8:	2000e4e6 	.word	0x2000e4e6
 800dfbc:	2000e4dc 	.word	0x2000e4dc
 800dfc0:	2000e4bc 	.word	0x2000e4bc
 800dfc4:	0801724c 	.word	0x0801724c
 800dfc8:	080175c4 	.word	0x080175c4
 800dfcc:	08017298 	.word	0x08017298
 800dfd0:	080175d4 	.word	0x080175d4
 800dfd4:	080175e4 	.word	0x080175e4
        off -= p->len;
 800dfd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfda:	895b      	ldrh	r3, [r3, #10]
 800dfdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dfe0:	1ad3      	subs	r3, r2, r3
 800dfe2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800dfe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfe8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dfea:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800dfec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfee:	2200      	movs	r2, #0
 800dff0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800dff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800dff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dffa:	895b      	ldrh	r3, [r3, #10]
 800dffc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e000:	429a      	cmp	r2, r3
 800e002:	d8e9      	bhi.n	800dfd8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e004:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e008:	4619      	mov	r1, r3
 800e00a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e00c:	f7fc f94c 	bl	800a2a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e014:	4a91      	ldr	r2, [pc, #580]	; (800e25c <tcp_receive+0x888>)
 800e016:	6013      	str	r3, [r2, #0]
 800e018:	4b91      	ldr	r3, [pc, #580]	; (800e260 <tcp_receive+0x88c>)
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	4a8f      	ldr	r2, [pc, #572]	; (800e25c <tcp_receive+0x888>)
 800e01e:	6812      	ldr	r2, [r2, #0]
 800e020:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e022:	e00d      	b.n	800e040 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e024:	4b8d      	ldr	r3, [pc, #564]	; (800e25c <tcp_receive+0x888>)
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02c:	1ad3      	subs	r3, r2, r3
 800e02e:	2b00      	cmp	r3, #0
 800e030:	da06      	bge.n	800e040 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	8b5b      	ldrh	r3, [r3, #26]
 800e036:	f043 0302 	orr.w	r3, r3, #2
 800e03a:	b29a      	uxth	r2, r3
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e040:	4b86      	ldr	r3, [pc, #536]	; (800e25c <tcp_receive+0x888>)
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e048:	1ad3      	subs	r3, r2, r3
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	f2c0 842a 	blt.w	800e8a4 <tcp_receive+0xed0>
 800e050:	4b82      	ldr	r3, [pc, #520]	; (800e25c <tcp_receive+0x888>)
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e058:	6879      	ldr	r1, [r7, #4]
 800e05a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e05c:	440b      	add	r3, r1
 800e05e:	1ad3      	subs	r3, r2, r3
 800e060:	3301      	adds	r3, #1
 800e062:	2b00      	cmp	r3, #0
 800e064:	f300 841e 	bgt.w	800e8a4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e06c:	4b7b      	ldr	r3, [pc, #492]	; (800e25c <tcp_receive+0x888>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	429a      	cmp	r2, r3
 800e072:	f040 829a 	bne.w	800e5aa <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e076:	4b7a      	ldr	r3, [pc, #488]	; (800e260 <tcp_receive+0x88c>)
 800e078:	891c      	ldrh	r4, [r3, #8]
 800e07a:	4b79      	ldr	r3, [pc, #484]	; (800e260 <tcp_receive+0x88c>)
 800e07c:	68db      	ldr	r3, [r3, #12]
 800e07e:	899b      	ldrh	r3, [r3, #12]
 800e080:	b29b      	uxth	r3, r3
 800e082:	4618      	mov	r0, r3
 800e084:	f7fa fe3e 	bl	8008d04 <lwip_htons>
 800e088:	4603      	mov	r3, r0
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	f003 0303 	and.w	r3, r3, #3
 800e090:	2b00      	cmp	r3, #0
 800e092:	d001      	beq.n	800e098 <tcp_receive+0x6c4>
 800e094:	2301      	movs	r3, #1
 800e096:	e000      	b.n	800e09a <tcp_receive+0x6c6>
 800e098:	2300      	movs	r3, #0
 800e09a:	4423      	add	r3, r4
 800e09c:	b29a      	uxth	r2, r3
 800e09e:	4b71      	ldr	r3, [pc, #452]	; (800e264 <tcp_receive+0x890>)
 800e0a0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e0a6:	4b6f      	ldr	r3, [pc, #444]	; (800e264 <tcp_receive+0x890>)
 800e0a8:	881b      	ldrh	r3, [r3, #0]
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d275      	bcs.n	800e19a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e0ae:	4b6c      	ldr	r3, [pc, #432]	; (800e260 <tcp_receive+0x88c>)
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	899b      	ldrh	r3, [r3, #12]
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7fa fe24 	bl	8008d04 <lwip_htons>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	f003 0301 	and.w	r3, r3, #1
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d01f      	beq.n	800e108 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e0c8:	4b65      	ldr	r3, [pc, #404]	; (800e260 <tcp_receive+0x88c>)
 800e0ca:	68db      	ldr	r3, [r3, #12]
 800e0cc:	899b      	ldrh	r3, [r3, #12]
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	b21b      	sxth	r3, r3
 800e0d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e0d6:	b21c      	sxth	r4, r3
 800e0d8:	4b61      	ldr	r3, [pc, #388]	; (800e260 <tcp_receive+0x88c>)
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	899b      	ldrh	r3, [r3, #12]
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7fa fe0f 	bl	8008d04 <lwip_htons>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fa fe06 	bl	8008d04 <lwip_htons>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	b21b      	sxth	r3, r3
 800e0fc:	4323      	orrs	r3, r4
 800e0fe:	b21a      	sxth	r2, r3
 800e100:	4b57      	ldr	r3, [pc, #348]	; (800e260 <tcp_receive+0x88c>)
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	b292      	uxth	r2, r2
 800e106:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e10c:	4b54      	ldr	r3, [pc, #336]	; (800e260 <tcp_receive+0x88c>)
 800e10e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e110:	4b53      	ldr	r3, [pc, #332]	; (800e260 <tcp_receive+0x88c>)
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	899b      	ldrh	r3, [r3, #12]
 800e116:	b29b      	uxth	r3, r3
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fa fdf3 	bl	8008d04 <lwip_htons>
 800e11e:	4603      	mov	r3, r0
 800e120:	b2db      	uxtb	r3, r3
 800e122:	f003 0302 	and.w	r3, r3, #2
 800e126:	2b00      	cmp	r3, #0
 800e128:	d005      	beq.n	800e136 <tcp_receive+0x762>
            inseg.len -= 1;
 800e12a:	4b4d      	ldr	r3, [pc, #308]	; (800e260 <tcp_receive+0x88c>)
 800e12c:	891b      	ldrh	r3, [r3, #8]
 800e12e:	3b01      	subs	r3, #1
 800e130:	b29a      	uxth	r2, r3
 800e132:	4b4b      	ldr	r3, [pc, #300]	; (800e260 <tcp_receive+0x88c>)
 800e134:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e136:	4b4a      	ldr	r3, [pc, #296]	; (800e260 <tcp_receive+0x88c>)
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	4a49      	ldr	r2, [pc, #292]	; (800e260 <tcp_receive+0x88c>)
 800e13c:	8912      	ldrh	r2, [r2, #8]
 800e13e:	4611      	mov	r1, r2
 800e140:	4618      	mov	r0, r3
 800e142:	f7fb ffb1 	bl	800a0a8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e146:	4b46      	ldr	r3, [pc, #280]	; (800e260 <tcp_receive+0x88c>)
 800e148:	891c      	ldrh	r4, [r3, #8]
 800e14a:	4b45      	ldr	r3, [pc, #276]	; (800e260 <tcp_receive+0x88c>)
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	899b      	ldrh	r3, [r3, #12]
 800e150:	b29b      	uxth	r3, r3
 800e152:	4618      	mov	r0, r3
 800e154:	f7fa fdd6 	bl	8008d04 <lwip_htons>
 800e158:	4603      	mov	r3, r0
 800e15a:	b2db      	uxtb	r3, r3
 800e15c:	f003 0303 	and.w	r3, r3, #3
 800e160:	2b00      	cmp	r3, #0
 800e162:	d001      	beq.n	800e168 <tcp_receive+0x794>
 800e164:	2301      	movs	r3, #1
 800e166:	e000      	b.n	800e16a <tcp_receive+0x796>
 800e168:	2300      	movs	r3, #0
 800e16a:	4423      	add	r3, r4
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	4b3d      	ldr	r3, [pc, #244]	; (800e264 <tcp_receive+0x890>)
 800e170:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e172:	4b3c      	ldr	r3, [pc, #240]	; (800e264 <tcp_receive+0x890>)
 800e174:	881b      	ldrh	r3, [r3, #0]
 800e176:	461a      	mov	r2, r3
 800e178:	4b38      	ldr	r3, [pc, #224]	; (800e25c <tcp_receive+0x888>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	441a      	add	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e182:	6879      	ldr	r1, [r7, #4]
 800e184:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e186:	440b      	add	r3, r1
 800e188:	429a      	cmp	r2, r3
 800e18a:	d006      	beq.n	800e19a <tcp_receive+0x7c6>
 800e18c:	4b36      	ldr	r3, [pc, #216]	; (800e268 <tcp_receive+0x894>)
 800e18e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e192:	4936      	ldr	r1, [pc, #216]	; (800e26c <tcp_receive+0x898>)
 800e194:	4836      	ldr	r0, [pc, #216]	; (800e270 <tcp_receive+0x89c>)
 800e196:	f006 fcd7 	bl	8014b48 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	f000 80e7 	beq.w	800e372 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e1a4:	4b2e      	ldr	r3, [pc, #184]	; (800e260 <tcp_receive+0x88c>)
 800e1a6:	68db      	ldr	r3, [r3, #12]
 800e1a8:	899b      	ldrh	r3, [r3, #12]
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7fa fda9 	bl	8008d04 <lwip_htons>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	b2db      	uxtb	r3, r3
 800e1b6:	f003 0301 	and.w	r3, r3, #1
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d010      	beq.n	800e1e0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e1be:	e00a      	b.n	800e1d6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1c4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e1d0:	68f8      	ldr	r0, [r7, #12]
 800e1d2:	f7fd fd1c 	bl	800bc0e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d1f0      	bne.n	800e1c0 <tcp_receive+0x7ec>
 800e1de:	e0c8      	b.n	800e372 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e1e6:	e052      	b.n	800e28e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	899b      	ldrh	r3, [r3, #12]
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7fa fd87 	bl	8008d04 <lwip_htons>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	f003 0301 	and.w	r3, r3, #1
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d03d      	beq.n	800e27e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e202:	4b17      	ldr	r3, [pc, #92]	; (800e260 <tcp_receive+0x88c>)
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	899b      	ldrh	r3, [r3, #12]
 800e208:	b29b      	uxth	r3, r3
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fa fd7a 	bl	8008d04 <lwip_htons>
 800e210:	4603      	mov	r3, r0
 800e212:	b2db      	uxtb	r3, r3
 800e214:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d130      	bne.n	800e27e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e21c:	4b10      	ldr	r3, [pc, #64]	; (800e260 <tcp_receive+0x88c>)
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	899b      	ldrh	r3, [r3, #12]
 800e222:	b29c      	uxth	r4, r3
 800e224:	2001      	movs	r0, #1
 800e226:	f7fa fd6d 	bl	8008d04 <lwip_htons>
 800e22a:	4603      	mov	r3, r0
 800e22c:	461a      	mov	r2, r3
 800e22e:	4b0c      	ldr	r3, [pc, #48]	; (800e260 <tcp_receive+0x88c>)
 800e230:	68db      	ldr	r3, [r3, #12]
 800e232:	4322      	orrs	r2, r4
 800e234:	b292      	uxth	r2, r2
 800e236:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e238:	4b09      	ldr	r3, [pc, #36]	; (800e260 <tcp_receive+0x88c>)
 800e23a:	891c      	ldrh	r4, [r3, #8]
 800e23c:	4b08      	ldr	r3, [pc, #32]	; (800e260 <tcp_receive+0x88c>)
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	899b      	ldrh	r3, [r3, #12]
 800e242:	b29b      	uxth	r3, r3
 800e244:	4618      	mov	r0, r3
 800e246:	f7fa fd5d 	bl	8008d04 <lwip_htons>
 800e24a:	4603      	mov	r3, r0
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	f003 0303 	and.w	r3, r3, #3
 800e252:	2b00      	cmp	r3, #0
 800e254:	d00e      	beq.n	800e274 <tcp_receive+0x8a0>
 800e256:	2301      	movs	r3, #1
 800e258:	e00d      	b.n	800e276 <tcp_receive+0x8a2>
 800e25a:	bf00      	nop
 800e25c:	2000e4dc 	.word	0x2000e4dc
 800e260:	2000e4bc 	.word	0x2000e4bc
 800e264:	2000e4e6 	.word	0x2000e4e6
 800e268:	0801724c 	.word	0x0801724c
 800e26c:	080175f4 	.word	0x080175f4
 800e270:	08017298 	.word	0x08017298
 800e274:	2300      	movs	r3, #0
 800e276:	4423      	add	r3, r4
 800e278:	b29a      	uxth	r2, r3
 800e27a:	4b98      	ldr	r3, [pc, #608]	; (800e4dc <tcp_receive+0xb08>)
 800e27c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e280:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e288:	6938      	ldr	r0, [r7, #16]
 800e28a:	f7fd fcc0 	bl	800bc0e <tcp_seg_free>
            while (next &&
 800e28e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e290:	2b00      	cmp	r3, #0
 800e292:	d00e      	beq.n	800e2b2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e294:	4b91      	ldr	r3, [pc, #580]	; (800e4dc <tcp_receive+0xb08>)
 800e296:	881b      	ldrh	r3, [r3, #0]
 800e298:	461a      	mov	r2, r3
 800e29a:	4b91      	ldr	r3, [pc, #580]	; (800e4e0 <tcp_receive+0xb0c>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	441a      	add	r2, r3
 800e2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e2a8:	8909      	ldrh	r1, [r1, #8]
 800e2aa:	440b      	add	r3, r1
 800e2ac:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	da9a      	bge.n	800e1e8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d059      	beq.n	800e36c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e2b8:	4b88      	ldr	r3, [pc, #544]	; (800e4dc <tcp_receive+0xb08>)
 800e2ba:	881b      	ldrh	r3, [r3, #0]
 800e2bc:	461a      	mov	r2, r3
 800e2be:	4b88      	ldr	r3, [pc, #544]	; (800e4e0 <tcp_receive+0xb0c>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	441a      	add	r2, r3
 800e2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2c6:	68db      	ldr	r3, [r3, #12]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	dd4d      	ble.n	800e36c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	b29a      	uxth	r2, r3
 800e2d8:	4b81      	ldr	r3, [pc, #516]	; (800e4e0 <tcp_receive+0xb0c>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	1ad3      	subs	r3, r2, r3
 800e2e0:	b29a      	uxth	r2, r3
 800e2e2:	4b80      	ldr	r3, [pc, #512]	; (800e4e4 <tcp_receive+0xb10>)
 800e2e4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e2e6:	4b7f      	ldr	r3, [pc, #508]	; (800e4e4 <tcp_receive+0xb10>)
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	899b      	ldrh	r3, [r3, #12]
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7fa fd08 	bl	8008d04 <lwip_htons>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	f003 0302 	and.w	r3, r3, #2
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d005      	beq.n	800e30c <tcp_receive+0x938>
                inseg.len -= 1;
 800e300:	4b78      	ldr	r3, [pc, #480]	; (800e4e4 <tcp_receive+0xb10>)
 800e302:	891b      	ldrh	r3, [r3, #8]
 800e304:	3b01      	subs	r3, #1
 800e306:	b29a      	uxth	r2, r3
 800e308:	4b76      	ldr	r3, [pc, #472]	; (800e4e4 <tcp_receive+0xb10>)
 800e30a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e30c:	4b75      	ldr	r3, [pc, #468]	; (800e4e4 <tcp_receive+0xb10>)
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	4a74      	ldr	r2, [pc, #464]	; (800e4e4 <tcp_receive+0xb10>)
 800e312:	8912      	ldrh	r2, [r2, #8]
 800e314:	4611      	mov	r1, r2
 800e316:	4618      	mov	r0, r3
 800e318:	f7fb fec6 	bl	800a0a8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e31c:	4b71      	ldr	r3, [pc, #452]	; (800e4e4 <tcp_receive+0xb10>)
 800e31e:	891c      	ldrh	r4, [r3, #8]
 800e320:	4b70      	ldr	r3, [pc, #448]	; (800e4e4 <tcp_receive+0xb10>)
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	899b      	ldrh	r3, [r3, #12]
 800e326:	b29b      	uxth	r3, r3
 800e328:	4618      	mov	r0, r3
 800e32a:	f7fa fceb 	bl	8008d04 <lwip_htons>
 800e32e:	4603      	mov	r3, r0
 800e330:	b2db      	uxtb	r3, r3
 800e332:	f003 0303 	and.w	r3, r3, #3
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <tcp_receive+0x96a>
 800e33a:	2301      	movs	r3, #1
 800e33c:	e000      	b.n	800e340 <tcp_receive+0x96c>
 800e33e:	2300      	movs	r3, #0
 800e340:	4423      	add	r3, r4
 800e342:	b29a      	uxth	r2, r3
 800e344:	4b65      	ldr	r3, [pc, #404]	; (800e4dc <tcp_receive+0xb08>)
 800e346:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e348:	4b64      	ldr	r3, [pc, #400]	; (800e4dc <tcp_receive+0xb08>)
 800e34a:	881b      	ldrh	r3, [r3, #0]
 800e34c:	461a      	mov	r2, r3
 800e34e:	4b64      	ldr	r3, [pc, #400]	; (800e4e0 <tcp_receive+0xb0c>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	441a      	add	r2, r3
 800e354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d006      	beq.n	800e36c <tcp_receive+0x998>
 800e35e:	4b62      	ldr	r3, [pc, #392]	; (800e4e8 <tcp_receive+0xb14>)
 800e360:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e364:	4961      	ldr	r1, [pc, #388]	; (800e4ec <tcp_receive+0xb18>)
 800e366:	4862      	ldr	r0, [pc, #392]	; (800e4f0 <tcp_receive+0xb1c>)
 800e368:	f006 fbee 	bl	8014b48 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e370:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e372:	4b5a      	ldr	r3, [pc, #360]	; (800e4dc <tcp_receive+0xb08>)
 800e374:	881b      	ldrh	r3, [r3, #0]
 800e376:	461a      	mov	r2, r3
 800e378:	4b59      	ldr	r3, [pc, #356]	; (800e4e0 <tcp_receive+0xb0c>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	441a      	add	r2, r3
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e386:	4b55      	ldr	r3, [pc, #340]	; (800e4dc <tcp_receive+0xb08>)
 800e388:	881b      	ldrh	r3, [r3, #0]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d206      	bcs.n	800e39c <tcp_receive+0x9c8>
 800e38e:	4b56      	ldr	r3, [pc, #344]	; (800e4e8 <tcp_receive+0xb14>)
 800e390:	f240 6207 	movw	r2, #1543	; 0x607
 800e394:	4957      	ldr	r1, [pc, #348]	; (800e4f4 <tcp_receive+0xb20>)
 800e396:	4856      	ldr	r0, [pc, #344]	; (800e4f0 <tcp_receive+0xb1c>)
 800e398:	f006 fbd6 	bl	8014b48 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e3a0:	4b4e      	ldr	r3, [pc, #312]	; (800e4dc <tcp_receive+0xb08>)
 800e3a2:	881b      	ldrh	r3, [r3, #0]
 800e3a4:	1ad3      	subs	r3, r2, r3
 800e3a6:	b29a      	uxth	r2, r3
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f7fc ff09 	bl	800b1c4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e3b2:	4b4c      	ldr	r3, [pc, #304]	; (800e4e4 <tcp_receive+0xb10>)
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	891b      	ldrh	r3, [r3, #8]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d006      	beq.n	800e3ca <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800e3bc:	4b49      	ldr	r3, [pc, #292]	; (800e4e4 <tcp_receive+0xb10>)
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	4a4d      	ldr	r2, [pc, #308]	; (800e4f8 <tcp_receive+0xb24>)
 800e3c2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e3c4:	4b47      	ldr	r3, [pc, #284]	; (800e4e4 <tcp_receive+0xb10>)
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e3ca:	4b46      	ldr	r3, [pc, #280]	; (800e4e4 <tcp_receive+0xb10>)
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	899b      	ldrh	r3, [r3, #12]
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fa fc96 	bl	8008d04 <lwip_htons>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	f003 0301 	and.w	r3, r3, #1
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f000 80b8 	beq.w	800e556 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e3e6:	4b45      	ldr	r3, [pc, #276]	; (800e4fc <tcp_receive+0xb28>)
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	f043 0320 	orr.w	r3, r3, #32
 800e3ee:	b2da      	uxtb	r2, r3
 800e3f0:	4b42      	ldr	r3, [pc, #264]	; (800e4fc <tcp_receive+0xb28>)
 800e3f2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e3f4:	e0af      	b.n	800e556 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3fa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	4a36      	ldr	r2, [pc, #216]	; (800e4e0 <tcp_receive+0xb0c>)
 800e406:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	891b      	ldrh	r3, [r3, #8]
 800e40c:	461c      	mov	r4, r3
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	68db      	ldr	r3, [r3, #12]
 800e412:	899b      	ldrh	r3, [r3, #12]
 800e414:	b29b      	uxth	r3, r3
 800e416:	4618      	mov	r0, r3
 800e418:	f7fa fc74 	bl	8008d04 <lwip_htons>
 800e41c:	4603      	mov	r3, r0
 800e41e:	b2db      	uxtb	r3, r3
 800e420:	f003 0303 	and.w	r3, r3, #3
 800e424:	2b00      	cmp	r3, #0
 800e426:	d001      	beq.n	800e42c <tcp_receive+0xa58>
 800e428:	2301      	movs	r3, #1
 800e42a:	e000      	b.n	800e42e <tcp_receive+0xa5a>
 800e42c:	2300      	movs	r3, #0
 800e42e:	191a      	adds	r2, r3, r4
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e434:	441a      	add	r2, r3
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e43e:	461c      	mov	r4, r3
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	891b      	ldrh	r3, [r3, #8]
 800e444:	461d      	mov	r5, r3
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	899b      	ldrh	r3, [r3, #12]
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	4618      	mov	r0, r3
 800e450:	f7fa fc58 	bl	8008d04 <lwip_htons>
 800e454:	4603      	mov	r3, r0
 800e456:	b2db      	uxtb	r3, r3
 800e458:	f003 0303 	and.w	r3, r3, #3
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d001      	beq.n	800e464 <tcp_receive+0xa90>
 800e460:	2301      	movs	r3, #1
 800e462:	e000      	b.n	800e466 <tcp_receive+0xa92>
 800e464:	2300      	movs	r3, #0
 800e466:	442b      	add	r3, r5
 800e468:	429c      	cmp	r4, r3
 800e46a:	d206      	bcs.n	800e47a <tcp_receive+0xaa6>
 800e46c:	4b1e      	ldr	r3, [pc, #120]	; (800e4e8 <tcp_receive+0xb14>)
 800e46e:	f240 622b 	movw	r2, #1579	; 0x62b
 800e472:	4923      	ldr	r1, [pc, #140]	; (800e500 <tcp_receive+0xb2c>)
 800e474:	481e      	ldr	r0, [pc, #120]	; (800e4f0 <tcp_receive+0xb1c>)
 800e476:	f006 fb67 	bl	8014b48 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	891b      	ldrh	r3, [r3, #8]
 800e47e:	461c      	mov	r4, r3
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	68db      	ldr	r3, [r3, #12]
 800e484:	899b      	ldrh	r3, [r3, #12]
 800e486:	b29b      	uxth	r3, r3
 800e488:	4618      	mov	r0, r3
 800e48a:	f7fa fc3b 	bl	8008d04 <lwip_htons>
 800e48e:	4603      	mov	r3, r0
 800e490:	b2db      	uxtb	r3, r3
 800e492:	f003 0303 	and.w	r3, r3, #3
 800e496:	2b00      	cmp	r3, #0
 800e498:	d001      	beq.n	800e49e <tcp_receive+0xaca>
 800e49a:	2301      	movs	r3, #1
 800e49c:	e000      	b.n	800e4a0 <tcp_receive+0xacc>
 800e49e:	2300      	movs	r3, #0
 800e4a0:	1919      	adds	r1, r3, r4
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e4a6:	b28b      	uxth	r3, r1
 800e4a8:	1ad3      	subs	r3, r2, r3
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f7fc fe87 	bl	800b1c4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	891b      	ldrh	r3, [r3, #8]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d028      	beq.n	800e512 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e4c0:	4b0d      	ldr	r3, [pc, #52]	; (800e4f8 <tcp_receive+0xb24>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d01d      	beq.n	800e504 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e4c8:	4b0b      	ldr	r3, [pc, #44]	; (800e4f8 <tcp_receive+0xb24>)
 800e4ca:	681a      	ldr	r2, [r3, #0]
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	4610      	mov	r0, r2
 800e4d4:	f7fc f830 	bl	800a538 <pbuf_cat>
 800e4d8:	e018      	b.n	800e50c <tcp_receive+0xb38>
 800e4da:	bf00      	nop
 800e4dc:	2000e4e6 	.word	0x2000e4e6
 800e4e0:	2000e4dc 	.word	0x2000e4dc
 800e4e4:	2000e4bc 	.word	0x2000e4bc
 800e4e8:	0801724c 	.word	0x0801724c
 800e4ec:	0801762c 	.word	0x0801762c
 800e4f0:	08017298 	.word	0x08017298
 800e4f4:	08017668 	.word	0x08017668
 800e4f8:	2000e4ec 	.word	0x2000e4ec
 800e4fc:	2000e4e9 	.word	0x2000e4e9
 800e500:	08017688 	.word	0x08017688
            } else {
              recv_data = cseg->p;
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	4a70      	ldr	r2, [pc, #448]	; (800e6cc <tcp_receive+0xcf8>)
 800e50a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	2200      	movs	r2, #0
 800e510:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	68db      	ldr	r3, [r3, #12]
 800e516:	899b      	ldrh	r3, [r3, #12]
 800e518:	b29b      	uxth	r3, r3
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fa fbf2 	bl	8008d04 <lwip_htons>
 800e520:	4603      	mov	r3, r0
 800e522:	b2db      	uxtb	r3, r3
 800e524:	f003 0301 	and.w	r3, r3, #1
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d00d      	beq.n	800e548 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e52c:	4b68      	ldr	r3, [pc, #416]	; (800e6d0 <tcp_receive+0xcfc>)
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	f043 0320 	orr.w	r3, r3, #32
 800e534:	b2da      	uxtb	r2, r3
 800e536:	4b66      	ldr	r3, [pc, #408]	; (800e6d0 <tcp_receive+0xcfc>)
 800e538:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	7d1b      	ldrb	r3, [r3, #20]
 800e53e:	2b04      	cmp	r3, #4
 800e540:	d102      	bne.n	800e548 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2207      	movs	r2, #7
 800e546:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e550:	68b8      	ldr	r0, [r7, #8]
 800e552:	f7fd fb5c 	bl	800bc0e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d008      	beq.n	800e570 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e562:	68db      	ldr	r3, [r3, #12]
 800e564:	685a      	ldr	r2, [r3, #4]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e56a:	429a      	cmp	r2, r3
 800e56c:	f43f af43 	beq.w	800e3f6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	8b5b      	ldrh	r3, [r3, #26]
 800e574:	f003 0301 	and.w	r3, r3, #1
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00e      	beq.n	800e59a <tcp_receive+0xbc6>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	8b5b      	ldrh	r3, [r3, #26]
 800e580:	f023 0301 	bic.w	r3, r3, #1
 800e584:	b29a      	uxth	r2, r3
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	835a      	strh	r2, [r3, #26]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	8b5b      	ldrh	r3, [r3, #26]
 800e58e:	f043 0302 	orr.w	r3, r3, #2
 800e592:	b29a      	uxth	r2, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e598:	e188      	b.n	800e8ac <tcp_receive+0xed8>
        tcp_ack(pcb);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	8b5b      	ldrh	r3, [r3, #26]
 800e59e:	f043 0301 	orr.w	r3, r3, #1
 800e5a2:	b29a      	uxth	r2, r3
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e5a8:	e180      	b.n	800e8ac <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d106      	bne.n	800e5c0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e5b2:	4848      	ldr	r0, [pc, #288]	; (800e6d4 <tcp_receive+0xd00>)
 800e5b4:	f7fd fb44 	bl	800bc40 <tcp_seg_copy>
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	675a      	str	r2, [r3, #116]	; 0x74
 800e5be:	e16d      	b.n	800e89c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5ca:	e157      	b.n	800e87c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800e5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	685a      	ldr	r2, [r3, #4]
 800e5d2:	4b41      	ldr	r3, [pc, #260]	; (800e6d8 <tcp_receive+0xd04>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d11d      	bne.n	800e616 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e5da:	4b3e      	ldr	r3, [pc, #248]	; (800e6d4 <tcp_receive+0xd00>)
 800e5dc:	891a      	ldrh	r2, [r3, #8]
 800e5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e0:	891b      	ldrh	r3, [r3, #8]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	f240 814f 	bls.w	800e886 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e5e8:	483a      	ldr	r0, [pc, #232]	; (800e6d4 <tcp_receive+0xd00>)
 800e5ea:	f7fd fb29 	bl	800bc40 <tcp_seg_copy>
 800e5ee:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	f000 8149 	beq.w	800e88a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800e5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d003      	beq.n	800e606 <tcp_receive+0xc32>
                    prev->next = cseg;
 800e5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e600:	697a      	ldr	r2, [r7, #20]
 800e602:	601a      	str	r2, [r3, #0]
 800e604:	e002      	b.n	800e60c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	697a      	ldr	r2, [r7, #20]
 800e60a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e60c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e60e:	6978      	ldr	r0, [r7, #20]
 800e610:	f7ff f8dc 	bl	800d7cc <tcp_oos_insert_segment>
                }
                break;
 800e614:	e139      	b.n	800e88a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d117      	bne.n	800e64c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e61c:	4b2e      	ldr	r3, [pc, #184]	; (800e6d8 <tcp_receive+0xd04>)
 800e61e:	681a      	ldr	r2, [r3, #0]
 800e620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e622:	68db      	ldr	r3, [r3, #12]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	1ad3      	subs	r3, r2, r3
 800e628:	2b00      	cmp	r3, #0
 800e62a:	da57      	bge.n	800e6dc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e62c:	4829      	ldr	r0, [pc, #164]	; (800e6d4 <tcp_receive+0xd00>)
 800e62e:	f7fd fb07 	bl	800bc40 <tcp_seg_copy>
 800e632:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	2b00      	cmp	r3, #0
 800e638:	f000 8129 	beq.w	800e88e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	69ba      	ldr	r2, [r7, #24]
 800e640:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e642:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e644:	69b8      	ldr	r0, [r7, #24]
 800e646:	f7ff f8c1 	bl	800d7cc <tcp_oos_insert_segment>
                  }
                  break;
 800e64a:	e120      	b.n	800e88e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e64c:	4b22      	ldr	r3, [pc, #136]	; (800e6d8 <tcp_receive+0xd04>)
 800e64e:	681a      	ldr	r2, [r3, #0]
 800e650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	1ad3      	subs	r3, r2, r3
 800e658:	3b01      	subs	r3, #1
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	db3e      	blt.n	800e6dc <tcp_receive+0xd08>
 800e65e:	4b1e      	ldr	r3, [pc, #120]	; (800e6d8 <tcp_receive+0xd04>)
 800e660:	681a      	ldr	r2, [r3, #0]
 800e662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	1ad3      	subs	r3, r2, r3
 800e66a:	3301      	adds	r3, #1
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	dc35      	bgt.n	800e6dc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e670:	4818      	ldr	r0, [pc, #96]	; (800e6d4 <tcp_receive+0xd00>)
 800e672:	f7fd fae5 	bl	800bc40 <tcp_seg_copy>
 800e676:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	f000 8109 	beq.w	800e892 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e682:	68db      	ldr	r3, [r3, #12]
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e688:	8912      	ldrh	r2, [r2, #8]
 800e68a:	441a      	add	r2, r3
 800e68c:	4b12      	ldr	r3, [pc, #72]	; (800e6d8 <tcp_receive+0xd04>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	1ad3      	subs	r3, r2, r3
 800e692:	2b00      	cmp	r3, #0
 800e694:	dd12      	ble.n	800e6bc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e696:	4b10      	ldr	r3, [pc, #64]	; (800e6d8 <tcp_receive+0xd04>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	1ad3      	subs	r3, r2, r3
 800e6a6:	b29a      	uxth	r2, r3
 800e6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6aa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6ae:	685a      	ldr	r2, [r3, #4]
 800e6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b2:	891b      	ldrh	r3, [r3, #8]
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	4610      	mov	r0, r2
 800e6b8:	f7fb fcf6 	bl	800a0a8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6be:	69fa      	ldr	r2, [r7, #28]
 800e6c0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e6c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e6c4:	69f8      	ldr	r0, [r7, #28]
 800e6c6:	f7ff f881 	bl	800d7cc <tcp_oos_insert_segment>
                  }
                  break;
 800e6ca:	e0e2      	b.n	800e892 <tcp_receive+0xebe>
 800e6cc:	2000e4ec 	.word	0x2000e4ec
 800e6d0:	2000e4e9 	.word	0x2000e4e9
 800e6d4:	2000e4bc 	.word	0x2000e4bc
 800e6d8:	2000e4dc 	.word	0x2000e4dc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6de:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	f040 80c6 	bne.w	800e876 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e6ea:	4b80      	ldr	r3, [pc, #512]	; (800e8ec <tcp_receive+0xf18>)
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	f340 80bd 	ble.w	800e876 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	899b      	ldrh	r3, [r3, #12]
 800e702:	b29b      	uxth	r3, r3
 800e704:	4618      	mov	r0, r3
 800e706:	f7fa fafd 	bl	8008d04 <lwip_htons>
 800e70a:	4603      	mov	r3, r0
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	f003 0301 	and.w	r3, r3, #1
 800e712:	2b00      	cmp	r3, #0
 800e714:	f040 80bf 	bne.w	800e896 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e718:	4875      	ldr	r0, [pc, #468]	; (800e8f0 <tcp_receive+0xf1c>)
 800e71a:	f7fd fa91 	bl	800bc40 <tcp_seg_copy>
 800e71e:	4602      	mov	r2, r0
 800e720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e722:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	f000 80b6 	beq.w	800e89a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e730:	68db      	ldr	r3, [r3, #12]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e736:	8912      	ldrh	r2, [r2, #8]
 800e738:	441a      	add	r2, r3
 800e73a:	4b6c      	ldr	r3, [pc, #432]	; (800e8ec <tcp_receive+0xf18>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	1ad3      	subs	r3, r2, r3
 800e740:	2b00      	cmp	r3, #0
 800e742:	dd12      	ble.n	800e76a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e744:	4b69      	ldr	r3, [pc, #420]	; (800e8ec <tcp_receive+0xf18>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	b29a      	uxth	r2, r3
 800e74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74c:	68db      	ldr	r3, [r3, #12]
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	b29b      	uxth	r3, r3
 800e752:	1ad3      	subs	r3, r2, r3
 800e754:	b29a      	uxth	r2, r3
 800e756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e758:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75c:	685a      	ldr	r2, [r3, #4]
 800e75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e760:	891b      	ldrh	r3, [r3, #8]
 800e762:	4619      	mov	r1, r3
 800e764:	4610      	mov	r0, r2
 800e766:	f7fb fc9f 	bl	800a0a8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e76a:	4b62      	ldr	r3, [pc, #392]	; (800e8f4 <tcp_receive+0xf20>)
 800e76c:	881b      	ldrh	r3, [r3, #0]
 800e76e:	461a      	mov	r2, r3
 800e770:	4b5e      	ldr	r3, [pc, #376]	; (800e8ec <tcp_receive+0xf18>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	441a      	add	r2, r3
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e77a:	6879      	ldr	r1, [r7, #4]
 800e77c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e77e:	440b      	add	r3, r1
 800e780:	1ad3      	subs	r3, r2, r3
 800e782:	2b00      	cmp	r3, #0
 800e784:	f340 8089 	ble.w	800e89a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	68db      	ldr	r3, [r3, #12]
 800e78e:	899b      	ldrh	r3, [r3, #12]
 800e790:	b29b      	uxth	r3, r3
 800e792:	4618      	mov	r0, r3
 800e794:	f7fa fab6 	bl	8008d04 <lwip_htons>
 800e798:	4603      	mov	r3, r0
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	f003 0301 	and.w	r3, r3, #1
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d022      	beq.n	800e7ea <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	68db      	ldr	r3, [r3, #12]
 800e7aa:	899b      	ldrh	r3, [r3, #12]
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	b21b      	sxth	r3, r3
 800e7b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e7b4:	b21c      	sxth	r4, r3
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	68db      	ldr	r3, [r3, #12]
 800e7bc:	899b      	ldrh	r3, [r3, #12]
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7fa fa9f 	bl	8008d04 <lwip_htons>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7fa fa96 	bl	8008d04 <lwip_htons>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	b21b      	sxth	r3, r3
 800e7dc:	4323      	orrs	r3, r4
 800e7de:	b21a      	sxth	r2, r3
 800e7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	b292      	uxth	r2, r2
 800e7e8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ee:	b29a      	uxth	r2, r3
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7f4:	4413      	add	r3, r2
 800e7f6:	b299      	uxth	r1, r3
 800e7f8:	4b3c      	ldr	r3, [pc, #240]	; (800e8ec <tcp_receive+0xf18>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	b29a      	uxth	r2, r3
 800e7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	1a8a      	subs	r2, r1, r2
 800e804:	b292      	uxth	r2, r2
 800e806:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	685a      	ldr	r2, [r3, #4]
 800e80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	891b      	ldrh	r3, [r3, #8]
 800e814:	4619      	mov	r1, r3
 800e816:	4610      	mov	r0, r2
 800e818:	f7fb fc46 	bl	800a0a8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	891c      	ldrh	r4, [r3, #8]
 800e822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	68db      	ldr	r3, [r3, #12]
 800e828:	899b      	ldrh	r3, [r3, #12]
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7fa fa69 	bl	8008d04 <lwip_htons>
 800e832:	4603      	mov	r3, r0
 800e834:	b2db      	uxtb	r3, r3
 800e836:	f003 0303 	and.w	r3, r3, #3
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d001      	beq.n	800e842 <tcp_receive+0xe6e>
 800e83e:	2301      	movs	r3, #1
 800e840:	e000      	b.n	800e844 <tcp_receive+0xe70>
 800e842:	2300      	movs	r3, #0
 800e844:	4423      	add	r3, r4
 800e846:	b29a      	uxth	r2, r3
 800e848:	4b2a      	ldr	r3, [pc, #168]	; (800e8f4 <tcp_receive+0xf20>)
 800e84a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e84c:	4b29      	ldr	r3, [pc, #164]	; (800e8f4 <tcp_receive+0xf20>)
 800e84e:	881b      	ldrh	r3, [r3, #0]
 800e850:	461a      	mov	r2, r3
 800e852:	4b26      	ldr	r3, [pc, #152]	; (800e8ec <tcp_receive+0xf18>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	441a      	add	r2, r3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e85c:	6879      	ldr	r1, [r7, #4]
 800e85e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e860:	440b      	add	r3, r1
 800e862:	429a      	cmp	r2, r3
 800e864:	d019      	beq.n	800e89a <tcp_receive+0xec6>
 800e866:	4b24      	ldr	r3, [pc, #144]	; (800e8f8 <tcp_receive+0xf24>)
 800e868:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e86c:	4923      	ldr	r1, [pc, #140]	; (800e8fc <tcp_receive+0xf28>)
 800e86e:	4824      	ldr	r0, [pc, #144]	; (800e900 <tcp_receive+0xf2c>)
 800e870:	f006 f96a 	bl	8014b48 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e874:	e011      	b.n	800e89a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87e:	2b00      	cmp	r3, #0
 800e880:	f47f aea4 	bne.w	800e5cc <tcp_receive+0xbf8>
 800e884:	e00a      	b.n	800e89c <tcp_receive+0xec8>
                break;
 800e886:	bf00      	nop
 800e888:	e008      	b.n	800e89c <tcp_receive+0xec8>
                break;
 800e88a:	bf00      	nop
 800e88c:	e006      	b.n	800e89c <tcp_receive+0xec8>
                  break;
 800e88e:	bf00      	nop
 800e890:	e004      	b.n	800e89c <tcp_receive+0xec8>
                  break;
 800e892:	bf00      	nop
 800e894:	e002      	b.n	800e89c <tcp_receive+0xec8>
                  break;
 800e896:	bf00      	nop
 800e898:	e000      	b.n	800e89c <tcp_receive+0xec8>
                break;
 800e89a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f001 fe8b 	bl	80105b8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e8a2:	e003      	b.n	800e8ac <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f001 fe87 	bl	80105b8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e8aa:	e01a      	b.n	800e8e2 <tcp_receive+0xf0e>
 800e8ac:	e019      	b.n	800e8e2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e8ae:	4b0f      	ldr	r3, [pc, #60]	; (800e8ec <tcp_receive+0xf18>)
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b6:	1ad3      	subs	r3, r2, r3
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	db0a      	blt.n	800e8d2 <tcp_receive+0xefe>
 800e8bc:	4b0b      	ldr	r3, [pc, #44]	; (800e8ec <tcp_receive+0xf18>)
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c4:	6879      	ldr	r1, [r7, #4]
 800e8c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e8c8:	440b      	add	r3, r1
 800e8ca:	1ad3      	subs	r3, r2, r3
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	dd07      	ble.n	800e8e2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	8b5b      	ldrh	r3, [r3, #26]
 800e8d6:	f043 0302 	orr.w	r3, r3, #2
 800e8da:	b29a      	uxth	r2, r3
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e8e0:	e7ff      	b.n	800e8e2 <tcp_receive+0xf0e>
 800e8e2:	bf00      	nop
 800e8e4:	3750      	adds	r7, #80	; 0x50
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bdb0      	pop	{r4, r5, r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	2000e4dc 	.word	0x2000e4dc
 800e8f0:	2000e4bc 	.word	0x2000e4bc
 800e8f4:	2000e4e6 	.word	0x2000e4e6
 800e8f8:	0801724c 	.word	0x0801724c
 800e8fc:	080175f4 	.word	0x080175f4
 800e900:	08017298 	.word	0x08017298

0800e904 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e904:	b480      	push	{r7}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e90a:	4b15      	ldr	r3, [pc, #84]	; (800e960 <tcp_get_next_optbyte+0x5c>)
 800e90c:	881b      	ldrh	r3, [r3, #0]
 800e90e:	1c5a      	adds	r2, r3, #1
 800e910:	b291      	uxth	r1, r2
 800e912:	4a13      	ldr	r2, [pc, #76]	; (800e960 <tcp_get_next_optbyte+0x5c>)
 800e914:	8011      	strh	r1, [r2, #0]
 800e916:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e918:	4b12      	ldr	r3, [pc, #72]	; (800e964 <tcp_get_next_optbyte+0x60>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d004      	beq.n	800e92a <tcp_get_next_optbyte+0x26>
 800e920:	4b11      	ldr	r3, [pc, #68]	; (800e968 <tcp_get_next_optbyte+0x64>)
 800e922:	881b      	ldrh	r3, [r3, #0]
 800e924:	88fa      	ldrh	r2, [r7, #6]
 800e926:	429a      	cmp	r2, r3
 800e928:	d208      	bcs.n	800e93c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e92a:	4b10      	ldr	r3, [pc, #64]	; (800e96c <tcp_get_next_optbyte+0x68>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	3314      	adds	r3, #20
 800e930:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e932:	88fb      	ldrh	r3, [r7, #6]
 800e934:	683a      	ldr	r2, [r7, #0]
 800e936:	4413      	add	r3, r2
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	e00b      	b.n	800e954 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e93c:	88fb      	ldrh	r3, [r7, #6]
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	4b09      	ldr	r3, [pc, #36]	; (800e968 <tcp_get_next_optbyte+0x64>)
 800e942:	881b      	ldrh	r3, [r3, #0]
 800e944:	b2db      	uxtb	r3, r3
 800e946:	1ad3      	subs	r3, r2, r3
 800e948:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e94a:	4b06      	ldr	r3, [pc, #24]	; (800e964 <tcp_get_next_optbyte+0x60>)
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	797b      	ldrb	r3, [r7, #5]
 800e950:	4413      	add	r3, r2
 800e952:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e954:	4618      	mov	r0, r3
 800e956:	370c      	adds	r7, #12
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr
 800e960:	2000e4d8 	.word	0x2000e4d8
 800e964:	2000e4d4 	.word	0x2000e4d4
 800e968:	2000e4d2 	.word	0x2000e4d2
 800e96c:	2000e4cc 	.word	0x2000e4cc

0800e970 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d106      	bne.n	800e98c <tcp_parseopt+0x1c>
 800e97e:	4b32      	ldr	r3, [pc, #200]	; (800ea48 <tcp_parseopt+0xd8>)
 800e980:	f240 727d 	movw	r2, #1917	; 0x77d
 800e984:	4931      	ldr	r1, [pc, #196]	; (800ea4c <tcp_parseopt+0xdc>)
 800e986:	4832      	ldr	r0, [pc, #200]	; (800ea50 <tcp_parseopt+0xe0>)
 800e988:	f006 f8de 	bl	8014b48 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e98c:	4b31      	ldr	r3, [pc, #196]	; (800ea54 <tcp_parseopt+0xe4>)
 800e98e:	881b      	ldrh	r3, [r3, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d055      	beq.n	800ea40 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e994:	4b30      	ldr	r3, [pc, #192]	; (800ea58 <tcp_parseopt+0xe8>)
 800e996:	2200      	movs	r2, #0
 800e998:	801a      	strh	r2, [r3, #0]
 800e99a:	e045      	b.n	800ea28 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e99c:	f7ff ffb2 	bl	800e904 <tcp_get_next_optbyte>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e9a4:	7bfb      	ldrb	r3, [r7, #15]
 800e9a6:	2b02      	cmp	r3, #2
 800e9a8:	d006      	beq.n	800e9b8 <tcp_parseopt+0x48>
 800e9aa:	2b02      	cmp	r3, #2
 800e9ac:	dc2b      	bgt.n	800ea06 <tcp_parseopt+0x96>
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d041      	beq.n	800ea36 <tcp_parseopt+0xc6>
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d127      	bne.n	800ea06 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e9b6:	e037      	b.n	800ea28 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e9b8:	f7ff ffa4 	bl	800e904 <tcp_get_next_optbyte>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b04      	cmp	r3, #4
 800e9c0:	d13b      	bne.n	800ea3a <tcp_parseopt+0xca>
 800e9c2:	4b25      	ldr	r3, [pc, #148]	; (800ea58 <tcp_parseopt+0xe8>)
 800e9c4:	881b      	ldrh	r3, [r3, #0]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	4a22      	ldr	r2, [pc, #136]	; (800ea54 <tcp_parseopt+0xe4>)
 800e9ca:	8812      	ldrh	r2, [r2, #0]
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	da34      	bge.n	800ea3a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e9d0:	f7ff ff98 	bl	800e904 <tcp_get_next_optbyte>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	021b      	lsls	r3, r3, #8
 800e9da:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e9dc:	f7ff ff92 	bl	800e904 <tcp_get_next_optbyte>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	b29a      	uxth	r2, r3
 800e9e4:	89bb      	ldrh	r3, [r7, #12]
 800e9e6:	4313      	orrs	r3, r2
 800e9e8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e9ea:	89bb      	ldrh	r3, [r7, #12]
 800e9ec:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e9f0:	d804      	bhi.n	800e9fc <tcp_parseopt+0x8c>
 800e9f2:	89bb      	ldrh	r3, [r7, #12]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d001      	beq.n	800e9fc <tcp_parseopt+0x8c>
 800e9f8:	89ba      	ldrh	r2, [r7, #12]
 800e9fa:	e001      	b.n	800ea00 <tcp_parseopt+0x90>
 800e9fc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ea04:	e010      	b.n	800ea28 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ea06:	f7ff ff7d 	bl	800e904 <tcp_get_next_optbyte>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ea0e:	7afb      	ldrb	r3, [r7, #11]
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d914      	bls.n	800ea3e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ea14:	7afb      	ldrb	r3, [r7, #11]
 800ea16:	b29a      	uxth	r2, r3
 800ea18:	4b0f      	ldr	r3, [pc, #60]	; (800ea58 <tcp_parseopt+0xe8>)
 800ea1a:	881b      	ldrh	r3, [r3, #0]
 800ea1c:	4413      	add	r3, r2
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	3b02      	subs	r3, #2
 800ea22:	b29a      	uxth	r2, r3
 800ea24:	4b0c      	ldr	r3, [pc, #48]	; (800ea58 <tcp_parseopt+0xe8>)
 800ea26:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ea28:	4b0b      	ldr	r3, [pc, #44]	; (800ea58 <tcp_parseopt+0xe8>)
 800ea2a:	881a      	ldrh	r2, [r3, #0]
 800ea2c:	4b09      	ldr	r3, [pc, #36]	; (800ea54 <tcp_parseopt+0xe4>)
 800ea2e:	881b      	ldrh	r3, [r3, #0]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d3b3      	bcc.n	800e99c <tcp_parseopt+0x2c>
 800ea34:	e004      	b.n	800ea40 <tcp_parseopt+0xd0>
          return;
 800ea36:	bf00      	nop
 800ea38:	e002      	b.n	800ea40 <tcp_parseopt+0xd0>
            return;
 800ea3a:	bf00      	nop
 800ea3c:	e000      	b.n	800ea40 <tcp_parseopt+0xd0>
            return;
 800ea3e:	bf00      	nop
      }
    }
  }
}
 800ea40:	3710      	adds	r7, #16
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}
 800ea46:	bf00      	nop
 800ea48:	0801724c 	.word	0x0801724c
 800ea4c:	080176b0 	.word	0x080176b0
 800ea50:	08017298 	.word	0x08017298
 800ea54:	2000e4d0 	.word	0x2000e4d0
 800ea58:	2000e4d8 	.word	0x2000e4d8

0800ea5c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ea60:	4b05      	ldr	r3, [pc, #20]	; (800ea78 <tcp_trigger_input_pcb_close+0x1c>)
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	f043 0310 	orr.w	r3, r3, #16
 800ea68:	b2da      	uxtb	r2, r3
 800ea6a:	4b03      	ldr	r3, [pc, #12]	; (800ea78 <tcp_trigger_input_pcb_close+0x1c>)
 800ea6c:	701a      	strb	r2, [r3, #0]
}
 800ea6e:	bf00      	nop
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr
 800ea78:	2000e4e9 	.word	0x2000e4e9

0800ea7c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	60f8      	str	r0, [r7, #12]
 800ea84:	60b9      	str	r1, [r7, #8]
 800ea86:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00a      	beq.n	800eaa4 <tcp_route+0x28>
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	7a1b      	ldrb	r3, [r3, #8]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d006      	beq.n	800eaa4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	7a1b      	ldrb	r3, [r3, #8]
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7fb f92a 	bl	8009cf4 <netif_get_by_index>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	e003      	b.n	800eaac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f003 f91b 	bl	8011ce0 <ip4_route>
 800eaaa:	4603      	mov	r3, r0
  }
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3710      	adds	r7, #16
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800eab4:	b590      	push	{r4, r7, lr}
 800eab6:	b087      	sub	sp, #28
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	60b9      	str	r1, [r7, #8]
 800eabe:	603b      	str	r3, [r7, #0]
 800eac0:	4613      	mov	r3, r2
 800eac2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d105      	bne.n	800ead6 <tcp_create_segment+0x22>
 800eaca:	4b44      	ldr	r3, [pc, #272]	; (800ebdc <tcp_create_segment+0x128>)
 800eacc:	22a3      	movs	r2, #163	; 0xa3
 800eace:	4944      	ldr	r1, [pc, #272]	; (800ebe0 <tcp_create_segment+0x12c>)
 800ead0:	4844      	ldr	r0, [pc, #272]	; (800ebe4 <tcp_create_segment+0x130>)
 800ead2:	f006 f839 	bl	8014b48 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d105      	bne.n	800eae8 <tcp_create_segment+0x34>
 800eadc:	4b3f      	ldr	r3, [pc, #252]	; (800ebdc <tcp_create_segment+0x128>)
 800eade:	22a4      	movs	r2, #164	; 0xa4
 800eae0:	4941      	ldr	r1, [pc, #260]	; (800ebe8 <tcp_create_segment+0x134>)
 800eae2:	4840      	ldr	r0, [pc, #256]	; (800ebe4 <tcp_create_segment+0x130>)
 800eae4:	f006 f830 	bl	8014b48 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800eae8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	b2db      	uxtb	r3, r3
 800eaf0:	f003 0304 	and.w	r3, r3, #4
 800eaf4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800eaf6:	2002      	movs	r0, #2
 800eaf8:	f7fa fd7a 	bl	80095f0 <memp_malloc>
 800eafc:	6138      	str	r0, [r7, #16]
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d104      	bne.n	800eb0e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800eb04:	68b8      	ldr	r0, [r7, #8]
 800eb06:	f7fb fc55 	bl	800a3b4 <pbuf_free>
    return NULL;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	e061      	b.n	800ebd2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800eb14:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	68ba      	ldr	r2, [r7, #8]
 800eb20:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	891a      	ldrh	r2, [r3, #8]
 800eb26:	7dfb      	ldrb	r3, [r7, #23]
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d205      	bcs.n	800eb3a <tcp_create_segment+0x86>
 800eb2e:	4b2b      	ldr	r3, [pc, #172]	; (800ebdc <tcp_create_segment+0x128>)
 800eb30:	22b0      	movs	r2, #176	; 0xb0
 800eb32:	492e      	ldr	r1, [pc, #184]	; (800ebec <tcp_create_segment+0x138>)
 800eb34:	482b      	ldr	r0, [pc, #172]	; (800ebe4 <tcp_create_segment+0x130>)
 800eb36:	f006 f807 	bl	8014b48 <iprintf>
  seg->len = p->tot_len - optlen;
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	891a      	ldrh	r2, [r3, #8]
 800eb3e:	7dfb      	ldrb	r3, [r7, #23]
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	1ad3      	subs	r3, r2, r3
 800eb44:	b29a      	uxth	r2, r3
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800eb4a:	2114      	movs	r1, #20
 800eb4c:	68b8      	ldr	r0, [r7, #8]
 800eb4e:	f7fb fb9b 	bl	800a288 <pbuf_add_header>
 800eb52:	4603      	mov	r3, r0
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d004      	beq.n	800eb62 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800eb58:	6938      	ldr	r0, [r7, #16]
 800eb5a:	f7fd f858 	bl	800bc0e <tcp_seg_free>
    return NULL;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	e037      	b.n	800ebd2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	685a      	ldr	r2, [r3, #4]
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	8ada      	ldrh	r2, [r3, #22]
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	68dc      	ldr	r4, [r3, #12]
 800eb74:	4610      	mov	r0, r2
 800eb76:	f7fa f8c5 	bl	8008d04 <lwip_htons>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	8b1a      	ldrh	r2, [r3, #24]
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	68dc      	ldr	r4, [r3, #12]
 800eb86:	4610      	mov	r0, r2
 800eb88:	f7fa f8bc 	bl	8008d04 <lwip_htons>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	68dc      	ldr	r4, [r3, #12]
 800eb94:	6838      	ldr	r0, [r7, #0]
 800eb96:	f7fa f8ca 	bl	8008d2e <lwip_htonl>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800eb9e:	7dfb      	ldrb	r3, [r7, #23]
 800eba0:	089b      	lsrs	r3, r3, #2
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	3305      	adds	r3, #5
 800eba8:	b29b      	uxth	r3, r3
 800ebaa:	031b      	lsls	r3, r3, #12
 800ebac:	b29a      	uxth	r2, r3
 800ebae:	79fb      	ldrb	r3, [r7, #7]
 800ebb0:	b29b      	uxth	r3, r3
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	b29a      	uxth	r2, r3
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	68dc      	ldr	r4, [r3, #12]
 800ebba:	4610      	mov	r0, r2
 800ebbc:	f7fa f8a2 	bl	8008d04 <lwip_htons>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	749a      	strb	r2, [r3, #18]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	74da      	strb	r2, [r3, #19]
  return seg;
 800ebd0:	693b      	ldr	r3, [r7, #16]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	371c      	adds	r7, #28
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd90      	pop	{r4, r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	080176cc 	.word	0x080176cc
 800ebe0:	08017700 	.word	0x08017700
 800ebe4:	08017720 	.word	0x08017720
 800ebe8:	08017748 	.word	0x08017748
 800ebec:	0801776c 	.word	0x0801776c

0800ebf0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b086      	sub	sp, #24
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	607b      	str	r3, [r7, #4]
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	73fb      	strb	r3, [r7, #15]
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	81bb      	strh	r3, [r7, #12]
 800ec00:	4613      	mov	r3, r2
 800ec02:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800ec04:	89bb      	ldrh	r3, [r7, #12]
 800ec06:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d105      	bne.n	800ec1a <tcp_pbuf_prealloc+0x2a>
 800ec0e:	4b30      	ldr	r3, [pc, #192]	; (800ecd0 <tcp_pbuf_prealloc+0xe0>)
 800ec10:	22e8      	movs	r2, #232	; 0xe8
 800ec12:	4930      	ldr	r1, [pc, #192]	; (800ecd4 <tcp_pbuf_prealloc+0xe4>)
 800ec14:	4830      	ldr	r0, [pc, #192]	; (800ecd8 <tcp_pbuf_prealloc+0xe8>)
 800ec16:	f005 ff97 	bl	8014b48 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ec1a:	6a3b      	ldr	r3, [r7, #32]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d105      	bne.n	800ec2c <tcp_pbuf_prealloc+0x3c>
 800ec20:	4b2b      	ldr	r3, [pc, #172]	; (800ecd0 <tcp_pbuf_prealloc+0xe0>)
 800ec22:	22e9      	movs	r2, #233	; 0xe9
 800ec24:	492d      	ldr	r1, [pc, #180]	; (800ecdc <tcp_pbuf_prealloc+0xec>)
 800ec26:	482c      	ldr	r0, [pc, #176]	; (800ecd8 <tcp_pbuf_prealloc+0xe8>)
 800ec28:	f005 ff8e 	bl	8014b48 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ec2c:	89ba      	ldrh	r2, [r7, #12]
 800ec2e:	897b      	ldrh	r3, [r7, #10]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d221      	bcs.n	800ec78 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ec34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ec38:	f003 0302 	and.w	r3, r3, #2
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d111      	bne.n	800ec64 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800ec40:	6a3b      	ldr	r3, [r7, #32]
 800ec42:	8b5b      	ldrh	r3, [r3, #26]
 800ec44:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d115      	bne.n	800ec78 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ec4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d007      	beq.n	800ec64 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ec54:	6a3b      	ldr	r3, [r7, #32]
 800ec56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d103      	bne.n	800ec64 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ec5c:	6a3b      	ldr	r3, [r7, #32]
 800ec5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d009      	beq.n	800ec78 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ec64:	89bb      	ldrh	r3, [r7, #12]
 800ec66:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ec6a:	f023 0203 	bic.w	r2, r3, #3
 800ec6e:	897b      	ldrh	r3, [r7, #10]
 800ec70:	4293      	cmp	r3, r2
 800ec72:	bf28      	it	cs
 800ec74:	4613      	movcs	r3, r2
 800ec76:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ec78:	8af9      	ldrh	r1, [r7, #22]
 800ec7a:	7bfb      	ldrb	r3, [r7, #15]
 800ec7c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fb f8b3 	bl	8009dec <pbuf_alloc>
 800ec86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d101      	bne.n	800ec92 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	e019      	b.n	800ecc6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d006      	beq.n	800eca8 <tcp_pbuf_prealloc+0xb8>
 800ec9a:	4b0d      	ldr	r3, [pc, #52]	; (800ecd0 <tcp_pbuf_prealloc+0xe0>)
 800ec9c:	f240 120b 	movw	r2, #267	; 0x10b
 800eca0:	490f      	ldr	r1, [pc, #60]	; (800ece0 <tcp_pbuf_prealloc+0xf0>)
 800eca2:	480d      	ldr	r0, [pc, #52]	; (800ecd8 <tcp_pbuf_prealloc+0xe8>)
 800eca4:	f005 ff50 	bl	8014b48 <iprintf>
  *oversize = p->len - length;
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	895a      	ldrh	r2, [r3, #10]
 800ecac:	89bb      	ldrh	r3, [r7, #12]
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	89ba      	ldrh	r2, [r7, #12]
 800ecba:	811a      	strh	r2, [r3, #8]
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	891a      	ldrh	r2, [r3, #8]
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	815a      	strh	r2, [r3, #10]
  return p;
 800ecc4:	693b      	ldr	r3, [r7, #16]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3718      	adds	r7, #24
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	080176cc 	.word	0x080176cc
 800ecd4:	08017784 	.word	0x08017784
 800ecd8:	08017720 	.word	0x08017720
 800ecdc:	080177a8 	.word	0x080177a8
 800ece0:	080177c8 	.word	0x080177c8

0800ece4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	460b      	mov	r3, r1
 800ecee:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d106      	bne.n	800ed04 <tcp_write_checks+0x20>
 800ecf6:	4b33      	ldr	r3, [pc, #204]	; (800edc4 <tcp_write_checks+0xe0>)
 800ecf8:	f240 1233 	movw	r2, #307	; 0x133
 800ecfc:	4932      	ldr	r1, [pc, #200]	; (800edc8 <tcp_write_checks+0xe4>)
 800ecfe:	4833      	ldr	r0, [pc, #204]	; (800edcc <tcp_write_checks+0xe8>)
 800ed00:	f005 ff22 	bl	8014b48 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	7d1b      	ldrb	r3, [r3, #20]
 800ed08:	2b04      	cmp	r3, #4
 800ed0a:	d00e      	beq.n	800ed2a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800ed10:	2b07      	cmp	r3, #7
 800ed12:	d00a      	beq.n	800ed2a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ed18:	2b02      	cmp	r3, #2
 800ed1a:	d006      	beq.n	800ed2a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ed20:	2b03      	cmp	r3, #3
 800ed22:	d002      	beq.n	800ed2a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ed24:	f06f 030a 	mvn.w	r3, #10
 800ed28:	e048      	b.n	800edbc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800ed2a:	887b      	ldrh	r3, [r7, #2]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d101      	bne.n	800ed34 <tcp_write_checks+0x50>
    return ERR_OK;
 800ed30:	2300      	movs	r3, #0
 800ed32:	e043      	b.n	800edbc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ed3a:	887a      	ldrh	r2, [r7, #2]
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d909      	bls.n	800ed54 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	8b5b      	ldrh	r3, [r3, #26]
 800ed44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed48:	b29a      	uxth	r2, r3
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ed4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed52:	e033      	b.n	800edbc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed5a:	2b08      	cmp	r3, #8
 800ed5c:	d909      	bls.n	800ed72 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	8b5b      	ldrh	r3, [r3, #26]
 800ed62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed66:	b29a      	uxth	r2, r3
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ed6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ed70:	e024      	b.n	800edbc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d00f      	beq.n	800ed9c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d11a      	bne.n	800edba <tcp_write_checks+0xd6>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d116      	bne.n	800edba <tcp_write_checks+0xd6>
 800ed8c:	4b0d      	ldr	r3, [pc, #52]	; (800edc4 <tcp_write_checks+0xe0>)
 800ed8e:	f240 1255 	movw	r2, #341	; 0x155
 800ed92:	490f      	ldr	r1, [pc, #60]	; (800edd0 <tcp_write_checks+0xec>)
 800ed94:	480d      	ldr	r0, [pc, #52]	; (800edcc <tcp_write_checks+0xe8>)
 800ed96:	f005 fed7 	bl	8014b48 <iprintf>
 800ed9a:	e00e      	b.n	800edba <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d103      	bne.n	800edac <tcp_write_checks+0xc8>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d006      	beq.n	800edba <tcp_write_checks+0xd6>
 800edac:	4b05      	ldr	r3, [pc, #20]	; (800edc4 <tcp_write_checks+0xe0>)
 800edae:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800edb2:	4908      	ldr	r1, [pc, #32]	; (800edd4 <tcp_write_checks+0xf0>)
 800edb4:	4805      	ldr	r0, [pc, #20]	; (800edcc <tcp_write_checks+0xe8>)
 800edb6:	f005 fec7 	bl	8014b48 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800edba:	2300      	movs	r3, #0
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3708      	adds	r7, #8
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}
 800edc4:	080176cc 	.word	0x080176cc
 800edc8:	080177dc 	.word	0x080177dc
 800edcc:	08017720 	.word	0x08017720
 800edd0:	080177fc 	.word	0x080177fc
 800edd4:	08017838 	.word	0x08017838

0800edd8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800edd8:	b590      	push	{r4, r7, lr}
 800edda:	b09b      	sub	sp, #108	; 0x6c
 800eddc:	af04      	add	r7, sp, #16
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	60b9      	str	r1, [r7, #8]
 800ede2:	4611      	mov	r1, r2
 800ede4:	461a      	mov	r2, r3
 800ede6:	460b      	mov	r3, r1
 800ede8:	80fb      	strh	r3, [r7, #6]
 800edea:	4613      	mov	r3, r2
 800edec:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800edee:	2300      	movs	r3, #0
 800edf0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800edf2:	2300      	movs	r3, #0
 800edf4:	653b      	str	r3, [r7, #80]	; 0x50
 800edf6:	2300      	movs	r3, #0
 800edf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edfa:	2300      	movs	r3, #0
 800edfc:	64bb      	str	r3, [r7, #72]	; 0x48
 800edfe:	2300      	movs	r3, #0
 800ee00:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800ee02:	2300      	movs	r3, #0
 800ee04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800ee12:	2300      	movs	r3, #0
 800ee14:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800ee16:	2300      	movs	r3, #0
 800ee18:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d109      	bne.n	800ee34 <tcp_write+0x5c>
 800ee20:	4ba4      	ldr	r3, [pc, #656]	; (800f0b4 <tcp_write+0x2dc>)
 800ee22:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800ee26:	49a4      	ldr	r1, [pc, #656]	; (800f0b8 <tcp_write+0x2e0>)
 800ee28:	48a4      	ldr	r0, [pc, #656]	; (800f0bc <tcp_write+0x2e4>)
 800ee2a:	f005 fe8d 	bl	8014b48 <iprintf>
 800ee2e:	f06f 030f 	mvn.w	r3, #15
 800ee32:	e32a      	b.n	800f48a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee3a:	085b      	lsrs	r3, r3, #1
 800ee3c:	b29a      	uxth	r2, r3
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee42:	4293      	cmp	r3, r2
 800ee44:	bf28      	it	cs
 800ee46:	4613      	movcs	r3, r2
 800ee48:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800ee4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d102      	bne.n	800ee56 <tcp_write+0x7e>
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee54:	e000      	b.n	800ee58 <tcp_write+0x80>
 800ee56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee58:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d109      	bne.n	800ee74 <tcp_write+0x9c>
 800ee60:	4b94      	ldr	r3, [pc, #592]	; (800f0b4 <tcp_write+0x2dc>)
 800ee62:	f240 12ad 	movw	r2, #429	; 0x1ad
 800ee66:	4996      	ldr	r1, [pc, #600]	; (800f0c0 <tcp_write+0x2e8>)
 800ee68:	4894      	ldr	r0, [pc, #592]	; (800f0bc <tcp_write+0x2e4>)
 800ee6a:	f005 fe6d 	bl	8014b48 <iprintf>
 800ee6e:	f06f 030f 	mvn.w	r3, #15
 800ee72:	e30a      	b.n	800f48a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800ee74:	88fb      	ldrh	r3, [r7, #6]
 800ee76:	4619      	mov	r1, r3
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f7ff ff33 	bl	800ece4 <tcp_write_checks>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800ee84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d002      	beq.n	800ee92 <tcp_write+0xba>
    return err;
 800ee8c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ee90:	e2fb      	b.n	800f48a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee98:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	f000 80f6 	beq.w	800f098 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eeb0:	653b      	str	r3, [r7, #80]	; 0x50
 800eeb2:	e002      	b.n	800eeba <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800eeb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eeba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d1f8      	bne.n	800eeb4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800eec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eec4:	7a9b      	ldrb	r3, [r3, #10]
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	f003 0304 	and.w	r3, r3, #4
 800eece:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800eed0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eed4:	891b      	ldrh	r3, [r3, #8]
 800eed6:	4619      	mov	r1, r3
 800eed8:	8c3b      	ldrh	r3, [r7, #32]
 800eeda:	440b      	add	r3, r1
 800eedc:	429a      	cmp	r2, r3
 800eede:	da06      	bge.n	800eeee <tcp_write+0x116>
 800eee0:	4b74      	ldr	r3, [pc, #464]	; (800f0b4 <tcp_write+0x2dc>)
 800eee2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800eee6:	4977      	ldr	r1, [pc, #476]	; (800f0c4 <tcp_write+0x2ec>)
 800eee8:	4874      	ldr	r0, [pc, #464]	; (800f0bc <tcp_write+0x2e4>)
 800eeea:	f005 fe2d 	bl	8014b48 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800eeee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eef0:	891a      	ldrh	r2, [r3, #8]
 800eef2:	8c3b      	ldrh	r3, [r7, #32]
 800eef4:	4413      	add	r3, r2
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eefa:	1ad3      	subs	r3, r2, r3
 800eefc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ef04:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800ef06:	8a7b      	ldrh	r3, [r7, #18]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d026      	beq.n	800ef5a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ef0c:	8a7b      	ldrh	r3, [r7, #18]
 800ef0e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d206      	bcs.n	800ef22 <tcp_write+0x14a>
 800ef14:	4b67      	ldr	r3, [pc, #412]	; (800f0b4 <tcp_write+0x2dc>)
 800ef16:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800ef1a:	496b      	ldr	r1, [pc, #428]	; (800f0c8 <tcp_write+0x2f0>)
 800ef1c:	4867      	ldr	r0, [pc, #412]	; (800f0bc <tcp_write+0x2e4>)
 800ef1e:	f005 fe13 	bl	8014b48 <iprintf>
      seg = last_unsent;
 800ef22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef24:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ef26:	8a7b      	ldrh	r3, [r7, #18]
 800ef28:	88fa      	ldrh	r2, [r7, #6]
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	bf28      	it	cs
 800ef2e:	4613      	movcs	r3, r2
 800ef30:	b29b      	uxth	r3, r3
 800ef32:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ef34:	4293      	cmp	r3, r2
 800ef36:	bf28      	it	cs
 800ef38:	4613      	movcs	r3, r2
 800ef3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800ef3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ef40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ef42:	4413      	add	r3, r2
 800ef44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800ef48:	8a7a      	ldrh	r2, [r7, #18]
 800ef4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ef4c:	1ad3      	subs	r3, r2, r3
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800ef52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ef54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ef56:	1ad3      	subs	r3, r2, r3
 800ef58:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ef5a:	8a7b      	ldrh	r3, [r7, #18]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d00b      	beq.n	800ef78 <tcp_write+0x1a0>
 800ef60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ef64:	88fb      	ldrh	r3, [r7, #6]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d006      	beq.n	800ef78 <tcp_write+0x1a0>
 800ef6a:	4b52      	ldr	r3, [pc, #328]	; (800f0b4 <tcp_write+0x2dc>)
 800ef6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef70:	4956      	ldr	r1, [pc, #344]	; (800f0cc <tcp_write+0x2f4>)
 800ef72:	4852      	ldr	r0, [pc, #328]	; (800f0bc <tcp_write+0x2e4>)
 800ef74:	f005 fde8 	bl	8014b48 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ef78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ef7c:	88fb      	ldrh	r3, [r7, #6]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	f080 8167 	bcs.w	800f252 <tcp_write+0x47a>
 800ef84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	f000 8163 	beq.w	800f252 <tcp_write+0x47a>
 800ef8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef8e:	891b      	ldrh	r3, [r3, #8]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	f000 815e 	beq.w	800f252 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ef96:	88fa      	ldrh	r2, [r7, #6]
 800ef98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ef9c:	1ad2      	subs	r2, r2, r3
 800ef9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800efa0:	4293      	cmp	r3, r2
 800efa2:	bfa8      	it	ge
 800efa4:	4613      	movge	r3, r2
 800efa6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800efa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efaa:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800efac:	797b      	ldrb	r3, [r7, #5]
 800efae:	f003 0301 	and.w	r3, r3, #1
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d027      	beq.n	800f006 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800efb6:	f107 0012 	add.w	r0, r7, #18
 800efba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800efbc:	8bf9      	ldrh	r1, [r7, #30]
 800efbe:	2301      	movs	r3, #1
 800efc0:	9302      	str	r3, [sp, #8]
 800efc2:	797b      	ldrb	r3, [r7, #5]
 800efc4:	9301      	str	r3, [sp, #4]
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	9300      	str	r3, [sp, #0]
 800efca:	4603      	mov	r3, r0
 800efcc:	2000      	movs	r0, #0
 800efce:	f7ff fe0f 	bl	800ebf0 <tcp_pbuf_prealloc>
 800efd2:	6578      	str	r0, [r7, #84]	; 0x54
 800efd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f000 8225 	beq.w	800f426 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800efdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efde:	6858      	ldr	r0, [r3, #4]
 800efe0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	4413      	add	r3, r2
 800efe8:	8bfa      	ldrh	r2, [r7, #30]
 800efea:	4619      	mov	r1, r3
 800efec:	f005 ff0f 	bl	8014e0e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800eff0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800eff2:	f7fb fa67 	bl	800a4c4 <pbuf_clen>
 800eff6:	4603      	mov	r3, r0
 800eff8:	461a      	mov	r2, r3
 800effa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800effe:	4413      	add	r3, r2
 800f000:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f004:	e041      	b.n	800f08a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800f006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f008:	685b      	ldr	r3, [r3, #4]
 800f00a:	637b      	str	r3, [r7, #52]	; 0x34
 800f00c:	e002      	b.n	800f014 <tcp_write+0x23c>
 800f00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	637b      	str	r3, [r7, #52]	; 0x34
 800f014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d1f8      	bne.n	800f00e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f01e:	7b1b      	ldrb	r3, [r3, #12]
 800f020:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f024:	2b00      	cmp	r3, #0
 800f026:	d115      	bne.n	800f054 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800f028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f02e:	8952      	ldrh	r2, [r2, #10]
 800f030:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f032:	68ba      	ldr	r2, [r7, #8]
 800f034:	429a      	cmp	r2, r3
 800f036:	d10d      	bne.n	800f054 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800f038:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d006      	beq.n	800f04e <tcp_write+0x276>
 800f040:	4b1c      	ldr	r3, [pc, #112]	; (800f0b4 <tcp_write+0x2dc>)
 800f042:	f240 2231 	movw	r2, #561	; 0x231
 800f046:	4922      	ldr	r1, [pc, #136]	; (800f0d0 <tcp_write+0x2f8>)
 800f048:	481c      	ldr	r0, [pc, #112]	; (800f0bc <tcp_write+0x2e4>)
 800f04a:	f005 fd7d 	bl	8014b48 <iprintf>
          extendlen = seglen;
 800f04e:	8bfb      	ldrh	r3, [r7, #30]
 800f050:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f052:	e01a      	b.n	800f08a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800f054:	8bfb      	ldrh	r3, [r7, #30]
 800f056:	2201      	movs	r2, #1
 800f058:	4619      	mov	r1, r3
 800f05a:	2000      	movs	r0, #0
 800f05c:	f7fa fec6 	bl	8009dec <pbuf_alloc>
 800f060:	6578      	str	r0, [r7, #84]	; 0x54
 800f062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f064:	2b00      	cmp	r3, #0
 800f066:	f000 81e0 	beq.w	800f42a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800f06a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f06e:	68ba      	ldr	r2, [r7, #8]
 800f070:	441a      	add	r2, r3
 800f072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f074:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800f076:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f078:	f7fb fa24 	bl	800a4c4 <pbuf_clen>
 800f07c:	4603      	mov	r3, r0
 800f07e:	461a      	mov	r2, r3
 800f080:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f084:	4413      	add	r3, r2
 800f086:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800f08a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f08e:	8bfb      	ldrh	r3, [r7, #30]
 800f090:	4413      	add	r3, r2
 800f092:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f096:	e0dc      	b.n	800f252 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	f000 80d7 	beq.w	800f252 <tcp_write+0x47a>
 800f0a4:	4b03      	ldr	r3, [pc, #12]	; (800f0b4 <tcp_write+0x2dc>)
 800f0a6:	f240 224a 	movw	r2, #586	; 0x24a
 800f0aa:	490a      	ldr	r1, [pc, #40]	; (800f0d4 <tcp_write+0x2fc>)
 800f0ac:	4803      	ldr	r0, [pc, #12]	; (800f0bc <tcp_write+0x2e4>)
 800f0ae:	f005 fd4b 	bl	8014b48 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800f0b2:	e0ce      	b.n	800f252 <tcp_write+0x47a>
 800f0b4:	080176cc 	.word	0x080176cc
 800f0b8:	0801786c 	.word	0x0801786c
 800f0bc:	08017720 	.word	0x08017720
 800f0c0:	08017884 	.word	0x08017884
 800f0c4:	080178b8 	.word	0x080178b8
 800f0c8:	080178d0 	.word	0x080178d0
 800f0cc:	080178f0 	.word	0x080178f0
 800f0d0:	08017910 	.word	0x08017910
 800f0d4:	0801793c 	.word	0x0801793c
    struct pbuf *p;
    u16_t left = len - pos;
 800f0d8:	88fa      	ldrh	r2, [r7, #6]
 800f0da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800f0e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f0ea:	1ad3      	subs	r3, r2, r3
 800f0ec:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800f0ee:	8b7a      	ldrh	r2, [r7, #26]
 800f0f0:	8bbb      	ldrh	r3, [r7, #28]
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	bf28      	it	cs
 800f0f6:	4613      	movcs	r3, r2
 800f0f8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f0fa:	797b      	ldrb	r3, [r7, #5]
 800f0fc:	f003 0301 	and.w	r3, r3, #1
 800f100:	2b00      	cmp	r3, #0
 800f102:	d036      	beq.n	800f172 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800f104:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f108:	b29a      	uxth	r2, r3
 800f10a:	8b3b      	ldrh	r3, [r7, #24]
 800f10c:	4413      	add	r3, r2
 800f10e:	b299      	uxth	r1, r3
 800f110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f112:	2b00      	cmp	r3, #0
 800f114:	bf0c      	ite	eq
 800f116:	2301      	moveq	r3, #1
 800f118:	2300      	movne	r3, #0
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	f107 0012 	add.w	r0, r7, #18
 800f120:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f122:	9302      	str	r3, [sp, #8]
 800f124:	797b      	ldrb	r3, [r7, #5]
 800f126:	9301      	str	r3, [sp, #4]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	9300      	str	r3, [sp, #0]
 800f12c:	4603      	mov	r3, r0
 800f12e:	2036      	movs	r0, #54	; 0x36
 800f130:	f7ff fd5e 	bl	800ebf0 <tcp_pbuf_prealloc>
 800f134:	6338      	str	r0, [r7, #48]	; 0x30
 800f136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f138:	2b00      	cmp	r3, #0
 800f13a:	f000 8178 	beq.w	800f42e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800f13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f140:	895b      	ldrh	r3, [r3, #10]
 800f142:	8b3a      	ldrh	r2, [r7, #24]
 800f144:	429a      	cmp	r2, r3
 800f146:	d906      	bls.n	800f156 <tcp_write+0x37e>
 800f148:	4b8c      	ldr	r3, [pc, #560]	; (800f37c <tcp_write+0x5a4>)
 800f14a:	f240 2266 	movw	r2, #614	; 0x266
 800f14e:	498c      	ldr	r1, [pc, #560]	; (800f380 <tcp_write+0x5a8>)
 800f150:	488c      	ldr	r0, [pc, #560]	; (800f384 <tcp_write+0x5ac>)
 800f152:	f005 fcf9 	bl	8014b48 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800f156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f158:	685a      	ldr	r2, [r3, #4]
 800f15a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f15e:	18d0      	adds	r0, r2, r3
 800f160:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f164:	68ba      	ldr	r2, [r7, #8]
 800f166:	4413      	add	r3, r2
 800f168:	8b3a      	ldrh	r2, [r7, #24]
 800f16a:	4619      	mov	r1, r3
 800f16c:	f005 fe4f 	bl	8014e0e <memcpy>
 800f170:	e02f      	b.n	800f1d2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800f172:	8a7b      	ldrh	r3, [r7, #18]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d006      	beq.n	800f186 <tcp_write+0x3ae>
 800f178:	4b80      	ldr	r3, [pc, #512]	; (800f37c <tcp_write+0x5a4>)
 800f17a:	f240 2271 	movw	r2, #625	; 0x271
 800f17e:	4982      	ldr	r1, [pc, #520]	; (800f388 <tcp_write+0x5b0>)
 800f180:	4880      	ldr	r0, [pc, #512]	; (800f384 <tcp_write+0x5ac>)
 800f182:	f005 fce1 	bl	8014b48 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800f186:	8b3b      	ldrh	r3, [r7, #24]
 800f188:	2201      	movs	r2, #1
 800f18a:	4619      	mov	r1, r3
 800f18c:	2036      	movs	r0, #54	; 0x36
 800f18e:	f7fa fe2d 	bl	8009dec <pbuf_alloc>
 800f192:	6178      	str	r0, [r7, #20]
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	2b00      	cmp	r3, #0
 800f198:	f000 814b 	beq.w	800f432 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800f19c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1a0:	68ba      	ldr	r2, [r7, #8]
 800f1a2:	441a      	add	r2, r3
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f1a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	2036      	movs	r0, #54	; 0x36
 800f1b6:	f7fa fe19 	bl	8009dec <pbuf_alloc>
 800f1ba:	6338      	str	r0, [r7, #48]	; 0x30
 800f1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d103      	bne.n	800f1ca <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800f1c2:	6978      	ldr	r0, [r7, #20]
 800f1c4:	f7fb f8f6 	bl	800a3b4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800f1c8:	e136      	b.n	800f438 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800f1ca:	6979      	ldr	r1, [r7, #20]
 800f1cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1ce:	f7fb f9b3 	bl	800a538 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800f1d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1d4:	f7fb f976 	bl	800a4c4 <pbuf_clen>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	461a      	mov	r2, r3
 800f1dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f1e0:	4413      	add	r3, r2
 800f1e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800f1e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f1ea:	2b09      	cmp	r3, #9
 800f1ec:	d903      	bls.n	800f1f6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800f1ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1f0:	f7fb f8e0 	bl	800a3b4 <pbuf_free>
      goto memerr;
 800f1f4:	e120      	b.n	800f438 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f1fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1fe:	441a      	add	r2, r3
 800f200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f204:	9300      	str	r3, [sp, #0]
 800f206:	4613      	mov	r3, r2
 800f208:	2200      	movs	r2, #0
 800f20a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f20c:	68f8      	ldr	r0, [r7, #12]
 800f20e:	f7ff fc51 	bl	800eab4 <tcp_create_segment>
 800f212:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f216:	2b00      	cmp	r3, #0
 800f218:	f000 810d 	beq.w	800f436 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800f21c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d102      	bne.n	800f228 <tcp_write+0x450>
      queue = seg;
 800f222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f224:	647b      	str	r3, [r7, #68]	; 0x44
 800f226:	e00c      	b.n	800f242 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800f228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d106      	bne.n	800f23c <tcp_write+0x464>
 800f22e:	4b53      	ldr	r3, [pc, #332]	; (800f37c <tcp_write+0x5a4>)
 800f230:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f234:	4955      	ldr	r1, [pc, #340]	; (800f38c <tcp_write+0x5b4>)
 800f236:	4853      	ldr	r0, [pc, #332]	; (800f384 <tcp_write+0x5ac>)
 800f238:	f005 fc86 	bl	8014b48 <iprintf>
      prev_seg->next = seg;
 800f23c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f23e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f240:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800f242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f244:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800f246:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f24a:	8b3b      	ldrh	r3, [r7, #24]
 800f24c:	4413      	add	r3, r2
 800f24e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800f252:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f256:	88fb      	ldrh	r3, [r7, #6]
 800f258:	429a      	cmp	r2, r3
 800f25a:	f4ff af3d 	bcc.w	800f0d8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800f25e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f260:	2b00      	cmp	r3, #0
 800f262:	d02c      	beq.n	800f2be <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800f264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f26a:	e01e      	b.n	800f2aa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800f26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26e:	891a      	ldrh	r2, [r3, #8]
 800f270:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f272:	4413      	add	r3, r2
 800f274:	b29a      	uxth	r2, r3
 800f276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f278:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800f27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d110      	bne.n	800f2a4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800f282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f288:	8952      	ldrh	r2, [r2, #10]
 800f28a:	4413      	add	r3, r2
 800f28c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f28e:	68b9      	ldr	r1, [r7, #8]
 800f290:	4618      	mov	r0, r3
 800f292:	f005 fdbc 	bl	8014e0e <memcpy>
        p->len += oversize_used;
 800f296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f298:	895a      	ldrh	r2, [r3, #10]
 800f29a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f29c:	4413      	add	r3, r2
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800f2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d1dd      	bne.n	800f26c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800f2b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2b2:	891a      	ldrh	r2, [r3, #8]
 800f2b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f2b6:	4413      	add	r3, r2
 800f2b8:	b29a      	uxth	r2, r3
 800f2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2bc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800f2be:	8a7a      	ldrh	r2, [r7, #18]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800f2c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d018      	beq.n	800f2fe <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800f2cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d106      	bne.n	800f2e0 <tcp_write+0x508>
 800f2d2:	4b2a      	ldr	r3, [pc, #168]	; (800f37c <tcp_write+0x5a4>)
 800f2d4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800f2d8:	492d      	ldr	r1, [pc, #180]	; (800f390 <tcp_write+0x5b8>)
 800f2da:	482a      	ldr	r0, [pc, #168]	; (800f384 <tcp_write+0x5ac>)
 800f2dc:	f005 fc34 	bl	8014b48 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800f2e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7fb f926 	bl	800a538 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800f2ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2ee:	891a      	ldrh	r2, [r3, #8]
 800f2f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2f2:	891b      	ldrh	r3, [r3, #8]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	b29a      	uxth	r2, r3
 800f2f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2fa:	811a      	strh	r2, [r3, #8]
 800f2fc:	e037      	b.n	800f36e <tcp_write+0x596>
  } else if (extendlen > 0) {
 800f2fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f300:	2b00      	cmp	r3, #0
 800f302:	d034      	beq.n	800f36e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800f304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f306:	2b00      	cmp	r3, #0
 800f308:	d003      	beq.n	800f312 <tcp_write+0x53a>
 800f30a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d106      	bne.n	800f320 <tcp_write+0x548>
 800f312:	4b1a      	ldr	r3, [pc, #104]	; (800f37c <tcp_write+0x5a4>)
 800f314:	f240 22e6 	movw	r2, #742	; 0x2e6
 800f318:	491e      	ldr	r1, [pc, #120]	; (800f394 <tcp_write+0x5bc>)
 800f31a:	481a      	ldr	r0, [pc, #104]	; (800f384 <tcp_write+0x5ac>)
 800f31c:	f005 fc14 	bl	8014b48 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f322:	685b      	ldr	r3, [r3, #4]
 800f324:	62bb      	str	r3, [r7, #40]	; 0x28
 800f326:	e009      	b.n	800f33c <tcp_write+0x564>
      p->tot_len += extendlen;
 800f328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32a:	891a      	ldrh	r2, [r3, #8]
 800f32c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f32e:	4413      	add	r3, r2
 800f330:	b29a      	uxth	r2, r3
 800f332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f334:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d1f1      	bne.n	800f328 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800f344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f346:	891a      	ldrh	r2, [r3, #8]
 800f348:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f34a:	4413      	add	r3, r2
 800f34c:	b29a      	uxth	r2, r3
 800f34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f350:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800f352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f354:	895a      	ldrh	r2, [r3, #10]
 800f356:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f358:	4413      	add	r3, r2
 800f35a:	b29a      	uxth	r2, r3
 800f35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800f360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f362:	891a      	ldrh	r2, [r3, #8]
 800f364:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f366:	4413      	add	r3, r2
 800f368:	b29a      	uxth	r2, r3
 800f36a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f36c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800f36e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f370:	2b00      	cmp	r3, #0
 800f372:	d111      	bne.n	800f398 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f378:	66da      	str	r2, [r3, #108]	; 0x6c
 800f37a:	e010      	b.n	800f39e <tcp_write+0x5c6>
 800f37c:	080176cc 	.word	0x080176cc
 800f380:	0801796c 	.word	0x0801796c
 800f384:	08017720 	.word	0x08017720
 800f388:	080179ac 	.word	0x080179ac
 800f38c:	080179bc 	.word	0x080179bc
 800f390:	080179d0 	.word	0x080179d0
 800f394:	08017a08 	.word	0x08017a08
  } else {
    last_unsent->next = queue;
 800f398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f39a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f39c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f3a2:	88fb      	ldrh	r3, [r7, #6]
 800f3a4:	441a      	add	r2, r3
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f3b0:	88fb      	ldrh	r3, [r7, #6]
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	b29a      	uxth	r2, r3
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f3c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d00e      	beq.n	800f3ee <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d10a      	bne.n	800f3ee <tcp_write+0x616>
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d106      	bne.n	800f3ee <tcp_write+0x616>
 800f3e0:	4b2c      	ldr	r3, [pc, #176]	; (800f494 <tcp_write+0x6bc>)
 800f3e2:	f240 3212 	movw	r2, #786	; 0x312
 800f3e6:	492c      	ldr	r1, [pc, #176]	; (800f498 <tcp_write+0x6c0>)
 800f3e8:	482c      	ldr	r0, [pc, #176]	; (800f49c <tcp_write+0x6c4>)
 800f3ea:	f005 fbad 	bl	8014b48 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800f3ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d016      	beq.n	800f422 <tcp_write+0x64a>
 800f3f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d012      	beq.n	800f422 <tcp_write+0x64a>
 800f3fc:	797b      	ldrb	r3, [r7, #5]
 800f3fe:	f003 0302 	and.w	r3, r3, #2
 800f402:	2b00      	cmp	r3, #0
 800f404:	d10d      	bne.n	800f422 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800f406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	899b      	ldrh	r3, [r3, #12]
 800f40c:	b29c      	uxth	r4, r3
 800f40e:	2008      	movs	r0, #8
 800f410:	f7f9 fc78 	bl	8008d04 <lwip_htons>
 800f414:	4603      	mov	r3, r0
 800f416:	461a      	mov	r2, r3
 800f418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	4322      	orrs	r2, r4
 800f41e:	b292      	uxth	r2, r2
 800f420:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800f422:	2300      	movs	r3, #0
 800f424:	e031      	b.n	800f48a <tcp_write+0x6b2>
          goto memerr;
 800f426:	bf00      	nop
 800f428:	e006      	b.n	800f438 <tcp_write+0x660>
            goto memerr;
 800f42a:	bf00      	nop
 800f42c:	e004      	b.n	800f438 <tcp_write+0x660>
        goto memerr;
 800f42e:	bf00      	nop
 800f430:	e002      	b.n	800f438 <tcp_write+0x660>
        goto memerr;
 800f432:	bf00      	nop
 800f434:	e000      	b.n	800f438 <tcp_write+0x660>
      goto memerr;
 800f436:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	8b5b      	ldrh	r3, [r3, #26]
 800f43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f440:	b29a      	uxth	r2, r3
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800f446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d002      	beq.n	800f452 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800f44c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f44e:	f7fa ffb1 	bl	800a3b4 <pbuf_free>
  }
  if (queue != NULL) {
 800f452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f454:	2b00      	cmp	r3, #0
 800f456:	d002      	beq.n	800f45e <tcp_write+0x686>
    tcp_segs_free(queue);
 800f458:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f45a:	f7fc fbc3 	bl	800bbe4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f464:	2b00      	cmp	r3, #0
 800f466:	d00e      	beq.n	800f486 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d10a      	bne.n	800f486 <tcp_write+0x6ae>
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f474:	2b00      	cmp	r3, #0
 800f476:	d106      	bne.n	800f486 <tcp_write+0x6ae>
 800f478:	4b06      	ldr	r3, [pc, #24]	; (800f494 <tcp_write+0x6bc>)
 800f47a:	f240 3227 	movw	r2, #807	; 0x327
 800f47e:	4906      	ldr	r1, [pc, #24]	; (800f498 <tcp_write+0x6c0>)
 800f480:	4806      	ldr	r0, [pc, #24]	; (800f49c <tcp_write+0x6c4>)
 800f482:	f005 fb61 	bl	8014b48 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800f486:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	375c      	adds	r7, #92	; 0x5c
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd90      	pop	{r4, r7, pc}
 800f492:	bf00      	nop
 800f494:	080176cc 	.word	0x080176cc
 800f498:	08017a40 	.word	0x08017a40
 800f49c:	08017720 	.word	0x08017720

0800f4a0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f4a0:	b590      	push	{r4, r7, lr}
 800f4a2:	b08b      	sub	sp, #44	; 0x2c
 800f4a4:	af02      	add	r7, sp, #8
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	61fb      	str	r3, [r7, #28]
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d106      	bne.n	800f4cc <tcp_split_unsent_seg+0x2c>
 800f4be:	4b95      	ldr	r3, [pc, #596]	; (800f714 <tcp_split_unsent_seg+0x274>)
 800f4c0:	f240 324b 	movw	r2, #843	; 0x34b
 800f4c4:	4994      	ldr	r1, [pc, #592]	; (800f718 <tcp_split_unsent_seg+0x278>)
 800f4c6:	4895      	ldr	r0, [pc, #596]	; (800f71c <tcp_split_unsent_seg+0x27c>)
 800f4c8:	f005 fb3e 	bl	8014b48 <iprintf>

  useg = pcb->unsent;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4d0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d102      	bne.n	800f4de <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4dc:	e116      	b.n	800f70c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f4de:	887b      	ldrh	r3, [r7, #2]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d109      	bne.n	800f4f8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f4e4:	4b8b      	ldr	r3, [pc, #556]	; (800f714 <tcp_split_unsent_seg+0x274>)
 800f4e6:	f240 3253 	movw	r2, #851	; 0x353
 800f4ea:	498d      	ldr	r1, [pc, #564]	; (800f720 <tcp_split_unsent_seg+0x280>)
 800f4ec:	488b      	ldr	r0, [pc, #556]	; (800f71c <tcp_split_unsent_seg+0x27c>)
 800f4ee:	f005 fb2b 	bl	8014b48 <iprintf>
    return ERR_VAL;
 800f4f2:	f06f 0305 	mvn.w	r3, #5
 800f4f6:	e109      	b.n	800f70c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	891b      	ldrh	r3, [r3, #8]
 800f4fc:	887a      	ldrh	r2, [r7, #2]
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d301      	bcc.n	800f506 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f502:	2300      	movs	r3, #0
 800f504:	e102      	b.n	800f70c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f50a:	887a      	ldrh	r2, [r7, #2]
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d906      	bls.n	800f51e <tcp_split_unsent_seg+0x7e>
 800f510:	4b80      	ldr	r3, [pc, #512]	; (800f714 <tcp_split_unsent_seg+0x274>)
 800f512:	f240 325b 	movw	r2, #859	; 0x35b
 800f516:	4983      	ldr	r1, [pc, #524]	; (800f724 <tcp_split_unsent_seg+0x284>)
 800f518:	4880      	ldr	r0, [pc, #512]	; (800f71c <tcp_split_unsent_seg+0x27c>)
 800f51a:	f005 fb15 	bl	8014b48 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	891b      	ldrh	r3, [r3, #8]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d106      	bne.n	800f534 <tcp_split_unsent_seg+0x94>
 800f526:	4b7b      	ldr	r3, [pc, #492]	; (800f714 <tcp_split_unsent_seg+0x274>)
 800f528:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f52c:	497e      	ldr	r1, [pc, #504]	; (800f728 <tcp_split_unsent_seg+0x288>)
 800f52e:	487b      	ldr	r0, [pc, #492]	; (800f71c <tcp_split_unsent_seg+0x27c>)
 800f530:	f005 fb0a 	bl	8014b48 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	7a9b      	ldrb	r3, [r3, #10]
 800f538:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f53a:	7bfb      	ldrb	r3, [r7, #15]
 800f53c:	009b      	lsls	r3, r3, #2
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	f003 0304 	and.w	r3, r3, #4
 800f544:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	891a      	ldrh	r2, [r3, #8]
 800f54a:	887b      	ldrh	r3, [r7, #2]
 800f54c:	1ad3      	subs	r3, r2, r3
 800f54e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f550:	7bbb      	ldrb	r3, [r7, #14]
 800f552:	b29a      	uxth	r2, r3
 800f554:	89bb      	ldrh	r3, [r7, #12]
 800f556:	4413      	add	r3, r2
 800f558:	b29b      	uxth	r3, r3
 800f55a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f55e:	4619      	mov	r1, r3
 800f560:	2036      	movs	r0, #54	; 0x36
 800f562:	f7fa fc43 	bl	8009dec <pbuf_alloc>
 800f566:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	f000 80b7 	beq.w	800f6de <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	891a      	ldrh	r2, [r3, #8]
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	891b      	ldrh	r3, [r3, #8]
 800f57a:	1ad3      	subs	r3, r2, r3
 800f57c:	b29a      	uxth	r2, r3
 800f57e:	887b      	ldrh	r3, [r7, #2]
 800f580:	4413      	add	r3, r2
 800f582:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	6858      	ldr	r0, [r3, #4]
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	685a      	ldr	r2, [r3, #4]
 800f58c:	7bbb      	ldrb	r3, [r7, #14]
 800f58e:	18d1      	adds	r1, r2, r3
 800f590:	897b      	ldrh	r3, [r7, #10]
 800f592:	89ba      	ldrh	r2, [r7, #12]
 800f594:	f7fb f8f8 	bl	800a788 <pbuf_copy_partial>
 800f598:	4603      	mov	r3, r0
 800f59a:	461a      	mov	r2, r3
 800f59c:	89bb      	ldrh	r3, [r7, #12]
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	f040 809f 	bne.w	800f6e2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	68db      	ldr	r3, [r3, #12]
 800f5a8:	899b      	ldrh	r3, [r3, #12]
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7f9 fba9 	bl	8008d04 <lwip_htons>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	b2db      	uxtb	r3, r3
 800f5b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5ba:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f5bc:	2300      	movs	r3, #0
 800f5be:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f5c0:	7efb      	ldrb	r3, [r7, #27]
 800f5c2:	f003 0308 	and.w	r3, r3, #8
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d007      	beq.n	800f5da <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f5ca:	7efb      	ldrb	r3, [r7, #27]
 800f5cc:	f023 0308 	bic.w	r3, r3, #8
 800f5d0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f5d2:	7ebb      	ldrb	r3, [r7, #26]
 800f5d4:	f043 0308 	orr.w	r3, r3, #8
 800f5d8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f5da:	7efb      	ldrb	r3, [r7, #27]
 800f5dc:	f003 0301 	and.w	r3, r3, #1
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d007      	beq.n	800f5f4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f5e4:	7efb      	ldrb	r3, [r7, #27]
 800f5e6:	f023 0301 	bic.w	r3, r3, #1
 800f5ea:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f5ec:	7ebb      	ldrb	r3, [r7, #26]
 800f5ee:	f043 0301 	orr.w	r3, r3, #1
 800f5f2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	68db      	ldr	r3, [r3, #12]
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7f9 fb97 	bl	8008d2e <lwip_htonl>
 800f600:	4602      	mov	r2, r0
 800f602:	887b      	ldrh	r3, [r7, #2]
 800f604:	18d1      	adds	r1, r2, r3
 800f606:	7eba      	ldrb	r2, [r7, #26]
 800f608:	7bfb      	ldrb	r3, [r7, #15]
 800f60a:	9300      	str	r3, [sp, #0]
 800f60c:	460b      	mov	r3, r1
 800f60e:	6939      	ldr	r1, [r7, #16]
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f7ff fa4f 	bl	800eab4 <tcp_create_segment>
 800f616:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d063      	beq.n	800f6e6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	4618      	mov	r0, r3
 800f624:	f7fa ff4e 	bl	800a4c4 <pbuf_clen>
 800f628:	4603      	mov	r3, r0
 800f62a:	461a      	mov	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f632:	1a9b      	subs	r3, r3, r2
 800f634:	b29a      	uxth	r2, r3
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	6858      	ldr	r0, [r3, #4]
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	891a      	ldrh	r2, [r3, #8]
 800f646:	89bb      	ldrh	r3, [r7, #12]
 800f648:	1ad3      	subs	r3, r2, r3
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	4619      	mov	r1, r3
 800f64e:	f7fa fd2b 	bl	800a0a8 <pbuf_realloc>
  useg->len -= remainder;
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	891a      	ldrh	r2, [r3, #8]
 800f656:	89bb      	ldrh	r3, [r7, #12]
 800f658:	1ad3      	subs	r3, r2, r3
 800f65a:	b29a      	uxth	r2, r3
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	68db      	ldr	r3, [r3, #12]
 800f664:	899b      	ldrh	r3, [r3, #12]
 800f666:	b29c      	uxth	r4, r3
 800f668:	7efb      	ldrb	r3, [r7, #27]
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7f9 fb49 	bl	8008d04 <lwip_htons>
 800f672:	4603      	mov	r3, r0
 800f674:	461a      	mov	r2, r3
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	68db      	ldr	r3, [r3, #12]
 800f67a:	4322      	orrs	r2, r4
 800f67c:	b292      	uxth	r2, r2
 800f67e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	4618      	mov	r0, r3
 800f686:	f7fa ff1d 	bl	800a4c4 <pbuf_clen>
 800f68a:	4603      	mov	r3, r0
 800f68c:	461a      	mov	r2, r3
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f694:	4413      	add	r3, r2
 800f696:	b29a      	uxth	r2, r3
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f69e:	69fb      	ldr	r3, [r7, #28]
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fa ff0e 	bl	800a4c4 <pbuf_clen>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f6b2:	4413      	add	r3, r2
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	681a      	ldr	r2, [r3, #0]
 800f6c0:	69fb      	ldr	r3, [r7, #28]
 800f6c2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	69fa      	ldr	r2, [r7, #28]
 800f6c8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f6ca:	69fb      	ldr	r3, [r7, #28]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d103      	bne.n	800f6da <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	e016      	b.n	800f70c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f6de:	bf00      	nop
 800f6e0:	e002      	b.n	800f6e8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f6e2:	bf00      	nop
 800f6e4:	e000      	b.n	800f6e8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f6e6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d006      	beq.n	800f6fc <tcp_split_unsent_seg+0x25c>
 800f6ee:	4b09      	ldr	r3, [pc, #36]	; (800f714 <tcp_split_unsent_seg+0x274>)
 800f6f0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f6f4:	490d      	ldr	r1, [pc, #52]	; (800f72c <tcp_split_unsent_seg+0x28c>)
 800f6f6:	4809      	ldr	r0, [pc, #36]	; (800f71c <tcp_split_unsent_seg+0x27c>)
 800f6f8:	f005 fa26 	bl	8014b48 <iprintf>
  if (p != NULL) {
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d002      	beq.n	800f708 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f702:	6938      	ldr	r0, [r7, #16]
 800f704:	f7fa fe56 	bl	800a3b4 <pbuf_free>
  }

  return ERR_MEM;
 800f708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3724      	adds	r7, #36	; 0x24
 800f710:	46bd      	mov	sp, r7
 800f712:	bd90      	pop	{r4, r7, pc}
 800f714:	080176cc 	.word	0x080176cc
 800f718:	08017a60 	.word	0x08017a60
 800f71c:	08017720 	.word	0x08017720
 800f720:	08017a84 	.word	0x08017a84
 800f724:	08017aa8 	.word	0x08017aa8
 800f728:	08017ab8 	.word	0x08017ab8
 800f72c:	08017ac8 	.word	0x08017ac8

0800f730 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f730:	b590      	push	{r4, r7, lr}
 800f732:	b085      	sub	sp, #20
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d106      	bne.n	800f74c <tcp_send_fin+0x1c>
 800f73e:	4b21      	ldr	r3, [pc, #132]	; (800f7c4 <tcp_send_fin+0x94>)
 800f740:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f744:	4920      	ldr	r1, [pc, #128]	; (800f7c8 <tcp_send_fin+0x98>)
 800f746:	4821      	ldr	r0, [pc, #132]	; (800f7cc <tcp_send_fin+0x9c>)
 800f748:	f005 f9fe 	bl	8014b48 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f750:	2b00      	cmp	r3, #0
 800f752:	d02e      	beq.n	800f7b2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f758:	60fb      	str	r3, [r7, #12]
 800f75a:	e002      	b.n	800f762 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d1f8      	bne.n	800f75c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	68db      	ldr	r3, [r3, #12]
 800f76e:	899b      	ldrh	r3, [r3, #12]
 800f770:	b29b      	uxth	r3, r3
 800f772:	4618      	mov	r0, r3
 800f774:	f7f9 fac6 	bl	8008d04 <lwip_htons>
 800f778:	4603      	mov	r3, r0
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	f003 0307 	and.w	r3, r3, #7
 800f780:	2b00      	cmp	r3, #0
 800f782:	d116      	bne.n	800f7b2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	899b      	ldrh	r3, [r3, #12]
 800f78a:	b29c      	uxth	r4, r3
 800f78c:	2001      	movs	r0, #1
 800f78e:	f7f9 fab9 	bl	8008d04 <lwip_htons>
 800f792:	4603      	mov	r3, r0
 800f794:	461a      	mov	r2, r3
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	68db      	ldr	r3, [r3, #12]
 800f79a:	4322      	orrs	r2, r4
 800f79c:	b292      	uxth	r2, r2
 800f79e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	8b5b      	ldrh	r3, [r3, #26]
 800f7a4:	f043 0320 	orr.w	r3, r3, #32
 800f7a8:	b29a      	uxth	r2, r3
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	e004      	b.n	800f7bc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f7b2:	2101      	movs	r1, #1
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 f80b 	bl	800f7d0 <tcp_enqueue_flags>
 800f7ba:	4603      	mov	r3, r0
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3714      	adds	r7, #20
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd90      	pop	{r4, r7, pc}
 800f7c4:	080176cc 	.word	0x080176cc
 800f7c8:	08017ad4 	.word	0x08017ad4
 800f7cc:	08017720 	.word	0x08017720

0800f7d0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b08a      	sub	sp, #40	; 0x28
 800f7d4:	af02      	add	r7, sp, #8
 800f7d6:	6078      	str	r0, [r7, #4]
 800f7d8:	460b      	mov	r3, r1
 800f7da:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f7e4:	78fb      	ldrb	r3, [r7, #3]
 800f7e6:	f003 0303 	and.w	r3, r3, #3
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d106      	bne.n	800f7fc <tcp_enqueue_flags+0x2c>
 800f7ee:	4b67      	ldr	r3, [pc, #412]	; (800f98c <tcp_enqueue_flags+0x1bc>)
 800f7f0:	f240 4211 	movw	r2, #1041	; 0x411
 800f7f4:	4966      	ldr	r1, [pc, #408]	; (800f990 <tcp_enqueue_flags+0x1c0>)
 800f7f6:	4867      	ldr	r0, [pc, #412]	; (800f994 <tcp_enqueue_flags+0x1c4>)
 800f7f8:	f005 f9a6 	bl	8014b48 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d106      	bne.n	800f810 <tcp_enqueue_flags+0x40>
 800f802:	4b62      	ldr	r3, [pc, #392]	; (800f98c <tcp_enqueue_flags+0x1bc>)
 800f804:	f240 4213 	movw	r2, #1043	; 0x413
 800f808:	4963      	ldr	r1, [pc, #396]	; (800f998 <tcp_enqueue_flags+0x1c8>)
 800f80a:	4862      	ldr	r0, [pc, #392]	; (800f994 <tcp_enqueue_flags+0x1c4>)
 800f80c:	f005 f99c 	bl	8014b48 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f810:	78fb      	ldrb	r3, [r7, #3]
 800f812:	f003 0302 	and.w	r3, r3, #2
 800f816:	2b00      	cmp	r3, #0
 800f818:	d001      	beq.n	800f81e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f81a:	2301      	movs	r3, #1
 800f81c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f81e:	7ffb      	ldrb	r3, [r7, #31]
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	b2db      	uxtb	r3, r3
 800f824:	f003 0304 	and.w	r3, r3, #4
 800f828:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f82a:	7dfb      	ldrb	r3, [r7, #23]
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f832:	4619      	mov	r1, r3
 800f834:	2036      	movs	r0, #54	; 0x36
 800f836:	f7fa fad9 	bl	8009dec <pbuf_alloc>
 800f83a:	6138      	str	r0, [r7, #16]
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d109      	bne.n	800f856 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	8b5b      	ldrh	r3, [r3, #26]
 800f846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f850:	f04f 33ff 	mov.w	r3, #4294967295
 800f854:	e095      	b.n	800f982 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	895a      	ldrh	r2, [r3, #10]
 800f85a:	7dfb      	ldrb	r3, [r7, #23]
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	429a      	cmp	r2, r3
 800f860:	d206      	bcs.n	800f870 <tcp_enqueue_flags+0xa0>
 800f862:	4b4a      	ldr	r3, [pc, #296]	; (800f98c <tcp_enqueue_flags+0x1bc>)
 800f864:	f240 4239 	movw	r2, #1081	; 0x439
 800f868:	494c      	ldr	r1, [pc, #304]	; (800f99c <tcp_enqueue_flags+0x1cc>)
 800f86a:	484a      	ldr	r0, [pc, #296]	; (800f994 <tcp_enqueue_flags+0x1c4>)
 800f86c:	f005 f96c 	bl	8014b48 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f874:	78fa      	ldrb	r2, [r7, #3]
 800f876:	7ffb      	ldrb	r3, [r7, #31]
 800f878:	9300      	str	r3, [sp, #0]
 800f87a:	460b      	mov	r3, r1
 800f87c:	6939      	ldr	r1, [r7, #16]
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f7ff f918 	bl	800eab4 <tcp_create_segment>
 800f884:	60f8      	str	r0, [r7, #12]
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d109      	bne.n	800f8a0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	8b5b      	ldrh	r3, [r3, #26]
 800f890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f894:	b29a      	uxth	r2, r3
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f89a:	f04f 33ff 	mov.w	r3, #4294967295
 800f89e:	e070      	b.n	800f982 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	68db      	ldr	r3, [r3, #12]
 800f8a4:	f003 0303 	and.w	r3, r3, #3
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d006      	beq.n	800f8ba <tcp_enqueue_flags+0xea>
 800f8ac:	4b37      	ldr	r3, [pc, #220]	; (800f98c <tcp_enqueue_flags+0x1bc>)
 800f8ae:	f240 4242 	movw	r2, #1090	; 0x442
 800f8b2:	493b      	ldr	r1, [pc, #236]	; (800f9a0 <tcp_enqueue_flags+0x1d0>)
 800f8b4:	4837      	ldr	r0, [pc, #220]	; (800f994 <tcp_enqueue_flags+0x1c4>)
 800f8b6:	f005 f947 	bl	8014b48 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	891b      	ldrh	r3, [r3, #8]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d006      	beq.n	800f8d0 <tcp_enqueue_flags+0x100>
 800f8c2:	4b32      	ldr	r3, [pc, #200]	; (800f98c <tcp_enqueue_flags+0x1bc>)
 800f8c4:	f240 4243 	movw	r2, #1091	; 0x443
 800f8c8:	4936      	ldr	r1, [pc, #216]	; (800f9a4 <tcp_enqueue_flags+0x1d4>)
 800f8ca:	4832      	ldr	r0, [pc, #200]	; (800f994 <tcp_enqueue_flags+0x1c4>)
 800f8cc:	f005 f93c 	bl	8014b48 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d103      	bne.n	800f8e0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	68fa      	ldr	r2, [r7, #12]
 800f8dc:	66da      	str	r2, [r3, #108]	; 0x6c
 800f8de:	e00d      	b.n	800f8fc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8e4:	61bb      	str	r3, [r7, #24]
 800f8e6:	e002      	b.n	800f8ee <tcp_enqueue_flags+0x11e>
 800f8e8:	69bb      	ldr	r3, [r7, #24]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	61bb      	str	r3, [r7, #24]
 800f8ee:	69bb      	ldr	r3, [r7, #24]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d1f8      	bne.n	800f8e8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f8f6:	69bb      	ldr	r3, [r7, #24]
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2200      	movs	r2, #0
 800f900:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f904:	78fb      	ldrb	r3, [r7, #3]
 800f906:	f003 0302 	and.w	r3, r3, #2
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d104      	bne.n	800f918 <tcp_enqueue_flags+0x148>
 800f90e:	78fb      	ldrb	r3, [r7, #3]
 800f910:	f003 0301 	and.w	r3, r3, #1
 800f914:	2b00      	cmp	r3, #0
 800f916:	d004      	beq.n	800f922 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f91c:	1c5a      	adds	r2, r3, #1
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f922:	78fb      	ldrb	r3, [r7, #3]
 800f924:	f003 0301 	and.w	r3, r3, #1
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d006      	beq.n	800f93a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	8b5b      	ldrh	r3, [r3, #26]
 800f930:	f043 0320 	orr.w	r3, r3, #32
 800f934:	b29a      	uxth	r2, r3
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	685b      	ldr	r3, [r3, #4]
 800f93e:	4618      	mov	r0, r3
 800f940:	f7fa fdc0 	bl	800a4c4 <pbuf_clen>
 800f944:	4603      	mov	r3, r0
 800f946:	461a      	mov	r2, r3
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f94e:	4413      	add	r3, r2
 800f950:	b29a      	uxth	r2, r3
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d00e      	beq.n	800f980 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f966:	2b00      	cmp	r3, #0
 800f968:	d10a      	bne.n	800f980 <tcp_enqueue_flags+0x1b0>
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d106      	bne.n	800f980 <tcp_enqueue_flags+0x1b0>
 800f972:	4b06      	ldr	r3, [pc, #24]	; (800f98c <tcp_enqueue_flags+0x1bc>)
 800f974:	f240 4265 	movw	r2, #1125	; 0x465
 800f978:	490b      	ldr	r1, [pc, #44]	; (800f9a8 <tcp_enqueue_flags+0x1d8>)
 800f97a:	4806      	ldr	r0, [pc, #24]	; (800f994 <tcp_enqueue_flags+0x1c4>)
 800f97c:	f005 f8e4 	bl	8014b48 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f980:	2300      	movs	r3, #0
}
 800f982:	4618      	mov	r0, r3
 800f984:	3720      	adds	r7, #32
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	080176cc 	.word	0x080176cc
 800f990:	08017af0 	.word	0x08017af0
 800f994:	08017720 	.word	0x08017720
 800f998:	08017b48 	.word	0x08017b48
 800f99c:	08017b68 	.word	0x08017b68
 800f9a0:	08017ba4 	.word	0x08017ba4
 800f9a4:	08017bbc 	.word	0x08017bbc
 800f9a8:	08017be8 	.word	0x08017be8

0800f9ac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f9ac:	b5b0      	push	{r4, r5, r7, lr}
 800f9ae:	b08a      	sub	sp, #40	; 0x28
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d106      	bne.n	800f9c8 <tcp_output+0x1c>
 800f9ba:	4b8a      	ldr	r3, [pc, #552]	; (800fbe4 <tcp_output+0x238>)
 800f9bc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f9c0:	4989      	ldr	r1, [pc, #548]	; (800fbe8 <tcp_output+0x23c>)
 800f9c2:	488a      	ldr	r0, [pc, #552]	; (800fbec <tcp_output+0x240>)
 800f9c4:	f005 f8c0 	bl	8014b48 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	7d1b      	ldrb	r3, [r3, #20]
 800f9cc:	2b01      	cmp	r3, #1
 800f9ce:	d106      	bne.n	800f9de <tcp_output+0x32>
 800f9d0:	4b84      	ldr	r3, [pc, #528]	; (800fbe4 <tcp_output+0x238>)
 800f9d2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f9d6:	4986      	ldr	r1, [pc, #536]	; (800fbf0 <tcp_output+0x244>)
 800f9d8:	4884      	ldr	r0, [pc, #528]	; (800fbec <tcp_output+0x240>)
 800f9da:	f005 f8b5 	bl	8014b48 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f9de:	4b85      	ldr	r3, [pc, #532]	; (800fbf4 <tcp_output+0x248>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	687a      	ldr	r2, [r7, #4]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d101      	bne.n	800f9ec <tcp_output+0x40>
    return ERR_OK;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	e1ce      	b.n	800fd8a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9f8:	4293      	cmp	r3, r2
 800f9fa:	bf28      	it	cs
 800f9fc:	4613      	movcs	r3, r2
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa06:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800fa08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d10b      	bne.n	800fa26 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	8b5b      	ldrh	r3, [r3, #26]
 800fa12:	f003 0302 	and.w	r3, r3, #2
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	f000 81aa 	beq.w	800fd70 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f000 fdcb 	bl	80105b8 <tcp_send_empty_ack>
 800fa22:	4603      	mov	r3, r0
 800fa24:	e1b1      	b.n	800fd8a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800fa26:	6879      	ldr	r1, [r7, #4]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	3304      	adds	r3, #4
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f7ff f824 	bl	800ea7c <tcp_route>
 800fa34:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d102      	bne.n	800fa42 <tcp_output+0x96>
    return ERR_RTE;
 800fa3c:	f06f 0303 	mvn.w	r3, #3
 800fa40:	e1a3      	b.n	800fd8a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d003      	beq.n	800fa50 <tcp_output+0xa4>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d111      	bne.n	800fa74 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d002      	beq.n	800fa5c <tcp_output+0xb0>
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	3304      	adds	r3, #4
 800fa5a:	e000      	b.n	800fa5e <tcp_output+0xb2>
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d102      	bne.n	800fa6c <tcp_output+0xc0>
      return ERR_RTE;
 800fa66:	f06f 0303 	mvn.w	r3, #3
 800fa6a:	e18e      	b.n	800fd8a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	681a      	ldr	r2, [r3, #0]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7f9 f957 	bl	8008d2e <lwip_htonl>
 800fa80:	4602      	mov	r2, r0
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa86:	1ad3      	subs	r3, r2, r3
 800fa88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa8a:	8912      	ldrh	r2, [r2, #8]
 800fa8c:	4413      	add	r3, r2
 800fa8e:	69ba      	ldr	r2, [r7, #24]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d227      	bcs.n	800fae4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d114      	bne.n	800facc <tcp_output+0x120>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d110      	bne.n	800facc <tcp_output+0x120>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d10b      	bne.n	800facc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2200      	movs	r2, #0
 800fab8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2201      	movs	r2, #1
 800fac0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2200      	movs	r2, #0
 800fac8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	8b5b      	ldrh	r3, [r3, #26]
 800fad0:	f003 0302 	and.w	r3, r3, #2
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f000 814d 	beq.w	800fd74 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f000 fd6c 	bl	80105b8 <tcp_send_empty_ack>
 800fae0:	4603      	mov	r3, r0
 800fae2:	e152      	b.n	800fd8a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2200      	movs	r2, #0
 800fae8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faf0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800faf2:	6a3b      	ldr	r3, [r7, #32]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f000 811c 	beq.w	800fd32 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800fafa:	e002      	b.n	800fb02 <tcp_output+0x156>
 800fafc:	6a3b      	ldr	r3, [r7, #32]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	623b      	str	r3, [r7, #32]
 800fb02:	6a3b      	ldr	r3, [r7, #32]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d1f8      	bne.n	800fafc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800fb0a:	e112      	b.n	800fd32 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800fb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0e:	68db      	ldr	r3, [r3, #12]
 800fb10:	899b      	ldrh	r3, [r3, #12]
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7f9 f8f5 	bl	8008d04 <lwip_htons>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	b2db      	uxtb	r3, r3
 800fb1e:	f003 0304 	and.w	r3, r3, #4
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d006      	beq.n	800fb34 <tcp_output+0x188>
 800fb26:	4b2f      	ldr	r3, [pc, #188]	; (800fbe4 <tcp_output+0x238>)
 800fb28:	f240 5236 	movw	r2, #1334	; 0x536
 800fb2c:	4932      	ldr	r1, [pc, #200]	; (800fbf8 <tcp_output+0x24c>)
 800fb2e:	482f      	ldr	r0, [pc, #188]	; (800fbec <tcp_output+0x240>)
 800fb30:	f005 f80a 	bl	8014b48 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d01f      	beq.n	800fb7c <tcp_output+0x1d0>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	8b5b      	ldrh	r3, [r3, #26]
 800fb40:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d119      	bne.n	800fb7c <tcp_output+0x1d0>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d00b      	beq.n	800fb68 <tcp_output+0x1bc>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d110      	bne.n	800fb7c <tcp_output+0x1d0>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb5e:	891a      	ldrh	r2, [r3, #8]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d209      	bcs.n	800fb7c <tcp_output+0x1d0>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d004      	beq.n	800fb7c <tcp_output+0x1d0>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb78:	2b08      	cmp	r3, #8
 800fb7a:	d901      	bls.n	800fb80 <tcp_output+0x1d4>
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	e000      	b.n	800fb82 <tcp_output+0x1d6>
 800fb80:	2300      	movs	r3, #0
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d106      	bne.n	800fb94 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	8b5b      	ldrh	r3, [r3, #26]
 800fb8a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	f000 80e4 	beq.w	800fd5c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	7d1b      	ldrb	r3, [r3, #20]
 800fb98:	2b02      	cmp	r3, #2
 800fb9a:	d00d      	beq.n	800fbb8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800fb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9e:	68db      	ldr	r3, [r3, #12]
 800fba0:	899b      	ldrh	r3, [r3, #12]
 800fba2:	b29c      	uxth	r4, r3
 800fba4:	2010      	movs	r0, #16
 800fba6:	f7f9 f8ad 	bl	8008d04 <lwip_htons>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	461a      	mov	r2, r3
 800fbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb0:	68db      	ldr	r3, [r3, #12]
 800fbb2:	4322      	orrs	r2, r4
 800fbb4:	b292      	uxth	r2, r2
 800fbb6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800fbb8:	697a      	ldr	r2, [r7, #20]
 800fbba:	6879      	ldr	r1, [r7, #4]
 800fbbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbbe:	f000 f909 	bl	800fdd4 <tcp_output_segment>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800fbc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d016      	beq.n	800fbfc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	8b5b      	ldrh	r3, [r3, #26]
 800fbd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbd6:	b29a      	uxth	r2, r3
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	835a      	strh	r2, [r3, #26]
      return err;
 800fbdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbe0:	e0d3      	b.n	800fd8a <tcp_output+0x3de>
 800fbe2:	bf00      	nop
 800fbe4:	080176cc 	.word	0x080176cc
 800fbe8:	08017c10 	.word	0x08017c10
 800fbec:	08017720 	.word	0x08017720
 800fbf0:	08017c28 	.word	0x08017c28
 800fbf4:	2000e4f0 	.word	0x2000e4f0
 800fbf8:	08017c50 	.word	0x08017c50
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800fbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfe:	681a      	ldr	r2, [r3, #0]
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	7d1b      	ldrb	r3, [r3, #20]
 800fc08:	2b02      	cmp	r3, #2
 800fc0a:	d006      	beq.n	800fc1a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	8b5b      	ldrh	r3, [r3, #26]
 800fc10:	f023 0303 	bic.w	r3, r3, #3
 800fc14:	b29a      	uxth	r2, r3
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	68db      	ldr	r3, [r3, #12]
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7f9 f884 	bl	8008d2e <lwip_htonl>
 800fc26:	4604      	mov	r4, r0
 800fc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2a:	891b      	ldrh	r3, [r3, #8]
 800fc2c:	461d      	mov	r5, r3
 800fc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc30:	68db      	ldr	r3, [r3, #12]
 800fc32:	899b      	ldrh	r3, [r3, #12]
 800fc34:	b29b      	uxth	r3, r3
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7f9 f864 	bl	8008d04 <lwip_htons>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	f003 0303 	and.w	r3, r3, #3
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d001      	beq.n	800fc4c <tcp_output+0x2a0>
 800fc48:	2301      	movs	r3, #1
 800fc4a:	e000      	b.n	800fc4e <tcp_output+0x2a2>
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	442b      	add	r3, r5
 800fc50:	4423      	add	r3, r4
 800fc52:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	1ad3      	subs	r3, r2, r3
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	da02      	bge.n	800fc66 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	68ba      	ldr	r2, [r7, #8]
 800fc64:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800fc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc68:	891b      	ldrh	r3, [r3, #8]
 800fc6a:	461c      	mov	r4, r3
 800fc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6e:	68db      	ldr	r3, [r3, #12]
 800fc70:	899b      	ldrh	r3, [r3, #12]
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7f9 f845 	bl	8008d04 <lwip_htons>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	b2db      	uxtb	r3, r3
 800fc7e:	f003 0303 	and.w	r3, r3, #3
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d001      	beq.n	800fc8a <tcp_output+0x2de>
 800fc86:	2301      	movs	r3, #1
 800fc88:	e000      	b.n	800fc8c <tcp_output+0x2e0>
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	4423      	add	r3, r4
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d049      	beq.n	800fd26 <tcp_output+0x37a>
      seg->next = NULL;
 800fc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc94:	2200      	movs	r2, #0
 800fc96:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d105      	bne.n	800fcac <tcp_output+0x300>
        pcb->unacked = seg;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fca4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800fca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca8:	623b      	str	r3, [r7, #32]
 800fcaa:	e03f      	b.n	800fd2c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcae:	68db      	ldr	r3, [r3, #12]
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7f9 f83b 	bl	8008d2e <lwip_htonl>
 800fcb8:	4604      	mov	r4, r0
 800fcba:	6a3b      	ldr	r3, [r7, #32]
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7f9 f834 	bl	8008d2e <lwip_htonl>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	1ae3      	subs	r3, r4, r3
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	da24      	bge.n	800fd18 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	3370      	adds	r3, #112	; 0x70
 800fcd2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fcd4:	e002      	b.n	800fcdc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d011      	beq.n	800fd08 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	68db      	ldr	r3, [r3, #12]
 800fcea:	685b      	ldr	r3, [r3, #4]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7f9 f81e 	bl	8008d2e <lwip_htonl>
 800fcf2:	4604      	mov	r4, r0
 800fcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf6:	68db      	ldr	r3, [r3, #12]
 800fcf8:	685b      	ldr	r3, [r3, #4]
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7f9 f817 	bl	8008d2e <lwip_htonl>
 800fd00:	4603      	mov	r3, r0
 800fd02:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	dbe6      	blt.n	800fcd6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	681a      	ldr	r2, [r3, #0]
 800fd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd0e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fd10:	69fb      	ldr	r3, [r7, #28]
 800fd12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd14:	601a      	str	r2, [r3, #0]
 800fd16:	e009      	b.n	800fd2c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fd18:	6a3b      	ldr	r3, [r7, #32]
 800fd1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd1c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fd1e:	6a3b      	ldr	r3, [r7, #32]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	623b      	str	r3, [r7, #32]
 800fd24:	e002      	b.n	800fd2c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800fd26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd28:	f7fb ff71 	bl	800bc0e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd30:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800fd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d012      	beq.n	800fd5e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3a:	68db      	ldr	r3, [r3, #12]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7f8 fff5 	bl	8008d2e <lwip_htonl>
 800fd44:	4602      	mov	r2, r0
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd4a:	1ad3      	subs	r3, r2, r3
 800fd4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd4e:	8912      	ldrh	r2, [r2, #8]
 800fd50:	4413      	add	r3, r2
  while (seg != NULL &&
 800fd52:	69ba      	ldr	r2, [r7, #24]
 800fd54:	429a      	cmp	r2, r3
 800fd56:	f4bf aed9 	bcs.w	800fb0c <tcp_output+0x160>
 800fd5a:	e000      	b.n	800fd5e <tcp_output+0x3b2>
      break;
 800fd5c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d108      	bne.n	800fd78 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800fd6e:	e004      	b.n	800fd7a <tcp_output+0x3ce>
    goto output_done;
 800fd70:	bf00      	nop
 800fd72:	e002      	b.n	800fd7a <tcp_output+0x3ce>
    goto output_done;
 800fd74:	bf00      	nop
 800fd76:	e000      	b.n	800fd7a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800fd78:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	8b5b      	ldrh	r3, [r3, #26]
 800fd7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800fd88:	2300      	movs	r3, #0
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3728      	adds	r7, #40	; 0x28
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bdb0      	pop	{r4, r5, r7, pc}
 800fd92:	bf00      	nop

0800fd94 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d106      	bne.n	800fdb0 <tcp_output_segment_busy+0x1c>
 800fda2:	4b09      	ldr	r3, [pc, #36]	; (800fdc8 <tcp_output_segment_busy+0x34>)
 800fda4:	f240 529a 	movw	r2, #1434	; 0x59a
 800fda8:	4908      	ldr	r1, [pc, #32]	; (800fdcc <tcp_output_segment_busy+0x38>)
 800fdaa:	4809      	ldr	r0, [pc, #36]	; (800fdd0 <tcp_output_segment_busy+0x3c>)
 800fdac:	f004 fecc 	bl	8014b48 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	7b9b      	ldrb	r3, [r3, #14]
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d001      	beq.n	800fdbe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800fdba:	2301      	movs	r3, #1
 800fdbc:	e000      	b.n	800fdc0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800fdbe:	2300      	movs	r3, #0
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3708      	adds	r7, #8
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	080176cc 	.word	0x080176cc
 800fdcc:	08017c68 	.word	0x08017c68
 800fdd0:	08017720 	.word	0x08017720

0800fdd4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800fdd4:	b5b0      	push	{r4, r5, r7, lr}
 800fdd6:	b08c      	sub	sp, #48	; 0x30
 800fdd8:	af04      	add	r7, sp, #16
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d106      	bne.n	800fdf4 <tcp_output_segment+0x20>
 800fde6:	4b64      	ldr	r3, [pc, #400]	; (800ff78 <tcp_output_segment+0x1a4>)
 800fde8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800fdec:	4963      	ldr	r1, [pc, #396]	; (800ff7c <tcp_output_segment+0x1a8>)
 800fdee:	4864      	ldr	r0, [pc, #400]	; (800ff80 <tcp_output_segment+0x1ac>)
 800fdf0:	f004 feaa 	bl	8014b48 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d106      	bne.n	800fe08 <tcp_output_segment+0x34>
 800fdfa:	4b5f      	ldr	r3, [pc, #380]	; (800ff78 <tcp_output_segment+0x1a4>)
 800fdfc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800fe00:	4960      	ldr	r1, [pc, #384]	; (800ff84 <tcp_output_segment+0x1b0>)
 800fe02:	485f      	ldr	r0, [pc, #380]	; (800ff80 <tcp_output_segment+0x1ac>)
 800fe04:	f004 fea0 	bl	8014b48 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d106      	bne.n	800fe1c <tcp_output_segment+0x48>
 800fe0e:	4b5a      	ldr	r3, [pc, #360]	; (800ff78 <tcp_output_segment+0x1a4>)
 800fe10:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800fe14:	495c      	ldr	r1, [pc, #368]	; (800ff88 <tcp_output_segment+0x1b4>)
 800fe16:	485a      	ldr	r0, [pc, #360]	; (800ff80 <tcp_output_segment+0x1ac>)
 800fe18:	f004 fe96 	bl	8014b48 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f7ff ffb9 	bl	800fd94 <tcp_output_segment_busy>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d001      	beq.n	800fe2c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	e0a1      	b.n	800ff70 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	68dc      	ldr	r4, [r3, #12]
 800fe34:	4610      	mov	r0, r2
 800fe36:	f7f8 ff7a 	bl	8008d2e <lwip_htonl>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	68dc      	ldr	r4, [r3, #12]
 800fe46:	4610      	mov	r0, r2
 800fe48:	f7f8 ff5c 	bl	8008d04 <lwip_htons>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe54:	68ba      	ldr	r2, [r7, #8]
 800fe56:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fe58:	441a      	add	r2, r3
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	3314      	adds	r3, #20
 800fe64:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	7a9b      	ldrb	r3, [r3, #10]
 800fe6a:	f003 0301 	and.w	r3, r3, #1
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d015      	beq.n	800fe9e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	3304      	adds	r3, #4
 800fe76:	461a      	mov	r2, r3
 800fe78:	6879      	ldr	r1, [r7, #4]
 800fe7a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800fe7e:	f7fc fa33 	bl	800c2e8 <tcp_eff_send_mss_netif>
 800fe82:	4603      	mov	r3, r0
 800fe84:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800fe86:	8b7b      	ldrh	r3, [r7, #26]
 800fe88:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7f8 ff4e 	bl	8008d2e <lwip_htonl>
 800fe92:	4602      	mov	r2, r0
 800fe94:	69fb      	ldr	r3, [r7, #28]
 800fe96:	601a      	str	r2, [r3, #0]
    opts += 1;
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	3304      	adds	r3, #4
 800fe9c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	da02      	bge.n	800feae <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	2200      	movs	r2, #0
 800feac:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d10c      	bne.n	800fed0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800feb6:	4b35      	ldr	r3, [pc, #212]	; (800ff8c <tcp_output_segment+0x1b8>)
 800feb8:	681a      	ldr	r2, [r3, #0]
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	68db      	ldr	r3, [r3, #12]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7f8 ff32 	bl	8008d2e <lwip_htonl>
 800feca:	4602      	mov	r2, r0
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	68da      	ldr	r2, [r3, #12]
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	1ad3      	subs	r3, r2, r3
 800fedc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	8959      	ldrh	r1, [r3, #10]
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	8b3a      	ldrh	r2, [r7, #24]
 800feea:	1a8a      	subs	r2, r1, r2
 800feec:	b292      	uxth	r2, r2
 800feee:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	8919      	ldrh	r1, [r3, #8]
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	8b3a      	ldrh	r2, [r7, #24]
 800fefc:	1a8a      	subs	r2, r1, r2
 800fefe:	b292      	uxth	r2, r2
 800ff00:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	685b      	ldr	r3, [r3, #4]
 800ff06:	68fa      	ldr	r2, [r7, #12]
 800ff08:	68d2      	ldr	r2, [r2, #12]
 800ff0a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	68db      	ldr	r3, [r3, #12]
 800ff10:	2200      	movs	r2, #0
 800ff12:	741a      	strb	r2, [r3, #16]
 800ff14:	2200      	movs	r2, #0
 800ff16:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	68da      	ldr	r2, [r3, #12]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	7a9b      	ldrb	r3, [r3, #10]
 800ff20:	f003 0301 	and.w	r3, r3, #1
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d001      	beq.n	800ff2c <tcp_output_segment+0x158>
 800ff28:	2318      	movs	r3, #24
 800ff2a:	e000      	b.n	800ff2e <tcp_output_segment+0x15a>
 800ff2c:	2314      	movs	r3, #20
 800ff2e:	4413      	add	r3, r2
 800ff30:	69fa      	ldr	r2, [r7, #28]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d006      	beq.n	800ff44 <tcp_output_segment+0x170>
 800ff36:	4b10      	ldr	r3, [pc, #64]	; (800ff78 <tcp_output_segment+0x1a4>)
 800ff38:	f240 621c 	movw	r2, #1564	; 0x61c
 800ff3c:	4914      	ldr	r1, [pc, #80]	; (800ff90 <tcp_output_segment+0x1bc>)
 800ff3e:	4810      	ldr	r0, [pc, #64]	; (800ff80 <tcp_output_segment+0x1ac>)
 800ff40:	f004 fe02 	bl	8014b48 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	6858      	ldr	r0, [r3, #4]
 800ff48:	68b9      	ldr	r1, [r7, #8]
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	1d1c      	adds	r4, r3, #4
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	7add      	ldrb	r5, [r3, #11]
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	7a9b      	ldrb	r3, [r3, #10]
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	9202      	str	r2, [sp, #8]
 800ff5a:	2206      	movs	r2, #6
 800ff5c:	9201      	str	r2, [sp, #4]
 800ff5e:	9300      	str	r3, [sp, #0]
 800ff60:	462b      	mov	r3, r5
 800ff62:	4622      	mov	r2, r4
 800ff64:	f002 f870 	bl	8012048 <ip4_output_if>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ff6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3720      	adds	r7, #32
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bdb0      	pop	{r4, r5, r7, pc}
 800ff78:	080176cc 	.word	0x080176cc
 800ff7c:	08017c90 	.word	0x08017c90
 800ff80:	08017720 	.word	0x08017720
 800ff84:	08017cb0 	.word	0x08017cb0
 800ff88:	08017cd0 	.word	0x08017cd0
 800ff8c:	2000e4a4 	.word	0x2000e4a4
 800ff90:	08017cf4 	.word	0x08017cf4

0800ff94 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ff94:	b5b0      	push	{r4, r5, r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d106      	bne.n	800ffb0 <tcp_rexmit_rto_prepare+0x1c>
 800ffa2:	4b31      	ldr	r3, [pc, #196]	; (8010068 <tcp_rexmit_rto_prepare+0xd4>)
 800ffa4:	f240 6263 	movw	r2, #1635	; 0x663
 800ffa8:	4930      	ldr	r1, [pc, #192]	; (801006c <tcp_rexmit_rto_prepare+0xd8>)
 800ffaa:	4831      	ldr	r0, [pc, #196]	; (8010070 <tcp_rexmit_rto_prepare+0xdc>)
 800ffac:	f004 fdcc 	bl	8014b48 <iprintf>

  if (pcb->unacked == NULL) {
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d102      	bne.n	800ffbe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ffb8:	f06f 0305 	mvn.w	r3, #5
 800ffbc:	e050      	b.n	8010060 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffc2:	60fb      	str	r3, [r7, #12]
 800ffc4:	e00b      	b.n	800ffde <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ffc6:	68f8      	ldr	r0, [r7, #12]
 800ffc8:	f7ff fee4 	bl	800fd94 <tcp_output_segment_busy>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d002      	beq.n	800ffd8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ffd2:	f06f 0305 	mvn.w	r3, #5
 800ffd6:	e043      	b.n	8010060 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	60fb      	str	r3, [r7, #12]
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d1ef      	bne.n	800ffc6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ffe6:	68f8      	ldr	r0, [r7, #12]
 800ffe8:	f7ff fed4 	bl	800fd94 <tcp_output_segment_busy>
 800ffec:	4603      	mov	r3, r0
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d002      	beq.n	800fff8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fff2:	f06f 0305 	mvn.w	r3, #5
 800fff6:	e033      	b.n	8010060 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2200      	movs	r2, #0
 801000c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	8b5b      	ldrh	r3, [r3, #26]
 8010012:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010016:	b29a      	uxth	r2, r3
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	68db      	ldr	r3, [r3, #12]
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	4618      	mov	r0, r3
 8010024:	f7f8 fe83 	bl	8008d2e <lwip_htonl>
 8010028:	4604      	mov	r4, r0
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	891b      	ldrh	r3, [r3, #8]
 801002e:	461d      	mov	r5, r3
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	899b      	ldrh	r3, [r3, #12]
 8010036:	b29b      	uxth	r3, r3
 8010038:	4618      	mov	r0, r3
 801003a:	f7f8 fe63 	bl	8008d04 <lwip_htons>
 801003e:	4603      	mov	r3, r0
 8010040:	b2db      	uxtb	r3, r3
 8010042:	f003 0303 	and.w	r3, r3, #3
 8010046:	2b00      	cmp	r3, #0
 8010048:	d001      	beq.n	801004e <tcp_rexmit_rto_prepare+0xba>
 801004a:	2301      	movs	r3, #1
 801004c:	e000      	b.n	8010050 <tcp_rexmit_rto_prepare+0xbc>
 801004e:	2300      	movs	r3, #0
 8010050:	442b      	add	r3, r5
 8010052:	18e2      	adds	r2, r4, r3
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2200      	movs	r2, #0
 801005c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801005e:	2300      	movs	r3, #0
}
 8010060:	4618      	mov	r0, r3
 8010062:	3710      	adds	r7, #16
 8010064:	46bd      	mov	sp, r7
 8010066:	bdb0      	pop	{r4, r5, r7, pc}
 8010068:	080176cc 	.word	0x080176cc
 801006c:	08017d08 	.word	0x08017d08
 8010070:	08017720 	.word	0x08017720

08010074 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d106      	bne.n	8010090 <tcp_rexmit_rto_commit+0x1c>
 8010082:	4b0d      	ldr	r3, [pc, #52]	; (80100b8 <tcp_rexmit_rto_commit+0x44>)
 8010084:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010088:	490c      	ldr	r1, [pc, #48]	; (80100bc <tcp_rexmit_rto_commit+0x48>)
 801008a:	480d      	ldr	r0, [pc, #52]	; (80100c0 <tcp_rexmit_rto_commit+0x4c>)
 801008c:	f004 fd5c 	bl	8014b48 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010096:	2bff      	cmp	r3, #255	; 0xff
 8010098:	d007      	beq.n	80100aa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80100a0:	3301      	adds	r3, #1
 80100a2:	b2da      	uxtb	r2, r3
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f7ff fc7e 	bl	800f9ac <tcp_output>
}
 80100b0:	bf00      	nop
 80100b2:	3708      	adds	r7, #8
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}
 80100b8:	080176cc 	.word	0x080176cc
 80100bc:	08017d2c 	.word	0x08017d2c
 80100c0:	08017720 	.word	0x08017720

080100c4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d106      	bne.n	80100e0 <tcp_rexmit_rto+0x1c>
 80100d2:	4b0a      	ldr	r3, [pc, #40]	; (80100fc <tcp_rexmit_rto+0x38>)
 80100d4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80100d8:	4909      	ldr	r1, [pc, #36]	; (8010100 <tcp_rexmit_rto+0x3c>)
 80100da:	480a      	ldr	r0, [pc, #40]	; (8010104 <tcp_rexmit_rto+0x40>)
 80100dc:	f004 fd34 	bl	8014b48 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7ff ff57 	bl	800ff94 <tcp_rexmit_rto_prepare>
 80100e6:	4603      	mov	r3, r0
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d102      	bne.n	80100f2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f7ff ffc1 	bl	8010074 <tcp_rexmit_rto_commit>
  }
}
 80100f2:	bf00      	nop
 80100f4:	3708      	adds	r7, #8
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	080176cc 	.word	0x080176cc
 8010100:	08017d50 	.word	0x08017d50
 8010104:	08017720 	.word	0x08017720

08010108 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010108:	b590      	push	{r4, r7, lr}
 801010a:	b085      	sub	sp, #20
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d106      	bne.n	8010124 <tcp_rexmit+0x1c>
 8010116:	4b2f      	ldr	r3, [pc, #188]	; (80101d4 <tcp_rexmit+0xcc>)
 8010118:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801011c:	492e      	ldr	r1, [pc, #184]	; (80101d8 <tcp_rexmit+0xd0>)
 801011e:	482f      	ldr	r0, [pc, #188]	; (80101dc <tcp_rexmit+0xd4>)
 8010120:	f004 fd12 	bl	8014b48 <iprintf>

  if (pcb->unacked == NULL) {
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010128:	2b00      	cmp	r3, #0
 801012a:	d102      	bne.n	8010132 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801012c:	f06f 0305 	mvn.w	r3, #5
 8010130:	e04c      	b.n	80101cc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010136:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010138:	68b8      	ldr	r0, [r7, #8]
 801013a:	f7ff fe2b 	bl	800fd94 <tcp_output_segment_busy>
 801013e:	4603      	mov	r3, r0
 8010140:	2b00      	cmp	r3, #0
 8010142:	d002      	beq.n	801014a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010144:	f06f 0305 	mvn.w	r3, #5
 8010148:	e040      	b.n	80101cc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	681a      	ldr	r2, [r3, #0]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	336c      	adds	r3, #108	; 0x6c
 8010156:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010158:	e002      	b.n	8010160 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d011      	beq.n	801018c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	68db      	ldr	r3, [r3, #12]
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	4618      	mov	r0, r3
 8010172:	f7f8 fddc 	bl	8008d2e <lwip_htonl>
 8010176:	4604      	mov	r4, r0
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	68db      	ldr	r3, [r3, #12]
 801017c:	685b      	ldr	r3, [r3, #4]
 801017e:	4618      	mov	r0, r3
 8010180:	f7f8 fdd5 	bl	8008d2e <lwip_htonl>
 8010184:	4603      	mov	r3, r0
 8010186:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010188:	2b00      	cmp	r3, #0
 801018a:	dbe6      	blt.n	801015a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	68ba      	ldr	r2, [r7, #8]
 8010198:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d103      	bne.n	80101aa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2200      	movs	r2, #0
 80101a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80101b0:	2bff      	cmp	r3, #255	; 0xff
 80101b2:	d007      	beq.n	80101c4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80101ba:	3301      	adds	r3, #1
 80101bc:	b2da      	uxtb	r2, r3
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2200      	movs	r2, #0
 80101c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3714      	adds	r7, #20
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd90      	pop	{r4, r7, pc}
 80101d4:	080176cc 	.word	0x080176cc
 80101d8:	08017d6c 	.word	0x08017d6c
 80101dc:	08017720 	.word	0x08017720

080101e0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d106      	bne.n	80101fc <tcp_rexmit_fast+0x1c>
 80101ee:	4b2a      	ldr	r3, [pc, #168]	; (8010298 <tcp_rexmit_fast+0xb8>)
 80101f0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80101f4:	4929      	ldr	r1, [pc, #164]	; (801029c <tcp_rexmit_fast+0xbc>)
 80101f6:	482a      	ldr	r0, [pc, #168]	; (80102a0 <tcp_rexmit_fast+0xc0>)
 80101f8:	f004 fca6 	bl	8014b48 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010200:	2b00      	cmp	r3, #0
 8010202:	d044      	beq.n	801028e <tcp_rexmit_fast+0xae>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	8b5b      	ldrh	r3, [r3, #26]
 8010208:	f003 0304 	and.w	r3, r3, #4
 801020c:	2b00      	cmp	r3, #0
 801020e:	d13e      	bne.n	801028e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f7ff ff79 	bl	8010108 <tcp_rexmit>
 8010216:	4603      	mov	r3, r0
 8010218:	2b00      	cmp	r3, #0
 801021a:	d138      	bne.n	801028e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010228:	4293      	cmp	r3, r2
 801022a:	bf28      	it	cs
 801022c:	4613      	movcs	r3, r2
 801022e:	b29b      	uxth	r3, r3
 8010230:	0fda      	lsrs	r2, r3, #31
 8010232:	4413      	add	r3, r2
 8010234:	105b      	asrs	r3, r3, #1
 8010236:	b29a      	uxth	r2, r3
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010244:	461a      	mov	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801024a:	005b      	lsls	r3, r3, #1
 801024c:	429a      	cmp	r2, r3
 801024e:	d206      	bcs.n	801025e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010254:	005b      	lsls	r3, r3, #1
 8010256:	b29a      	uxth	r2, r3
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010268:	4619      	mov	r1, r3
 801026a:	0049      	lsls	r1, r1, #1
 801026c:	440b      	add	r3, r1
 801026e:	b29b      	uxth	r3, r3
 8010270:	4413      	add	r3, r2
 8010272:	b29a      	uxth	r2, r3
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	8b5b      	ldrh	r3, [r3, #26]
 801027e:	f043 0304 	orr.w	r3, r3, #4
 8010282:	b29a      	uxth	r2, r3
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2200      	movs	r2, #0
 801028c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801028e:	bf00      	nop
 8010290:	3708      	adds	r7, #8
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}
 8010296:	bf00      	nop
 8010298:	080176cc 	.word	0x080176cc
 801029c:	08017d84 	.word	0x08017d84
 80102a0:	08017720 	.word	0x08017720

080102a4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b086      	sub	sp, #24
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	60f8      	str	r0, [r7, #12]
 80102ac:	607b      	str	r3, [r7, #4]
 80102ae:	460b      	mov	r3, r1
 80102b0:	817b      	strh	r3, [r7, #10]
 80102b2:	4613      	mov	r3, r2
 80102b4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80102b6:	897a      	ldrh	r2, [r7, #10]
 80102b8:	893b      	ldrh	r3, [r7, #8]
 80102ba:	4413      	add	r3, r2
 80102bc:	b29b      	uxth	r3, r3
 80102be:	3314      	adds	r3, #20
 80102c0:	b29b      	uxth	r3, r3
 80102c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80102c6:	4619      	mov	r1, r3
 80102c8:	2022      	movs	r0, #34	; 0x22
 80102ca:	f7f9 fd8f 	bl	8009dec <pbuf_alloc>
 80102ce:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d04d      	beq.n	8010372 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80102d6:	897b      	ldrh	r3, [r7, #10]
 80102d8:	3313      	adds	r3, #19
 80102da:	697a      	ldr	r2, [r7, #20]
 80102dc:	8952      	ldrh	r2, [r2, #10]
 80102de:	4293      	cmp	r3, r2
 80102e0:	db06      	blt.n	80102f0 <tcp_output_alloc_header_common+0x4c>
 80102e2:	4b26      	ldr	r3, [pc, #152]	; (801037c <tcp_output_alloc_header_common+0xd8>)
 80102e4:	f240 7223 	movw	r2, #1827	; 0x723
 80102e8:	4925      	ldr	r1, [pc, #148]	; (8010380 <tcp_output_alloc_header_common+0xdc>)
 80102ea:	4826      	ldr	r0, [pc, #152]	; (8010384 <tcp_output_alloc_header_common+0xe0>)
 80102ec:	f004 fc2c 	bl	8014b48 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	685b      	ldr	r3, [r3, #4]
 80102f4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80102f6:	8c3b      	ldrh	r3, [r7, #32]
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7f8 fd03 	bl	8008d04 <lwip_htons>
 80102fe:	4603      	mov	r3, r0
 8010300:	461a      	mov	r2, r3
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010308:	4618      	mov	r0, r3
 801030a:	f7f8 fcfb 	bl	8008d04 <lwip_htons>
 801030e:	4603      	mov	r3, r0
 8010310:	461a      	mov	r2, r3
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801031c:	68f8      	ldr	r0, [r7, #12]
 801031e:	f7f8 fd06 	bl	8008d2e <lwip_htonl>
 8010322:	4602      	mov	r2, r0
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010328:	897b      	ldrh	r3, [r7, #10]
 801032a:	089b      	lsrs	r3, r3, #2
 801032c:	b29b      	uxth	r3, r3
 801032e:	3305      	adds	r3, #5
 8010330:	b29b      	uxth	r3, r3
 8010332:	031b      	lsls	r3, r3, #12
 8010334:	b29a      	uxth	r2, r3
 8010336:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801033a:	b29b      	uxth	r3, r3
 801033c:	4313      	orrs	r3, r2
 801033e:	b29b      	uxth	r3, r3
 8010340:	4618      	mov	r0, r3
 8010342:	f7f8 fcdf 	bl	8008d04 <lwip_htons>
 8010346:	4603      	mov	r3, r0
 8010348:	461a      	mov	r2, r3
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801034e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010350:	4618      	mov	r0, r3
 8010352:	f7f8 fcd7 	bl	8008d04 <lwip_htons>
 8010356:	4603      	mov	r3, r0
 8010358:	461a      	mov	r2, r3
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	2200      	movs	r2, #0
 8010362:	741a      	strb	r2, [r3, #16]
 8010364:	2200      	movs	r2, #0
 8010366:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	2200      	movs	r2, #0
 801036c:	749a      	strb	r2, [r3, #18]
 801036e:	2200      	movs	r2, #0
 8010370:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010372:	697b      	ldr	r3, [r7, #20]
}
 8010374:	4618      	mov	r0, r3
 8010376:	3718      	adds	r7, #24
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}
 801037c:	080176cc 	.word	0x080176cc
 8010380:	08017da4 	.word	0x08017da4
 8010384:	08017720 	.word	0x08017720

08010388 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010388:	b5b0      	push	{r4, r5, r7, lr}
 801038a:	b08a      	sub	sp, #40	; 0x28
 801038c:	af04      	add	r7, sp, #16
 801038e:	60f8      	str	r0, [r7, #12]
 8010390:	607b      	str	r3, [r7, #4]
 8010392:	460b      	mov	r3, r1
 8010394:	817b      	strh	r3, [r7, #10]
 8010396:	4613      	mov	r3, r2
 8010398:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d106      	bne.n	80103ae <tcp_output_alloc_header+0x26>
 80103a0:	4b15      	ldr	r3, [pc, #84]	; (80103f8 <tcp_output_alloc_header+0x70>)
 80103a2:	f240 7242 	movw	r2, #1858	; 0x742
 80103a6:	4915      	ldr	r1, [pc, #84]	; (80103fc <tcp_output_alloc_header+0x74>)
 80103a8:	4815      	ldr	r0, [pc, #84]	; (8010400 <tcp_output_alloc_header+0x78>)
 80103aa:	f004 fbcd 	bl	8014b48 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	8adb      	ldrh	r3, [r3, #22]
 80103b6:	68fa      	ldr	r2, [r7, #12]
 80103b8:	8b12      	ldrh	r2, [r2, #24]
 80103ba:	68f9      	ldr	r1, [r7, #12]
 80103bc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80103be:	893d      	ldrh	r5, [r7, #8]
 80103c0:	897c      	ldrh	r4, [r7, #10]
 80103c2:	9103      	str	r1, [sp, #12]
 80103c4:	2110      	movs	r1, #16
 80103c6:	9102      	str	r1, [sp, #8]
 80103c8:	9201      	str	r2, [sp, #4]
 80103ca:	9300      	str	r3, [sp, #0]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	462a      	mov	r2, r5
 80103d0:	4621      	mov	r1, r4
 80103d2:	f7ff ff67 	bl	80102a4 <tcp_output_alloc_header_common>
 80103d6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d006      	beq.n	80103ec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103e2:	68fa      	ldr	r2, [r7, #12]
 80103e4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80103e6:	441a      	add	r2, r3
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80103ec:	697b      	ldr	r3, [r7, #20]
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3718      	adds	r7, #24
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bdb0      	pop	{r4, r5, r7, pc}
 80103f6:	bf00      	nop
 80103f8:	080176cc 	.word	0x080176cc
 80103fc:	08017dd4 	.word	0x08017dd4
 8010400:	08017720 	.word	0x08017720

08010404 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b088      	sub	sp, #32
 8010408:	af00      	add	r7, sp, #0
 801040a:	60f8      	str	r0, [r7, #12]
 801040c:	60b9      	str	r1, [r7, #8]
 801040e:	4611      	mov	r1, r2
 8010410:	461a      	mov	r2, r3
 8010412:	460b      	mov	r3, r1
 8010414:	71fb      	strb	r3, [r7, #7]
 8010416:	4613      	mov	r3, r2
 8010418:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801041a:	2300      	movs	r3, #0
 801041c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d106      	bne.n	8010432 <tcp_output_fill_options+0x2e>
 8010424:	4b12      	ldr	r3, [pc, #72]	; (8010470 <tcp_output_fill_options+0x6c>)
 8010426:	f240 7256 	movw	r2, #1878	; 0x756
 801042a:	4912      	ldr	r1, [pc, #72]	; (8010474 <tcp_output_fill_options+0x70>)
 801042c:	4812      	ldr	r0, [pc, #72]	; (8010478 <tcp_output_fill_options+0x74>)
 801042e:	f004 fb8b 	bl	8014b48 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010438:	69bb      	ldr	r3, [r7, #24]
 801043a:	3314      	adds	r3, #20
 801043c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801043e:	8bfb      	ldrh	r3, [r7, #30]
 8010440:	009b      	lsls	r3, r3, #2
 8010442:	461a      	mov	r2, r3
 8010444:	79fb      	ldrb	r3, [r7, #7]
 8010446:	009b      	lsls	r3, r3, #2
 8010448:	f003 0304 	and.w	r3, r3, #4
 801044c:	4413      	add	r3, r2
 801044e:	3314      	adds	r3, #20
 8010450:	69ba      	ldr	r2, [r7, #24]
 8010452:	4413      	add	r3, r2
 8010454:	697a      	ldr	r2, [r7, #20]
 8010456:	429a      	cmp	r2, r3
 8010458:	d006      	beq.n	8010468 <tcp_output_fill_options+0x64>
 801045a:	4b05      	ldr	r3, [pc, #20]	; (8010470 <tcp_output_fill_options+0x6c>)
 801045c:	f240 7275 	movw	r2, #1909	; 0x775
 8010460:	4906      	ldr	r1, [pc, #24]	; (801047c <tcp_output_fill_options+0x78>)
 8010462:	4805      	ldr	r0, [pc, #20]	; (8010478 <tcp_output_fill_options+0x74>)
 8010464:	f004 fb70 	bl	8014b48 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010468:	bf00      	nop
 801046a:	3720      	adds	r7, #32
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}
 8010470:	080176cc 	.word	0x080176cc
 8010474:	08017dfc 	.word	0x08017dfc
 8010478:	08017720 	.word	0x08017720
 801047c:	08017cf4 	.word	0x08017cf4

08010480 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b08a      	sub	sp, #40	; 0x28
 8010484:	af04      	add	r7, sp, #16
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	60b9      	str	r1, [r7, #8]
 801048a:	607a      	str	r2, [r7, #4]
 801048c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d106      	bne.n	80104a2 <tcp_output_control_segment+0x22>
 8010494:	4b1c      	ldr	r3, [pc, #112]	; (8010508 <tcp_output_control_segment+0x88>)
 8010496:	f240 7287 	movw	r2, #1927	; 0x787
 801049a:	491c      	ldr	r1, [pc, #112]	; (801050c <tcp_output_control_segment+0x8c>)
 801049c:	481c      	ldr	r0, [pc, #112]	; (8010510 <tcp_output_control_segment+0x90>)
 801049e:	f004 fb53 	bl	8014b48 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80104a2:	683a      	ldr	r2, [r7, #0]
 80104a4:	6879      	ldr	r1, [r7, #4]
 80104a6:	68f8      	ldr	r0, [r7, #12]
 80104a8:	f7fe fae8 	bl	800ea7c <tcp_route>
 80104ac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d102      	bne.n	80104ba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80104b4:	23fc      	movs	r3, #252	; 0xfc
 80104b6:	75fb      	strb	r3, [r7, #23]
 80104b8:	e01c      	b.n	80104f4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d006      	beq.n	80104ce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	7adb      	ldrb	r3, [r3, #11]
 80104c4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	7a9b      	ldrb	r3, [r3, #10]
 80104ca:	757b      	strb	r3, [r7, #21]
 80104cc:	e003      	b.n	80104d6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80104ce:	2340      	movs	r3, #64	; 0x40
 80104d0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80104d2:	2300      	movs	r3, #0
 80104d4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80104d6:	7dba      	ldrb	r2, [r7, #22]
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	9302      	str	r3, [sp, #8]
 80104dc:	2306      	movs	r3, #6
 80104de:	9301      	str	r3, [sp, #4]
 80104e0:	7d7b      	ldrb	r3, [r7, #21]
 80104e2:	9300      	str	r3, [sp, #0]
 80104e4:	4613      	mov	r3, r2
 80104e6:	683a      	ldr	r2, [r7, #0]
 80104e8:	6879      	ldr	r1, [r7, #4]
 80104ea:	68b8      	ldr	r0, [r7, #8]
 80104ec:	f001 fdac 	bl	8012048 <ip4_output_if>
 80104f0:	4603      	mov	r3, r0
 80104f2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80104f4:	68b8      	ldr	r0, [r7, #8]
 80104f6:	f7f9 ff5d 	bl	800a3b4 <pbuf_free>
  return err;
 80104fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3718      	adds	r7, #24
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
 8010506:	bf00      	nop
 8010508:	080176cc 	.word	0x080176cc
 801050c:	08017e24 	.word	0x08017e24
 8010510:	08017720 	.word	0x08017720

08010514 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010514:	b590      	push	{r4, r7, lr}
 8010516:	b08b      	sub	sp, #44	; 0x2c
 8010518:	af04      	add	r7, sp, #16
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	60b9      	str	r1, [r7, #8]
 801051e:	607a      	str	r2, [r7, #4]
 8010520:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d106      	bne.n	8010536 <tcp_rst+0x22>
 8010528:	4b1f      	ldr	r3, [pc, #124]	; (80105a8 <tcp_rst+0x94>)
 801052a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801052e:	491f      	ldr	r1, [pc, #124]	; (80105ac <tcp_rst+0x98>)
 8010530:	481f      	ldr	r0, [pc, #124]	; (80105b0 <tcp_rst+0x9c>)
 8010532:	f004 fb09 	bl	8014b48 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010538:	2b00      	cmp	r3, #0
 801053a:	d106      	bne.n	801054a <tcp_rst+0x36>
 801053c:	4b1a      	ldr	r3, [pc, #104]	; (80105a8 <tcp_rst+0x94>)
 801053e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010542:	491c      	ldr	r1, [pc, #112]	; (80105b4 <tcp_rst+0xa0>)
 8010544:	481a      	ldr	r0, [pc, #104]	; (80105b0 <tcp_rst+0x9c>)
 8010546:	f004 faff 	bl	8014b48 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801054a:	2300      	movs	r3, #0
 801054c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801054e:	f246 0308 	movw	r3, #24584	; 0x6008
 8010552:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010554:	7dfb      	ldrb	r3, [r7, #23]
 8010556:	b29c      	uxth	r4, r3
 8010558:	68b8      	ldr	r0, [r7, #8]
 801055a:	f7f8 fbe8 	bl	8008d2e <lwip_htonl>
 801055e:	4602      	mov	r2, r0
 8010560:	8abb      	ldrh	r3, [r7, #20]
 8010562:	9303      	str	r3, [sp, #12]
 8010564:	2314      	movs	r3, #20
 8010566:	9302      	str	r3, [sp, #8]
 8010568:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801056a:	9301      	str	r3, [sp, #4]
 801056c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801056e:	9300      	str	r3, [sp, #0]
 8010570:	4613      	mov	r3, r2
 8010572:	2200      	movs	r2, #0
 8010574:	4621      	mov	r1, r4
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f7ff fe94 	bl	80102a4 <tcp_output_alloc_header_common>
 801057c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801057e:	693b      	ldr	r3, [r7, #16]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d00c      	beq.n	801059e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010584:	7dfb      	ldrb	r3, [r7, #23]
 8010586:	2200      	movs	r2, #0
 8010588:	6939      	ldr	r1, [r7, #16]
 801058a:	68f8      	ldr	r0, [r7, #12]
 801058c:	f7ff ff3a 	bl	8010404 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010592:	683a      	ldr	r2, [r7, #0]
 8010594:	6939      	ldr	r1, [r7, #16]
 8010596:	68f8      	ldr	r0, [r7, #12]
 8010598:	f7ff ff72 	bl	8010480 <tcp_output_control_segment>
 801059c:	e000      	b.n	80105a0 <tcp_rst+0x8c>
    return;
 801059e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80105a0:	371c      	adds	r7, #28
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd90      	pop	{r4, r7, pc}
 80105a6:	bf00      	nop
 80105a8:	080176cc 	.word	0x080176cc
 80105ac:	08017e50 	.word	0x08017e50
 80105b0:	08017720 	.word	0x08017720
 80105b4:	08017e6c 	.word	0x08017e6c

080105b8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80105b8:	b590      	push	{r4, r7, lr}
 80105ba:	b087      	sub	sp, #28
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80105c0:	2300      	movs	r3, #0
 80105c2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80105c4:	2300      	movs	r3, #0
 80105c6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d106      	bne.n	80105dc <tcp_send_empty_ack+0x24>
 80105ce:	4b28      	ldr	r3, [pc, #160]	; (8010670 <tcp_send_empty_ack+0xb8>)
 80105d0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80105d4:	4927      	ldr	r1, [pc, #156]	; (8010674 <tcp_send_empty_ack+0xbc>)
 80105d6:	4828      	ldr	r0, [pc, #160]	; (8010678 <tcp_send_empty_ack+0xc0>)
 80105d8:	f004 fab6 	bl	8014b48 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80105dc:	7dfb      	ldrb	r3, [r7, #23]
 80105de:	009b      	lsls	r3, r3, #2
 80105e0:	b2db      	uxtb	r3, r3
 80105e2:	f003 0304 	and.w	r3, r3, #4
 80105e6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80105e8:	7d7b      	ldrb	r3, [r7, #21]
 80105ea:	b29c      	uxth	r4, r3
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105f0:	4618      	mov	r0, r3
 80105f2:	f7f8 fb9c 	bl	8008d2e <lwip_htonl>
 80105f6:	4603      	mov	r3, r0
 80105f8:	2200      	movs	r2, #0
 80105fa:	4621      	mov	r1, r4
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f7ff fec3 	bl	8010388 <tcp_output_alloc_header>
 8010602:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d109      	bne.n	801061e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	8b5b      	ldrh	r3, [r3, #26]
 801060e:	f043 0303 	orr.w	r3, r3, #3
 8010612:	b29a      	uxth	r2, r3
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010618:	f06f 0301 	mvn.w	r3, #1
 801061c:	e023      	b.n	8010666 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801061e:	7dbb      	ldrb	r3, [r7, #22]
 8010620:	7dfa      	ldrb	r2, [r7, #23]
 8010622:	6939      	ldr	r1, [r7, #16]
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f7ff feed 	bl	8010404 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801062a:	687a      	ldr	r2, [r7, #4]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	3304      	adds	r3, #4
 8010630:	6939      	ldr	r1, [r7, #16]
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f7ff ff24 	bl	8010480 <tcp_output_control_segment>
 8010638:	4603      	mov	r3, r0
 801063a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801063c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d007      	beq.n	8010654 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	8b5b      	ldrh	r3, [r3, #26]
 8010648:	f043 0303 	orr.w	r3, r3, #3
 801064c:	b29a      	uxth	r2, r3
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	835a      	strh	r2, [r3, #26]
 8010652:	e006      	b.n	8010662 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	8b5b      	ldrh	r3, [r3, #26]
 8010658:	f023 0303 	bic.w	r3, r3, #3
 801065c:	b29a      	uxth	r2, r3
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010662:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010666:	4618      	mov	r0, r3
 8010668:	371c      	adds	r7, #28
 801066a:	46bd      	mov	sp, r7
 801066c:	bd90      	pop	{r4, r7, pc}
 801066e:	bf00      	nop
 8010670:	080176cc 	.word	0x080176cc
 8010674:	08017e88 	.word	0x08017e88
 8010678:	08017720 	.word	0x08017720

0801067c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801067c:	b590      	push	{r4, r7, lr}
 801067e:	b087      	sub	sp, #28
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010684:	2300      	movs	r3, #0
 8010686:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d106      	bne.n	801069c <tcp_keepalive+0x20>
 801068e:	4b18      	ldr	r3, [pc, #96]	; (80106f0 <tcp_keepalive+0x74>)
 8010690:	f640 0224 	movw	r2, #2084	; 0x824
 8010694:	4917      	ldr	r1, [pc, #92]	; (80106f4 <tcp_keepalive+0x78>)
 8010696:	4818      	ldr	r0, [pc, #96]	; (80106f8 <tcp_keepalive+0x7c>)
 8010698:	f004 fa56 	bl	8014b48 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801069c:	7dfb      	ldrb	r3, [r7, #23]
 801069e:	b29c      	uxth	r4, r3
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106a4:	3b01      	subs	r3, #1
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7f8 fb41 	bl	8008d2e <lwip_htonl>
 80106ac:	4603      	mov	r3, r0
 80106ae:	2200      	movs	r2, #0
 80106b0:	4621      	mov	r1, r4
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f7ff fe68 	bl	8010388 <tcp_output_alloc_header>
 80106b8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d102      	bne.n	80106c6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80106c0:	f04f 33ff 	mov.w	r3, #4294967295
 80106c4:	e010      	b.n	80106e8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80106c6:	7dfb      	ldrb	r3, [r7, #23]
 80106c8:	2200      	movs	r2, #0
 80106ca:	6939      	ldr	r1, [r7, #16]
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f7ff fe99 	bl	8010404 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	3304      	adds	r3, #4
 80106d8:	6939      	ldr	r1, [r7, #16]
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f7ff fed0 	bl	8010480 <tcp_output_control_segment>
 80106e0:	4603      	mov	r3, r0
 80106e2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80106e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	371c      	adds	r7, #28
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd90      	pop	{r4, r7, pc}
 80106f0:	080176cc 	.word	0x080176cc
 80106f4:	08017ea8 	.word	0x08017ea8
 80106f8:	08017720 	.word	0x08017720

080106fc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80106fc:	b590      	push	{r4, r7, lr}
 80106fe:	b08b      	sub	sp, #44	; 0x2c
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010704:	2300      	movs	r3, #0
 8010706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d106      	bne.n	801071e <tcp_zero_window_probe+0x22>
 8010710:	4b4c      	ldr	r3, [pc, #304]	; (8010844 <tcp_zero_window_probe+0x148>)
 8010712:	f640 024f 	movw	r2, #2127	; 0x84f
 8010716:	494c      	ldr	r1, [pc, #304]	; (8010848 <tcp_zero_window_probe+0x14c>)
 8010718:	484c      	ldr	r0, [pc, #304]	; (801084c <tcp_zero_window_probe+0x150>)
 801071a:	f004 fa15 	bl	8014b48 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010722:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010724:	6a3b      	ldr	r3, [r7, #32]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d101      	bne.n	801072e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801072a:	2300      	movs	r3, #0
 801072c:	e086      	b.n	801083c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010734:	2bff      	cmp	r3, #255	; 0xff
 8010736:	d007      	beq.n	8010748 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801073e:	3301      	adds	r3, #1
 8010740:	b2da      	uxtb	r2, r3
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010748:	6a3b      	ldr	r3, [r7, #32]
 801074a:	68db      	ldr	r3, [r3, #12]
 801074c:	899b      	ldrh	r3, [r3, #12]
 801074e:	b29b      	uxth	r3, r3
 8010750:	4618      	mov	r0, r3
 8010752:	f7f8 fad7 	bl	8008d04 <lwip_htons>
 8010756:	4603      	mov	r3, r0
 8010758:	b2db      	uxtb	r3, r3
 801075a:	f003 0301 	and.w	r3, r3, #1
 801075e:	2b00      	cmp	r3, #0
 8010760:	d005      	beq.n	801076e <tcp_zero_window_probe+0x72>
 8010762:	6a3b      	ldr	r3, [r7, #32]
 8010764:	891b      	ldrh	r3, [r3, #8]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d101      	bne.n	801076e <tcp_zero_window_probe+0x72>
 801076a:	2301      	movs	r3, #1
 801076c:	e000      	b.n	8010770 <tcp_zero_window_probe+0x74>
 801076e:	2300      	movs	r3, #0
 8010770:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010772:	7ffb      	ldrb	r3, [r7, #31]
 8010774:	2b00      	cmp	r3, #0
 8010776:	bf0c      	ite	eq
 8010778:	2301      	moveq	r3, #1
 801077a:	2300      	movne	r3, #0
 801077c:	b2db      	uxtb	r3, r3
 801077e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010784:	b299      	uxth	r1, r3
 8010786:	6a3b      	ldr	r3, [r7, #32]
 8010788:	68db      	ldr	r3, [r3, #12]
 801078a:	685b      	ldr	r3, [r3, #4]
 801078c:	8bba      	ldrh	r2, [r7, #28]
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f7ff fdfa 	bl	8010388 <tcp_output_alloc_header>
 8010794:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d102      	bne.n	80107a2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801079c:	f04f 33ff 	mov.w	r3, #4294967295
 80107a0:	e04c      	b.n	801083c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80107a2:	69bb      	ldr	r3, [r7, #24]
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80107a8:	7ffb      	ldrb	r3, [r7, #31]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d011      	beq.n	80107d2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	899b      	ldrh	r3, [r3, #12]
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	b21b      	sxth	r3, r3
 80107b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80107ba:	b21c      	sxth	r4, r3
 80107bc:	2011      	movs	r0, #17
 80107be:	f7f8 faa1 	bl	8008d04 <lwip_htons>
 80107c2:	4603      	mov	r3, r0
 80107c4:	b21b      	sxth	r3, r3
 80107c6:	4323      	orrs	r3, r4
 80107c8:	b21b      	sxth	r3, r3
 80107ca:	b29a      	uxth	r2, r3
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	819a      	strh	r2, [r3, #12]
 80107d0:	e010      	b.n	80107f4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	685b      	ldr	r3, [r3, #4]
 80107d6:	3314      	adds	r3, #20
 80107d8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80107da:	6a3b      	ldr	r3, [r7, #32]
 80107dc:	6858      	ldr	r0, [r3, #4]
 80107de:	6a3b      	ldr	r3, [r7, #32]
 80107e0:	685b      	ldr	r3, [r3, #4]
 80107e2:	891a      	ldrh	r2, [r3, #8]
 80107e4:	6a3b      	ldr	r3, [r7, #32]
 80107e6:	891b      	ldrh	r3, [r3, #8]
 80107e8:	1ad3      	subs	r3, r2, r3
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	2201      	movs	r2, #1
 80107ee:	6939      	ldr	r1, [r7, #16]
 80107f0:	f7f9 ffca 	bl	800a788 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80107f4:	6a3b      	ldr	r3, [r7, #32]
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7f8 fa97 	bl	8008d2e <lwip_htonl>
 8010800:	4603      	mov	r3, r0
 8010802:	3301      	adds	r3, #1
 8010804:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	1ad3      	subs	r3, r2, r3
 801080e:	2b00      	cmp	r3, #0
 8010810:	da02      	bge.n	8010818 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	68fa      	ldr	r2, [r7, #12]
 8010816:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801081c:	2200      	movs	r2, #0
 801081e:	69b9      	ldr	r1, [r7, #24]
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f7ff fdef 	bl	8010404 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010826:	687a      	ldr	r2, [r7, #4]
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	3304      	adds	r3, #4
 801082c:	69b9      	ldr	r1, [r7, #24]
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f7ff fe26 	bl	8010480 <tcp_output_control_segment>
 8010834:	4603      	mov	r3, r0
 8010836:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010838:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801083c:	4618      	mov	r0, r3
 801083e:	372c      	adds	r7, #44	; 0x2c
 8010840:	46bd      	mov	sp, r7
 8010842:	bd90      	pop	{r4, r7, pc}
 8010844:	080176cc 	.word	0x080176cc
 8010848:	08017ec4 	.word	0x08017ec4
 801084c:	08017720 	.word	0x08017720

08010850 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010858:	f7fa f884 	bl	800a964 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801085c:	4b0a      	ldr	r3, [pc, #40]	; (8010888 <tcpip_tcp_timer+0x38>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d103      	bne.n	801086c <tcpip_tcp_timer+0x1c>
 8010864:	4b09      	ldr	r3, [pc, #36]	; (801088c <tcpip_tcp_timer+0x3c>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d005      	beq.n	8010878 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801086c:	2200      	movs	r2, #0
 801086e:	4908      	ldr	r1, [pc, #32]	; (8010890 <tcpip_tcp_timer+0x40>)
 8010870:	20fa      	movs	r0, #250	; 0xfa
 8010872:	f000 f8f3 	bl	8010a5c <sys_timeout>
 8010876:	e003      	b.n	8010880 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010878:	4b06      	ldr	r3, [pc, #24]	; (8010894 <tcpip_tcp_timer+0x44>)
 801087a:	2200      	movs	r2, #0
 801087c:	601a      	str	r2, [r3, #0]
  }
}
 801087e:	bf00      	nop
 8010880:	bf00      	nop
 8010882:	3708      	adds	r7, #8
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}
 8010888:	2000e4b0 	.word	0x2000e4b0
 801088c:	2000e4b4 	.word	0x2000e4b4
 8010890:	08010851 	.word	0x08010851
 8010894:	2000e4fc 	.word	0x2000e4fc

08010898 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801089c:	4b0a      	ldr	r3, [pc, #40]	; (80108c8 <tcp_timer_needed+0x30>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d10f      	bne.n	80108c4 <tcp_timer_needed+0x2c>
 80108a4:	4b09      	ldr	r3, [pc, #36]	; (80108cc <tcp_timer_needed+0x34>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d103      	bne.n	80108b4 <tcp_timer_needed+0x1c>
 80108ac:	4b08      	ldr	r3, [pc, #32]	; (80108d0 <tcp_timer_needed+0x38>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d007      	beq.n	80108c4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80108b4:	4b04      	ldr	r3, [pc, #16]	; (80108c8 <tcp_timer_needed+0x30>)
 80108b6:	2201      	movs	r2, #1
 80108b8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80108ba:	2200      	movs	r2, #0
 80108bc:	4905      	ldr	r1, [pc, #20]	; (80108d4 <tcp_timer_needed+0x3c>)
 80108be:	20fa      	movs	r0, #250	; 0xfa
 80108c0:	f000 f8cc 	bl	8010a5c <sys_timeout>
  }
}
 80108c4:	bf00      	nop
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	2000e4fc 	.word	0x2000e4fc
 80108cc:	2000e4b0 	.word	0x2000e4b0
 80108d0:	2000e4b4 	.word	0x2000e4b4
 80108d4:	08010851 	.word	0x08010851

080108d8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b086      	sub	sp, #24
 80108dc:	af00      	add	r7, sp, #0
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80108e4:	2005      	movs	r0, #5
 80108e6:	f7f8 fe83 	bl	80095f0 <memp_malloc>
 80108ea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d109      	bne.n	8010906 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d151      	bne.n	801099c <sys_timeout_abs+0xc4>
 80108f8:	4b2a      	ldr	r3, [pc, #168]	; (80109a4 <sys_timeout_abs+0xcc>)
 80108fa:	22be      	movs	r2, #190	; 0xbe
 80108fc:	492a      	ldr	r1, [pc, #168]	; (80109a8 <sys_timeout_abs+0xd0>)
 80108fe:	482b      	ldr	r0, [pc, #172]	; (80109ac <sys_timeout_abs+0xd4>)
 8010900:	f004 f922 	bl	8014b48 <iprintf>
    return;
 8010904:	e04a      	b.n	801099c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	2200      	movs	r2, #0
 801090a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	68ba      	ldr	r2, [r7, #8]
 8010910:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	687a      	ldr	r2, [r7, #4]
 8010916:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010918:	693b      	ldr	r3, [r7, #16]
 801091a:	68fa      	ldr	r2, [r7, #12]
 801091c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801091e:	4b24      	ldr	r3, [pc, #144]	; (80109b0 <sys_timeout_abs+0xd8>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d103      	bne.n	801092e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010926:	4a22      	ldr	r2, [pc, #136]	; (80109b0 <sys_timeout_abs+0xd8>)
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	6013      	str	r3, [r2, #0]
    return;
 801092c:	e037      	b.n	801099e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	685a      	ldr	r2, [r3, #4]
 8010932:	4b1f      	ldr	r3, [pc, #124]	; (80109b0 <sys_timeout_abs+0xd8>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	1ad3      	subs	r3, r2, r3
 801093a:	0fdb      	lsrs	r3, r3, #31
 801093c:	f003 0301 	and.w	r3, r3, #1
 8010940:	b2db      	uxtb	r3, r3
 8010942:	2b00      	cmp	r3, #0
 8010944:	d007      	beq.n	8010956 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010946:	4b1a      	ldr	r3, [pc, #104]	; (80109b0 <sys_timeout_abs+0xd8>)
 8010948:	681a      	ldr	r2, [r3, #0]
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801094e:	4a18      	ldr	r2, [pc, #96]	; (80109b0 <sys_timeout_abs+0xd8>)
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	6013      	str	r3, [r2, #0]
 8010954:	e023      	b.n	801099e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010956:	4b16      	ldr	r3, [pc, #88]	; (80109b0 <sys_timeout_abs+0xd8>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	617b      	str	r3, [r7, #20]
 801095c:	e01a      	b.n	8010994 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d00b      	beq.n	801097e <sys_timeout_abs+0xa6>
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	685a      	ldr	r2, [r3, #4]
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	685b      	ldr	r3, [r3, #4]
 8010970:	1ad3      	subs	r3, r2, r3
 8010972:	0fdb      	lsrs	r3, r3, #31
 8010974:	f003 0301 	and.w	r3, r3, #1
 8010978:	b2db      	uxtb	r3, r3
 801097a:	2b00      	cmp	r3, #0
 801097c:	d007      	beq.n	801098e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	681a      	ldr	r2, [r3, #0]
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	693a      	ldr	r2, [r7, #16]
 801098a:	601a      	str	r2, [r3, #0]
        break;
 801098c:	e007      	b.n	801099e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	617b      	str	r3, [r7, #20]
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d1e1      	bne.n	801095e <sys_timeout_abs+0x86>
 801099a:	e000      	b.n	801099e <sys_timeout_abs+0xc6>
    return;
 801099c:	bf00      	nop
      }
    }
  }
}
 801099e:	3718      	adds	r7, #24
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}
 80109a4:	08017ee8 	.word	0x08017ee8
 80109a8:	08017f1c 	.word	0x08017f1c
 80109ac:	08017f5c 	.word	0x08017f5c
 80109b0:	2000e4f4 	.word	0x2000e4f4

080109b4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b086      	sub	sp, #24
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	4798      	blx	r3

  now = sys_now();
 80109c6:	f7f7 ffa5 	bl	8008914 <sys_now>
 80109ca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	681a      	ldr	r2, [r3, #0]
 80109d0:	4b0f      	ldr	r3, [pc, #60]	; (8010a10 <lwip_cyclic_timer+0x5c>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4413      	add	r3, r2
 80109d6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80109d8:	68fa      	ldr	r2, [r7, #12]
 80109da:	693b      	ldr	r3, [r7, #16]
 80109dc:	1ad3      	subs	r3, r2, r3
 80109de:	0fdb      	lsrs	r3, r3, #31
 80109e0:	f003 0301 	and.w	r3, r3, #1
 80109e4:	b2db      	uxtb	r3, r3
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d009      	beq.n	80109fe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80109ea:	697b      	ldr	r3, [r7, #20]
 80109ec:	681a      	ldr	r2, [r3, #0]
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	4413      	add	r3, r2
 80109f2:	687a      	ldr	r2, [r7, #4]
 80109f4:	4907      	ldr	r1, [pc, #28]	; (8010a14 <lwip_cyclic_timer+0x60>)
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7ff ff6e 	bl	80108d8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80109fc:	e004      	b.n	8010a08 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	4904      	ldr	r1, [pc, #16]	; (8010a14 <lwip_cyclic_timer+0x60>)
 8010a02:	68f8      	ldr	r0, [r7, #12]
 8010a04:	f7ff ff68 	bl	80108d8 <sys_timeout_abs>
}
 8010a08:	bf00      	nop
 8010a0a:	3718      	adds	r7, #24
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	2000e4f8 	.word	0x2000e4f8
 8010a14:	080109b5 	.word	0x080109b5

08010a18 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b082      	sub	sp, #8
 8010a1c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010a1e:	2301      	movs	r3, #1
 8010a20:	607b      	str	r3, [r7, #4]
 8010a22:	e00e      	b.n	8010a42 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010a24:	4a0b      	ldr	r2, [pc, #44]	; (8010a54 <sys_timeouts_init+0x3c>)
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	00db      	lsls	r3, r3, #3
 8010a30:	4a08      	ldr	r2, [pc, #32]	; (8010a54 <sys_timeouts_init+0x3c>)
 8010a32:	4413      	add	r3, r2
 8010a34:	461a      	mov	r2, r3
 8010a36:	4908      	ldr	r1, [pc, #32]	; (8010a58 <sys_timeouts_init+0x40>)
 8010a38:	f000 f810 	bl	8010a5c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	3301      	adds	r3, #1
 8010a40:	607b      	str	r3, [r7, #4]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2b02      	cmp	r3, #2
 8010a46:	d9ed      	bls.n	8010a24 <sys_timeouts_init+0xc>
  }
}
 8010a48:	bf00      	nop
 8010a4a:	bf00      	nop
 8010a4c:	3708      	adds	r7, #8
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}
 8010a52:	bf00      	nop
 8010a54:	08018b18 	.word	0x08018b18
 8010a58:	080109b5 	.word	0x080109b5

08010a5c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b086      	sub	sp, #24
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	60f8      	str	r0, [r7, #12]
 8010a64:	60b9      	str	r1, [r7, #8]
 8010a66:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a6e:	d306      	bcc.n	8010a7e <sys_timeout+0x22>
 8010a70:	4b0a      	ldr	r3, [pc, #40]	; (8010a9c <sys_timeout+0x40>)
 8010a72:	f240 1229 	movw	r2, #297	; 0x129
 8010a76:	490a      	ldr	r1, [pc, #40]	; (8010aa0 <sys_timeout+0x44>)
 8010a78:	480a      	ldr	r0, [pc, #40]	; (8010aa4 <sys_timeout+0x48>)
 8010a7a:	f004 f865 	bl	8014b48 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010a7e:	f7f7 ff49 	bl	8008914 <sys_now>
 8010a82:	4602      	mov	r2, r0
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	4413      	add	r3, r2
 8010a88:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010a8a:	687a      	ldr	r2, [r7, #4]
 8010a8c:	68b9      	ldr	r1, [r7, #8]
 8010a8e:	6978      	ldr	r0, [r7, #20]
 8010a90:	f7ff ff22 	bl	80108d8 <sys_timeout_abs>
#endif
}
 8010a94:	bf00      	nop
 8010a96:	3718      	adds	r7, #24
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	08017ee8 	.word	0x08017ee8
 8010aa0:	08017f84 	.word	0x08017f84
 8010aa4:	08017f5c 	.word	0x08017f5c

08010aa8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b084      	sub	sp, #16
 8010aac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010aae:	f7f7 ff31 	bl	8008914 <sys_now>
 8010ab2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010ab4:	4b1a      	ldr	r3, [pc, #104]	; (8010b20 <sys_check_timeouts+0x78>)
 8010ab6:	781b      	ldrb	r3, [r3, #0]
 8010ab8:	b2db      	uxtb	r3, r3
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d001      	beq.n	8010ac2 <sys_check_timeouts+0x1a>
 8010abe:	f7f9 f93f 	bl	8009d40 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8010ac2:	4b18      	ldr	r3, [pc, #96]	; (8010b24 <sys_check_timeouts+0x7c>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d022      	beq.n	8010b14 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	68fa      	ldr	r2, [r7, #12]
 8010ad4:	1ad3      	subs	r3, r2, r3
 8010ad6:	0fdb      	lsrs	r3, r3, #31
 8010ad8:	f003 0301 	and.w	r3, r3, #1
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d11a      	bne.n	8010b18 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	4a0f      	ldr	r2, [pc, #60]	; (8010b24 <sys_check_timeouts+0x7c>)
 8010ae8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010aea:	68bb      	ldr	r3, [r7, #8]
 8010aec:	689b      	ldr	r3, [r3, #8]
 8010aee:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	68db      	ldr	r3, [r3, #12]
 8010af4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	685b      	ldr	r3, [r3, #4]
 8010afa:	4a0b      	ldr	r2, [pc, #44]	; (8010b28 <sys_check_timeouts+0x80>)
 8010afc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010afe:	68b9      	ldr	r1, [r7, #8]
 8010b00:	2005      	movs	r0, #5
 8010b02:	f7f8 fde5 	bl	80096d0 <memp_free>
    if (handler != NULL) {
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d0d3      	beq.n	8010ab4 <sys_check_timeouts+0xc>
      handler(arg);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6838      	ldr	r0, [r7, #0]
 8010b10:	4798      	blx	r3
  do {
 8010b12:	e7cf      	b.n	8010ab4 <sys_check_timeouts+0xc>
      return;
 8010b14:	bf00      	nop
 8010b16:	e000      	b.n	8010b1a <sys_check_timeouts+0x72>
      return;
 8010b18:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010b1a:	3710      	adds	r7, #16
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	2000e4a1 	.word	0x2000e4a1
 8010b24:	2000e4f4 	.word	0x2000e4f4
 8010b28:	2000e4f8 	.word	0x2000e4f8

08010b2c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010b34:	4915      	ldr	r1, [pc, #84]	; (8010b8c <etharp_free_entry+0x60>)
 8010b36:	687a      	ldr	r2, [r7, #4]
 8010b38:	4613      	mov	r3, r2
 8010b3a:	005b      	lsls	r3, r3, #1
 8010b3c:	4413      	add	r3, r2
 8010b3e:	00db      	lsls	r3, r3, #3
 8010b40:	440b      	add	r3, r1
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d013      	beq.n	8010b70 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010b48:	4910      	ldr	r1, [pc, #64]	; (8010b8c <etharp_free_entry+0x60>)
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	4613      	mov	r3, r2
 8010b4e:	005b      	lsls	r3, r3, #1
 8010b50:	4413      	add	r3, r2
 8010b52:	00db      	lsls	r3, r3, #3
 8010b54:	440b      	add	r3, r1
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7f9 fc2b 	bl	800a3b4 <pbuf_free>
    arp_table[i].q = NULL;
 8010b5e:	490b      	ldr	r1, [pc, #44]	; (8010b8c <etharp_free_entry+0x60>)
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	4613      	mov	r3, r2
 8010b64:	005b      	lsls	r3, r3, #1
 8010b66:	4413      	add	r3, r2
 8010b68:	00db      	lsls	r3, r3, #3
 8010b6a:	440b      	add	r3, r1
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010b70:	4906      	ldr	r1, [pc, #24]	; (8010b8c <etharp_free_entry+0x60>)
 8010b72:	687a      	ldr	r2, [r7, #4]
 8010b74:	4613      	mov	r3, r2
 8010b76:	005b      	lsls	r3, r3, #1
 8010b78:	4413      	add	r3, r2
 8010b7a:	00db      	lsls	r3, r3, #3
 8010b7c:	440b      	add	r3, r1
 8010b7e:	3314      	adds	r3, #20
 8010b80:	2200      	movs	r2, #0
 8010b82:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010b84:	bf00      	nop
 8010b86:	3708      	adds	r7, #8
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	2000e500 	.word	0x2000e500

08010b90 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b082      	sub	sp, #8
 8010b94:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b96:	2300      	movs	r3, #0
 8010b98:	607b      	str	r3, [r7, #4]
 8010b9a:	e096      	b.n	8010cca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010b9c:	494f      	ldr	r1, [pc, #316]	; (8010cdc <etharp_tmr+0x14c>)
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	005b      	lsls	r3, r3, #1
 8010ba4:	4413      	add	r3, r2
 8010ba6:	00db      	lsls	r3, r3, #3
 8010ba8:	440b      	add	r3, r1
 8010baa:	3314      	adds	r3, #20
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010bb0:	78fb      	ldrb	r3, [r7, #3]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	f000 8086 	beq.w	8010cc4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010bb8:	4948      	ldr	r1, [pc, #288]	; (8010cdc <etharp_tmr+0x14c>)
 8010bba:	687a      	ldr	r2, [r7, #4]
 8010bbc:	4613      	mov	r3, r2
 8010bbe:	005b      	lsls	r3, r3, #1
 8010bc0:	4413      	add	r3, r2
 8010bc2:	00db      	lsls	r3, r3, #3
 8010bc4:	440b      	add	r3, r1
 8010bc6:	3312      	adds	r3, #18
 8010bc8:	881b      	ldrh	r3, [r3, #0]
 8010bca:	3301      	adds	r3, #1
 8010bcc:	b298      	uxth	r0, r3
 8010bce:	4943      	ldr	r1, [pc, #268]	; (8010cdc <etharp_tmr+0x14c>)
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	005b      	lsls	r3, r3, #1
 8010bd6:	4413      	add	r3, r2
 8010bd8:	00db      	lsls	r3, r3, #3
 8010bda:	440b      	add	r3, r1
 8010bdc:	3312      	adds	r3, #18
 8010bde:	4602      	mov	r2, r0
 8010be0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010be2:	493e      	ldr	r1, [pc, #248]	; (8010cdc <etharp_tmr+0x14c>)
 8010be4:	687a      	ldr	r2, [r7, #4]
 8010be6:	4613      	mov	r3, r2
 8010be8:	005b      	lsls	r3, r3, #1
 8010bea:	4413      	add	r3, r2
 8010bec:	00db      	lsls	r3, r3, #3
 8010bee:	440b      	add	r3, r1
 8010bf0:	3312      	adds	r3, #18
 8010bf2:	881b      	ldrh	r3, [r3, #0]
 8010bf4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010bf8:	d215      	bcs.n	8010c26 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010bfa:	4938      	ldr	r1, [pc, #224]	; (8010cdc <etharp_tmr+0x14c>)
 8010bfc:	687a      	ldr	r2, [r7, #4]
 8010bfe:	4613      	mov	r3, r2
 8010c00:	005b      	lsls	r3, r3, #1
 8010c02:	4413      	add	r3, r2
 8010c04:	00db      	lsls	r3, r3, #3
 8010c06:	440b      	add	r3, r1
 8010c08:	3314      	adds	r3, #20
 8010c0a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010c0c:	2b01      	cmp	r3, #1
 8010c0e:	d10e      	bne.n	8010c2e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010c10:	4932      	ldr	r1, [pc, #200]	; (8010cdc <etharp_tmr+0x14c>)
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	4613      	mov	r3, r2
 8010c16:	005b      	lsls	r3, r3, #1
 8010c18:	4413      	add	r3, r2
 8010c1a:	00db      	lsls	r3, r3, #3
 8010c1c:	440b      	add	r3, r1
 8010c1e:	3312      	adds	r3, #18
 8010c20:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010c22:	2b04      	cmp	r3, #4
 8010c24:	d903      	bls.n	8010c2e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f7ff ff80 	bl	8010b2c <etharp_free_entry>
 8010c2c:	e04a      	b.n	8010cc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010c2e:	492b      	ldr	r1, [pc, #172]	; (8010cdc <etharp_tmr+0x14c>)
 8010c30:	687a      	ldr	r2, [r7, #4]
 8010c32:	4613      	mov	r3, r2
 8010c34:	005b      	lsls	r3, r3, #1
 8010c36:	4413      	add	r3, r2
 8010c38:	00db      	lsls	r3, r3, #3
 8010c3a:	440b      	add	r3, r1
 8010c3c:	3314      	adds	r3, #20
 8010c3e:	781b      	ldrb	r3, [r3, #0]
 8010c40:	2b03      	cmp	r3, #3
 8010c42:	d10a      	bne.n	8010c5a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010c44:	4925      	ldr	r1, [pc, #148]	; (8010cdc <etharp_tmr+0x14c>)
 8010c46:	687a      	ldr	r2, [r7, #4]
 8010c48:	4613      	mov	r3, r2
 8010c4a:	005b      	lsls	r3, r3, #1
 8010c4c:	4413      	add	r3, r2
 8010c4e:	00db      	lsls	r3, r3, #3
 8010c50:	440b      	add	r3, r1
 8010c52:	3314      	adds	r3, #20
 8010c54:	2204      	movs	r2, #4
 8010c56:	701a      	strb	r2, [r3, #0]
 8010c58:	e034      	b.n	8010cc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010c5a:	4920      	ldr	r1, [pc, #128]	; (8010cdc <etharp_tmr+0x14c>)
 8010c5c:	687a      	ldr	r2, [r7, #4]
 8010c5e:	4613      	mov	r3, r2
 8010c60:	005b      	lsls	r3, r3, #1
 8010c62:	4413      	add	r3, r2
 8010c64:	00db      	lsls	r3, r3, #3
 8010c66:	440b      	add	r3, r1
 8010c68:	3314      	adds	r3, #20
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	2b04      	cmp	r3, #4
 8010c6e:	d10a      	bne.n	8010c86 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010c70:	491a      	ldr	r1, [pc, #104]	; (8010cdc <etharp_tmr+0x14c>)
 8010c72:	687a      	ldr	r2, [r7, #4]
 8010c74:	4613      	mov	r3, r2
 8010c76:	005b      	lsls	r3, r3, #1
 8010c78:	4413      	add	r3, r2
 8010c7a:	00db      	lsls	r3, r3, #3
 8010c7c:	440b      	add	r3, r1
 8010c7e:	3314      	adds	r3, #20
 8010c80:	2202      	movs	r2, #2
 8010c82:	701a      	strb	r2, [r3, #0]
 8010c84:	e01e      	b.n	8010cc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010c86:	4915      	ldr	r1, [pc, #84]	; (8010cdc <etharp_tmr+0x14c>)
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	4613      	mov	r3, r2
 8010c8c:	005b      	lsls	r3, r3, #1
 8010c8e:	4413      	add	r3, r2
 8010c90:	00db      	lsls	r3, r3, #3
 8010c92:	440b      	add	r3, r1
 8010c94:	3314      	adds	r3, #20
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	2b01      	cmp	r3, #1
 8010c9a:	d113      	bne.n	8010cc4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010c9c:	490f      	ldr	r1, [pc, #60]	; (8010cdc <etharp_tmr+0x14c>)
 8010c9e:	687a      	ldr	r2, [r7, #4]
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	005b      	lsls	r3, r3, #1
 8010ca4:	4413      	add	r3, r2
 8010ca6:	00db      	lsls	r3, r3, #3
 8010ca8:	440b      	add	r3, r1
 8010caa:	3308      	adds	r3, #8
 8010cac:	6818      	ldr	r0, [r3, #0]
 8010cae:	687a      	ldr	r2, [r7, #4]
 8010cb0:	4613      	mov	r3, r2
 8010cb2:	005b      	lsls	r3, r3, #1
 8010cb4:	4413      	add	r3, r2
 8010cb6:	00db      	lsls	r3, r3, #3
 8010cb8:	4a08      	ldr	r2, [pc, #32]	; (8010cdc <etharp_tmr+0x14c>)
 8010cba:	4413      	add	r3, r2
 8010cbc:	3304      	adds	r3, #4
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	f000 fe6e 	bl	80119a0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	607b      	str	r3, [r7, #4]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2b09      	cmp	r3, #9
 8010cce:	f77f af65 	ble.w	8010b9c <etharp_tmr+0xc>
      }
    }
  }
}
 8010cd2:	bf00      	nop
 8010cd4:	bf00      	nop
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}
 8010cdc:	2000e500 	.word	0x2000e500

08010ce0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b08a      	sub	sp, #40	; 0x28
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	60f8      	str	r0, [r7, #12]
 8010ce8:	460b      	mov	r3, r1
 8010cea:	607a      	str	r2, [r7, #4]
 8010cec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010cee:	230a      	movs	r3, #10
 8010cf0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010cf2:	230a      	movs	r3, #10
 8010cf4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010cf6:	230a      	movs	r3, #10
 8010cf8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010cfe:	230a      	movs	r3, #10
 8010d00:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010d02:	2300      	movs	r3, #0
 8010d04:	83bb      	strh	r3, [r7, #28]
 8010d06:	2300      	movs	r3, #0
 8010d08:	837b      	strh	r3, [r7, #26]
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010d0e:	2300      	movs	r3, #0
 8010d10:	843b      	strh	r3, [r7, #32]
 8010d12:	e0ae      	b.n	8010e72 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010d14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d18:	49a6      	ldr	r1, [pc, #664]	; (8010fb4 <etharp_find_entry+0x2d4>)
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	005b      	lsls	r3, r3, #1
 8010d1e:	4413      	add	r3, r2
 8010d20:	00db      	lsls	r3, r3, #3
 8010d22:	440b      	add	r3, r1
 8010d24:	3314      	adds	r3, #20
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010d2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010d2e:	2b0a      	cmp	r3, #10
 8010d30:	d105      	bne.n	8010d3e <etharp_find_entry+0x5e>
 8010d32:	7dfb      	ldrb	r3, [r7, #23]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d102      	bne.n	8010d3e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010d38:	8c3b      	ldrh	r3, [r7, #32]
 8010d3a:	847b      	strh	r3, [r7, #34]	; 0x22
 8010d3c:	e095      	b.n	8010e6a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010d3e:	7dfb      	ldrb	r3, [r7, #23]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	f000 8092 	beq.w	8010e6a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010d46:	7dfb      	ldrb	r3, [r7, #23]
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	d009      	beq.n	8010d60 <etharp_find_entry+0x80>
 8010d4c:	7dfb      	ldrb	r3, [r7, #23]
 8010d4e:	2b01      	cmp	r3, #1
 8010d50:	d806      	bhi.n	8010d60 <etharp_find_entry+0x80>
 8010d52:	4b99      	ldr	r3, [pc, #612]	; (8010fb8 <etharp_find_entry+0x2d8>)
 8010d54:	f240 1223 	movw	r2, #291	; 0x123
 8010d58:	4998      	ldr	r1, [pc, #608]	; (8010fbc <etharp_find_entry+0x2dc>)
 8010d5a:	4899      	ldr	r0, [pc, #612]	; (8010fc0 <etharp_find_entry+0x2e0>)
 8010d5c:	f003 fef4 	bl	8014b48 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d020      	beq.n	8010da8 <etharp_find_entry+0xc8>
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	6819      	ldr	r1, [r3, #0]
 8010d6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d6e:	4891      	ldr	r0, [pc, #580]	; (8010fb4 <etharp_find_entry+0x2d4>)
 8010d70:	4613      	mov	r3, r2
 8010d72:	005b      	lsls	r3, r3, #1
 8010d74:	4413      	add	r3, r2
 8010d76:	00db      	lsls	r3, r3, #3
 8010d78:	4403      	add	r3, r0
 8010d7a:	3304      	adds	r3, #4
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	4299      	cmp	r1, r3
 8010d80:	d112      	bne.n	8010da8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d00c      	beq.n	8010da2 <etharp_find_entry+0xc2>
 8010d88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d8c:	4989      	ldr	r1, [pc, #548]	; (8010fb4 <etharp_find_entry+0x2d4>)
 8010d8e:	4613      	mov	r3, r2
 8010d90:	005b      	lsls	r3, r3, #1
 8010d92:	4413      	add	r3, r2
 8010d94:	00db      	lsls	r3, r3, #3
 8010d96:	440b      	add	r3, r1
 8010d98:	3308      	adds	r3, #8
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	687a      	ldr	r2, [r7, #4]
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d102      	bne.n	8010da8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010da2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010da6:	e100      	b.n	8010faa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010da8:	7dfb      	ldrb	r3, [r7, #23]
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d140      	bne.n	8010e30 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010dae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010db2:	4980      	ldr	r1, [pc, #512]	; (8010fb4 <etharp_find_entry+0x2d4>)
 8010db4:	4613      	mov	r3, r2
 8010db6:	005b      	lsls	r3, r3, #1
 8010db8:	4413      	add	r3, r2
 8010dba:	00db      	lsls	r3, r3, #3
 8010dbc:	440b      	add	r3, r1
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d01a      	beq.n	8010dfa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010dc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010dc8:	497a      	ldr	r1, [pc, #488]	; (8010fb4 <etharp_find_entry+0x2d4>)
 8010dca:	4613      	mov	r3, r2
 8010dcc:	005b      	lsls	r3, r3, #1
 8010dce:	4413      	add	r3, r2
 8010dd0:	00db      	lsls	r3, r3, #3
 8010dd2:	440b      	add	r3, r1
 8010dd4:	3312      	adds	r3, #18
 8010dd6:	881b      	ldrh	r3, [r3, #0]
 8010dd8:	8bba      	ldrh	r2, [r7, #28]
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d845      	bhi.n	8010e6a <etharp_find_entry+0x18a>
            old_queue = i;
 8010dde:	8c3b      	ldrh	r3, [r7, #32]
 8010de0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010de2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010de6:	4973      	ldr	r1, [pc, #460]	; (8010fb4 <etharp_find_entry+0x2d4>)
 8010de8:	4613      	mov	r3, r2
 8010dea:	005b      	lsls	r3, r3, #1
 8010dec:	4413      	add	r3, r2
 8010dee:	00db      	lsls	r3, r3, #3
 8010df0:	440b      	add	r3, r1
 8010df2:	3312      	adds	r3, #18
 8010df4:	881b      	ldrh	r3, [r3, #0]
 8010df6:	83bb      	strh	r3, [r7, #28]
 8010df8:	e037      	b.n	8010e6a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010dfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010dfe:	496d      	ldr	r1, [pc, #436]	; (8010fb4 <etharp_find_entry+0x2d4>)
 8010e00:	4613      	mov	r3, r2
 8010e02:	005b      	lsls	r3, r3, #1
 8010e04:	4413      	add	r3, r2
 8010e06:	00db      	lsls	r3, r3, #3
 8010e08:	440b      	add	r3, r1
 8010e0a:	3312      	adds	r3, #18
 8010e0c:	881b      	ldrh	r3, [r3, #0]
 8010e0e:	8b7a      	ldrh	r2, [r7, #26]
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d82a      	bhi.n	8010e6a <etharp_find_entry+0x18a>
            old_pending = i;
 8010e14:	8c3b      	ldrh	r3, [r7, #32]
 8010e16:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010e18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e1c:	4965      	ldr	r1, [pc, #404]	; (8010fb4 <etharp_find_entry+0x2d4>)
 8010e1e:	4613      	mov	r3, r2
 8010e20:	005b      	lsls	r3, r3, #1
 8010e22:	4413      	add	r3, r2
 8010e24:	00db      	lsls	r3, r3, #3
 8010e26:	440b      	add	r3, r1
 8010e28:	3312      	adds	r3, #18
 8010e2a:	881b      	ldrh	r3, [r3, #0]
 8010e2c:	837b      	strh	r3, [r7, #26]
 8010e2e:	e01c      	b.n	8010e6a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010e30:	7dfb      	ldrb	r3, [r7, #23]
 8010e32:	2b01      	cmp	r3, #1
 8010e34:	d919      	bls.n	8010e6a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010e36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e3a:	495e      	ldr	r1, [pc, #376]	; (8010fb4 <etharp_find_entry+0x2d4>)
 8010e3c:	4613      	mov	r3, r2
 8010e3e:	005b      	lsls	r3, r3, #1
 8010e40:	4413      	add	r3, r2
 8010e42:	00db      	lsls	r3, r3, #3
 8010e44:	440b      	add	r3, r1
 8010e46:	3312      	adds	r3, #18
 8010e48:	881b      	ldrh	r3, [r3, #0]
 8010e4a:	8b3a      	ldrh	r2, [r7, #24]
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	d80c      	bhi.n	8010e6a <etharp_find_entry+0x18a>
            old_stable = i;
 8010e50:	8c3b      	ldrh	r3, [r7, #32]
 8010e52:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010e54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e58:	4956      	ldr	r1, [pc, #344]	; (8010fb4 <etharp_find_entry+0x2d4>)
 8010e5a:	4613      	mov	r3, r2
 8010e5c:	005b      	lsls	r3, r3, #1
 8010e5e:	4413      	add	r3, r2
 8010e60:	00db      	lsls	r3, r3, #3
 8010e62:	440b      	add	r3, r1
 8010e64:	3312      	adds	r3, #18
 8010e66:	881b      	ldrh	r3, [r3, #0]
 8010e68:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e6a:	8c3b      	ldrh	r3, [r7, #32]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	b29b      	uxth	r3, r3
 8010e70:	843b      	strh	r3, [r7, #32]
 8010e72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e76:	2b09      	cmp	r3, #9
 8010e78:	f77f af4c 	ble.w	8010d14 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010e7c:	7afb      	ldrb	r3, [r7, #11]
 8010e7e:	f003 0302 	and.w	r3, r3, #2
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d108      	bne.n	8010e98 <etharp_find_entry+0x1b8>
 8010e86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010e8a:	2b0a      	cmp	r3, #10
 8010e8c:	d107      	bne.n	8010e9e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010e8e:	7afb      	ldrb	r3, [r7, #11]
 8010e90:	f003 0301 	and.w	r3, r3, #1
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d102      	bne.n	8010e9e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010e98:	f04f 33ff 	mov.w	r3, #4294967295
 8010e9c:	e085      	b.n	8010faa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010e9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010ea2:	2b09      	cmp	r3, #9
 8010ea4:	dc02      	bgt.n	8010eac <etharp_find_entry+0x1cc>
    i = empty;
 8010ea6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ea8:	843b      	strh	r3, [r7, #32]
 8010eaa:	e039      	b.n	8010f20 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010eac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010eb0:	2b09      	cmp	r3, #9
 8010eb2:	dc14      	bgt.n	8010ede <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010eb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010eb6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010eb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ebc:	493d      	ldr	r1, [pc, #244]	; (8010fb4 <etharp_find_entry+0x2d4>)
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	005b      	lsls	r3, r3, #1
 8010ec2:	4413      	add	r3, r2
 8010ec4:	00db      	lsls	r3, r3, #3
 8010ec6:	440b      	add	r3, r1
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d018      	beq.n	8010f00 <etharp_find_entry+0x220>
 8010ece:	4b3a      	ldr	r3, [pc, #232]	; (8010fb8 <etharp_find_entry+0x2d8>)
 8010ed0:	f240 126d 	movw	r2, #365	; 0x16d
 8010ed4:	493b      	ldr	r1, [pc, #236]	; (8010fc4 <etharp_find_entry+0x2e4>)
 8010ed6:	483a      	ldr	r0, [pc, #232]	; (8010fc0 <etharp_find_entry+0x2e0>)
 8010ed8:	f003 fe36 	bl	8014b48 <iprintf>
 8010edc:	e010      	b.n	8010f00 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010ede:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010ee2:	2b09      	cmp	r3, #9
 8010ee4:	dc02      	bgt.n	8010eec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010ee6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010ee8:	843b      	strh	r3, [r7, #32]
 8010eea:	e009      	b.n	8010f00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010eec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010ef0:	2b09      	cmp	r3, #9
 8010ef2:	dc02      	bgt.n	8010efa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010ef4:	8bfb      	ldrh	r3, [r7, #30]
 8010ef6:	843b      	strh	r3, [r7, #32]
 8010ef8:	e002      	b.n	8010f00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010efa:	f04f 33ff 	mov.w	r3, #4294967295
 8010efe:	e054      	b.n	8010faa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010f00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010f04:	2b09      	cmp	r3, #9
 8010f06:	dd06      	ble.n	8010f16 <etharp_find_entry+0x236>
 8010f08:	4b2b      	ldr	r3, [pc, #172]	; (8010fb8 <etharp_find_entry+0x2d8>)
 8010f0a:	f240 127f 	movw	r2, #383	; 0x17f
 8010f0e:	492e      	ldr	r1, [pc, #184]	; (8010fc8 <etharp_find_entry+0x2e8>)
 8010f10:	482b      	ldr	r0, [pc, #172]	; (8010fc0 <etharp_find_entry+0x2e0>)
 8010f12:	f003 fe19 	bl	8014b48 <iprintf>
    etharp_free_entry(i);
 8010f16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7ff fe06 	bl	8010b2c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010f20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010f24:	2b09      	cmp	r3, #9
 8010f26:	dd06      	ble.n	8010f36 <etharp_find_entry+0x256>
 8010f28:	4b23      	ldr	r3, [pc, #140]	; (8010fb8 <etharp_find_entry+0x2d8>)
 8010f2a:	f240 1283 	movw	r2, #387	; 0x183
 8010f2e:	4926      	ldr	r1, [pc, #152]	; (8010fc8 <etharp_find_entry+0x2e8>)
 8010f30:	4823      	ldr	r0, [pc, #140]	; (8010fc0 <etharp_find_entry+0x2e0>)
 8010f32:	f003 fe09 	bl	8014b48 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010f36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f3a:	491e      	ldr	r1, [pc, #120]	; (8010fb4 <etharp_find_entry+0x2d4>)
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	005b      	lsls	r3, r3, #1
 8010f40:	4413      	add	r3, r2
 8010f42:	00db      	lsls	r3, r3, #3
 8010f44:	440b      	add	r3, r1
 8010f46:	3314      	adds	r3, #20
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d006      	beq.n	8010f5c <etharp_find_entry+0x27c>
 8010f4e:	4b1a      	ldr	r3, [pc, #104]	; (8010fb8 <etharp_find_entry+0x2d8>)
 8010f50:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010f54:	491d      	ldr	r1, [pc, #116]	; (8010fcc <etharp_find_entry+0x2ec>)
 8010f56:	481a      	ldr	r0, [pc, #104]	; (8010fc0 <etharp_find_entry+0x2e0>)
 8010f58:	f003 fdf6 	bl	8014b48 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d00b      	beq.n	8010f7a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010f62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	6819      	ldr	r1, [r3, #0]
 8010f6a:	4812      	ldr	r0, [pc, #72]	; (8010fb4 <etharp_find_entry+0x2d4>)
 8010f6c:	4613      	mov	r3, r2
 8010f6e:	005b      	lsls	r3, r3, #1
 8010f70:	4413      	add	r3, r2
 8010f72:	00db      	lsls	r3, r3, #3
 8010f74:	4403      	add	r3, r0
 8010f76:	3304      	adds	r3, #4
 8010f78:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010f7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f7e:	490d      	ldr	r1, [pc, #52]	; (8010fb4 <etharp_find_entry+0x2d4>)
 8010f80:	4613      	mov	r3, r2
 8010f82:	005b      	lsls	r3, r3, #1
 8010f84:	4413      	add	r3, r2
 8010f86:	00db      	lsls	r3, r3, #3
 8010f88:	440b      	add	r3, r1
 8010f8a:	3312      	adds	r3, #18
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010f90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f94:	4907      	ldr	r1, [pc, #28]	; (8010fb4 <etharp_find_entry+0x2d4>)
 8010f96:	4613      	mov	r3, r2
 8010f98:	005b      	lsls	r3, r3, #1
 8010f9a:	4413      	add	r3, r2
 8010f9c:	00db      	lsls	r3, r3, #3
 8010f9e:	440b      	add	r3, r1
 8010fa0:	3308      	adds	r3, #8
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010fa6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3728      	adds	r7, #40	; 0x28
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}
 8010fb2:	bf00      	nop
 8010fb4:	2000e500 	.word	0x2000e500
 8010fb8:	08017fd0 	.word	0x08017fd0
 8010fbc:	08018008 	.word	0x08018008
 8010fc0:	08018048 	.word	0x08018048
 8010fc4:	08018070 	.word	0x08018070
 8010fc8:	08018088 	.word	0x08018088
 8010fcc:	0801809c 	.word	0x0801809c

08010fd0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b088      	sub	sp, #32
 8010fd4:	af02      	add	r7, sp, #8
 8010fd6:	60f8      	str	r0, [r7, #12]
 8010fd8:	60b9      	str	r1, [r7, #8]
 8010fda:	607a      	str	r2, [r7, #4]
 8010fdc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010fe4:	2b06      	cmp	r3, #6
 8010fe6:	d006      	beq.n	8010ff6 <etharp_update_arp_entry+0x26>
 8010fe8:	4b48      	ldr	r3, [pc, #288]	; (801110c <etharp_update_arp_entry+0x13c>)
 8010fea:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010fee:	4948      	ldr	r1, [pc, #288]	; (8011110 <etharp_update_arp_entry+0x140>)
 8010ff0:	4848      	ldr	r0, [pc, #288]	; (8011114 <etharp_update_arp_entry+0x144>)
 8010ff2:	f003 fda9 	bl	8014b48 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d012      	beq.n	8011022 <etharp_update_arp_entry+0x52>
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d00e      	beq.n	8011022 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	68f9      	ldr	r1, [r7, #12]
 801100a:	4618      	mov	r0, r3
 801100c:	f001 f8f4 	bl	80121f8 <ip4_addr_isbroadcast_u32>
 8011010:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011012:	2b00      	cmp	r3, #0
 8011014:	d105      	bne.n	8011022 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801101e:	2be0      	cmp	r3, #224	; 0xe0
 8011020:	d102      	bne.n	8011028 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011022:	f06f 030f 	mvn.w	r3, #15
 8011026:	e06c      	b.n	8011102 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011028:	78fb      	ldrb	r3, [r7, #3]
 801102a:	68fa      	ldr	r2, [r7, #12]
 801102c:	4619      	mov	r1, r3
 801102e:	68b8      	ldr	r0, [r7, #8]
 8011030:	f7ff fe56 	bl	8010ce0 <etharp_find_entry>
 8011034:	4603      	mov	r3, r0
 8011036:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011038:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801103c:	2b00      	cmp	r3, #0
 801103e:	da02      	bge.n	8011046 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011040:	8afb      	ldrh	r3, [r7, #22]
 8011042:	b25b      	sxtb	r3, r3
 8011044:	e05d      	b.n	8011102 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011046:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801104a:	4933      	ldr	r1, [pc, #204]	; (8011118 <etharp_update_arp_entry+0x148>)
 801104c:	4613      	mov	r3, r2
 801104e:	005b      	lsls	r3, r3, #1
 8011050:	4413      	add	r3, r2
 8011052:	00db      	lsls	r3, r3, #3
 8011054:	440b      	add	r3, r1
 8011056:	3314      	adds	r3, #20
 8011058:	2202      	movs	r2, #2
 801105a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801105c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011060:	492d      	ldr	r1, [pc, #180]	; (8011118 <etharp_update_arp_entry+0x148>)
 8011062:	4613      	mov	r3, r2
 8011064:	005b      	lsls	r3, r3, #1
 8011066:	4413      	add	r3, r2
 8011068:	00db      	lsls	r3, r3, #3
 801106a:	440b      	add	r3, r1
 801106c:	3308      	adds	r3, #8
 801106e:	68fa      	ldr	r2, [r7, #12]
 8011070:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011072:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011076:	4613      	mov	r3, r2
 8011078:	005b      	lsls	r3, r3, #1
 801107a:	4413      	add	r3, r2
 801107c:	00db      	lsls	r3, r3, #3
 801107e:	3308      	adds	r3, #8
 8011080:	4a25      	ldr	r2, [pc, #148]	; (8011118 <etharp_update_arp_entry+0x148>)
 8011082:	4413      	add	r3, r2
 8011084:	3304      	adds	r3, #4
 8011086:	2206      	movs	r2, #6
 8011088:	6879      	ldr	r1, [r7, #4]
 801108a:	4618      	mov	r0, r3
 801108c:	f003 febf 	bl	8014e0e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011090:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011094:	4920      	ldr	r1, [pc, #128]	; (8011118 <etharp_update_arp_entry+0x148>)
 8011096:	4613      	mov	r3, r2
 8011098:	005b      	lsls	r3, r3, #1
 801109a:	4413      	add	r3, r2
 801109c:	00db      	lsls	r3, r3, #3
 801109e:	440b      	add	r3, r1
 80110a0:	3312      	adds	r3, #18
 80110a2:	2200      	movs	r2, #0
 80110a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80110a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80110aa:	491b      	ldr	r1, [pc, #108]	; (8011118 <etharp_update_arp_entry+0x148>)
 80110ac:	4613      	mov	r3, r2
 80110ae:	005b      	lsls	r3, r3, #1
 80110b0:	4413      	add	r3, r2
 80110b2:	00db      	lsls	r3, r3, #3
 80110b4:	440b      	add	r3, r1
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d021      	beq.n	8011100 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80110bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80110c0:	4915      	ldr	r1, [pc, #84]	; (8011118 <etharp_update_arp_entry+0x148>)
 80110c2:	4613      	mov	r3, r2
 80110c4:	005b      	lsls	r3, r3, #1
 80110c6:	4413      	add	r3, r2
 80110c8:	00db      	lsls	r3, r3, #3
 80110ca:	440b      	add	r3, r1
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80110d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80110d4:	4910      	ldr	r1, [pc, #64]	; (8011118 <etharp_update_arp_entry+0x148>)
 80110d6:	4613      	mov	r3, r2
 80110d8:	005b      	lsls	r3, r3, #1
 80110da:	4413      	add	r3, r2
 80110dc:	00db      	lsls	r3, r3, #3
 80110de:	440b      	add	r3, r1
 80110e0:	2200      	movs	r2, #0
 80110e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80110ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80110ee:	9300      	str	r3, [sp, #0]
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6939      	ldr	r1, [r7, #16]
 80110f4:	68f8      	ldr	r0, [r7, #12]
 80110f6:	f001 ff8d 	bl	8013014 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80110fa:	6938      	ldr	r0, [r7, #16]
 80110fc:	f7f9 f95a 	bl	800a3b4 <pbuf_free>
  }
  return ERR_OK;
 8011100:	2300      	movs	r3, #0
}
 8011102:	4618      	mov	r0, r3
 8011104:	3718      	adds	r7, #24
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	08017fd0 	.word	0x08017fd0
 8011110:	080180c8 	.word	0x080180c8
 8011114:	08018048 	.word	0x08018048
 8011118:	2000e500 	.word	0x2000e500

0801111c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b084      	sub	sp, #16
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011124:	2300      	movs	r3, #0
 8011126:	60fb      	str	r3, [r7, #12]
 8011128:	e01e      	b.n	8011168 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801112a:	4913      	ldr	r1, [pc, #76]	; (8011178 <etharp_cleanup_netif+0x5c>)
 801112c:	68fa      	ldr	r2, [r7, #12]
 801112e:	4613      	mov	r3, r2
 8011130:	005b      	lsls	r3, r3, #1
 8011132:	4413      	add	r3, r2
 8011134:	00db      	lsls	r3, r3, #3
 8011136:	440b      	add	r3, r1
 8011138:	3314      	adds	r3, #20
 801113a:	781b      	ldrb	r3, [r3, #0]
 801113c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801113e:	7afb      	ldrb	r3, [r7, #11]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d00e      	beq.n	8011162 <etharp_cleanup_netif+0x46>
 8011144:	490c      	ldr	r1, [pc, #48]	; (8011178 <etharp_cleanup_netif+0x5c>)
 8011146:	68fa      	ldr	r2, [r7, #12]
 8011148:	4613      	mov	r3, r2
 801114a:	005b      	lsls	r3, r3, #1
 801114c:	4413      	add	r3, r2
 801114e:	00db      	lsls	r3, r3, #3
 8011150:	440b      	add	r3, r1
 8011152:	3308      	adds	r3, #8
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	687a      	ldr	r2, [r7, #4]
 8011158:	429a      	cmp	r2, r3
 801115a:	d102      	bne.n	8011162 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801115c:	68f8      	ldr	r0, [r7, #12]
 801115e:	f7ff fce5 	bl	8010b2c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	3301      	adds	r3, #1
 8011166:	60fb      	str	r3, [r7, #12]
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2b09      	cmp	r3, #9
 801116c:	dddd      	ble.n	801112a <etharp_cleanup_netif+0xe>
    }
  }
}
 801116e:	bf00      	nop
 8011170:	bf00      	nop
 8011172:	3710      	adds	r7, #16
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}
 8011178:	2000e500 	.word	0x2000e500

0801117c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801117c:	b5b0      	push	{r4, r5, r7, lr}
 801117e:	b08a      	sub	sp, #40	; 0x28
 8011180:	af04      	add	r7, sp, #16
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d107      	bne.n	801119c <etharp_input+0x20>
 801118c:	4b3d      	ldr	r3, [pc, #244]	; (8011284 <etharp_input+0x108>)
 801118e:	f240 228a 	movw	r2, #650	; 0x28a
 8011192:	493d      	ldr	r1, [pc, #244]	; (8011288 <etharp_input+0x10c>)
 8011194:	483d      	ldr	r0, [pc, #244]	; (801128c <etharp_input+0x110>)
 8011196:	f003 fcd7 	bl	8014b48 <iprintf>
 801119a:	e06f      	b.n	801127c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	685b      	ldr	r3, [r3, #4]
 80111a0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	881b      	ldrh	r3, [r3, #0]
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80111ac:	d10c      	bne.n	80111c8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80111b2:	2b06      	cmp	r3, #6
 80111b4:	d108      	bne.n	80111c8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80111ba:	2b04      	cmp	r3, #4
 80111bc:	d104      	bne.n	80111c8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	885b      	ldrh	r3, [r3, #2]
 80111c2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80111c4:	2b08      	cmp	r3, #8
 80111c6:	d003      	beq.n	80111d0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f7f9 f8f3 	bl	800a3b4 <pbuf_free>
    return;
 80111ce:	e055      	b.n	801127c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	330e      	adds	r3, #14
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	3318      	adds	r3, #24
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	3304      	adds	r3, #4
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d102      	bne.n	80111f0 <etharp_input+0x74>
    for_us = 0;
 80111ea:	2300      	movs	r3, #0
 80111ec:	75fb      	strb	r3, [r7, #23]
 80111ee:	e009      	b.n	8011204 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80111f0:	68ba      	ldr	r2, [r7, #8]
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	3304      	adds	r3, #4
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	429a      	cmp	r2, r3
 80111fa:	bf0c      	ite	eq
 80111fc:	2301      	moveq	r3, #1
 80111fe:	2300      	movne	r3, #0
 8011200:	b2db      	uxtb	r3, r3
 8011202:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	f103 0208 	add.w	r2, r3, #8
 801120a:	7dfb      	ldrb	r3, [r7, #23]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d001      	beq.n	8011214 <etharp_input+0x98>
 8011210:	2301      	movs	r3, #1
 8011212:	e000      	b.n	8011216 <etharp_input+0x9a>
 8011214:	2302      	movs	r3, #2
 8011216:	f107 010c 	add.w	r1, r7, #12
 801121a:	6838      	ldr	r0, [r7, #0]
 801121c:	f7ff fed8 	bl	8010fd0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	88db      	ldrh	r3, [r3, #6]
 8011224:	b29b      	uxth	r3, r3
 8011226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801122a:	d003      	beq.n	8011234 <etharp_input+0xb8>
 801122c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011230:	d01e      	beq.n	8011270 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011232:	e020      	b.n	8011276 <etharp_input+0xfa>
      if (for_us) {
 8011234:	7dfb      	ldrb	r3, [r7, #23]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d01c      	beq.n	8011274 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011250:	693a      	ldr	r2, [r7, #16]
 8011252:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011254:	2102      	movs	r1, #2
 8011256:	9103      	str	r1, [sp, #12]
 8011258:	f107 010c 	add.w	r1, r7, #12
 801125c:	9102      	str	r1, [sp, #8]
 801125e:	9201      	str	r2, [sp, #4]
 8011260:	9300      	str	r3, [sp, #0]
 8011262:	462b      	mov	r3, r5
 8011264:	4622      	mov	r2, r4
 8011266:	4601      	mov	r1, r0
 8011268:	6838      	ldr	r0, [r7, #0]
 801126a:	f000 faeb 	bl	8011844 <etharp_raw>
      break;
 801126e:	e001      	b.n	8011274 <etharp_input+0xf8>
      break;
 8011270:	bf00      	nop
 8011272:	e000      	b.n	8011276 <etharp_input+0xfa>
      break;
 8011274:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f7f9 f89c 	bl	800a3b4 <pbuf_free>
}
 801127c:	3718      	adds	r7, #24
 801127e:	46bd      	mov	sp, r7
 8011280:	bdb0      	pop	{r4, r5, r7, pc}
 8011282:	bf00      	nop
 8011284:	08017fd0 	.word	0x08017fd0
 8011288:	08018120 	.word	0x08018120
 801128c:	08018048 	.word	0x08018048

08011290 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b086      	sub	sp, #24
 8011294:	af02      	add	r7, sp, #8
 8011296:	60f8      	str	r0, [r7, #12]
 8011298:	60b9      	str	r1, [r7, #8]
 801129a:	4613      	mov	r3, r2
 801129c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801129e:	79fa      	ldrb	r2, [r7, #7]
 80112a0:	4944      	ldr	r1, [pc, #272]	; (80113b4 <etharp_output_to_arp_index+0x124>)
 80112a2:	4613      	mov	r3, r2
 80112a4:	005b      	lsls	r3, r3, #1
 80112a6:	4413      	add	r3, r2
 80112a8:	00db      	lsls	r3, r3, #3
 80112aa:	440b      	add	r3, r1
 80112ac:	3314      	adds	r3, #20
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	2b01      	cmp	r3, #1
 80112b2:	d806      	bhi.n	80112c2 <etharp_output_to_arp_index+0x32>
 80112b4:	4b40      	ldr	r3, [pc, #256]	; (80113b8 <etharp_output_to_arp_index+0x128>)
 80112b6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80112ba:	4940      	ldr	r1, [pc, #256]	; (80113bc <etharp_output_to_arp_index+0x12c>)
 80112bc:	4840      	ldr	r0, [pc, #256]	; (80113c0 <etharp_output_to_arp_index+0x130>)
 80112be:	f003 fc43 	bl	8014b48 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80112c2:	79fa      	ldrb	r2, [r7, #7]
 80112c4:	493b      	ldr	r1, [pc, #236]	; (80113b4 <etharp_output_to_arp_index+0x124>)
 80112c6:	4613      	mov	r3, r2
 80112c8:	005b      	lsls	r3, r3, #1
 80112ca:	4413      	add	r3, r2
 80112cc:	00db      	lsls	r3, r3, #3
 80112ce:	440b      	add	r3, r1
 80112d0:	3314      	adds	r3, #20
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	2b02      	cmp	r3, #2
 80112d6:	d153      	bne.n	8011380 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80112d8:	79fa      	ldrb	r2, [r7, #7]
 80112da:	4936      	ldr	r1, [pc, #216]	; (80113b4 <etharp_output_to_arp_index+0x124>)
 80112dc:	4613      	mov	r3, r2
 80112de:	005b      	lsls	r3, r3, #1
 80112e0:	4413      	add	r3, r2
 80112e2:	00db      	lsls	r3, r3, #3
 80112e4:	440b      	add	r3, r1
 80112e6:	3312      	adds	r3, #18
 80112e8:	881b      	ldrh	r3, [r3, #0]
 80112ea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80112ee:	d919      	bls.n	8011324 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80112f0:	79fa      	ldrb	r2, [r7, #7]
 80112f2:	4613      	mov	r3, r2
 80112f4:	005b      	lsls	r3, r3, #1
 80112f6:	4413      	add	r3, r2
 80112f8:	00db      	lsls	r3, r3, #3
 80112fa:	4a2e      	ldr	r2, [pc, #184]	; (80113b4 <etharp_output_to_arp_index+0x124>)
 80112fc:	4413      	add	r3, r2
 80112fe:	3304      	adds	r3, #4
 8011300:	4619      	mov	r1, r3
 8011302:	68f8      	ldr	r0, [r7, #12]
 8011304:	f000 fb4c 	bl	80119a0 <etharp_request>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d138      	bne.n	8011380 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801130e:	79fa      	ldrb	r2, [r7, #7]
 8011310:	4928      	ldr	r1, [pc, #160]	; (80113b4 <etharp_output_to_arp_index+0x124>)
 8011312:	4613      	mov	r3, r2
 8011314:	005b      	lsls	r3, r3, #1
 8011316:	4413      	add	r3, r2
 8011318:	00db      	lsls	r3, r3, #3
 801131a:	440b      	add	r3, r1
 801131c:	3314      	adds	r3, #20
 801131e:	2203      	movs	r2, #3
 8011320:	701a      	strb	r2, [r3, #0]
 8011322:	e02d      	b.n	8011380 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011324:	79fa      	ldrb	r2, [r7, #7]
 8011326:	4923      	ldr	r1, [pc, #140]	; (80113b4 <etharp_output_to_arp_index+0x124>)
 8011328:	4613      	mov	r3, r2
 801132a:	005b      	lsls	r3, r3, #1
 801132c:	4413      	add	r3, r2
 801132e:	00db      	lsls	r3, r3, #3
 8011330:	440b      	add	r3, r1
 8011332:	3312      	adds	r3, #18
 8011334:	881b      	ldrh	r3, [r3, #0]
 8011336:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801133a:	d321      	bcc.n	8011380 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801133c:	79fa      	ldrb	r2, [r7, #7]
 801133e:	4613      	mov	r3, r2
 8011340:	005b      	lsls	r3, r3, #1
 8011342:	4413      	add	r3, r2
 8011344:	00db      	lsls	r3, r3, #3
 8011346:	4a1b      	ldr	r2, [pc, #108]	; (80113b4 <etharp_output_to_arp_index+0x124>)
 8011348:	4413      	add	r3, r2
 801134a:	1d19      	adds	r1, r3, #4
 801134c:	79fa      	ldrb	r2, [r7, #7]
 801134e:	4613      	mov	r3, r2
 8011350:	005b      	lsls	r3, r3, #1
 8011352:	4413      	add	r3, r2
 8011354:	00db      	lsls	r3, r3, #3
 8011356:	3308      	adds	r3, #8
 8011358:	4a16      	ldr	r2, [pc, #88]	; (80113b4 <etharp_output_to_arp_index+0x124>)
 801135a:	4413      	add	r3, r2
 801135c:	3304      	adds	r3, #4
 801135e:	461a      	mov	r2, r3
 8011360:	68f8      	ldr	r0, [r7, #12]
 8011362:	f000 fafb 	bl	801195c <etharp_request_dst>
 8011366:	4603      	mov	r3, r0
 8011368:	2b00      	cmp	r3, #0
 801136a:	d109      	bne.n	8011380 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801136c:	79fa      	ldrb	r2, [r7, #7]
 801136e:	4911      	ldr	r1, [pc, #68]	; (80113b4 <etharp_output_to_arp_index+0x124>)
 8011370:	4613      	mov	r3, r2
 8011372:	005b      	lsls	r3, r3, #1
 8011374:	4413      	add	r3, r2
 8011376:	00db      	lsls	r3, r3, #3
 8011378:	440b      	add	r3, r1
 801137a:	3314      	adds	r3, #20
 801137c:	2203      	movs	r2, #3
 801137e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011386:	79fa      	ldrb	r2, [r7, #7]
 8011388:	4613      	mov	r3, r2
 801138a:	005b      	lsls	r3, r3, #1
 801138c:	4413      	add	r3, r2
 801138e:	00db      	lsls	r3, r3, #3
 8011390:	3308      	adds	r3, #8
 8011392:	4a08      	ldr	r2, [pc, #32]	; (80113b4 <etharp_output_to_arp_index+0x124>)
 8011394:	4413      	add	r3, r2
 8011396:	3304      	adds	r3, #4
 8011398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801139c:	9200      	str	r2, [sp, #0]
 801139e:	460a      	mov	r2, r1
 80113a0:	68b9      	ldr	r1, [r7, #8]
 80113a2:	68f8      	ldr	r0, [r7, #12]
 80113a4:	f001 fe36 	bl	8013014 <ethernet_output>
 80113a8:	4603      	mov	r3, r0
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	3710      	adds	r7, #16
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}
 80113b2:	bf00      	nop
 80113b4:	2000e500 	.word	0x2000e500
 80113b8:	08017fd0 	.word	0x08017fd0
 80113bc:	08018140 	.word	0x08018140
 80113c0:	08018048 	.word	0x08018048

080113c4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b08a      	sub	sp, #40	; 0x28
 80113c8:	af02      	add	r7, sp, #8
 80113ca:	60f8      	str	r0, [r7, #12]
 80113cc:	60b9      	str	r1, [r7, #8]
 80113ce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d106      	bne.n	80113e8 <etharp_output+0x24>
 80113da:	4b73      	ldr	r3, [pc, #460]	; (80115a8 <etharp_output+0x1e4>)
 80113dc:	f240 321e 	movw	r2, #798	; 0x31e
 80113e0:	4972      	ldr	r1, [pc, #456]	; (80115ac <etharp_output+0x1e8>)
 80113e2:	4873      	ldr	r0, [pc, #460]	; (80115b0 <etharp_output+0x1ec>)
 80113e4:	f003 fbb0 	bl	8014b48 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d106      	bne.n	80113fc <etharp_output+0x38>
 80113ee:	4b6e      	ldr	r3, [pc, #440]	; (80115a8 <etharp_output+0x1e4>)
 80113f0:	f240 321f 	movw	r2, #799	; 0x31f
 80113f4:	496f      	ldr	r1, [pc, #444]	; (80115b4 <etharp_output+0x1f0>)
 80113f6:	486e      	ldr	r0, [pc, #440]	; (80115b0 <etharp_output+0x1ec>)
 80113f8:	f003 fba6 	bl	8014b48 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d106      	bne.n	8011410 <etharp_output+0x4c>
 8011402:	4b69      	ldr	r3, [pc, #420]	; (80115a8 <etharp_output+0x1e4>)
 8011404:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011408:	496b      	ldr	r1, [pc, #428]	; (80115b8 <etharp_output+0x1f4>)
 801140a:	4869      	ldr	r0, [pc, #420]	; (80115b0 <etharp_output+0x1ec>)
 801140c:	f003 fb9c 	bl	8014b48 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	68f9      	ldr	r1, [r7, #12]
 8011416:	4618      	mov	r0, r3
 8011418:	f000 feee 	bl	80121f8 <ip4_addr_isbroadcast_u32>
 801141c:	4603      	mov	r3, r0
 801141e:	2b00      	cmp	r3, #0
 8011420:	d002      	beq.n	8011428 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011422:	4b66      	ldr	r3, [pc, #408]	; (80115bc <etharp_output+0x1f8>)
 8011424:	61fb      	str	r3, [r7, #28]
 8011426:	e0af      	b.n	8011588 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011430:	2be0      	cmp	r3, #224	; 0xe0
 8011432:	d118      	bne.n	8011466 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011434:	2301      	movs	r3, #1
 8011436:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011438:	2300      	movs	r3, #0
 801143a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801143c:	235e      	movs	r3, #94	; 0x5e
 801143e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	3301      	adds	r3, #1
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801144a:	b2db      	uxtb	r3, r3
 801144c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	3302      	adds	r3, #2
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	3303      	adds	r3, #3
 801145a:	781b      	ldrb	r3, [r3, #0]
 801145c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801145e:	f107 0310 	add.w	r3, r7, #16
 8011462:	61fb      	str	r3, [r7, #28]
 8011464:	e090      	b.n	8011588 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681a      	ldr	r2, [r3, #0]
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	3304      	adds	r3, #4
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	405a      	eors	r2, r3
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	3308      	adds	r3, #8
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	4013      	ands	r3, r2
 801147a:	2b00      	cmp	r3, #0
 801147c:	d012      	beq.n	80114a4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011484:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011488:	4293      	cmp	r3, r2
 801148a:	d00b      	beq.n	80114a4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	330c      	adds	r3, #12
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d003      	beq.n	801149e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	330c      	adds	r3, #12
 801149a:	61bb      	str	r3, [r7, #24]
 801149c:	e002      	b.n	80114a4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801149e:	f06f 0303 	mvn.w	r3, #3
 80114a2:	e07d      	b.n	80115a0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80114a4:	4b46      	ldr	r3, [pc, #280]	; (80115c0 <etharp_output+0x1fc>)
 80114a6:	781b      	ldrb	r3, [r3, #0]
 80114a8:	4619      	mov	r1, r3
 80114aa:	4a46      	ldr	r2, [pc, #280]	; (80115c4 <etharp_output+0x200>)
 80114ac:	460b      	mov	r3, r1
 80114ae:	005b      	lsls	r3, r3, #1
 80114b0:	440b      	add	r3, r1
 80114b2:	00db      	lsls	r3, r3, #3
 80114b4:	4413      	add	r3, r2
 80114b6:	3314      	adds	r3, #20
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	2b01      	cmp	r3, #1
 80114bc:	d925      	bls.n	801150a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80114be:	4b40      	ldr	r3, [pc, #256]	; (80115c0 <etharp_output+0x1fc>)
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	4619      	mov	r1, r3
 80114c4:	4a3f      	ldr	r2, [pc, #252]	; (80115c4 <etharp_output+0x200>)
 80114c6:	460b      	mov	r3, r1
 80114c8:	005b      	lsls	r3, r3, #1
 80114ca:	440b      	add	r3, r1
 80114cc:	00db      	lsls	r3, r3, #3
 80114ce:	4413      	add	r3, r2
 80114d0:	3308      	adds	r3, #8
 80114d2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80114d4:	68fa      	ldr	r2, [r7, #12]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d117      	bne.n	801150a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80114da:	69bb      	ldr	r3, [r7, #24]
 80114dc:	681a      	ldr	r2, [r3, #0]
 80114de:	4b38      	ldr	r3, [pc, #224]	; (80115c0 <etharp_output+0x1fc>)
 80114e0:	781b      	ldrb	r3, [r3, #0]
 80114e2:	4618      	mov	r0, r3
 80114e4:	4937      	ldr	r1, [pc, #220]	; (80115c4 <etharp_output+0x200>)
 80114e6:	4603      	mov	r3, r0
 80114e8:	005b      	lsls	r3, r3, #1
 80114ea:	4403      	add	r3, r0
 80114ec:	00db      	lsls	r3, r3, #3
 80114ee:	440b      	add	r3, r1
 80114f0:	3304      	adds	r3, #4
 80114f2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d108      	bne.n	801150a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80114f8:	4b31      	ldr	r3, [pc, #196]	; (80115c0 <etharp_output+0x1fc>)
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	461a      	mov	r2, r3
 80114fe:	68b9      	ldr	r1, [r7, #8]
 8011500:	68f8      	ldr	r0, [r7, #12]
 8011502:	f7ff fec5 	bl	8011290 <etharp_output_to_arp_index>
 8011506:	4603      	mov	r3, r0
 8011508:	e04a      	b.n	80115a0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801150a:	2300      	movs	r3, #0
 801150c:	75fb      	strb	r3, [r7, #23]
 801150e:	e031      	b.n	8011574 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011510:	7dfa      	ldrb	r2, [r7, #23]
 8011512:	492c      	ldr	r1, [pc, #176]	; (80115c4 <etharp_output+0x200>)
 8011514:	4613      	mov	r3, r2
 8011516:	005b      	lsls	r3, r3, #1
 8011518:	4413      	add	r3, r2
 801151a:	00db      	lsls	r3, r3, #3
 801151c:	440b      	add	r3, r1
 801151e:	3314      	adds	r3, #20
 8011520:	781b      	ldrb	r3, [r3, #0]
 8011522:	2b01      	cmp	r3, #1
 8011524:	d923      	bls.n	801156e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011526:	7dfa      	ldrb	r2, [r7, #23]
 8011528:	4926      	ldr	r1, [pc, #152]	; (80115c4 <etharp_output+0x200>)
 801152a:	4613      	mov	r3, r2
 801152c:	005b      	lsls	r3, r3, #1
 801152e:	4413      	add	r3, r2
 8011530:	00db      	lsls	r3, r3, #3
 8011532:	440b      	add	r3, r1
 8011534:	3308      	adds	r3, #8
 8011536:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011538:	68fa      	ldr	r2, [r7, #12]
 801153a:	429a      	cmp	r2, r3
 801153c:	d117      	bne.n	801156e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801153e:	69bb      	ldr	r3, [r7, #24]
 8011540:	6819      	ldr	r1, [r3, #0]
 8011542:	7dfa      	ldrb	r2, [r7, #23]
 8011544:	481f      	ldr	r0, [pc, #124]	; (80115c4 <etharp_output+0x200>)
 8011546:	4613      	mov	r3, r2
 8011548:	005b      	lsls	r3, r3, #1
 801154a:	4413      	add	r3, r2
 801154c:	00db      	lsls	r3, r3, #3
 801154e:	4403      	add	r3, r0
 8011550:	3304      	adds	r3, #4
 8011552:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011554:	4299      	cmp	r1, r3
 8011556:	d10a      	bne.n	801156e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011558:	4a19      	ldr	r2, [pc, #100]	; (80115c0 <etharp_output+0x1fc>)
 801155a:	7dfb      	ldrb	r3, [r7, #23]
 801155c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801155e:	7dfb      	ldrb	r3, [r7, #23]
 8011560:	461a      	mov	r2, r3
 8011562:	68b9      	ldr	r1, [r7, #8]
 8011564:	68f8      	ldr	r0, [r7, #12]
 8011566:	f7ff fe93 	bl	8011290 <etharp_output_to_arp_index>
 801156a:	4603      	mov	r3, r0
 801156c:	e018      	b.n	80115a0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801156e:	7dfb      	ldrb	r3, [r7, #23]
 8011570:	3301      	adds	r3, #1
 8011572:	75fb      	strb	r3, [r7, #23]
 8011574:	7dfb      	ldrb	r3, [r7, #23]
 8011576:	2b09      	cmp	r3, #9
 8011578:	d9ca      	bls.n	8011510 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801157a:	68ba      	ldr	r2, [r7, #8]
 801157c:	69b9      	ldr	r1, [r7, #24]
 801157e:	68f8      	ldr	r0, [r7, #12]
 8011580:	f000 f822 	bl	80115c8 <etharp_query>
 8011584:	4603      	mov	r3, r0
 8011586:	e00b      	b.n	80115a0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801158e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011592:	9300      	str	r3, [sp, #0]
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	68b9      	ldr	r1, [r7, #8]
 8011598:	68f8      	ldr	r0, [r7, #12]
 801159a:	f001 fd3b 	bl	8013014 <ethernet_output>
 801159e:	4603      	mov	r3, r0
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	3720      	adds	r7, #32
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	08017fd0 	.word	0x08017fd0
 80115ac:	08018120 	.word	0x08018120
 80115b0:	08018048 	.word	0x08018048
 80115b4:	08018170 	.word	0x08018170
 80115b8:	08018110 	.word	0x08018110
 80115bc:	08018b34 	.word	0x08018b34
 80115c0:	2000e5f0 	.word	0x2000e5f0
 80115c4:	2000e500 	.word	0x2000e500

080115c8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b08c      	sub	sp, #48	; 0x30
 80115cc:	af02      	add	r7, sp, #8
 80115ce:	60f8      	str	r0, [r7, #12]
 80115d0:	60b9      	str	r1, [r7, #8]
 80115d2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	3326      	adds	r3, #38	; 0x26
 80115d8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80115da:	23ff      	movs	r3, #255	; 0xff
 80115dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80115e0:	2300      	movs	r3, #0
 80115e2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	68f9      	ldr	r1, [r7, #12]
 80115ea:	4618      	mov	r0, r3
 80115ec:	f000 fe04 	bl	80121f8 <ip4_addr_isbroadcast_u32>
 80115f0:	4603      	mov	r3, r0
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d10c      	bne.n	8011610 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80115fe:	2be0      	cmp	r3, #224	; 0xe0
 8011600:	d006      	beq.n	8011610 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d003      	beq.n	8011610 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d102      	bne.n	8011616 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011610:	f06f 030f 	mvn.w	r3, #15
 8011614:	e101      	b.n	801181a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011616:	68fa      	ldr	r2, [r7, #12]
 8011618:	2101      	movs	r1, #1
 801161a:	68b8      	ldr	r0, [r7, #8]
 801161c:	f7ff fb60 	bl	8010ce0 <etharp_find_entry>
 8011620:	4603      	mov	r3, r0
 8011622:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011624:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011628:	2b00      	cmp	r3, #0
 801162a:	da02      	bge.n	8011632 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801162c:	8a7b      	ldrh	r3, [r7, #18]
 801162e:	b25b      	sxtb	r3, r3
 8011630:	e0f3      	b.n	801181a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011632:	8a7b      	ldrh	r3, [r7, #18]
 8011634:	2b7e      	cmp	r3, #126	; 0x7e
 8011636:	d906      	bls.n	8011646 <etharp_query+0x7e>
 8011638:	4b7a      	ldr	r3, [pc, #488]	; (8011824 <etharp_query+0x25c>)
 801163a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801163e:	497a      	ldr	r1, [pc, #488]	; (8011828 <etharp_query+0x260>)
 8011640:	487a      	ldr	r0, [pc, #488]	; (801182c <etharp_query+0x264>)
 8011642:	f003 fa81 	bl	8014b48 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011646:	8a7b      	ldrh	r3, [r7, #18]
 8011648:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801164a:	7c7a      	ldrb	r2, [r7, #17]
 801164c:	4978      	ldr	r1, [pc, #480]	; (8011830 <etharp_query+0x268>)
 801164e:	4613      	mov	r3, r2
 8011650:	005b      	lsls	r3, r3, #1
 8011652:	4413      	add	r3, r2
 8011654:	00db      	lsls	r3, r3, #3
 8011656:	440b      	add	r3, r1
 8011658:	3314      	adds	r3, #20
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d115      	bne.n	801168c <etharp_query+0xc4>
    is_new_entry = 1;
 8011660:	2301      	movs	r3, #1
 8011662:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011664:	7c7a      	ldrb	r2, [r7, #17]
 8011666:	4972      	ldr	r1, [pc, #456]	; (8011830 <etharp_query+0x268>)
 8011668:	4613      	mov	r3, r2
 801166a:	005b      	lsls	r3, r3, #1
 801166c:	4413      	add	r3, r2
 801166e:	00db      	lsls	r3, r3, #3
 8011670:	440b      	add	r3, r1
 8011672:	3314      	adds	r3, #20
 8011674:	2201      	movs	r2, #1
 8011676:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011678:	7c7a      	ldrb	r2, [r7, #17]
 801167a:	496d      	ldr	r1, [pc, #436]	; (8011830 <etharp_query+0x268>)
 801167c:	4613      	mov	r3, r2
 801167e:	005b      	lsls	r3, r3, #1
 8011680:	4413      	add	r3, r2
 8011682:	00db      	lsls	r3, r3, #3
 8011684:	440b      	add	r3, r1
 8011686:	3308      	adds	r3, #8
 8011688:	68fa      	ldr	r2, [r7, #12]
 801168a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801168c:	7c7a      	ldrb	r2, [r7, #17]
 801168e:	4968      	ldr	r1, [pc, #416]	; (8011830 <etharp_query+0x268>)
 8011690:	4613      	mov	r3, r2
 8011692:	005b      	lsls	r3, r3, #1
 8011694:	4413      	add	r3, r2
 8011696:	00db      	lsls	r3, r3, #3
 8011698:	440b      	add	r3, r1
 801169a:	3314      	adds	r3, #20
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	2b01      	cmp	r3, #1
 80116a0:	d011      	beq.n	80116c6 <etharp_query+0xfe>
 80116a2:	7c7a      	ldrb	r2, [r7, #17]
 80116a4:	4962      	ldr	r1, [pc, #392]	; (8011830 <etharp_query+0x268>)
 80116a6:	4613      	mov	r3, r2
 80116a8:	005b      	lsls	r3, r3, #1
 80116aa:	4413      	add	r3, r2
 80116ac:	00db      	lsls	r3, r3, #3
 80116ae:	440b      	add	r3, r1
 80116b0:	3314      	adds	r3, #20
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	2b01      	cmp	r3, #1
 80116b6:	d806      	bhi.n	80116c6 <etharp_query+0xfe>
 80116b8:	4b5a      	ldr	r3, [pc, #360]	; (8011824 <etharp_query+0x25c>)
 80116ba:	f240 32cd 	movw	r2, #973	; 0x3cd
 80116be:	495d      	ldr	r1, [pc, #372]	; (8011834 <etharp_query+0x26c>)
 80116c0:	485a      	ldr	r0, [pc, #360]	; (801182c <etharp_query+0x264>)
 80116c2:	f003 fa41 	bl	8014b48 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80116c6:	6a3b      	ldr	r3, [r7, #32]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d102      	bne.n	80116d2 <etharp_query+0x10a>
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d10c      	bne.n	80116ec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80116d2:	68b9      	ldr	r1, [r7, #8]
 80116d4:	68f8      	ldr	r0, [r7, #12]
 80116d6:	f000 f963 	bl	80119a0 <etharp_request>
 80116da:	4603      	mov	r3, r0
 80116dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d102      	bne.n	80116ec <etharp_query+0x124>
      return result;
 80116e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80116ea:	e096      	b.n	801181a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d106      	bne.n	8011700 <etharp_query+0x138>
 80116f2:	4b4c      	ldr	r3, [pc, #304]	; (8011824 <etharp_query+0x25c>)
 80116f4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80116f8:	494f      	ldr	r1, [pc, #316]	; (8011838 <etharp_query+0x270>)
 80116fa:	484c      	ldr	r0, [pc, #304]	; (801182c <etharp_query+0x264>)
 80116fc:	f003 fa24 	bl	8014b48 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011700:	7c7a      	ldrb	r2, [r7, #17]
 8011702:	494b      	ldr	r1, [pc, #300]	; (8011830 <etharp_query+0x268>)
 8011704:	4613      	mov	r3, r2
 8011706:	005b      	lsls	r3, r3, #1
 8011708:	4413      	add	r3, r2
 801170a:	00db      	lsls	r3, r3, #3
 801170c:	440b      	add	r3, r1
 801170e:	3314      	adds	r3, #20
 8011710:	781b      	ldrb	r3, [r3, #0]
 8011712:	2b01      	cmp	r3, #1
 8011714:	d917      	bls.n	8011746 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011716:	4a49      	ldr	r2, [pc, #292]	; (801183c <etharp_query+0x274>)
 8011718:	7c7b      	ldrb	r3, [r7, #17]
 801171a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801171c:	7c7a      	ldrb	r2, [r7, #17]
 801171e:	4613      	mov	r3, r2
 8011720:	005b      	lsls	r3, r3, #1
 8011722:	4413      	add	r3, r2
 8011724:	00db      	lsls	r3, r3, #3
 8011726:	3308      	adds	r3, #8
 8011728:	4a41      	ldr	r2, [pc, #260]	; (8011830 <etharp_query+0x268>)
 801172a:	4413      	add	r3, r2
 801172c:	3304      	adds	r3, #4
 801172e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011732:	9200      	str	r2, [sp, #0]
 8011734:	697a      	ldr	r2, [r7, #20]
 8011736:	6879      	ldr	r1, [r7, #4]
 8011738:	68f8      	ldr	r0, [r7, #12]
 801173a:	f001 fc6b 	bl	8013014 <ethernet_output>
 801173e:	4603      	mov	r3, r0
 8011740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011744:	e067      	b.n	8011816 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011746:	7c7a      	ldrb	r2, [r7, #17]
 8011748:	4939      	ldr	r1, [pc, #228]	; (8011830 <etharp_query+0x268>)
 801174a:	4613      	mov	r3, r2
 801174c:	005b      	lsls	r3, r3, #1
 801174e:	4413      	add	r3, r2
 8011750:	00db      	lsls	r3, r3, #3
 8011752:	440b      	add	r3, r1
 8011754:	3314      	adds	r3, #20
 8011756:	781b      	ldrb	r3, [r3, #0]
 8011758:	2b01      	cmp	r3, #1
 801175a:	d15c      	bne.n	8011816 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801175c:	2300      	movs	r3, #0
 801175e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011764:	e01c      	b.n	80117a0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011766:	69fb      	ldr	r3, [r7, #28]
 8011768:	895a      	ldrh	r2, [r3, #10]
 801176a:	69fb      	ldr	r3, [r7, #28]
 801176c:	891b      	ldrh	r3, [r3, #8]
 801176e:	429a      	cmp	r2, r3
 8011770:	d10a      	bne.n	8011788 <etharp_query+0x1c0>
 8011772:	69fb      	ldr	r3, [r7, #28]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d006      	beq.n	8011788 <etharp_query+0x1c0>
 801177a:	4b2a      	ldr	r3, [pc, #168]	; (8011824 <etharp_query+0x25c>)
 801177c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011780:	492f      	ldr	r1, [pc, #188]	; (8011840 <etharp_query+0x278>)
 8011782:	482a      	ldr	r0, [pc, #168]	; (801182c <etharp_query+0x264>)
 8011784:	f003 f9e0 	bl	8014b48 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011788:	69fb      	ldr	r3, [r7, #28]
 801178a:	7b1b      	ldrb	r3, [r3, #12]
 801178c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011790:	2b00      	cmp	r3, #0
 8011792:	d002      	beq.n	801179a <etharp_query+0x1d2>
        copy_needed = 1;
 8011794:	2301      	movs	r3, #1
 8011796:	61bb      	str	r3, [r7, #24]
        break;
 8011798:	e005      	b.n	80117a6 <etharp_query+0x1de>
      }
      p = p->next;
 801179a:	69fb      	ldr	r3, [r7, #28]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	61fb      	str	r3, [r7, #28]
    while (p) {
 80117a0:	69fb      	ldr	r3, [r7, #28]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d1df      	bne.n	8011766 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80117a6:	69bb      	ldr	r3, [r7, #24]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d007      	beq.n	80117bc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80117ac:	687a      	ldr	r2, [r7, #4]
 80117ae:	f44f 7120 	mov.w	r1, #640	; 0x280
 80117b2:	200e      	movs	r0, #14
 80117b4:	f7f9 f85a 	bl	800a86c <pbuf_clone>
 80117b8:	61f8      	str	r0, [r7, #28]
 80117ba:	e004      	b.n	80117c6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80117c0:	69f8      	ldr	r0, [r7, #28]
 80117c2:	f7f8 fe97 	bl	800a4f4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80117c6:	69fb      	ldr	r3, [r7, #28]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d021      	beq.n	8011810 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80117cc:	7c7a      	ldrb	r2, [r7, #17]
 80117ce:	4918      	ldr	r1, [pc, #96]	; (8011830 <etharp_query+0x268>)
 80117d0:	4613      	mov	r3, r2
 80117d2:	005b      	lsls	r3, r3, #1
 80117d4:	4413      	add	r3, r2
 80117d6:	00db      	lsls	r3, r3, #3
 80117d8:	440b      	add	r3, r1
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d00a      	beq.n	80117f6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80117e0:	7c7a      	ldrb	r2, [r7, #17]
 80117e2:	4913      	ldr	r1, [pc, #76]	; (8011830 <etharp_query+0x268>)
 80117e4:	4613      	mov	r3, r2
 80117e6:	005b      	lsls	r3, r3, #1
 80117e8:	4413      	add	r3, r2
 80117ea:	00db      	lsls	r3, r3, #3
 80117ec:	440b      	add	r3, r1
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7f8 fddf 	bl	800a3b4 <pbuf_free>
      }
      arp_table[i].q = p;
 80117f6:	7c7a      	ldrb	r2, [r7, #17]
 80117f8:	490d      	ldr	r1, [pc, #52]	; (8011830 <etharp_query+0x268>)
 80117fa:	4613      	mov	r3, r2
 80117fc:	005b      	lsls	r3, r3, #1
 80117fe:	4413      	add	r3, r2
 8011800:	00db      	lsls	r3, r3, #3
 8011802:	440b      	add	r3, r1
 8011804:	69fa      	ldr	r2, [r7, #28]
 8011806:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011808:	2300      	movs	r3, #0
 801180a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801180e:	e002      	b.n	8011816 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011810:	23ff      	movs	r3, #255	; 0xff
 8011812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011816:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801181a:	4618      	mov	r0, r3
 801181c:	3728      	adds	r7, #40	; 0x28
 801181e:	46bd      	mov	sp, r7
 8011820:	bd80      	pop	{r7, pc}
 8011822:	bf00      	nop
 8011824:	08017fd0 	.word	0x08017fd0
 8011828:	0801817c 	.word	0x0801817c
 801182c:	08018048 	.word	0x08018048
 8011830:	2000e500 	.word	0x2000e500
 8011834:	0801818c 	.word	0x0801818c
 8011838:	08018170 	.word	0x08018170
 801183c:	2000e5f0 	.word	0x2000e5f0
 8011840:	080181b4 	.word	0x080181b4

08011844 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b08a      	sub	sp, #40	; 0x28
 8011848:	af02      	add	r7, sp, #8
 801184a:	60f8      	str	r0, [r7, #12]
 801184c:	60b9      	str	r1, [r7, #8]
 801184e:	607a      	str	r2, [r7, #4]
 8011850:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011852:	2300      	movs	r3, #0
 8011854:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d106      	bne.n	801186a <etharp_raw+0x26>
 801185c:	4b3a      	ldr	r3, [pc, #232]	; (8011948 <etharp_raw+0x104>)
 801185e:	f240 4257 	movw	r2, #1111	; 0x457
 8011862:	493a      	ldr	r1, [pc, #232]	; (801194c <etharp_raw+0x108>)
 8011864:	483a      	ldr	r0, [pc, #232]	; (8011950 <etharp_raw+0x10c>)
 8011866:	f003 f96f 	bl	8014b48 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801186a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801186e:	211c      	movs	r1, #28
 8011870:	200e      	movs	r0, #14
 8011872:	f7f8 fabb 	bl	8009dec <pbuf_alloc>
 8011876:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011878:	69bb      	ldr	r3, [r7, #24]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d102      	bne.n	8011884 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801187e:	f04f 33ff 	mov.w	r3, #4294967295
 8011882:	e05d      	b.n	8011940 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011884:	69bb      	ldr	r3, [r7, #24]
 8011886:	895b      	ldrh	r3, [r3, #10]
 8011888:	2b1b      	cmp	r3, #27
 801188a:	d806      	bhi.n	801189a <etharp_raw+0x56>
 801188c:	4b2e      	ldr	r3, [pc, #184]	; (8011948 <etharp_raw+0x104>)
 801188e:	f240 4262 	movw	r2, #1122	; 0x462
 8011892:	4930      	ldr	r1, [pc, #192]	; (8011954 <etharp_raw+0x110>)
 8011894:	482e      	ldr	r0, [pc, #184]	; (8011950 <etharp_raw+0x10c>)
 8011896:	f003 f957 	bl	8014b48 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801189a:	69bb      	ldr	r3, [r7, #24]
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80118a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7f7 fa2e 	bl	8008d04 <lwip_htons>
 80118a8:	4603      	mov	r3, r0
 80118aa:	461a      	mov	r2, r3
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80118b6:	2b06      	cmp	r3, #6
 80118b8:	d006      	beq.n	80118c8 <etharp_raw+0x84>
 80118ba:	4b23      	ldr	r3, [pc, #140]	; (8011948 <etharp_raw+0x104>)
 80118bc:	f240 4269 	movw	r2, #1129	; 0x469
 80118c0:	4925      	ldr	r1, [pc, #148]	; (8011958 <etharp_raw+0x114>)
 80118c2:	4823      	ldr	r0, [pc, #140]	; (8011950 <etharp_raw+0x10c>)
 80118c4:	f003 f940 	bl	8014b48 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	3308      	adds	r3, #8
 80118cc:	2206      	movs	r2, #6
 80118ce:	6839      	ldr	r1, [r7, #0]
 80118d0:	4618      	mov	r0, r3
 80118d2:	f003 fa9c 	bl	8014e0e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	3312      	adds	r3, #18
 80118da:	2206      	movs	r2, #6
 80118dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80118de:	4618      	mov	r0, r3
 80118e0:	f003 fa95 	bl	8014e0e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	330e      	adds	r3, #14
 80118e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118ea:	6812      	ldr	r2, [r2, #0]
 80118ec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	3318      	adds	r3, #24
 80118f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118f4:	6812      	ldr	r2, [r2, #0]
 80118f6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	2200      	movs	r2, #0
 80118fc:	701a      	strb	r2, [r3, #0]
 80118fe:	2200      	movs	r2, #0
 8011900:	f042 0201 	orr.w	r2, r2, #1
 8011904:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	2200      	movs	r2, #0
 801190a:	f042 0208 	orr.w	r2, r2, #8
 801190e:	709a      	strb	r2, [r3, #2]
 8011910:	2200      	movs	r2, #0
 8011912:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011914:	697b      	ldr	r3, [r7, #20]
 8011916:	2206      	movs	r2, #6
 8011918:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	2204      	movs	r2, #4
 801191e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011920:	f640 0306 	movw	r3, #2054	; 0x806
 8011924:	9300      	str	r3, [sp, #0]
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	68ba      	ldr	r2, [r7, #8]
 801192a:	69b9      	ldr	r1, [r7, #24]
 801192c:	68f8      	ldr	r0, [r7, #12]
 801192e:	f001 fb71 	bl	8013014 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011932:	69b8      	ldr	r0, [r7, #24]
 8011934:	f7f8 fd3e 	bl	800a3b4 <pbuf_free>
  p = NULL;
 8011938:	2300      	movs	r3, #0
 801193a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801193c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011940:	4618      	mov	r0, r3
 8011942:	3720      	adds	r7, #32
 8011944:	46bd      	mov	sp, r7
 8011946:	bd80      	pop	{r7, pc}
 8011948:	08017fd0 	.word	0x08017fd0
 801194c:	08018120 	.word	0x08018120
 8011950:	08018048 	.word	0x08018048
 8011954:	080181d0 	.word	0x080181d0
 8011958:	08018204 	.word	0x08018204

0801195c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b088      	sub	sp, #32
 8011960:	af04      	add	r7, sp, #16
 8011962:	60f8      	str	r0, [r7, #12]
 8011964:	60b9      	str	r1, [r7, #8]
 8011966:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011978:	2201      	movs	r2, #1
 801197a:	9203      	str	r2, [sp, #12]
 801197c:	68ba      	ldr	r2, [r7, #8]
 801197e:	9202      	str	r2, [sp, #8]
 8011980:	4a06      	ldr	r2, [pc, #24]	; (801199c <etharp_request_dst+0x40>)
 8011982:	9201      	str	r2, [sp, #4]
 8011984:	9300      	str	r3, [sp, #0]
 8011986:	4603      	mov	r3, r0
 8011988:	687a      	ldr	r2, [r7, #4]
 801198a:	68f8      	ldr	r0, [r7, #12]
 801198c:	f7ff ff5a 	bl	8011844 <etharp_raw>
 8011990:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011992:	4618      	mov	r0, r3
 8011994:	3710      	adds	r7, #16
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}
 801199a:	bf00      	nop
 801199c:	08018b3c 	.word	0x08018b3c

080119a0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80119aa:	4a05      	ldr	r2, [pc, #20]	; (80119c0 <etharp_request+0x20>)
 80119ac:	6839      	ldr	r1, [r7, #0]
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f7ff ffd4 	bl	801195c <etharp_request_dst>
 80119b4:	4603      	mov	r3, r0
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3708      	adds	r7, #8
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}
 80119be:	bf00      	nop
 80119c0:	08018b34 	.word	0x08018b34

080119c4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b08e      	sub	sp, #56	; 0x38
 80119c8:	af04      	add	r7, sp, #16
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80119ce:	4b79      	ldr	r3, [pc, #484]	; (8011bb4 <icmp_input+0x1f0>)
 80119d0:	689b      	ldr	r3, [r3, #8]
 80119d2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80119d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d6:	781b      	ldrb	r3, [r3, #0]
 80119d8:	f003 030f 	and.w	r3, r3, #15
 80119dc:	b2db      	uxtb	r3, r3
 80119de:	009b      	lsls	r3, r3, #2
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80119e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80119e6:	2b13      	cmp	r3, #19
 80119e8:	f240 80cd 	bls.w	8011b86 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	895b      	ldrh	r3, [r3, #10]
 80119f0:	2b03      	cmp	r3, #3
 80119f2:	f240 80ca 	bls.w	8011b8a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	685b      	ldr	r3, [r3, #4]
 80119fa:	781b      	ldrb	r3, [r3, #0]
 80119fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011a00:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	f000 80b7 	beq.w	8011b78 <icmp_input+0x1b4>
 8011a0a:	2b08      	cmp	r3, #8
 8011a0c:	f040 80b7 	bne.w	8011b7e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011a10:	4b69      	ldr	r3, [pc, #420]	; (8011bb8 <icmp_input+0x1f4>)
 8011a12:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011a14:	4b67      	ldr	r3, [pc, #412]	; (8011bb4 <icmp_input+0x1f0>)
 8011a16:	695b      	ldr	r3, [r3, #20]
 8011a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011a1c:	2be0      	cmp	r3, #224	; 0xe0
 8011a1e:	f000 80bb 	beq.w	8011b98 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011a22:	4b64      	ldr	r3, [pc, #400]	; (8011bb4 <icmp_input+0x1f0>)
 8011a24:	695b      	ldr	r3, [r3, #20]
 8011a26:	4a63      	ldr	r2, [pc, #396]	; (8011bb4 <icmp_input+0x1f0>)
 8011a28:	6812      	ldr	r2, [r2, #0]
 8011a2a:	4611      	mov	r1, r2
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f000 fbe3 	bl	80121f8 <ip4_addr_isbroadcast_u32>
 8011a32:	4603      	mov	r3, r0
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	f040 80b1 	bne.w	8011b9c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	891b      	ldrh	r3, [r3, #8]
 8011a3e:	2b07      	cmp	r3, #7
 8011a40:	f240 80a5 	bls.w	8011b8e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011a44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a46:	330e      	adds	r3, #14
 8011a48:	4619      	mov	r1, r3
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f7f8 fc1c 	bl	800a288 <pbuf_add_header>
 8011a50:	4603      	mov	r3, r0
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d04b      	beq.n	8011aee <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	891a      	ldrh	r2, [r3, #8]
 8011a5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a5c:	4413      	add	r3, r2
 8011a5e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	891b      	ldrh	r3, [r3, #8]
 8011a64:	8b7a      	ldrh	r2, [r7, #26]
 8011a66:	429a      	cmp	r2, r3
 8011a68:	f0c0 809a 	bcc.w	8011ba0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011a6c:	8b7b      	ldrh	r3, [r7, #26]
 8011a6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a72:	4619      	mov	r1, r3
 8011a74:	200e      	movs	r0, #14
 8011a76:	f7f8 f9b9 	bl	8009dec <pbuf_alloc>
 8011a7a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	f000 8090 	beq.w	8011ba4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	895b      	ldrh	r3, [r3, #10]
 8011a88:	461a      	mov	r2, r3
 8011a8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a8c:	3308      	adds	r3, #8
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d203      	bcs.n	8011a9a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011a92:	6978      	ldr	r0, [r7, #20]
 8011a94:	f7f8 fc8e 	bl	800a3b4 <pbuf_free>
          goto icmperr;
 8011a98:	e085      	b.n	8011ba6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011a9a:	697b      	ldr	r3, [r7, #20]
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011aa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f003 f9b3 	bl	8014e0e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011aa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011aaa:	4619      	mov	r1, r3
 8011aac:	6978      	ldr	r0, [r7, #20]
 8011aae:	f7f8 fbfb 	bl	800a2a8 <pbuf_remove_header>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d009      	beq.n	8011acc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011ab8:	4b40      	ldr	r3, [pc, #256]	; (8011bbc <icmp_input+0x1f8>)
 8011aba:	22b6      	movs	r2, #182	; 0xb6
 8011abc:	4940      	ldr	r1, [pc, #256]	; (8011bc0 <icmp_input+0x1fc>)
 8011abe:	4841      	ldr	r0, [pc, #260]	; (8011bc4 <icmp_input+0x200>)
 8011ac0:	f003 f842 	bl	8014b48 <iprintf>
          pbuf_free(r);
 8011ac4:	6978      	ldr	r0, [r7, #20]
 8011ac6:	f7f8 fc75 	bl	800a3b4 <pbuf_free>
          goto icmperr;
 8011aca:	e06c      	b.n	8011ba6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011acc:	6879      	ldr	r1, [r7, #4]
 8011ace:	6978      	ldr	r0, [r7, #20]
 8011ad0:	f7f8 fd88 	bl	800a5e4 <pbuf_copy>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d003      	beq.n	8011ae2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011ada:	6978      	ldr	r0, [r7, #20]
 8011adc:	f7f8 fc6a 	bl	800a3b4 <pbuf_free>
          goto icmperr;
 8011ae0:	e061      	b.n	8011ba6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f7f8 fc66 	bl	800a3b4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	607b      	str	r3, [r7, #4]
 8011aec:	e00f      	b.n	8011b0e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011aee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011af0:	330e      	adds	r3, #14
 8011af2:	4619      	mov	r1, r3
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	f7f8 fbd7 	bl	800a2a8 <pbuf_remove_header>
 8011afa:	4603      	mov	r3, r0
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d006      	beq.n	8011b0e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011b00:	4b2e      	ldr	r3, [pc, #184]	; (8011bbc <icmp_input+0x1f8>)
 8011b02:	22c7      	movs	r2, #199	; 0xc7
 8011b04:	4930      	ldr	r1, [pc, #192]	; (8011bc8 <icmp_input+0x204>)
 8011b06:	482f      	ldr	r0, [pc, #188]	; (8011bc4 <icmp_input+0x200>)
 8011b08:	f003 f81e 	bl	8014b48 <iprintf>
          goto icmperr;
 8011b0c:	e04b      	b.n	8011ba6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	685b      	ldr	r3, [r3, #4]
 8011b12:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011b14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b16:	4619      	mov	r1, r3
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f7f8 fbb5 	bl	800a288 <pbuf_add_header>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d12b      	bne.n	8011b7c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	681a      	ldr	r2, [r3, #0]
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011b32:	4b20      	ldr	r3, [pc, #128]	; (8011bb4 <icmp_input+0x1f0>)
 8011b34:	691a      	ldr	r2, [r3, #16]
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	2200      	movs	r2, #0
 8011b44:	709a      	strb	r2, [r3, #2]
 8011b46:	2200      	movs	r2, #0
 8011b48:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	2240      	movs	r2, #64	; 0x40
 8011b4e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	2200      	movs	r2, #0
 8011b54:	729a      	strb	r2, [r3, #10]
 8011b56:	2200      	movs	r2, #0
 8011b58:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	9302      	str	r3, [sp, #8]
 8011b5e:	2301      	movs	r3, #1
 8011b60:	9301      	str	r3, [sp, #4]
 8011b62:	2300      	movs	r3, #0
 8011b64:	9300      	str	r3, [sp, #0]
 8011b66:	2340      	movs	r3, #64	; 0x40
 8011b68:	2200      	movs	r2, #0
 8011b6a:	69f9      	ldr	r1, [r7, #28]
 8011b6c:	6878      	ldr	r0, [r7, #4]
 8011b6e:	f000 fa6b 	bl	8012048 <ip4_output_if>
 8011b72:	4603      	mov	r3, r0
 8011b74:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011b76:	e001      	b.n	8011b7c <icmp_input+0x1b8>
      break;
 8011b78:	bf00      	nop
 8011b7a:	e000      	b.n	8011b7e <icmp_input+0x1ba>
      break;
 8011b7c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f7f8 fc18 	bl	800a3b4 <pbuf_free>
  return;
 8011b84:	e013      	b.n	8011bae <icmp_input+0x1ea>
    goto lenerr;
 8011b86:	bf00      	nop
 8011b88:	e002      	b.n	8011b90 <icmp_input+0x1cc>
    goto lenerr;
 8011b8a:	bf00      	nop
 8011b8c:	e000      	b.n	8011b90 <icmp_input+0x1cc>
        goto lenerr;
 8011b8e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f7f8 fc0f 	bl	800a3b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011b96:	e00a      	b.n	8011bae <icmp_input+0x1ea>
        goto icmperr;
 8011b98:	bf00      	nop
 8011b9a:	e004      	b.n	8011ba6 <icmp_input+0x1e2>
        goto icmperr;
 8011b9c:	bf00      	nop
 8011b9e:	e002      	b.n	8011ba6 <icmp_input+0x1e2>
          goto icmperr;
 8011ba0:	bf00      	nop
 8011ba2:	e000      	b.n	8011ba6 <icmp_input+0x1e2>
          goto icmperr;
 8011ba4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f7f8 fc04 	bl	800a3b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011bac:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011bae:	3728      	adds	r7, #40	; 0x28
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	20005558 	.word	0x20005558
 8011bb8:	2000556c 	.word	0x2000556c
 8011bbc:	08018248 	.word	0x08018248
 8011bc0:	08018280 	.word	0x08018280
 8011bc4:	080182b8 	.word	0x080182b8
 8011bc8:	080182e0 	.word	0x080182e0

08011bcc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b082      	sub	sp, #8
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011bd8:	78fb      	ldrb	r3, [r7, #3]
 8011bda:	461a      	mov	r2, r3
 8011bdc:	2103      	movs	r1, #3
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f000 f814 	bl	8011c0c <icmp_send_response>
}
 8011be4:	bf00      	nop
 8011be6:	3708      	adds	r7, #8
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011bf8:	78fb      	ldrb	r3, [r7, #3]
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	210b      	movs	r1, #11
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f000 f804 	bl	8011c0c <icmp_send_response>
}
 8011c04:	bf00      	nop
 8011c06:	3708      	adds	r7, #8
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b08c      	sub	sp, #48	; 0x30
 8011c10:	af04      	add	r7, sp, #16
 8011c12:	6078      	str	r0, [r7, #4]
 8011c14:	460b      	mov	r3, r1
 8011c16:	70fb      	strb	r3, [r7, #3]
 8011c18:	4613      	mov	r3, r2
 8011c1a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011c1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c20:	2124      	movs	r1, #36	; 0x24
 8011c22:	2022      	movs	r0, #34	; 0x22
 8011c24:	f7f8 f8e2 	bl	8009dec <pbuf_alloc>
 8011c28:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011c2a:	69fb      	ldr	r3, [r7, #28]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d04c      	beq.n	8011cca <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011c30:	69fb      	ldr	r3, [r7, #28]
 8011c32:	895b      	ldrh	r3, [r3, #10]
 8011c34:	2b23      	cmp	r3, #35	; 0x23
 8011c36:	d806      	bhi.n	8011c46 <icmp_send_response+0x3a>
 8011c38:	4b26      	ldr	r3, [pc, #152]	; (8011cd4 <icmp_send_response+0xc8>)
 8011c3a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011c3e:	4926      	ldr	r1, [pc, #152]	; (8011cd8 <icmp_send_response+0xcc>)
 8011c40:	4826      	ldr	r0, [pc, #152]	; (8011cdc <icmp_send_response+0xd0>)
 8011c42:	f002 ff81 	bl	8014b48 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011c4c:	69fb      	ldr	r3, [r7, #28]
 8011c4e:	685b      	ldr	r3, [r3, #4]
 8011c50:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	78fa      	ldrb	r2, [r7, #3]
 8011c56:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	78ba      	ldrb	r2, [r7, #2]
 8011c5c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	2200      	movs	r2, #0
 8011c62:	711a      	strb	r2, [r3, #4]
 8011c64:	2200      	movs	r2, #0
 8011c66:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	719a      	strb	r2, [r3, #6]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011c72:	69fb      	ldr	r3, [r7, #28]
 8011c74:	685b      	ldr	r3, [r3, #4]
 8011c76:	f103 0008 	add.w	r0, r3, #8
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	685b      	ldr	r3, [r3, #4]
 8011c7e:	221c      	movs	r2, #28
 8011c80:	4619      	mov	r1, r3
 8011c82:	f003 f8c4 	bl	8014e0e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011c86:	69bb      	ldr	r3, [r7, #24]
 8011c88:	68db      	ldr	r3, [r3, #12]
 8011c8a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011c8c:	f107 030c 	add.w	r3, r7, #12
 8011c90:	4618      	mov	r0, r3
 8011c92:	f000 f825 	bl	8011ce0 <ip4_route>
 8011c96:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d011      	beq.n	8011cc2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	709a      	strb	r2, [r3, #2]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011ca8:	f107 020c 	add.w	r2, r7, #12
 8011cac:	693b      	ldr	r3, [r7, #16]
 8011cae:	9302      	str	r3, [sp, #8]
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	9301      	str	r3, [sp, #4]
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	9300      	str	r3, [sp, #0]
 8011cb8:	2340      	movs	r3, #64	; 0x40
 8011cba:	2100      	movs	r1, #0
 8011cbc:	69f8      	ldr	r0, [r7, #28]
 8011cbe:	f000 f9c3 	bl	8012048 <ip4_output_if>
  }
  pbuf_free(q);
 8011cc2:	69f8      	ldr	r0, [r7, #28]
 8011cc4:	f7f8 fb76 	bl	800a3b4 <pbuf_free>
 8011cc8:	e000      	b.n	8011ccc <icmp_send_response+0xc0>
    return;
 8011cca:	bf00      	nop
}
 8011ccc:	3720      	adds	r7, #32
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}
 8011cd2:	bf00      	nop
 8011cd4:	08018248 	.word	0x08018248
 8011cd8:	08018314 	.word	0x08018314
 8011cdc:	080182b8 	.word	0x080182b8

08011ce0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b085      	sub	sp, #20
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011ce8:	4b33      	ldr	r3, [pc, #204]	; (8011db8 <ip4_route+0xd8>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	60fb      	str	r3, [r7, #12]
 8011cee:	e036      	b.n	8011d5e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011cf6:	f003 0301 	and.w	r3, r3, #1
 8011cfa:	b2db      	uxtb	r3, r3
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d02b      	beq.n	8011d58 <ip4_route+0x78>
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d06:	089b      	lsrs	r3, r3, #2
 8011d08:	f003 0301 	and.w	r3, r3, #1
 8011d0c:	b2db      	uxtb	r3, r3
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d022      	beq.n	8011d58 <ip4_route+0x78>
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	3304      	adds	r3, #4
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d01d      	beq.n	8011d58 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681a      	ldr	r2, [r3, #0]
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	3304      	adds	r3, #4
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	405a      	eors	r2, r3
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	3308      	adds	r3, #8
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	4013      	ands	r3, r2
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d101      	bne.n	8011d38 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	e038      	b.n	8011daa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d3e:	f003 0302 	and.w	r3, r3, #2
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d108      	bne.n	8011d58 <ip4_route+0x78>
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681a      	ldr	r2, [r3, #0]
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	330c      	adds	r3, #12
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d101      	bne.n	8011d58 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	e028      	b.n	8011daa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	60fb      	str	r3, [r7, #12]
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d1c5      	bne.n	8011cf0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011d64:	4b15      	ldr	r3, [pc, #84]	; (8011dbc <ip4_route+0xdc>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d01a      	beq.n	8011da2 <ip4_route+0xc2>
 8011d6c:	4b13      	ldr	r3, [pc, #76]	; (8011dbc <ip4_route+0xdc>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d74:	f003 0301 	and.w	r3, r3, #1
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d012      	beq.n	8011da2 <ip4_route+0xc2>
 8011d7c:	4b0f      	ldr	r3, [pc, #60]	; (8011dbc <ip4_route+0xdc>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d84:	f003 0304 	and.w	r3, r3, #4
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d00a      	beq.n	8011da2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011d8c:	4b0b      	ldr	r3, [pc, #44]	; (8011dbc <ip4_route+0xdc>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	3304      	adds	r3, #4
 8011d92:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d004      	beq.n	8011da2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	b2db      	uxtb	r3, r3
 8011d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8011da0:	d101      	bne.n	8011da6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011da2:	2300      	movs	r3, #0
 8011da4:	e001      	b.n	8011daa <ip4_route+0xca>
  }

  return netif_default;
 8011da6:	4b05      	ldr	r3, [pc, #20]	; (8011dbc <ip4_route+0xdc>)
 8011da8:	681b      	ldr	r3, [r3, #0]
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3714      	adds	r7, #20
 8011dae:	46bd      	mov	sp, r7
 8011db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db4:	4770      	bx	lr
 8011db6:	bf00      	nop
 8011db8:	2000e498 	.word	0x2000e498
 8011dbc:	2000e49c 	.word	0x2000e49c

08011dc0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011dce:	f003 0301 	and.w	r3, r3, #1
 8011dd2:	b2db      	uxtb	r3, r3
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d016      	beq.n	8011e06 <ip4_input_accept+0x46>
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	3304      	adds	r3, #4
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d011      	beq.n	8011e06 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011de2:	4b0b      	ldr	r3, [pc, #44]	; (8011e10 <ip4_input_accept+0x50>)
 8011de4:	695a      	ldr	r2, [r3, #20]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	3304      	adds	r3, #4
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d008      	beq.n	8011e02 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011df0:	4b07      	ldr	r3, [pc, #28]	; (8011e10 <ip4_input_accept+0x50>)
 8011df2:	695b      	ldr	r3, [r3, #20]
 8011df4:	6879      	ldr	r1, [r7, #4]
 8011df6:	4618      	mov	r0, r3
 8011df8:	f000 f9fe 	bl	80121f8 <ip4_addr_isbroadcast_u32>
 8011dfc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d001      	beq.n	8011e06 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011e02:	2301      	movs	r3, #1
 8011e04:	e000      	b.n	8011e08 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011e06:	2300      	movs	r3, #0
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3708      	adds	r7, #8
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}
 8011e10:	20005558 	.word	0x20005558

08011e14 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b086      	sub	sp, #24
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011e24:	697b      	ldr	r3, [r7, #20]
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	091b      	lsrs	r3, r3, #4
 8011e2a:	b2db      	uxtb	r3, r3
 8011e2c:	2b04      	cmp	r3, #4
 8011e2e:	d004      	beq.n	8011e3a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f7f8 fabf 	bl	800a3b4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011e36:	2300      	movs	r3, #0
 8011e38:	e0fd      	b.n	8012036 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	781b      	ldrb	r3, [r3, #0]
 8011e3e:	f003 030f 	and.w	r3, r3, #15
 8011e42:	b2db      	uxtb	r3, r3
 8011e44:	009b      	lsls	r3, r3, #2
 8011e46:	b2db      	uxtb	r3, r3
 8011e48:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011e4a:	697b      	ldr	r3, [r7, #20]
 8011e4c:	885b      	ldrh	r3, [r3, #2]
 8011e4e:	b29b      	uxth	r3, r3
 8011e50:	4618      	mov	r0, r3
 8011e52:	f7f6 ff57 	bl	8008d04 <lwip_htons>
 8011e56:	4603      	mov	r3, r0
 8011e58:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	891b      	ldrh	r3, [r3, #8]
 8011e5e:	89ba      	ldrh	r2, [r7, #12]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d204      	bcs.n	8011e6e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011e64:	89bb      	ldrh	r3, [r7, #12]
 8011e66:	4619      	mov	r1, r3
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f7f8 f91d 	bl	800a0a8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	895b      	ldrh	r3, [r3, #10]
 8011e72:	89fa      	ldrh	r2, [r7, #14]
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d807      	bhi.n	8011e88 <ip4_input+0x74>
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	891b      	ldrh	r3, [r3, #8]
 8011e7c:	89ba      	ldrh	r2, [r7, #12]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d802      	bhi.n	8011e88 <ip4_input+0x74>
 8011e82:	89fb      	ldrh	r3, [r7, #14]
 8011e84:	2b13      	cmp	r3, #19
 8011e86:	d804      	bhi.n	8011e92 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f7f8 fa93 	bl	800a3b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	e0d1      	b.n	8012036 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011e92:	697b      	ldr	r3, [r7, #20]
 8011e94:	691b      	ldr	r3, [r3, #16]
 8011e96:	4a6a      	ldr	r2, [pc, #424]	; (8012040 <ip4_input+0x22c>)
 8011e98:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011e9a:	697b      	ldr	r3, [r7, #20]
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	4a68      	ldr	r2, [pc, #416]	; (8012040 <ip4_input+0x22c>)
 8011ea0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011ea2:	4b67      	ldr	r3, [pc, #412]	; (8012040 <ip4_input+0x22c>)
 8011ea4:	695b      	ldr	r3, [r3, #20]
 8011ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011eaa:	2be0      	cmp	r3, #224	; 0xe0
 8011eac:	d112      	bne.n	8011ed4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011eb4:	f003 0301 	and.w	r3, r3, #1
 8011eb8:	b2db      	uxtb	r3, r3
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d007      	beq.n	8011ece <ip4_input+0xba>
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	3304      	adds	r3, #4
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d002      	beq.n	8011ece <ip4_input+0xba>
      netif = inp;
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	613b      	str	r3, [r7, #16]
 8011ecc:	e02a      	b.n	8011f24 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	613b      	str	r3, [r7, #16]
 8011ed2:	e027      	b.n	8011f24 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011ed4:	6838      	ldr	r0, [r7, #0]
 8011ed6:	f7ff ff73 	bl	8011dc0 <ip4_input_accept>
 8011eda:	4603      	mov	r3, r0
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d002      	beq.n	8011ee6 <ip4_input+0xd2>
      netif = inp;
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	613b      	str	r3, [r7, #16]
 8011ee4:	e01e      	b.n	8011f24 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011eea:	4b55      	ldr	r3, [pc, #340]	; (8012040 <ip4_input+0x22c>)
 8011eec:	695b      	ldr	r3, [r3, #20]
 8011eee:	b2db      	uxtb	r3, r3
 8011ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8011ef2:	d017      	beq.n	8011f24 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011ef4:	4b53      	ldr	r3, [pc, #332]	; (8012044 <ip4_input+0x230>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	613b      	str	r3, [r7, #16]
 8011efa:	e00e      	b.n	8011f1a <ip4_input+0x106>
          if (netif == inp) {
 8011efc:	693a      	ldr	r2, [r7, #16]
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d006      	beq.n	8011f12 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011f04:	6938      	ldr	r0, [r7, #16]
 8011f06:	f7ff ff5b 	bl	8011dc0 <ip4_input_accept>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d108      	bne.n	8011f22 <ip4_input+0x10e>
 8011f10:	e000      	b.n	8011f14 <ip4_input+0x100>
            continue;
 8011f12:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	613b      	str	r3, [r7, #16]
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d1ed      	bne.n	8011efc <ip4_input+0xe8>
 8011f20:	e000      	b.n	8011f24 <ip4_input+0x110>
            break;
 8011f22:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011f24:	4b46      	ldr	r3, [pc, #280]	; (8012040 <ip4_input+0x22c>)
 8011f26:	691b      	ldr	r3, [r3, #16]
 8011f28:	6839      	ldr	r1, [r7, #0]
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f000 f964 	bl	80121f8 <ip4_addr_isbroadcast_u32>
 8011f30:	4603      	mov	r3, r0
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d105      	bne.n	8011f42 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011f36:	4b42      	ldr	r3, [pc, #264]	; (8012040 <ip4_input+0x22c>)
 8011f38:	691b      	ldr	r3, [r3, #16]
 8011f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011f3e:	2be0      	cmp	r3, #224	; 0xe0
 8011f40:	d104      	bne.n	8011f4c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f7f8 fa36 	bl	800a3b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011f48:	2300      	movs	r3, #0
 8011f4a:	e074      	b.n	8012036 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d104      	bne.n	8011f5c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f7f8 fa2e 	bl	800a3b4 <pbuf_free>
    return ERR_OK;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	e06c      	b.n	8012036 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011f5c:	697b      	ldr	r3, [r7, #20]
 8011f5e:	88db      	ldrh	r3, [r3, #6]
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	461a      	mov	r2, r3
 8011f64:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011f68:	4013      	ands	r3, r2
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d00b      	beq.n	8011f86 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f000 fc88 	bl	8012884 <ip4_reass>
 8011f74:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d101      	bne.n	8011f80 <ip4_input+0x16c>
      return ERR_OK;
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	e05a      	b.n	8012036 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011f86:	4a2e      	ldr	r2, [pc, #184]	; (8012040 <ip4_input+0x22c>)
 8011f88:	693b      	ldr	r3, [r7, #16]
 8011f8a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011f8c:	4a2c      	ldr	r2, [pc, #176]	; (8012040 <ip4_input+0x22c>)
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011f92:	4a2b      	ldr	r2, [pc, #172]	; (8012040 <ip4_input+0x22c>)
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011f98:	697b      	ldr	r3, [r7, #20]
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	f003 030f 	and.w	r3, r3, #15
 8011fa0:	b2db      	uxtb	r3, r3
 8011fa2:	009b      	lsls	r3, r3, #2
 8011fa4:	b2db      	uxtb	r3, r3
 8011fa6:	b29a      	uxth	r2, r3
 8011fa8:	4b25      	ldr	r3, [pc, #148]	; (8012040 <ip4_input+0x22c>)
 8011faa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011fac:	89fb      	ldrh	r3, [r7, #14]
 8011fae:	4619      	mov	r1, r3
 8011fb0:	6878      	ldr	r0, [r7, #4]
 8011fb2:	f7f8 f979 	bl	800a2a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	7a5b      	ldrb	r3, [r3, #9]
 8011fba:	2b01      	cmp	r3, #1
 8011fbc:	d006      	beq.n	8011fcc <ip4_input+0x1b8>
 8011fbe:	2b06      	cmp	r3, #6
 8011fc0:	d109      	bne.n	8011fd6 <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011fc2:	6839      	ldr	r1, [r7, #0]
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f7fa fa4d 	bl	800c464 <tcp_input>
        break;
 8011fca:	e021      	b.n	8012010 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011fcc:	6839      	ldr	r1, [r7, #0]
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f7ff fcf8 	bl	80119c4 <icmp_input>
        break;
 8011fd4:	e01c      	b.n	8012010 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011fd6:	4b1a      	ldr	r3, [pc, #104]	; (8012040 <ip4_input+0x22c>)
 8011fd8:	695b      	ldr	r3, [r3, #20]
 8011fda:	6939      	ldr	r1, [r7, #16]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f000 f90b 	bl	80121f8 <ip4_addr_isbroadcast_u32>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d10f      	bne.n	8012008 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011fe8:	4b15      	ldr	r3, [pc, #84]	; (8012040 <ip4_input+0x22c>)
 8011fea:	695b      	ldr	r3, [r3, #20]
 8011fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011ff0:	2be0      	cmp	r3, #224	; 0xe0
 8011ff2:	d009      	beq.n	8012008 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011ff4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011ff8:	4619      	mov	r1, r3
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f7f8 f9c7 	bl	800a38e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012000:	2102      	movs	r1, #2
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f7ff fde2 	bl	8011bcc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f7f8 f9d3 	bl	800a3b4 <pbuf_free>
        break;
 801200e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012010:	4b0b      	ldr	r3, [pc, #44]	; (8012040 <ip4_input+0x22c>)
 8012012:	2200      	movs	r2, #0
 8012014:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012016:	4b0a      	ldr	r3, [pc, #40]	; (8012040 <ip4_input+0x22c>)
 8012018:	2200      	movs	r2, #0
 801201a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801201c:	4b08      	ldr	r3, [pc, #32]	; (8012040 <ip4_input+0x22c>)
 801201e:	2200      	movs	r2, #0
 8012020:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012022:	4b07      	ldr	r3, [pc, #28]	; (8012040 <ip4_input+0x22c>)
 8012024:	2200      	movs	r2, #0
 8012026:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012028:	4b05      	ldr	r3, [pc, #20]	; (8012040 <ip4_input+0x22c>)
 801202a:	2200      	movs	r2, #0
 801202c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801202e:	4b04      	ldr	r3, [pc, #16]	; (8012040 <ip4_input+0x22c>)
 8012030:	2200      	movs	r2, #0
 8012032:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012034:	2300      	movs	r3, #0
}
 8012036:	4618      	mov	r0, r3
 8012038:	3718      	adds	r7, #24
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}
 801203e:	bf00      	nop
 8012040:	20005558 	.word	0x20005558
 8012044:	2000e498 	.word	0x2000e498

08012048 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b08a      	sub	sp, #40	; 0x28
 801204c:	af04      	add	r7, sp, #16
 801204e:	60f8      	str	r0, [r7, #12]
 8012050:	60b9      	str	r1, [r7, #8]
 8012052:	607a      	str	r2, [r7, #4]
 8012054:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d009      	beq.n	8012074 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d003      	beq.n	801206e <ip4_output_if+0x26>
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d102      	bne.n	8012074 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012070:	3304      	adds	r3, #4
 8012072:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012074:	78fa      	ldrb	r2, [r7, #3]
 8012076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012078:	9302      	str	r3, [sp, #8]
 801207a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801207e:	9301      	str	r3, [sp, #4]
 8012080:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012084:	9300      	str	r3, [sp, #0]
 8012086:	4613      	mov	r3, r2
 8012088:	687a      	ldr	r2, [r7, #4]
 801208a:	6979      	ldr	r1, [r7, #20]
 801208c:	68f8      	ldr	r0, [r7, #12]
 801208e:	f000 f805 	bl	801209c <ip4_output_if_src>
 8012092:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012094:	4618      	mov	r0, r3
 8012096:	3718      	adds	r7, #24
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}

0801209c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b088      	sub	sp, #32
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	60f8      	str	r0, [r7, #12]
 80120a4:	60b9      	str	r1, [r7, #8]
 80120a6:	607a      	str	r2, [r7, #4]
 80120a8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	7b9b      	ldrb	r3, [r3, #14]
 80120ae:	2b01      	cmp	r3, #1
 80120b0:	d006      	beq.n	80120c0 <ip4_output_if_src+0x24>
 80120b2:	4b4b      	ldr	r3, [pc, #300]	; (80121e0 <ip4_output_if_src+0x144>)
 80120b4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80120b8:	494a      	ldr	r1, [pc, #296]	; (80121e4 <ip4_output_if_src+0x148>)
 80120ba:	484b      	ldr	r0, [pc, #300]	; (80121e8 <ip4_output_if_src+0x14c>)
 80120bc:	f002 fd44 	bl	8014b48 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d060      	beq.n	8012188 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80120c6:	2314      	movs	r3, #20
 80120c8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80120ca:	2114      	movs	r1, #20
 80120cc:	68f8      	ldr	r0, [r7, #12]
 80120ce:	f7f8 f8db 	bl	800a288 <pbuf_add_header>
 80120d2:	4603      	mov	r3, r0
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d002      	beq.n	80120de <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80120d8:	f06f 0301 	mvn.w	r3, #1
 80120dc:	e07c      	b.n	80121d8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	685b      	ldr	r3, [r3, #4]
 80120e2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	895b      	ldrh	r3, [r3, #10]
 80120e8:	2b13      	cmp	r3, #19
 80120ea:	d806      	bhi.n	80120fa <ip4_output_if_src+0x5e>
 80120ec:	4b3c      	ldr	r3, [pc, #240]	; (80121e0 <ip4_output_if_src+0x144>)
 80120ee:	f44f 7262 	mov.w	r2, #904	; 0x388
 80120f2:	493e      	ldr	r1, [pc, #248]	; (80121ec <ip4_output_if_src+0x150>)
 80120f4:	483c      	ldr	r0, [pc, #240]	; (80121e8 <ip4_output_if_src+0x14c>)
 80120f6:	f002 fd27 	bl	8014b48 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80120fa:	69fb      	ldr	r3, [r7, #28]
 80120fc:	78fa      	ldrb	r2, [r7, #3]
 80120fe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012100:	69fb      	ldr	r3, [r7, #28]
 8012102:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012106:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681a      	ldr	r2, [r3, #0]
 801210c:	69fb      	ldr	r3, [r7, #28]
 801210e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012110:	8b7b      	ldrh	r3, [r7, #26]
 8012112:	089b      	lsrs	r3, r3, #2
 8012114:	b29b      	uxth	r3, r3
 8012116:	b2db      	uxtb	r3, r3
 8012118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801211c:	b2da      	uxtb	r2, r3
 801211e:	69fb      	ldr	r3, [r7, #28]
 8012120:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012128:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	891b      	ldrh	r3, [r3, #8]
 801212e:	4618      	mov	r0, r3
 8012130:	f7f6 fde8 	bl	8008d04 <lwip_htons>
 8012134:	4603      	mov	r3, r0
 8012136:	461a      	mov	r2, r3
 8012138:	69fb      	ldr	r3, [r7, #28]
 801213a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801213c:	69fb      	ldr	r3, [r7, #28]
 801213e:	2200      	movs	r2, #0
 8012140:	719a      	strb	r2, [r3, #6]
 8012142:	2200      	movs	r2, #0
 8012144:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012146:	4b2a      	ldr	r3, [pc, #168]	; (80121f0 <ip4_output_if_src+0x154>)
 8012148:	881b      	ldrh	r3, [r3, #0]
 801214a:	4618      	mov	r0, r3
 801214c:	f7f6 fdda 	bl	8008d04 <lwip_htons>
 8012150:	4603      	mov	r3, r0
 8012152:	461a      	mov	r2, r3
 8012154:	69fb      	ldr	r3, [r7, #28]
 8012156:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012158:	4b25      	ldr	r3, [pc, #148]	; (80121f0 <ip4_output_if_src+0x154>)
 801215a:	881b      	ldrh	r3, [r3, #0]
 801215c:	3301      	adds	r3, #1
 801215e:	b29a      	uxth	r2, r3
 8012160:	4b23      	ldr	r3, [pc, #140]	; (80121f0 <ip4_output_if_src+0x154>)
 8012162:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d104      	bne.n	8012174 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801216a:	4b22      	ldr	r3, [pc, #136]	; (80121f4 <ip4_output_if_src+0x158>)
 801216c:	681a      	ldr	r2, [r3, #0]
 801216e:	69fb      	ldr	r3, [r7, #28]
 8012170:	60da      	str	r2, [r3, #12]
 8012172:	e003      	b.n	801217c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	681a      	ldr	r2, [r3, #0]
 8012178:	69fb      	ldr	r3, [r7, #28]
 801217a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801217c:	69fb      	ldr	r3, [r7, #28]
 801217e:	2200      	movs	r2, #0
 8012180:	729a      	strb	r2, [r3, #10]
 8012182:	2200      	movs	r2, #0
 8012184:	72da      	strb	r2, [r3, #11]
 8012186:	e00f      	b.n	80121a8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	895b      	ldrh	r3, [r3, #10]
 801218c:	2b13      	cmp	r3, #19
 801218e:	d802      	bhi.n	8012196 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012190:	f06f 0301 	mvn.w	r3, #1
 8012194:	e020      	b.n	80121d8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801219c:	69fb      	ldr	r3, [r7, #28]
 801219e:	691b      	ldr	r3, [r3, #16]
 80121a0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80121a2:	f107 0314 	add.w	r3, r7, #20
 80121a6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80121a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d00c      	beq.n	80121ca <ip4_output_if_src+0x12e>
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	891a      	ldrh	r2, [r3, #8]
 80121b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d906      	bls.n	80121ca <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80121c0:	68f8      	ldr	r0, [r7, #12]
 80121c2:	f000 fd53 	bl	8012c6c <ip4_frag>
 80121c6:	4603      	mov	r3, r0
 80121c8:	e006      	b.n	80121d8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80121ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121cc:	695b      	ldr	r3, [r3, #20]
 80121ce:	687a      	ldr	r2, [r7, #4]
 80121d0:	68f9      	ldr	r1, [r7, #12]
 80121d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121d4:	4798      	blx	r3
 80121d6:	4603      	mov	r3, r0
}
 80121d8:	4618      	mov	r0, r3
 80121da:	3720      	adds	r7, #32
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}
 80121e0:	08018340 	.word	0x08018340
 80121e4:	08018374 	.word	0x08018374
 80121e8:	08018380 	.word	0x08018380
 80121ec:	080183a8 	.word	0x080183a8
 80121f0:	2000e5f2 	.word	0x2000e5f2
 80121f4:	08018b30 	.word	0x08018b30

080121f8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80121f8:	b480      	push	{r7}
 80121fa:	b085      	sub	sp, #20
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
 8012200:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801220c:	d002      	beq.n	8012214 <ip4_addr_isbroadcast_u32+0x1c>
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d101      	bne.n	8012218 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012214:	2301      	movs	r3, #1
 8012216:	e02a      	b.n	801226e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801221e:	f003 0302 	and.w	r3, r3, #2
 8012222:	2b00      	cmp	r3, #0
 8012224:	d101      	bne.n	801222a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012226:	2300      	movs	r3, #0
 8012228:	e021      	b.n	801226e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	3304      	adds	r3, #4
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	687a      	ldr	r2, [r7, #4]
 8012232:	429a      	cmp	r2, r3
 8012234:	d101      	bne.n	801223a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012236:	2300      	movs	r3, #0
 8012238:	e019      	b.n	801226e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801223a:	68fa      	ldr	r2, [r7, #12]
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	3304      	adds	r3, #4
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	405a      	eors	r2, r3
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	3308      	adds	r3, #8
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	4013      	ands	r3, r2
 801224c:	2b00      	cmp	r3, #0
 801224e:	d10d      	bne.n	801226c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	3308      	adds	r3, #8
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	43da      	mvns	r2, r3
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	3308      	adds	r3, #8
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012264:	429a      	cmp	r2, r3
 8012266:	d101      	bne.n	801226c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012268:	2301      	movs	r3, #1
 801226a:	e000      	b.n	801226e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801226c:	2300      	movs	r3, #0
  }
}
 801226e:	4618      	mov	r0, r3
 8012270:	3714      	adds	r7, #20
 8012272:	46bd      	mov	sp, r7
 8012274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012278:	4770      	bx	lr
	...

0801227c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b084      	sub	sp, #16
 8012280:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012282:	2300      	movs	r3, #0
 8012284:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012286:	4b12      	ldr	r3, [pc, #72]	; (80122d0 <ip_reass_tmr+0x54>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801228c:	e018      	b.n	80122c0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	7fdb      	ldrb	r3, [r3, #31]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d00b      	beq.n	80122ae <ip_reass_tmr+0x32>
      r->timer--;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	7fdb      	ldrb	r3, [r3, #31]
 801229a:	3b01      	subs	r3, #1
 801229c:	b2da      	uxtb	r2, r3
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	60fb      	str	r3, [r7, #12]
 80122ac:	e008      	b.n	80122c0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80122b8:	68b9      	ldr	r1, [r7, #8]
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f000 f80a 	bl	80122d4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d1e3      	bne.n	801228e <ip_reass_tmr+0x12>
    }
  }
}
 80122c6:	bf00      	nop
 80122c8:	bf00      	nop
 80122ca:	3710      	adds	r7, #16
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}
 80122d0:	2000e5f4 	.word	0x2000e5f4

080122d4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b088      	sub	sp, #32
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
 80122dc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80122de:	2300      	movs	r3, #0
 80122e0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80122e2:	683a      	ldr	r2, [r7, #0]
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d105      	bne.n	80122f6 <ip_reass_free_complete_datagram+0x22>
 80122ea:	4b45      	ldr	r3, [pc, #276]	; (8012400 <ip_reass_free_complete_datagram+0x12c>)
 80122ec:	22ab      	movs	r2, #171	; 0xab
 80122ee:	4945      	ldr	r1, [pc, #276]	; (8012404 <ip_reass_free_complete_datagram+0x130>)
 80122f0:	4845      	ldr	r0, [pc, #276]	; (8012408 <ip_reass_free_complete_datagram+0x134>)
 80122f2:	f002 fc29 	bl	8014b48 <iprintf>
  if (prev != NULL) {
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d00a      	beq.n	8012312 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	687a      	ldr	r2, [r7, #4]
 8012302:	429a      	cmp	r2, r3
 8012304:	d005      	beq.n	8012312 <ip_reass_free_complete_datagram+0x3e>
 8012306:	4b3e      	ldr	r3, [pc, #248]	; (8012400 <ip_reass_free_complete_datagram+0x12c>)
 8012308:	22ad      	movs	r2, #173	; 0xad
 801230a:	4940      	ldr	r1, [pc, #256]	; (801240c <ip_reass_free_complete_datagram+0x138>)
 801230c:	483e      	ldr	r0, [pc, #248]	; (8012408 <ip_reass_free_complete_datagram+0x134>)
 801230e:	f002 fc1b 	bl	8014b48 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	685b      	ldr	r3, [r3, #4]
 8012318:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	889b      	ldrh	r3, [r3, #4]
 801231e:	b29b      	uxth	r3, r3
 8012320:	2b00      	cmp	r3, #0
 8012322:	d12a      	bne.n	801237a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	681a      	ldr	r2, [r3, #0]
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012332:	69bb      	ldr	r3, [r7, #24]
 8012334:	6858      	ldr	r0, [r3, #4]
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	3308      	adds	r3, #8
 801233a:	2214      	movs	r2, #20
 801233c:	4619      	mov	r1, r3
 801233e:	f002 fd66 	bl	8014e0e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012342:	2101      	movs	r1, #1
 8012344:	69b8      	ldr	r0, [r7, #24]
 8012346:	f7ff fc51 	bl	8011bec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801234a:	69b8      	ldr	r0, [r7, #24]
 801234c:	f7f8 f8ba 	bl	800a4c4 <pbuf_clen>
 8012350:	4603      	mov	r3, r0
 8012352:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012354:	8bfa      	ldrh	r2, [r7, #30]
 8012356:	8a7b      	ldrh	r3, [r7, #18]
 8012358:	4413      	add	r3, r2
 801235a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801235e:	db05      	blt.n	801236c <ip_reass_free_complete_datagram+0x98>
 8012360:	4b27      	ldr	r3, [pc, #156]	; (8012400 <ip_reass_free_complete_datagram+0x12c>)
 8012362:	22bc      	movs	r2, #188	; 0xbc
 8012364:	492a      	ldr	r1, [pc, #168]	; (8012410 <ip_reass_free_complete_datagram+0x13c>)
 8012366:	4828      	ldr	r0, [pc, #160]	; (8012408 <ip_reass_free_complete_datagram+0x134>)
 8012368:	f002 fbee 	bl	8014b48 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801236c:	8bfa      	ldrh	r2, [r7, #30]
 801236e:	8a7b      	ldrh	r3, [r7, #18]
 8012370:	4413      	add	r3, r2
 8012372:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012374:	69b8      	ldr	r0, [r7, #24]
 8012376:	f7f8 f81d 	bl	800a3b4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012380:	e01f      	b.n	80123c2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012382:	69bb      	ldr	r3, [r7, #24]
 8012384:	685b      	ldr	r3, [r3, #4]
 8012386:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012388:	69bb      	ldr	r3, [r7, #24]
 801238a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012392:	68f8      	ldr	r0, [r7, #12]
 8012394:	f7f8 f896 	bl	800a4c4 <pbuf_clen>
 8012398:	4603      	mov	r3, r0
 801239a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801239c:	8bfa      	ldrh	r2, [r7, #30]
 801239e:	8a7b      	ldrh	r3, [r7, #18]
 80123a0:	4413      	add	r3, r2
 80123a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123a6:	db05      	blt.n	80123b4 <ip_reass_free_complete_datagram+0xe0>
 80123a8:	4b15      	ldr	r3, [pc, #84]	; (8012400 <ip_reass_free_complete_datagram+0x12c>)
 80123aa:	22cc      	movs	r2, #204	; 0xcc
 80123ac:	4918      	ldr	r1, [pc, #96]	; (8012410 <ip_reass_free_complete_datagram+0x13c>)
 80123ae:	4816      	ldr	r0, [pc, #88]	; (8012408 <ip_reass_free_complete_datagram+0x134>)
 80123b0:	f002 fbca 	bl	8014b48 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80123b4:	8bfa      	ldrh	r2, [r7, #30]
 80123b6:	8a7b      	ldrh	r3, [r7, #18]
 80123b8:	4413      	add	r3, r2
 80123ba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80123bc:	68f8      	ldr	r0, [r7, #12]
 80123be:	f7f7 fff9 	bl	800a3b4 <pbuf_free>
  while (p != NULL) {
 80123c2:	69bb      	ldr	r3, [r7, #24]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d1dc      	bne.n	8012382 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80123c8:	6839      	ldr	r1, [r7, #0]
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 f8c2 	bl	8012554 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80123d0:	4b10      	ldr	r3, [pc, #64]	; (8012414 <ip_reass_free_complete_datagram+0x140>)
 80123d2:	881b      	ldrh	r3, [r3, #0]
 80123d4:	8bfa      	ldrh	r2, [r7, #30]
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d905      	bls.n	80123e6 <ip_reass_free_complete_datagram+0x112>
 80123da:	4b09      	ldr	r3, [pc, #36]	; (8012400 <ip_reass_free_complete_datagram+0x12c>)
 80123dc:	22d2      	movs	r2, #210	; 0xd2
 80123de:	490e      	ldr	r1, [pc, #56]	; (8012418 <ip_reass_free_complete_datagram+0x144>)
 80123e0:	4809      	ldr	r0, [pc, #36]	; (8012408 <ip_reass_free_complete_datagram+0x134>)
 80123e2:	f002 fbb1 	bl	8014b48 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80123e6:	4b0b      	ldr	r3, [pc, #44]	; (8012414 <ip_reass_free_complete_datagram+0x140>)
 80123e8:	881a      	ldrh	r2, [r3, #0]
 80123ea:	8bfb      	ldrh	r3, [r7, #30]
 80123ec:	1ad3      	subs	r3, r2, r3
 80123ee:	b29a      	uxth	r2, r3
 80123f0:	4b08      	ldr	r3, [pc, #32]	; (8012414 <ip_reass_free_complete_datagram+0x140>)
 80123f2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80123f4:	8bfb      	ldrh	r3, [r7, #30]
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3720      	adds	r7, #32
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
 80123fe:	bf00      	nop
 8012400:	080183d8 	.word	0x080183d8
 8012404:	08018414 	.word	0x08018414
 8012408:	08018420 	.word	0x08018420
 801240c:	08018448 	.word	0x08018448
 8012410:	0801845c 	.word	0x0801845c
 8012414:	2000e5f8 	.word	0x2000e5f8
 8012418:	0801847c 	.word	0x0801847c

0801241c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b08a      	sub	sp, #40	; 0x28
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
 8012424:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012426:	2300      	movs	r3, #0
 8012428:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801242a:	2300      	movs	r3, #0
 801242c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801242e:	2300      	movs	r3, #0
 8012430:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012432:	2300      	movs	r3, #0
 8012434:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012436:	2300      	movs	r3, #0
 8012438:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801243a:	4b28      	ldr	r3, [pc, #160]	; (80124dc <ip_reass_remove_oldest_datagram+0xc0>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012440:	e030      	b.n	80124a4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012444:	695a      	ldr	r2, [r3, #20]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	68db      	ldr	r3, [r3, #12]
 801244a:	429a      	cmp	r2, r3
 801244c:	d10c      	bne.n	8012468 <ip_reass_remove_oldest_datagram+0x4c>
 801244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012450:	699a      	ldr	r2, [r3, #24]
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	691b      	ldr	r3, [r3, #16]
 8012456:	429a      	cmp	r2, r3
 8012458:	d106      	bne.n	8012468 <ip_reass_remove_oldest_datagram+0x4c>
 801245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245c:	899a      	ldrh	r2, [r3, #12]
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	889b      	ldrh	r3, [r3, #4]
 8012462:	b29b      	uxth	r3, r3
 8012464:	429a      	cmp	r2, r3
 8012466:	d014      	beq.n	8012492 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012468:	693b      	ldr	r3, [r7, #16]
 801246a:	3301      	adds	r3, #1
 801246c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801246e:	6a3b      	ldr	r3, [r7, #32]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d104      	bne.n	801247e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012476:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012478:	69fb      	ldr	r3, [r7, #28]
 801247a:	61bb      	str	r3, [r7, #24]
 801247c:	e009      	b.n	8012492 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012480:	7fda      	ldrb	r2, [r3, #31]
 8012482:	6a3b      	ldr	r3, [r7, #32]
 8012484:	7fdb      	ldrb	r3, [r3, #31]
 8012486:	429a      	cmp	r2, r3
 8012488:	d803      	bhi.n	8012492 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801248e:	69fb      	ldr	r3, [r7, #28]
 8012490:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d001      	beq.n	801249e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80124a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d1cb      	bne.n	8012442 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80124aa:	6a3b      	ldr	r3, [r7, #32]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d008      	beq.n	80124c2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80124b0:	69b9      	ldr	r1, [r7, #24]
 80124b2:	6a38      	ldr	r0, [r7, #32]
 80124b4:	f7ff ff0e 	bl	80122d4 <ip_reass_free_complete_datagram>
 80124b8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80124ba:	697a      	ldr	r2, [r7, #20]
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	4413      	add	r3, r2
 80124c0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80124c2:	697a      	ldr	r2, [r7, #20]
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	429a      	cmp	r2, r3
 80124c8:	da02      	bge.n	80124d0 <ip_reass_remove_oldest_datagram+0xb4>
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	2b01      	cmp	r3, #1
 80124ce:	dcac      	bgt.n	801242a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80124d0:	697b      	ldr	r3, [r7, #20]
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3728      	adds	r7, #40	; 0x28
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	bf00      	nop
 80124dc:	2000e5f4 	.word	0x2000e5f4

080124e0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b084      	sub	sp, #16
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
 80124e8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80124ea:	2003      	movs	r0, #3
 80124ec:	f7f7 f880 	bl	80095f0 <memp_malloc>
 80124f0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d110      	bne.n	801251a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80124f8:	6839      	ldr	r1, [r7, #0]
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f7ff ff8e 	bl	801241c <ip_reass_remove_oldest_datagram>
 8012500:	4602      	mov	r2, r0
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	4293      	cmp	r3, r2
 8012506:	dc03      	bgt.n	8012510 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012508:	2003      	movs	r0, #3
 801250a:	f7f7 f871 	bl	80095f0 <memp_malloc>
 801250e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d101      	bne.n	801251a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012516:	2300      	movs	r3, #0
 8012518:	e016      	b.n	8012548 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801251a:	2220      	movs	r2, #32
 801251c:	2100      	movs	r1, #0
 801251e:	68f8      	ldr	r0, [r7, #12]
 8012520:	f002 fbf0 	bl	8014d04 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	220f      	movs	r2, #15
 8012528:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801252a:	4b09      	ldr	r3, [pc, #36]	; (8012550 <ip_reass_enqueue_new_datagram+0x70>)
 801252c:	681a      	ldr	r2, [r3, #0]
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012532:	4a07      	ldr	r2, [pc, #28]	; (8012550 <ip_reass_enqueue_new_datagram+0x70>)
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	3308      	adds	r3, #8
 801253c:	2214      	movs	r2, #20
 801253e:	6879      	ldr	r1, [r7, #4]
 8012540:	4618      	mov	r0, r3
 8012542:	f002 fc64 	bl	8014e0e <memcpy>
  return ipr;
 8012546:	68fb      	ldr	r3, [r7, #12]
}
 8012548:	4618      	mov	r0, r3
 801254a:	3710      	adds	r7, #16
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}
 8012550:	2000e5f4 	.word	0x2000e5f4

08012554 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b082      	sub	sp, #8
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801255e:	4b10      	ldr	r3, [pc, #64]	; (80125a0 <ip_reass_dequeue_datagram+0x4c>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	687a      	ldr	r2, [r7, #4]
 8012564:	429a      	cmp	r2, r3
 8012566:	d104      	bne.n	8012572 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	4a0c      	ldr	r2, [pc, #48]	; (80125a0 <ip_reass_dequeue_datagram+0x4c>)
 801256e:	6013      	str	r3, [r2, #0]
 8012570:	e00d      	b.n	801258e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d106      	bne.n	8012586 <ip_reass_dequeue_datagram+0x32>
 8012578:	4b0a      	ldr	r3, [pc, #40]	; (80125a4 <ip_reass_dequeue_datagram+0x50>)
 801257a:	f240 1245 	movw	r2, #325	; 0x145
 801257e:	490a      	ldr	r1, [pc, #40]	; (80125a8 <ip_reass_dequeue_datagram+0x54>)
 8012580:	480a      	ldr	r0, [pc, #40]	; (80125ac <ip_reass_dequeue_datagram+0x58>)
 8012582:	f002 fae1 	bl	8014b48 <iprintf>
    prev->next = ipr->next;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681a      	ldr	r2, [r3, #0]
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801258e:	6879      	ldr	r1, [r7, #4]
 8012590:	2003      	movs	r0, #3
 8012592:	f7f7 f89d 	bl	80096d0 <memp_free>
}
 8012596:	bf00      	nop
 8012598:	3708      	adds	r7, #8
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	2000e5f4 	.word	0x2000e5f4
 80125a4:	080183d8 	.word	0x080183d8
 80125a8:	080184a0 	.word	0x080184a0
 80125ac:	08018420 	.word	0x08018420

080125b0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b08c      	sub	sp, #48	; 0x30
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	60f8      	str	r0, [r7, #12]
 80125b8:	60b9      	str	r1, [r7, #8]
 80125ba:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80125bc:	2300      	movs	r3, #0
 80125be:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80125c0:	2301      	movs	r3, #1
 80125c2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	685b      	ldr	r3, [r3, #4]
 80125c8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80125ca:	69fb      	ldr	r3, [r7, #28]
 80125cc:	885b      	ldrh	r3, [r3, #2]
 80125ce:	b29b      	uxth	r3, r3
 80125d0:	4618      	mov	r0, r3
 80125d2:	f7f6 fb97 	bl	8008d04 <lwip_htons>
 80125d6:	4603      	mov	r3, r0
 80125d8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80125da:	69fb      	ldr	r3, [r7, #28]
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	f003 030f 	and.w	r3, r3, #15
 80125e2:	b2db      	uxtb	r3, r3
 80125e4:	009b      	lsls	r3, r3, #2
 80125e6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80125e8:	7e7b      	ldrb	r3, [r7, #25]
 80125ea:	b29b      	uxth	r3, r3
 80125ec:	8b7a      	ldrh	r2, [r7, #26]
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d202      	bcs.n	80125f8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80125f2:	f04f 33ff 	mov.w	r3, #4294967295
 80125f6:	e135      	b.n	8012864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80125f8:	7e7b      	ldrb	r3, [r7, #25]
 80125fa:	b29b      	uxth	r3, r3
 80125fc:	8b7a      	ldrh	r2, [r7, #26]
 80125fe:	1ad3      	subs	r3, r2, r3
 8012600:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012602:	69fb      	ldr	r3, [r7, #28]
 8012604:	88db      	ldrh	r3, [r3, #6]
 8012606:	b29b      	uxth	r3, r3
 8012608:	4618      	mov	r0, r3
 801260a:	f7f6 fb7b 	bl	8008d04 <lwip_htons>
 801260e:	4603      	mov	r3, r0
 8012610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012614:	b29b      	uxth	r3, r3
 8012616:	00db      	lsls	r3, r3, #3
 8012618:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801261a:	68bb      	ldr	r3, [r7, #8]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012622:	2200      	movs	r2, #0
 8012624:	701a      	strb	r2, [r3, #0]
 8012626:	2200      	movs	r2, #0
 8012628:	705a      	strb	r2, [r3, #1]
 801262a:	2200      	movs	r2, #0
 801262c:	709a      	strb	r2, [r3, #2]
 801262e:	2200      	movs	r2, #0
 8012630:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012634:	8afa      	ldrh	r2, [r7, #22]
 8012636:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012638:	8afa      	ldrh	r2, [r7, #22]
 801263a:	8b7b      	ldrh	r3, [r7, #26]
 801263c:	4413      	add	r3, r2
 801263e:	b29a      	uxth	r2, r3
 8012640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012642:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012646:	88db      	ldrh	r3, [r3, #6]
 8012648:	b29b      	uxth	r3, r3
 801264a:	8afa      	ldrh	r2, [r7, #22]
 801264c:	429a      	cmp	r2, r3
 801264e:	d902      	bls.n	8012656 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012650:	f04f 33ff 	mov.w	r3, #4294967295
 8012654:	e106      	b.n	8012864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	627b      	str	r3, [r7, #36]	; 0x24
 801265c:	e068      	b.n	8012730 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012660:	685b      	ldr	r3, [r3, #4]
 8012662:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012666:	889b      	ldrh	r3, [r3, #4]
 8012668:	b29a      	uxth	r2, r3
 801266a:	693b      	ldr	r3, [r7, #16]
 801266c:	889b      	ldrh	r3, [r3, #4]
 801266e:	b29b      	uxth	r3, r3
 8012670:	429a      	cmp	r2, r3
 8012672:	d235      	bcs.n	80126e0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012678:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801267c:	2b00      	cmp	r3, #0
 801267e:	d020      	beq.n	80126c2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012682:	889b      	ldrh	r3, [r3, #4]
 8012684:	b29a      	uxth	r2, r3
 8012686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012688:	88db      	ldrh	r3, [r3, #6]
 801268a:	b29b      	uxth	r3, r3
 801268c:	429a      	cmp	r2, r3
 801268e:	d307      	bcc.n	80126a0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012692:	88db      	ldrh	r3, [r3, #6]
 8012694:	b29a      	uxth	r2, r3
 8012696:	693b      	ldr	r3, [r7, #16]
 8012698:	889b      	ldrh	r3, [r3, #4]
 801269a:	b29b      	uxth	r3, r3
 801269c:	429a      	cmp	r2, r3
 801269e:	d902      	bls.n	80126a6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80126a0:	f04f 33ff 	mov.w	r3, #4294967295
 80126a4:	e0de      	b.n	8012864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80126a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a8:	68ba      	ldr	r2, [r7, #8]
 80126aa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80126ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ae:	88db      	ldrh	r3, [r3, #6]
 80126b0:	b29a      	uxth	r2, r3
 80126b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b4:	889b      	ldrh	r3, [r3, #4]
 80126b6:	b29b      	uxth	r3, r3
 80126b8:	429a      	cmp	r2, r3
 80126ba:	d03d      	beq.n	8012738 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80126bc:	2300      	movs	r3, #0
 80126be:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80126c0:	e03a      	b.n	8012738 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80126c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c4:	88db      	ldrh	r3, [r3, #6]
 80126c6:	b29a      	uxth	r2, r3
 80126c8:	693b      	ldr	r3, [r7, #16]
 80126ca:	889b      	ldrh	r3, [r3, #4]
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d902      	bls.n	80126d8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80126d2:	f04f 33ff 	mov.w	r3, #4294967295
 80126d6:	e0c5      	b.n	8012864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	68ba      	ldr	r2, [r7, #8]
 80126dc:	605a      	str	r2, [r3, #4]
      break;
 80126de:	e02b      	b.n	8012738 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80126e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e2:	889b      	ldrh	r3, [r3, #4]
 80126e4:	b29a      	uxth	r2, r3
 80126e6:	693b      	ldr	r3, [r7, #16]
 80126e8:	889b      	ldrh	r3, [r3, #4]
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d102      	bne.n	80126f6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80126f0:	f04f 33ff 	mov.w	r3, #4294967295
 80126f4:	e0b6      	b.n	8012864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80126f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f8:	889b      	ldrh	r3, [r3, #4]
 80126fa:	b29a      	uxth	r2, r3
 80126fc:	693b      	ldr	r3, [r7, #16]
 80126fe:	88db      	ldrh	r3, [r3, #6]
 8012700:	b29b      	uxth	r3, r3
 8012702:	429a      	cmp	r2, r3
 8012704:	d202      	bcs.n	801270c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012706:	f04f 33ff 	mov.w	r3, #4294967295
 801270a:	e0ab      	b.n	8012864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801270e:	2b00      	cmp	r3, #0
 8012710:	d009      	beq.n	8012726 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012714:	88db      	ldrh	r3, [r3, #6]
 8012716:	b29a      	uxth	r2, r3
 8012718:	693b      	ldr	r3, [r7, #16]
 801271a:	889b      	ldrh	r3, [r3, #4]
 801271c:	b29b      	uxth	r3, r3
 801271e:	429a      	cmp	r2, r3
 8012720:	d001      	beq.n	8012726 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012722:	2300      	movs	r3, #0
 8012724:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012726:	693b      	ldr	r3, [r7, #16]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801272c:	693b      	ldr	r3, [r7, #16]
 801272e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012732:	2b00      	cmp	r3, #0
 8012734:	d193      	bne.n	801265e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012736:	e000      	b.n	801273a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012738:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801273c:	2b00      	cmp	r3, #0
 801273e:	d12d      	bne.n	801279c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012742:	2b00      	cmp	r3, #0
 8012744:	d01c      	beq.n	8012780 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012748:	88db      	ldrh	r3, [r3, #6]
 801274a:	b29a      	uxth	r2, r3
 801274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801274e:	889b      	ldrh	r3, [r3, #4]
 8012750:	b29b      	uxth	r3, r3
 8012752:	429a      	cmp	r2, r3
 8012754:	d906      	bls.n	8012764 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012756:	4b45      	ldr	r3, [pc, #276]	; (801286c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012758:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801275c:	4944      	ldr	r1, [pc, #272]	; (8012870 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801275e:	4845      	ldr	r0, [pc, #276]	; (8012874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012760:	f002 f9f2 	bl	8014b48 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012766:	68ba      	ldr	r2, [r7, #8]
 8012768:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801276c:	88db      	ldrh	r3, [r3, #6]
 801276e:	b29a      	uxth	r2, r3
 8012770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012772:	889b      	ldrh	r3, [r3, #4]
 8012774:	b29b      	uxth	r3, r3
 8012776:	429a      	cmp	r2, r3
 8012778:	d010      	beq.n	801279c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801277a:	2300      	movs	r3, #0
 801277c:	623b      	str	r3, [r7, #32]
 801277e:	e00d      	b.n	801279c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	685b      	ldr	r3, [r3, #4]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d006      	beq.n	8012796 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012788:	4b38      	ldr	r3, [pc, #224]	; (801286c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801278a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801278e:	493a      	ldr	r1, [pc, #232]	; (8012878 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012790:	4838      	ldr	r0, [pc, #224]	; (8012874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012792:	f002 f9d9 	bl	8014b48 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	68ba      	ldr	r2, [r7, #8]
 801279a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d105      	bne.n	80127ae <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	7f9b      	ldrb	r3, [r3, #30]
 80127a6:	f003 0301 	and.w	r3, r3, #1
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d059      	beq.n	8012862 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80127ae:	6a3b      	ldr	r3, [r7, #32]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d04f      	beq.n	8012854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d006      	beq.n	80127ca <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	889b      	ldrh	r3, [r3, #4]
 80127c4:	b29b      	uxth	r3, r3
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d002      	beq.n	80127d0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80127ca:	2300      	movs	r3, #0
 80127cc:	623b      	str	r3, [r7, #32]
 80127ce:	e041      	b.n	8012854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80127d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80127d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80127da:	e012      	b.n	8012802 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80127dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127de:	685b      	ldr	r3, [r3, #4]
 80127e0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80127e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127e4:	88db      	ldrh	r3, [r3, #6]
 80127e6:	b29a      	uxth	r2, r3
 80127e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ea:	889b      	ldrh	r3, [r3, #4]
 80127ec:	b29b      	uxth	r3, r3
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d002      	beq.n	80127f8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80127f2:	2300      	movs	r3, #0
 80127f4:	623b      	str	r3, [r7, #32]
            break;
 80127f6:	e007      	b.n	8012808 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80127f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127fa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80127fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012804:	2b00      	cmp	r3, #0
 8012806:	d1e9      	bne.n	80127dc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012808:	6a3b      	ldr	r3, [r7, #32]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d022      	beq.n	8012854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	685b      	ldr	r3, [r3, #4]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d106      	bne.n	8012824 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012816:	4b15      	ldr	r3, [pc, #84]	; (801286c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012818:	f240 12df 	movw	r2, #479	; 0x1df
 801281c:	4917      	ldr	r1, [pc, #92]	; (801287c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801281e:	4815      	ldr	r0, [pc, #84]	; (8012874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012820:	f002 f992 	bl	8014b48 <iprintf>
          LWIP_ASSERT("sanity check",
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	685b      	ldr	r3, [r3, #4]
 8012828:	685b      	ldr	r3, [r3, #4]
 801282a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801282c:	429a      	cmp	r2, r3
 801282e:	d106      	bne.n	801283e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012830:	4b0e      	ldr	r3, [pc, #56]	; (801286c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012832:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012836:	4911      	ldr	r1, [pc, #68]	; (801287c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012838:	480e      	ldr	r0, [pc, #56]	; (8012874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801283a:	f002 f985 	bl	8014b48 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d006      	beq.n	8012854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012846:	4b09      	ldr	r3, [pc, #36]	; (801286c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012848:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801284c:	490c      	ldr	r1, [pc, #48]	; (8012880 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801284e:	4809      	ldr	r0, [pc, #36]	; (8012874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012850:	f002 f97a 	bl	8014b48 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012854:	6a3b      	ldr	r3, [r7, #32]
 8012856:	2b00      	cmp	r3, #0
 8012858:	bf14      	ite	ne
 801285a:	2301      	movne	r3, #1
 801285c:	2300      	moveq	r3, #0
 801285e:	b2db      	uxtb	r3, r3
 8012860:	e000      	b.n	8012864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012862:	2300      	movs	r3, #0
}
 8012864:	4618      	mov	r0, r3
 8012866:	3730      	adds	r7, #48	; 0x30
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}
 801286c:	080183d8 	.word	0x080183d8
 8012870:	080184bc 	.word	0x080184bc
 8012874:	08018420 	.word	0x08018420
 8012878:	080184dc 	.word	0x080184dc
 801287c:	08018514 	.word	0x08018514
 8012880:	08018524 	.word	0x08018524

08012884 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b08e      	sub	sp, #56	; 0x38
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012894:	781b      	ldrb	r3, [r3, #0]
 8012896:	f003 030f 	and.w	r3, r3, #15
 801289a:	b2db      	uxtb	r3, r3
 801289c:	009b      	lsls	r3, r3, #2
 801289e:	b2db      	uxtb	r3, r3
 80128a0:	2b14      	cmp	r3, #20
 80128a2:	f040 8171 	bne.w	8012b88 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80128a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128a8:	88db      	ldrh	r3, [r3, #6]
 80128aa:	b29b      	uxth	r3, r3
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7f6 fa29 	bl	8008d04 <lwip_htons>
 80128b2:	4603      	mov	r3, r0
 80128b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80128b8:	b29b      	uxth	r3, r3
 80128ba:	00db      	lsls	r3, r3, #3
 80128bc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80128be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128c0:	885b      	ldrh	r3, [r3, #2]
 80128c2:	b29b      	uxth	r3, r3
 80128c4:	4618      	mov	r0, r3
 80128c6:	f7f6 fa1d 	bl	8008d04 <lwip_htons>
 80128ca:	4603      	mov	r3, r0
 80128cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80128ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	f003 030f 	and.w	r3, r3, #15
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	009b      	lsls	r3, r3, #2
 80128da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80128de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80128e2:	b29b      	uxth	r3, r3
 80128e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80128e6:	429a      	cmp	r2, r3
 80128e8:	f0c0 8150 	bcc.w	8012b8c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80128ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80128f0:	b29b      	uxth	r3, r3
 80128f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80128f4:	1ad3      	subs	r3, r2, r3
 80128f6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f7f7 fde3 	bl	800a4c4 <pbuf_clen>
 80128fe:	4603      	mov	r3, r0
 8012900:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012902:	4b8c      	ldr	r3, [pc, #560]	; (8012b34 <ip4_reass+0x2b0>)
 8012904:	881b      	ldrh	r3, [r3, #0]
 8012906:	461a      	mov	r2, r3
 8012908:	8c3b      	ldrh	r3, [r7, #32]
 801290a:	4413      	add	r3, r2
 801290c:	2b0a      	cmp	r3, #10
 801290e:	dd10      	ble.n	8012932 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012910:	8c3b      	ldrh	r3, [r7, #32]
 8012912:	4619      	mov	r1, r3
 8012914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012916:	f7ff fd81 	bl	801241c <ip_reass_remove_oldest_datagram>
 801291a:	4603      	mov	r3, r0
 801291c:	2b00      	cmp	r3, #0
 801291e:	f000 8137 	beq.w	8012b90 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012922:	4b84      	ldr	r3, [pc, #528]	; (8012b34 <ip4_reass+0x2b0>)
 8012924:	881b      	ldrh	r3, [r3, #0]
 8012926:	461a      	mov	r2, r3
 8012928:	8c3b      	ldrh	r3, [r7, #32]
 801292a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801292c:	2b0a      	cmp	r3, #10
 801292e:	f300 812f 	bgt.w	8012b90 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012932:	4b81      	ldr	r3, [pc, #516]	; (8012b38 <ip4_reass+0x2b4>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	633b      	str	r3, [r7, #48]	; 0x30
 8012938:	e015      	b.n	8012966 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801293c:	695a      	ldr	r2, [r3, #20]
 801293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012940:	68db      	ldr	r3, [r3, #12]
 8012942:	429a      	cmp	r2, r3
 8012944:	d10c      	bne.n	8012960 <ip4_reass+0xdc>
 8012946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012948:	699a      	ldr	r2, [r3, #24]
 801294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801294c:	691b      	ldr	r3, [r3, #16]
 801294e:	429a      	cmp	r2, r3
 8012950:	d106      	bne.n	8012960 <ip4_reass+0xdc>
 8012952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012954:	899a      	ldrh	r2, [r3, #12]
 8012956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012958:	889b      	ldrh	r3, [r3, #4]
 801295a:	b29b      	uxth	r3, r3
 801295c:	429a      	cmp	r2, r3
 801295e:	d006      	beq.n	801296e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	633b      	str	r3, [r7, #48]	; 0x30
 8012966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012968:	2b00      	cmp	r3, #0
 801296a:	d1e6      	bne.n	801293a <ip4_reass+0xb6>
 801296c:	e000      	b.n	8012970 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801296e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012972:	2b00      	cmp	r3, #0
 8012974:	d109      	bne.n	801298a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012976:	8c3b      	ldrh	r3, [r7, #32]
 8012978:	4619      	mov	r1, r3
 801297a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801297c:	f7ff fdb0 	bl	80124e0 <ip_reass_enqueue_new_datagram>
 8012980:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012984:	2b00      	cmp	r3, #0
 8012986:	d11c      	bne.n	80129c2 <ip4_reass+0x13e>
      goto nullreturn;
 8012988:	e105      	b.n	8012b96 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801298c:	88db      	ldrh	r3, [r3, #6]
 801298e:	b29b      	uxth	r3, r3
 8012990:	4618      	mov	r0, r3
 8012992:	f7f6 f9b7 	bl	8008d04 <lwip_htons>
 8012996:	4603      	mov	r3, r0
 8012998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801299c:	2b00      	cmp	r3, #0
 801299e:	d110      	bne.n	80129c2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80129a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a2:	89db      	ldrh	r3, [r3, #14]
 80129a4:	4618      	mov	r0, r3
 80129a6:	f7f6 f9ad 	bl	8008d04 <lwip_htons>
 80129aa:	4603      	mov	r3, r0
 80129ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d006      	beq.n	80129c2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80129b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b6:	3308      	adds	r3, #8
 80129b8:	2214      	movs	r2, #20
 80129ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80129bc:	4618      	mov	r0, r3
 80129be:	f002 fa26 	bl	8014e0e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80129c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c4:	88db      	ldrh	r3, [r3, #6]
 80129c6:	b29b      	uxth	r3, r3
 80129c8:	f003 0320 	and.w	r3, r3, #32
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	bf0c      	ite	eq
 80129d0:	2301      	moveq	r3, #1
 80129d2:	2300      	movne	r3, #0
 80129d4:	b2db      	uxtb	r3, r3
 80129d6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80129d8:	69fb      	ldr	r3, [r7, #28]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d00e      	beq.n	80129fc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80129de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80129e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129e2:	4413      	add	r3, r2
 80129e4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80129e6:	8b7a      	ldrh	r2, [r7, #26]
 80129e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80129ea:	429a      	cmp	r2, r3
 80129ec:	f0c0 80a0 	bcc.w	8012b30 <ip4_reass+0x2ac>
 80129f0:	8b7b      	ldrh	r3, [r7, #26]
 80129f2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80129f6:	4293      	cmp	r3, r2
 80129f8:	f200 809a 	bhi.w	8012b30 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80129fc:	69fa      	ldr	r2, [r7, #28]
 80129fe:	6879      	ldr	r1, [r7, #4]
 8012a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a02:	f7ff fdd5 	bl	80125b0 <ip_reass_chain_frag_into_datagram_and_validate>
 8012a06:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a0e:	f000 809b 	beq.w	8012b48 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012a12:	4b48      	ldr	r3, [pc, #288]	; (8012b34 <ip4_reass+0x2b0>)
 8012a14:	881a      	ldrh	r2, [r3, #0]
 8012a16:	8c3b      	ldrh	r3, [r7, #32]
 8012a18:	4413      	add	r3, r2
 8012a1a:	b29a      	uxth	r2, r3
 8012a1c:	4b45      	ldr	r3, [pc, #276]	; (8012b34 <ip4_reass+0x2b0>)
 8012a1e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012a20:	69fb      	ldr	r3, [r7, #28]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d00d      	beq.n	8012a42 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012a26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012a28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a2a:	4413      	add	r3, r2
 8012a2c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a30:	8a7a      	ldrh	r2, [r7, #18]
 8012a32:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a36:	7f9b      	ldrb	r3, [r3, #30]
 8012a38:	f043 0301 	orr.w	r3, r3, #1
 8012a3c:	b2da      	uxtb	r2, r3
 8012a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a40:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	2b01      	cmp	r3, #1
 8012a46:	d171      	bne.n	8012b2c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a4a:	8b9b      	ldrh	r3, [r3, #28]
 8012a4c:	3314      	adds	r3, #20
 8012a4e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a52:	685b      	ldr	r3, [r3, #4]
 8012a54:	685b      	ldr	r3, [r3, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a5c:	685b      	ldr	r3, [r3, #4]
 8012a5e:	685b      	ldr	r3, [r3, #4]
 8012a60:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a64:	3308      	adds	r3, #8
 8012a66:	2214      	movs	r2, #20
 8012a68:	4619      	mov	r1, r3
 8012a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a6c:	f002 f9cf 	bl	8014e0e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012a70:	8a3b      	ldrh	r3, [r7, #16]
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7f6 f946 	bl	8008d04 <lwip_htons>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	461a      	mov	r2, r3
 8012a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a7e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a82:	2200      	movs	r2, #0
 8012a84:	719a      	strb	r2, [r3, #6]
 8012a86:	2200      	movs	r2, #0
 8012a88:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	729a      	strb	r2, [r3, #10]
 8012a90:	2200      	movs	r2, #0
 8012a92:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a96:	685b      	ldr	r3, [r3, #4]
 8012a98:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012a9a:	e00d      	b.n	8012ab8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a9e:	685b      	ldr	r3, [r3, #4]
 8012aa0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012aa2:	2114      	movs	r1, #20
 8012aa4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012aa6:	f7f7 fbff 	bl	800a2a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012aaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012aac:	6878      	ldr	r0, [r7, #4]
 8012aae:	f7f7 fd43 	bl	800a538 <pbuf_cat>
      r = iprh->next_pbuf;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d1ee      	bne.n	8012a9c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012abe:	4b1e      	ldr	r3, [pc, #120]	; (8012b38 <ip4_reass+0x2b4>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d102      	bne.n	8012ace <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012acc:	e010      	b.n	8012af0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012ace:	4b1a      	ldr	r3, [pc, #104]	; (8012b38 <ip4_reass+0x2b4>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012ad4:	e007      	b.n	8012ae6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d006      	beq.n	8012aee <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d1f4      	bne.n	8012ad6 <ip4_reass+0x252>
 8012aec:	e000      	b.n	8012af0 <ip4_reass+0x26c>
          break;
 8012aee:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012af2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012af4:	f7ff fd2e 	bl	8012554 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f7f7 fce3 	bl	800a4c4 <pbuf_clen>
 8012afe:	4603      	mov	r3, r0
 8012b00:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012b02:	4b0c      	ldr	r3, [pc, #48]	; (8012b34 <ip4_reass+0x2b0>)
 8012b04:	881b      	ldrh	r3, [r3, #0]
 8012b06:	8c3a      	ldrh	r2, [r7, #32]
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	d906      	bls.n	8012b1a <ip4_reass+0x296>
 8012b0c:	4b0b      	ldr	r3, [pc, #44]	; (8012b3c <ip4_reass+0x2b8>)
 8012b0e:	f240 229b 	movw	r2, #667	; 0x29b
 8012b12:	490b      	ldr	r1, [pc, #44]	; (8012b40 <ip4_reass+0x2bc>)
 8012b14:	480b      	ldr	r0, [pc, #44]	; (8012b44 <ip4_reass+0x2c0>)
 8012b16:	f002 f817 	bl	8014b48 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012b1a:	4b06      	ldr	r3, [pc, #24]	; (8012b34 <ip4_reass+0x2b0>)
 8012b1c:	881a      	ldrh	r2, [r3, #0]
 8012b1e:	8c3b      	ldrh	r3, [r7, #32]
 8012b20:	1ad3      	subs	r3, r2, r3
 8012b22:	b29a      	uxth	r2, r3
 8012b24:	4b03      	ldr	r3, [pc, #12]	; (8012b34 <ip4_reass+0x2b0>)
 8012b26:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	e038      	b.n	8012b9e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	e036      	b.n	8012b9e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012b30:	bf00      	nop
 8012b32:	e00a      	b.n	8012b4a <ip4_reass+0x2c6>
 8012b34:	2000e5f8 	.word	0x2000e5f8
 8012b38:	2000e5f4 	.word	0x2000e5f4
 8012b3c:	080183d8 	.word	0x080183d8
 8012b40:	08018548 	.word	0x08018548
 8012b44:	08018420 	.word	0x08018420
    goto nullreturn_ipr;
 8012b48:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d106      	bne.n	8012b5e <ip4_reass+0x2da>
 8012b50:	4b15      	ldr	r3, [pc, #84]	; (8012ba8 <ip4_reass+0x324>)
 8012b52:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012b56:	4915      	ldr	r1, [pc, #84]	; (8012bac <ip4_reass+0x328>)
 8012b58:	4815      	ldr	r0, [pc, #84]	; (8012bb0 <ip4_reass+0x32c>)
 8012b5a:	f001 fff5 	bl	8014b48 <iprintf>
  if (ipr->p == NULL) {
 8012b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b60:	685b      	ldr	r3, [r3, #4]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d116      	bne.n	8012b94 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012b66:	4b13      	ldr	r3, [pc, #76]	; (8012bb4 <ip4_reass+0x330>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	d006      	beq.n	8012b7e <ip4_reass+0x2fa>
 8012b70:	4b0d      	ldr	r3, [pc, #52]	; (8012ba8 <ip4_reass+0x324>)
 8012b72:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012b76:	4910      	ldr	r1, [pc, #64]	; (8012bb8 <ip4_reass+0x334>)
 8012b78:	480d      	ldr	r0, [pc, #52]	; (8012bb0 <ip4_reass+0x32c>)
 8012b7a:	f001 ffe5 	bl	8014b48 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012b7e:	2100      	movs	r1, #0
 8012b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b82:	f7ff fce7 	bl	8012554 <ip_reass_dequeue_datagram>
 8012b86:	e006      	b.n	8012b96 <ip4_reass+0x312>
    goto nullreturn;
 8012b88:	bf00      	nop
 8012b8a:	e004      	b.n	8012b96 <ip4_reass+0x312>
    goto nullreturn;
 8012b8c:	bf00      	nop
 8012b8e:	e002      	b.n	8012b96 <ip4_reass+0x312>
      goto nullreturn;
 8012b90:	bf00      	nop
 8012b92:	e000      	b.n	8012b96 <ip4_reass+0x312>
  }

nullreturn:
 8012b94:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f7f7 fc0c 	bl	800a3b4 <pbuf_free>
  return NULL;
 8012b9c:	2300      	movs	r3, #0
}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3738      	adds	r7, #56	; 0x38
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	080183d8 	.word	0x080183d8
 8012bac:	08018564 	.word	0x08018564
 8012bb0:	08018420 	.word	0x08018420
 8012bb4:	2000e5f4 	.word	0x2000e5f4
 8012bb8:	08018570 	.word	0x08018570

08012bbc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012bc0:	2004      	movs	r0, #4
 8012bc2:	f7f6 fd15 	bl	80095f0 <memp_malloc>
 8012bc6:	4603      	mov	r3, r0
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	bd80      	pop	{r7, pc}

08012bcc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b082      	sub	sp, #8
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d106      	bne.n	8012be8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012bda:	4b07      	ldr	r3, [pc, #28]	; (8012bf8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012bdc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012be0:	4906      	ldr	r1, [pc, #24]	; (8012bfc <ip_frag_free_pbuf_custom_ref+0x30>)
 8012be2:	4807      	ldr	r0, [pc, #28]	; (8012c00 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012be4:	f001 ffb0 	bl	8014b48 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012be8:	6879      	ldr	r1, [r7, #4]
 8012bea:	2004      	movs	r0, #4
 8012bec:	f7f6 fd70 	bl	80096d0 <memp_free>
}
 8012bf0:	bf00      	nop
 8012bf2:	3708      	adds	r7, #8
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}
 8012bf8:	080183d8 	.word	0x080183d8
 8012bfc:	08018590 	.word	0x08018590
 8012c00:	08018420 	.word	0x08018420

08012c04 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b084      	sub	sp, #16
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d106      	bne.n	8012c24 <ipfrag_free_pbuf_custom+0x20>
 8012c16:	4b11      	ldr	r3, [pc, #68]	; (8012c5c <ipfrag_free_pbuf_custom+0x58>)
 8012c18:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012c1c:	4910      	ldr	r1, [pc, #64]	; (8012c60 <ipfrag_free_pbuf_custom+0x5c>)
 8012c1e:	4811      	ldr	r0, [pc, #68]	; (8012c64 <ipfrag_free_pbuf_custom+0x60>)
 8012c20:	f001 ff92 	bl	8014b48 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012c24:	68fa      	ldr	r2, [r7, #12]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d006      	beq.n	8012c3a <ipfrag_free_pbuf_custom+0x36>
 8012c2c:	4b0b      	ldr	r3, [pc, #44]	; (8012c5c <ipfrag_free_pbuf_custom+0x58>)
 8012c2e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012c32:	490d      	ldr	r1, [pc, #52]	; (8012c68 <ipfrag_free_pbuf_custom+0x64>)
 8012c34:	480b      	ldr	r0, [pc, #44]	; (8012c64 <ipfrag_free_pbuf_custom+0x60>)
 8012c36:	f001 ff87 	bl	8014b48 <iprintf>
  if (pcr->original != NULL) {
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	695b      	ldr	r3, [r3, #20]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d004      	beq.n	8012c4c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	695b      	ldr	r3, [r3, #20]
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7f7 fbb4 	bl	800a3b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012c4c:	68f8      	ldr	r0, [r7, #12]
 8012c4e:	f7ff ffbd 	bl	8012bcc <ip_frag_free_pbuf_custom_ref>
}
 8012c52:	bf00      	nop
 8012c54:	3710      	adds	r7, #16
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}
 8012c5a:	bf00      	nop
 8012c5c:	080183d8 	.word	0x080183d8
 8012c60:	0801859c 	.word	0x0801859c
 8012c64:	08018420 	.word	0x08018420
 8012c68:	080185a8 	.word	0x080185a8

08012c6c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b094      	sub	sp, #80	; 0x50
 8012c70:	af02      	add	r7, sp, #8
 8012c72:	60f8      	str	r0, [r7, #12]
 8012c74:	60b9      	str	r1, [r7, #8]
 8012c76:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012c82:	3b14      	subs	r3, #20
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	da00      	bge.n	8012c8a <ip4_frag+0x1e>
 8012c88:	3307      	adds	r3, #7
 8012c8a:	10db      	asrs	r3, r3, #3
 8012c8c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012c8e:	2314      	movs	r3, #20
 8012c90:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c9a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	f003 030f 	and.w	r3, r3, #15
 8012ca4:	b2db      	uxtb	r3, r3
 8012ca6:	009b      	lsls	r3, r3, #2
 8012ca8:	b2db      	uxtb	r3, r3
 8012caa:	2b14      	cmp	r3, #20
 8012cac:	d002      	beq.n	8012cb4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012cae:	f06f 0305 	mvn.w	r3, #5
 8012cb2:	e110      	b.n	8012ed6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	895b      	ldrh	r3, [r3, #10]
 8012cb8:	2b13      	cmp	r3, #19
 8012cba:	d809      	bhi.n	8012cd0 <ip4_frag+0x64>
 8012cbc:	4b88      	ldr	r3, [pc, #544]	; (8012ee0 <ip4_frag+0x274>)
 8012cbe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012cc2:	4988      	ldr	r1, [pc, #544]	; (8012ee4 <ip4_frag+0x278>)
 8012cc4:	4888      	ldr	r0, [pc, #544]	; (8012ee8 <ip4_frag+0x27c>)
 8012cc6:	f001 ff3f 	bl	8014b48 <iprintf>
 8012cca:	f06f 0305 	mvn.w	r3, #5
 8012cce:	e102      	b.n	8012ed6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cd2:	88db      	ldrh	r3, [r3, #6]
 8012cd4:	b29b      	uxth	r3, r3
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f7f6 f814 	bl	8008d04 <lwip_htons>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012ce0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ce2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012ce6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012cea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012cf0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	891b      	ldrh	r3, [r3, #8]
 8012cf6:	3b14      	subs	r3, #20
 8012cf8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012cfc:	e0e1      	b.n	8012ec2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012cfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012d00:	00db      	lsls	r3, r3, #3
 8012d02:	b29b      	uxth	r3, r3
 8012d04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d08:	4293      	cmp	r3, r2
 8012d0a:	bf28      	it	cs
 8012d0c:	4613      	movcs	r3, r2
 8012d0e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012d10:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d14:	2114      	movs	r1, #20
 8012d16:	200e      	movs	r0, #14
 8012d18:	f7f7 f868 	bl	8009dec <pbuf_alloc>
 8012d1c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	f000 80d5 	beq.w	8012ed0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d28:	895b      	ldrh	r3, [r3, #10]
 8012d2a:	2b13      	cmp	r3, #19
 8012d2c:	d806      	bhi.n	8012d3c <ip4_frag+0xd0>
 8012d2e:	4b6c      	ldr	r3, [pc, #432]	; (8012ee0 <ip4_frag+0x274>)
 8012d30:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012d34:	496d      	ldr	r1, [pc, #436]	; (8012eec <ip4_frag+0x280>)
 8012d36:	486c      	ldr	r0, [pc, #432]	; (8012ee8 <ip4_frag+0x27c>)
 8012d38:	f001 ff06 	bl	8014b48 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	2214      	movs	r2, #20
 8012d42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012d44:	4618      	mov	r0, r3
 8012d46:	f002 f862 	bl	8014e0e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4c:	685b      	ldr	r3, [r3, #4]
 8012d4e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012d50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012d52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012d56:	e064      	b.n	8012e22 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	895a      	ldrh	r2, [r3, #10]
 8012d5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012d5e:	1ad3      	subs	r3, r2, r3
 8012d60:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	895b      	ldrh	r3, [r3, #10]
 8012d66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d906      	bls.n	8012d7a <ip4_frag+0x10e>
 8012d6c:	4b5c      	ldr	r3, [pc, #368]	; (8012ee0 <ip4_frag+0x274>)
 8012d6e:	f240 322d 	movw	r2, #813	; 0x32d
 8012d72:	495f      	ldr	r1, [pc, #380]	; (8012ef0 <ip4_frag+0x284>)
 8012d74:	485c      	ldr	r0, [pc, #368]	; (8012ee8 <ip4_frag+0x27c>)
 8012d76:	f001 fee7 	bl	8014b48 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012d7a:	8bfa      	ldrh	r2, [r7, #30]
 8012d7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012d80:	4293      	cmp	r3, r2
 8012d82:	bf28      	it	cs
 8012d84:	4613      	movcs	r3, r2
 8012d86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012d8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d105      	bne.n	8012d9e <ip4_frag+0x132>
        poff = 0;
 8012d92:	2300      	movs	r3, #0
 8012d94:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	60fb      	str	r3, [r7, #12]
        continue;
 8012d9c:	e041      	b.n	8012e22 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012d9e:	f7ff ff0d 	bl	8012bbc <ip_frag_alloc_pbuf_custom_ref>
 8012da2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012da4:	69bb      	ldr	r3, [r7, #24]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d103      	bne.n	8012db2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012daa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012dac:	f7f7 fb02 	bl	800a3b4 <pbuf_free>
        goto memerr;
 8012db0:	e08f      	b.n	8012ed2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012db2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012db8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012dba:	4413      	add	r3, r2
 8012dbc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012dc0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012dc4:	9201      	str	r2, [sp, #4]
 8012dc6:	9300      	str	r3, [sp, #0]
 8012dc8:	4603      	mov	r3, r0
 8012dca:	2241      	movs	r2, #65	; 0x41
 8012dcc:	2000      	movs	r0, #0
 8012dce:	f7f7 f937 	bl	800a040 <pbuf_alloced_custom>
 8012dd2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d106      	bne.n	8012de8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012dda:	69b8      	ldr	r0, [r7, #24]
 8012ddc:	f7ff fef6 	bl	8012bcc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012de0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012de2:	f7f7 fae7 	bl	800a3b4 <pbuf_free>
        goto memerr;
 8012de6:	e074      	b.n	8012ed2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012de8:	68f8      	ldr	r0, [r7, #12]
 8012dea:	f7f7 fb83 	bl	800a4f4 <pbuf_ref>
      pcr->original = p;
 8012dee:	69bb      	ldr	r3, [r7, #24]
 8012df0:	68fa      	ldr	r2, [r7, #12]
 8012df2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	4a3f      	ldr	r2, [pc, #252]	; (8012ef4 <ip4_frag+0x288>)
 8012df8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012dfa:	6979      	ldr	r1, [r7, #20]
 8012dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012dfe:	f7f7 fb9b 	bl	800a538 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012e02:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012e06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012e0a:	1ad3      	subs	r3, r2, r3
 8012e0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012e10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d004      	beq.n	8012e22 <ip4_frag+0x1b6>
        poff = 0;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012e22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d196      	bne.n	8012d58 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012e2a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012e2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012e30:	4413      	add	r3, r2
 8012e32:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012e38:	f1a3 0213 	sub.w	r2, r3, #19
 8012e3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e40:	429a      	cmp	r2, r3
 8012e42:	bfcc      	ite	gt
 8012e44:	2301      	movgt	r3, #1
 8012e46:	2300      	movle	r3, #0
 8012e48:	b2db      	uxtb	r3, r3
 8012e4a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012e4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012e50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012e54:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012e56:	6a3b      	ldr	r3, [r7, #32]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d002      	beq.n	8012e62 <ip4_frag+0x1f6>
 8012e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d003      	beq.n	8012e6a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012e62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012e68:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012e6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7f5 ff49 	bl	8008d04 <lwip_htons>
 8012e72:	4603      	mov	r3, r0
 8012e74:	461a      	mov	r2, r3
 8012e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e78:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012e7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012e7c:	3314      	adds	r3, #20
 8012e7e:	b29b      	uxth	r3, r3
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7f5 ff3f 	bl	8008d04 <lwip_htons>
 8012e86:	4603      	mov	r3, r0
 8012e88:	461a      	mov	r2, r3
 8012e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e8c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e90:	2200      	movs	r2, #0
 8012e92:	729a      	strb	r2, [r3, #10]
 8012e94:	2200      	movs	r2, #0
 8012e96:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	695b      	ldr	r3, [r3, #20]
 8012e9c:	687a      	ldr	r2, [r7, #4]
 8012e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ea0:	68b8      	ldr	r0, [r7, #8]
 8012ea2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012ea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ea6:	f7f7 fa85 	bl	800a3b4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012eaa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012eae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012eb0:	1ad3      	subs	r3, r2, r3
 8012eb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012eb6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012eba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012ebc:	4413      	add	r3, r2
 8012ebe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8012ec2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	f47f af19 	bne.w	8012cfe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	e002      	b.n	8012ed6 <ip4_frag+0x26a>
      goto memerr;
 8012ed0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	3748      	adds	r7, #72	; 0x48
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}
 8012ede:	bf00      	nop
 8012ee0:	080183d8 	.word	0x080183d8
 8012ee4:	080185b4 	.word	0x080185b4
 8012ee8:	08018420 	.word	0x08018420
 8012eec:	080185d0 	.word	0x080185d0
 8012ef0:	080185f0 	.word	0x080185f0
 8012ef4:	08012c05 	.word	0x08012c05

08012ef8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b086      	sub	sp, #24
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
 8012f00:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012f02:	230e      	movs	r3, #14
 8012f04:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	895b      	ldrh	r3, [r3, #10]
 8012f0a:	2b0e      	cmp	r3, #14
 8012f0c:	d96e      	bls.n	8012fec <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	7bdb      	ldrb	r3, [r3, #15]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d106      	bne.n	8012f24 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f1c:	3301      	adds	r3, #1
 8012f1e:	b2da      	uxtb	r2, r3
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	685b      	ldr	r3, [r3, #4]
 8012f28:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	7b1a      	ldrb	r2, [r3, #12]
 8012f2e:	7b5b      	ldrb	r3, [r3, #13]
 8012f30:	021b      	lsls	r3, r3, #8
 8012f32:	4313      	orrs	r3, r2
 8012f34:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	f003 0301 	and.w	r3, r3, #1
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d023      	beq.n	8012f8a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012f42:	693b      	ldr	r3, [r7, #16]
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	2b01      	cmp	r3, #1
 8012f48:	d10f      	bne.n	8012f6a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	785b      	ldrb	r3, [r3, #1]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d11b      	bne.n	8012f8a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012f56:	2b5e      	cmp	r3, #94	; 0x5e
 8012f58:	d117      	bne.n	8012f8a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	7b5b      	ldrb	r3, [r3, #13]
 8012f5e:	f043 0310 	orr.w	r3, r3, #16
 8012f62:	b2da      	uxtb	r2, r3
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	735a      	strb	r2, [r3, #13]
 8012f68:	e00f      	b.n	8012f8a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012f6a:	693b      	ldr	r3, [r7, #16]
 8012f6c:	2206      	movs	r2, #6
 8012f6e:	4928      	ldr	r1, [pc, #160]	; (8013010 <ethernet_input+0x118>)
 8012f70:	4618      	mov	r0, r3
 8012f72:	f001 fe9d 	bl	8014cb0 <memcmp>
 8012f76:	4603      	mov	r3, r0
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d106      	bne.n	8012f8a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	7b5b      	ldrb	r3, [r3, #13]
 8012f80:	f043 0308 	orr.w	r3, r3, #8
 8012f84:	b2da      	uxtb	r2, r3
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012f8a:	89fb      	ldrh	r3, [r7, #14]
 8012f8c:	2b08      	cmp	r3, #8
 8012f8e:	d003      	beq.n	8012f98 <ethernet_input+0xa0>
 8012f90:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012f94:	d014      	beq.n	8012fc0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012f96:	e032      	b.n	8012ffe <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f9e:	f003 0308 	and.w	r3, r3, #8
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d024      	beq.n	8012ff0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012fa6:	8afb      	ldrh	r3, [r7, #22]
 8012fa8:	4619      	mov	r1, r3
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f7f7 f97c 	bl	800a2a8 <pbuf_remove_header>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d11e      	bne.n	8012ff4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012fb6:	6839      	ldr	r1, [r7, #0]
 8012fb8:	6878      	ldr	r0, [r7, #4]
 8012fba:	f7fe ff2b 	bl	8011e14 <ip4_input>
      break;
 8012fbe:	e013      	b.n	8012fe8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012fc6:	f003 0308 	and.w	r3, r3, #8
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d014      	beq.n	8012ff8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012fce:	8afb      	ldrh	r3, [r7, #22]
 8012fd0:	4619      	mov	r1, r3
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f7f7 f968 	bl	800a2a8 <pbuf_remove_header>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d10e      	bne.n	8012ffc <ethernet_input+0x104>
        etharp_input(p, netif);
 8012fde:	6839      	ldr	r1, [r7, #0]
 8012fe0:	6878      	ldr	r0, [r7, #4]
 8012fe2:	f7fe f8cb 	bl	801117c <etharp_input>
      break;
 8012fe6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012fe8:	2300      	movs	r3, #0
 8012fea:	e00c      	b.n	8013006 <ethernet_input+0x10e>
    goto free_and_return;
 8012fec:	bf00      	nop
 8012fee:	e006      	b.n	8012ffe <ethernet_input+0x106>
        goto free_and_return;
 8012ff0:	bf00      	nop
 8012ff2:	e004      	b.n	8012ffe <ethernet_input+0x106>
        goto free_and_return;
 8012ff4:	bf00      	nop
 8012ff6:	e002      	b.n	8012ffe <ethernet_input+0x106>
        goto free_and_return;
 8012ff8:	bf00      	nop
 8012ffa:	e000      	b.n	8012ffe <ethernet_input+0x106>
        goto free_and_return;
 8012ffc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f7f7 f9d8 	bl	800a3b4 <pbuf_free>
  return ERR_OK;
 8013004:	2300      	movs	r3, #0
}
 8013006:	4618      	mov	r0, r3
 8013008:	3718      	adds	r7, #24
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}
 801300e:	bf00      	nop
 8013010:	08018b34 	.word	0x08018b34

08013014 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013014:	b580      	push	{r7, lr}
 8013016:	b086      	sub	sp, #24
 8013018:	af00      	add	r7, sp, #0
 801301a:	60f8      	str	r0, [r7, #12]
 801301c:	60b9      	str	r1, [r7, #8]
 801301e:	607a      	str	r2, [r7, #4]
 8013020:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013022:	8c3b      	ldrh	r3, [r7, #32]
 8013024:	4618      	mov	r0, r3
 8013026:	f7f5 fe6d 	bl	8008d04 <lwip_htons>
 801302a:	4603      	mov	r3, r0
 801302c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801302e:	210e      	movs	r1, #14
 8013030:	68b8      	ldr	r0, [r7, #8]
 8013032:	f7f7 f929 	bl	800a288 <pbuf_add_header>
 8013036:	4603      	mov	r3, r0
 8013038:	2b00      	cmp	r3, #0
 801303a:	d125      	bne.n	8013088 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801303c:	68bb      	ldr	r3, [r7, #8]
 801303e:	685b      	ldr	r3, [r3, #4]
 8013040:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013042:	693b      	ldr	r3, [r7, #16]
 8013044:	8afa      	ldrh	r2, [r7, #22]
 8013046:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	2206      	movs	r2, #6
 801304c:	6839      	ldr	r1, [r7, #0]
 801304e:	4618      	mov	r0, r3
 8013050:	f001 fedd 	bl	8014e0e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	3306      	adds	r3, #6
 8013058:	2206      	movs	r2, #6
 801305a:	6879      	ldr	r1, [r7, #4]
 801305c:	4618      	mov	r0, r3
 801305e:	f001 fed6 	bl	8014e0e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013068:	2b06      	cmp	r3, #6
 801306a:	d006      	beq.n	801307a <ethernet_output+0x66>
 801306c:	4b0a      	ldr	r3, [pc, #40]	; (8013098 <ethernet_output+0x84>)
 801306e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013072:	490a      	ldr	r1, [pc, #40]	; (801309c <ethernet_output+0x88>)
 8013074:	480a      	ldr	r0, [pc, #40]	; (80130a0 <ethernet_output+0x8c>)
 8013076:	f001 fd67 	bl	8014b48 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	699b      	ldr	r3, [r3, #24]
 801307e:	68b9      	ldr	r1, [r7, #8]
 8013080:	68f8      	ldr	r0, [r7, #12]
 8013082:	4798      	blx	r3
 8013084:	4603      	mov	r3, r0
 8013086:	e002      	b.n	801308e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013088:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801308a:	f06f 0301 	mvn.w	r3, #1
}
 801308e:	4618      	mov	r0, r3
 8013090:	3718      	adds	r7, #24
 8013092:	46bd      	mov	sp, r7
 8013094:	bd80      	pop	{r7, pc}
 8013096:	bf00      	nop
 8013098:	08018600 	.word	0x08018600
 801309c:	08018638 	.word	0x08018638
 80130a0:	0801866c 	.word	0x0801866c

080130a4 <SystemClock_Config>:
  }
}
#endif
#ifdef USE_L6470
void SystemClock_Config(void)
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b094      	sub	sp, #80	; 0x50
 80130a8:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 80130aa:	2300      	movs	r3, #0
 80130ac:	60bb      	str	r3, [r7, #8]
 80130ae:	4b23      	ldr	r3, [pc, #140]	; (801313c <SystemClock_Config+0x98>)
 80130b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130b2:	4a22      	ldr	r2, [pc, #136]	; (801313c <SystemClock_Config+0x98>)
 80130b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80130b8:	6413      	str	r3, [r2, #64]	; 0x40
 80130ba:	4b20      	ldr	r3, [pc, #128]	; (801313c <SystemClock_Config+0x98>)
 80130bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80130c2:	60bb      	str	r3, [r7, #8]
 80130c4:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80130c6:	2300      	movs	r3, #0
 80130c8:	607b      	str	r3, [r7, #4]
 80130ca:	4b1d      	ldr	r3, [pc, #116]	; (8013140 <SystemClock_Config+0x9c>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	4a1c      	ldr	r2, [pc, #112]	; (8013140 <SystemClock_Config+0x9c>)
 80130d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80130d4:	6013      	str	r3, [r2, #0]
 80130d6:	4b1a      	ldr	r3, [pc, #104]	; (8013140 <SystemClock_Config+0x9c>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80130de:	607b      	str	r3, [r7, #4]
 80130e0:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80130e2:	2302      	movs	r3, #2
 80130e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80130e6:	2301      	movs	r3, #1
 80130e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80130ea:	2310      	movs	r3, #16
 80130ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80130ee:	2302      	movs	r3, #2
 80130f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80130f2:	2300      	movs	r3, #0
 80130f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80130f6:	2310      	movs	r3, #16
 80130f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80130fa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80130fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8013100:	2304      	movs	r3, #4
 8013102:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8013104:	2307      	movs	r3, #7
 8013106:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8013108:	f107 0320 	add.w	r3, r7, #32
 801310c:	4618      	mov	r0, r3
 801310e:	f7f3 f947 	bl	80063a0 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 8013112:	2305      	movs	r3, #5
 8013114:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013116:	2302      	movs	r3, #2
 8013118:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801311a:	2300      	movs	r3, #0
 801311c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801311e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013122:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8013124:	2300      	movs	r3, #0
 8013126:	61fb      	str	r3, [r7, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8013128:	f107 030c 	add.w	r3, r7, #12
 801312c:	2102      	movs	r1, #2
 801312e:	4618      	mov	r0, r3
 8013130:	f7f3 fbae 	bl	8006890 <HAL_RCC_ClockConfig>

}
 8013134:	bf00      	nop
 8013136:	3750      	adds	r7, #80	; 0x50
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}
 801313c:	40023800 	.word	0x40023800
 8013140:	40007000 	.word	0x40007000

08013144 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8013148:	4b12      	ldr	r3, [pc, #72]	; (8013194 <MX_I2C1_Init+0x50>)
 801314a:	4a13      	ldr	r2, [pc, #76]	; (8013198 <MX_I2C1_Init+0x54>)
 801314c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 801314e:	4b11      	ldr	r3, [pc, #68]	; (8013194 <MX_I2C1_Init+0x50>)
 8013150:	4a12      	ldr	r2, [pc, #72]	; (801319c <MX_I2C1_Init+0x58>)
 8013152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8013154:	4b0f      	ldr	r3, [pc, #60]	; (8013194 <MX_I2C1_Init+0x50>)
 8013156:	2200      	movs	r2, #0
 8013158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801315a:	4b0e      	ldr	r3, [pc, #56]	; (8013194 <MX_I2C1_Init+0x50>)
 801315c:	2200      	movs	r2, #0
 801315e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013160:	4b0c      	ldr	r3, [pc, #48]	; (8013194 <MX_I2C1_Init+0x50>)
 8013162:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8013166:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013168:	4b0a      	ldr	r3, [pc, #40]	; (8013194 <MX_I2C1_Init+0x50>)
 801316a:	2200      	movs	r2, #0
 801316c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801316e:	4b09      	ldr	r3, [pc, #36]	; (8013194 <MX_I2C1_Init+0x50>)
 8013170:	2200      	movs	r2, #0
 8013172:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013174:	4b07      	ldr	r3, [pc, #28]	; (8013194 <MX_I2C1_Init+0x50>)
 8013176:	2200      	movs	r2, #0
 8013178:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801317a:	4b06      	ldr	r3, [pc, #24]	; (8013194 <MX_I2C1_Init+0x50>)
 801317c:	2200      	movs	r2, #0
 801317e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8013180:	4804      	ldr	r0, [pc, #16]	; (8013194 <MX_I2C1_Init+0x50>)
 8013182:	f7f2 fcab 	bl	8005adc <HAL_I2C_Init>
 8013186:	4603      	mov	r3, r0
 8013188:	2b00      	cmp	r3, #0
 801318a:	d001      	beq.n	8013190 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 801318c:	f000 fbc2 	bl	8013914 <Error_Handler>
  }
}
 8013190:	bf00      	nop
 8013192:	bd80      	pop	{r7, pc}
 8013194:	2000e5fc 	.word	0x2000e5fc
 8013198:	40005400 	.word	0x40005400
 801319c:	000186a0 	.word	0x000186a0

080131a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b08a      	sub	sp, #40	; 0x28
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80131a8:	f107 0314 	add.w	r3, r7, #20
 80131ac:	2200      	movs	r2, #0
 80131ae:	601a      	str	r2, [r3, #0]
 80131b0:	605a      	str	r2, [r3, #4]
 80131b2:	609a      	str	r2, [r3, #8]
 80131b4:	60da      	str	r2, [r3, #12]
 80131b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	4a19      	ldr	r2, [pc, #100]	; (8013224 <HAL_I2C_MspInit+0x84>)
 80131be:	4293      	cmp	r3, r2
 80131c0:	d12c      	bne.n	801321c <HAL_I2C_MspInit+0x7c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80131c2:	2300      	movs	r3, #0
 80131c4:	613b      	str	r3, [r7, #16]
 80131c6:	4b18      	ldr	r3, [pc, #96]	; (8013228 <HAL_I2C_MspInit+0x88>)
 80131c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131ca:	4a17      	ldr	r2, [pc, #92]	; (8013228 <HAL_I2C_MspInit+0x88>)
 80131cc:	f043 0302 	orr.w	r3, r3, #2
 80131d0:	6313      	str	r3, [r2, #48]	; 0x30
 80131d2:	4b15      	ldr	r3, [pc, #84]	; (8013228 <HAL_I2C_MspInit+0x88>)
 80131d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131d6:	f003 0302 	and.w	r3, r3, #2
 80131da:	613b      	str	r3, [r7, #16]
 80131dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 80131de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80131e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80131e4:	2312      	movs	r3, #18
 80131e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80131e8:	2301      	movs	r3, #1
 80131ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80131ec:	2300      	movs	r3, #0
 80131ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80131f0:	2304      	movs	r3, #4
 80131f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OLED_SDA_GPIO_Port, &GPIO_InitStruct);
 80131f4:	f107 0314 	add.w	r3, r7, #20
 80131f8:	4619      	mov	r1, r3
 80131fa:	480c      	ldr	r0, [pc, #48]	; (801322c <HAL_I2C_MspInit+0x8c>)
 80131fc:	f7f2 fa6e 	bl	80056dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8013200:	2300      	movs	r3, #0
 8013202:	60fb      	str	r3, [r7, #12]
 8013204:	4b08      	ldr	r3, [pc, #32]	; (8013228 <HAL_I2C_MspInit+0x88>)
 8013206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013208:	4a07      	ldr	r2, [pc, #28]	; (8013228 <HAL_I2C_MspInit+0x88>)
 801320a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801320e:	6413      	str	r3, [r2, #64]	; 0x40
 8013210:	4b05      	ldr	r3, [pc, #20]	; (8013228 <HAL_I2C_MspInit+0x88>)
 8013212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013218:	60fb      	str	r3, [r7, #12]
 801321a:	68fb      	ldr	r3, [r7, #12]
  }
}
 801321c:	bf00      	nop
 801321e:	3728      	adds	r7, #40	; 0x28
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}
 8013224:	40005400 	.word	0x40005400
 8013228:	40023800 	.word	0x40023800
 801322c:	40020400 	.word	0x40020400

08013230 <main>:
static void MyBusyInterruptHandler(void);
static void MyFlagInterruptHandler(void);
#endif

int main(void)
{
 8013230:	b590      	push	{r4, r7, lr}
 8013232:	b083      	sub	sp, #12
 8013234:	af00      	add	r7, sp, #0
  /* STM32F4xx HAL library initialization */
  HAL_Init();
 8013236:	f7f0 ff15 	bl	8004064 <HAL_Init>
  
  /* Configure the system clock */
  SystemClock_Config();
 801323a:	f7ff ff33 	bl	80130a4 <SystemClock_Config>
  
  /*Initialize pin used for Roplus*/
  Roplus_Pin_Init();
 801323e:	f000 fa81 	bl	8013744 <Roplus_Pin_Init>
  // HAL_GPIO_WritePin(LED_STATUS_PORT,LED_COMM_PIN,GPIO_PIN_SET);
  // HAL_GPIO_WritePin(LED_DIAG_PORT,LED_DIAG1_PIN,GPIO_PIN_RESET);
  // HAL_GPIO_WritePin(LED_DIAG_PORT,LED_DIAG2_PIN,GPIO_PIN_SET);
  
  /*UART initialization, used for debug*/
  MX_USART1_Init();
 8013242:	f001 faa7 	bl	8014794 <MX_USART1_Init>
  Uart_Send("UART OK!\n");
 8013246:	4893      	ldr	r0, [pc, #588]	; (8013494 <main+0x264>)
 8013248:	f001 fb3e 	bl	80148c8 <Uart_Send>
  HAL_Delay(100);
 801324c:	2064      	movs	r0, #100	; 0x64
 801324e:	f7f0 ff7b 	bl	8004148 <HAL_Delay>
//  {
//    HAL_GPIO_TogglePin(LED_STATUS_PORT,LED_RUN_PIN);
//    Uart_Send("UART OK!\n");
//    HAL_Delay(1000);
//  }
  MX_LWIP_Init();
 8013252:	f7f5 f86b 	bl	800832c <MX_LWIP_Init>
  ModbusTCPInit();
 8013256:	f7ef fc19 	bl	8002a8c <ModbusTCPInit>
  Uart_Send("Modbus OK!\n");
 801325a:	488f      	ldr	r0, [pc, #572]	; (8013498 <main+0x268>)
 801325c:	f001 fb34 	bl	80148c8 <Uart_Send>
  HAL_Delay(100);
 8013260:	2064      	movs	r0, #100	; 0x64
 8013262:	f7f0 ff71 	bl	8004148 <HAL_Delay>

//  #ifdef USE_L6470
    /*Initialize the SPI used by the X-NUCLEO-IMH02A1*/

    MX_SPI_Init();
 8013266:	f7ef fb48 	bl	80028fa <MX_SPI_Init>
//    HAL_Delay(100);
    Uart_Send("SPI-L6470 OK!\n");
 801326a:	488c      	ldr	r0, [pc, #560]	; (801349c <main+0x26c>)
 801326c:	f001 fb2c 	bl	80148c8 <Uart_Send>
    HAL_Delay(100);
 8013270:	2064      	movs	r0, #100	; 0x64
 8013272:	f7f0 ff69 	bl	8004148 <HAL_Delay>
    /* X-NUCLEO-IHM02A1 initialization */
    BSP_Init();
 8013276:	f7ef fa1b 	bl	80026b0 <BSP_Init>
    Uart_Send("BSP-L6470 OK!\n");
 801327a:	4889      	ldr	r0, [pc, #548]	; (80134a0 <main+0x270>)
 801327c:	f001 fb24 	bl	80148c8 <Uart_Send>

//  #endif

  /*LED screen initialization*/
  MX_I2C1_Init();
 8013280:	f7ff ff60 	bl	8013144 <MX_I2C1_Init>
  ssd1306_Init();
 8013284:	f000 fe1e 	bl	8013ec4 <ssd1306_Init>
  Uart_Send("LED OK!\n");
 8013288:	4886      	ldr	r0, [pc, #536]	; (80134a4 <main+0x274>)
 801328a:	f001 fb1d 	bl	80148c8 <Uart_Send>
  /*Encoder Init*/
  //MX_TIM2_Init();
  //Uart_Send("TIM OK!\n");

  /*Indicator to show all initialization have been done, if done, turn on the DIAG1 led*/
  HAL_GPIO_WritePin(LED_DIAG_PORT,LED_DIAG1_PIN,GPIO_PIN_SET);
 801328e:	2201      	movs	r2, #1
 8013290:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013294:	4884      	ldr	r0, [pc, #528]	; (80134a8 <main+0x278>)
 8013296:	f7f2 fbd5 	bl	8005a44 <HAL_GPIO_WritePin>

  /*show screen*/
  showscreen();
 801329a:	f000 f929 	bl	80134f0 <showscreen>
  BufferInit((uint8_t *) Rx_Buffer,(uint8_t *) Rx_Buffer_former,"Tian",RX_BUFFERSIZE);
 801329e:	2308      	movs	r3, #8
 80132a0:	4a82      	ldr	r2, [pc, #520]	; (80134ac <main+0x27c>)
 80132a2:	4983      	ldr	r1, [pc, #524]	; (80134b0 <main+0x280>)
 80132a4:	4883      	ldr	r0, [pc, #524]	; (80134b4 <main+0x284>)
 80132a6:	f000 fce5 	bl	8013c74 <BufferInit>
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) Rx_Buffer, RX_BUFFERSIZE);
 80132aa:	2208      	movs	r2, #8
 80132ac:	4981      	ldr	r1, [pc, #516]	; (80134b4 <main+0x284>)
 80132ae:	4882      	ldr	r0, [pc, #520]	; (80134b8 <main+0x288>)
 80132b0:	f7f4 fa0d 	bl	80076ce <HAL_UART_Transmit_IT>
  HAL_Delay(100);
 80132b4:	2064      	movs	r0, #100	; 0x64
 80132b6:	f7f0 ff47 	bl	8004148 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) Rx_Buffer_former, RX_BUFFERSIZE);
 80132ba:	2208      	movs	r2, #8
 80132bc:	497c      	ldr	r1, [pc, #496]	; (80134b0 <main+0x280>)
 80132be:	487e      	ldr	r0, [pc, #504]	; (80134b8 <main+0x288>)
 80132c0:	f7f4 fa05 	bl	80076ce <HAL_UART_Transmit_IT>
  /*execute home process, for L6470 & POWERSTEP respectively*/
  #ifdef USE_L6470
    uint8_t id;
    
    /*Get parameters*/
    MotorParameterDataGlobal = GetMotorParameterInitData();
 80132c4:	f000 fdba 	bl	8013e3c <GetMotorParameterInitData>
 80132c8:	4603      	mov	r3, r0
 80132ca:	4a7c      	ldr	r2, [pc, #496]	; (80134bc <main+0x28c>)
 80132cc:	6013      	str	r3, [r2, #0]
    /*Set Paeameters*/
    for (id = 0; id < EXPBRD_MOUNTED_NR; id++)
 80132ce:	2300      	movs	r3, #0
 80132d0:	71fb      	strb	r3, [r7, #7]
 80132d2:	e01d      	b.n	8013310 <main+0xe0>
      {
        /*Get board handler, 1 board in default*/
        StepperMotorBoardHandle = BSP_GetExpansionBoardHandle(EXPBRD_ID(id));
 80132d4:	79fb      	ldrb	r3, [r7, #7]
 80132d6:	4618      	mov	r0, r3
 80132d8:	f7ef f9a2 	bl	8002620 <EXPBRD_ID>
 80132dc:	4603      	mov	r3, r0
 80132de:	4618      	mov	r0, r3
 80132e0:	f7ef fab6 	bl	8002850 <BSP_GetExpansionBoardHandle>
 80132e4:	4603      	mov	r3, r0
 80132e6:	4a76      	ldr	r2, [pc, #472]	; (80134c0 <main+0x290>)
 80132e8:	6013      	str	r3, [r2, #0]
        MotorParameterDataSingle = MotorParameterDataGlobal+(id*L6470DAISYCHAINSIZE);
 80132ea:	4b74      	ldr	r3, [pc, #464]	; (80134bc <main+0x28c>)
 80132ec:	681a      	ldr	r2, [r3, #0]
 80132ee:	79fb      	ldrb	r3, [r7, #7]
 80132f0:	2158      	movs	r1, #88	; 0x58
 80132f2:	fb01 f303 	mul.w	r3, r1, r3
 80132f6:	4413      	add	r3, r2
 80132f8:	4a72      	ldr	r2, [pc, #456]	; (80134c4 <main+0x294>)
 80132fa:	6013      	str	r3, [r2, #0]
        StepperMotorBoardHandle->Config(MotorParameterDataSingle);
 80132fc:	4b70      	ldr	r3, [pc, #448]	; (80134c0 <main+0x290>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	685b      	ldr	r3, [r3, #4]
 8013302:	4a70      	ldr	r2, [pc, #448]	; (80134c4 <main+0x294>)
 8013304:	6812      	ldr	r2, [r2, #0]
 8013306:	4610      	mov	r0, r2
 8013308:	4798      	blx	r3
    for (id = 0; id < EXPBRD_MOUNTED_NR; id++)
 801330a:	79fb      	ldrb	r3, [r7, #7]
 801330c:	3301      	adds	r3, #1
 801330e:	71fb      	strb	r3, [r7, #7]
 8013310:	79fb      	ldrb	r3, [r7, #7]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d0de      	beq.n	80132d4 <main+0xa4>
      }  
    /*Select 1st board and get handler*/
    board = EXPBRD_ID(0);
 8013316:	2000      	movs	r0, #0
 8013318:	f7ef f982 	bl	8002620 <EXPBRD_ID>
 801331c:	4603      	mov	r3, r0
 801331e:	461a      	mov	r2, r3
 8013320:	4b69      	ldr	r3, [pc, #420]	; (80134c8 <main+0x298>)
 8013322:	701a      	strb	r2, [r3, #0]
    StepperMotorBoardHandle = BSP_GetExpansionBoardHandle(board);
 8013324:	4b68      	ldr	r3, [pc, #416]	; (80134c8 <main+0x298>)
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	4618      	mov	r0, r3
 801332a:	f7ef fa91 	bl	8002850 <BSP_GetExpansionBoardHandle>
 801332e:	4603      	mov	r3, r0
 8013330:	4a63      	ldr	r2, [pc, #396]	; (80134c0 <main+0x290>)
 8013332:	6013      	str	r3, [r2, #0]

    /*DRIVER_0 GRIPPER MOTOR*/
    gripper_motor = L6470_ID(0);
 8013334:	2000      	movs	r0, #0
 8013336:	f7ee fa3f 	bl	80017b8 <L6470_ID>
 801333a:	4603      	mov	r3, r0
 801333c:	461a      	mov	r2, r3
 801333e:	4b63      	ldr	r3, [pc, #396]	; (80134cc <main+0x29c>)
 8013340:	701a      	strb	r2, [r3, #0]
    /*DRIVER_1 TEST MOTOR*/
    test_motor =L6470_ID(1);
 8013342:	2001      	movs	r0, #1
 8013344:	f7ee fa38 	bl	80017b8 <L6470_ID>
 8013348:	4603      	mov	r3, r0
 801334a:	461a      	mov	r2, r3
 801334c:	4b60      	ldr	r3, [pc, #384]	; (80134d0 <main+0x2a0>)
 801334e:	701a      	strb	r2, [r3, #0]

    /*Go Home, Test needed to define the right rotation direction*/
    Motor_Find_Home(gripper_motor,L6470_DIR_REV_ID,Step_s_2_Speed(5000));
 8013350:	4b5e      	ldr	r3, [pc, #376]	; (80134cc <main+0x29c>)
 8013352:	781c      	ldrb	r4, [r3, #0]
 8013354:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80134d4 <main+0x2a4>
 8013358:	f7ed fbac 	bl	8000ab4 <Step_s_2_Speed>
 801335c:	4603      	mov	r3, r0
 801335e:	461a      	mov	r2, r3
 8013360:	2100      	movs	r1, #0
 8013362:	4620      	mov	r0, r4
 8013364:	f000 faf0 	bl	8013948 <Motor_Find_Home>
    /*Can use this function to find to upper position of the motor, orange light should  be on to indicate finish*/
    //Motor_Find_Upper_Position(gripper_motor,L6470_DIR_FWD_ID,Step_s_2_Speed(5000));
    Update_Motor_Pos();
 8013368:	f000 f97a 	bl	8013660 <Update_Motor_Pos>
    //find home, RED led blinking
    Motor_Find_Home(0,BACKWARD,15000); 
    //Motor_Find_Upper_Position(0,FORWARD,10000);
  #endif
    /*DIAG2 LED solid on to indicate initialize compeleted*/
    HAL_GPIO_WritePin(LED_DIAG_PORT,LED_DIAG2_PIN,GPIO_PIN_SET);
 801336c:	2201      	movs	r2, #1
 801336e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013372:	484d      	ldr	r0, [pc, #308]	; (80134a8 <main+0x278>)
 8013374:	f7f2 fb66 	bl	8005a44 <HAL_GPIO_WritePin>
  while(1)
  {
    //Get Modbus data
    MX_LWIP_Process();
 8013378:	f7f5 f918 	bl	80085ac <MX_LWIP_Process>
	  ModbusTCPMain();
 801337c:	f7ef fb98 	bl	8002ab0 <ModbusTCPMain>

    /*STM32 READ BUF:REG_COILS_BUF*/
    /*if REG_COIL_BUF changed, we need to open the valves, and we only compare first 4 bits as we have 4 valves*/
    if(Buffercmp((uint8_t *) REG_COILS_BUF,(uint8_t *)REG_COILS_BUF_FORMER,VALVE_NUM) != 0)
 8013380:	2204      	movs	r2, #4
 8013382:	4955      	ldr	r1, [pc, #340]	; (80134d8 <main+0x2a8>)
 8013384:	4855      	ldr	r0, [pc, #340]	; (80134dc <main+0x2ac>)
 8013386:	f000 fc53 	bl	8013c30 <Buffercmp>
 801338a:	4603      	mov	r3, r0
 801338c:	2b00      	cmp	r3, #0
 801338e:	d05c      	beq.n	801344a <main+0x21a>
    {
      //open the valves accordingly
      for(int i=0; i<VALVE_NUM; i++)
 8013390:	2300      	movs	r3, #0
 8013392:	603b      	str	r3, [r7, #0]
 8013394:	e056      	b.n	8013444 <main+0x214>
      {
        /*if currently the valve is close, we open it*/
        if(REG_COILS_BUF[i]==1  && HAL_GPIO_ReadPin(VALVE_PORT,GPIO_VALVES[i])==GPIO_PIN_RESET && REG_COILS_BUF_FORMER[i]==0)
 8013396:	4a51      	ldr	r2, [pc, #324]	; (80134dc <main+0x2ac>)
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	4413      	add	r3, r2
 801339c:	781b      	ldrb	r3, [r3, #0]
 801339e:	2b01      	cmp	r3, #1
 80133a0:	d123      	bne.n	80133ea <main+0x1ba>
 80133a2:	4a4f      	ldr	r2, [pc, #316]	; (80134e0 <main+0x2b0>)
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133aa:	4619      	mov	r1, r3
 80133ac:	484d      	ldr	r0, [pc, #308]	; (80134e4 <main+0x2b4>)
 80133ae:	f7f2 fb31 	bl	8005a14 <HAL_GPIO_ReadPin>
 80133b2:	4603      	mov	r3, r0
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d118      	bne.n	80133ea <main+0x1ba>
 80133b8:	4a47      	ldr	r2, [pc, #284]	; (80134d8 <main+0x2a8>)
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	4413      	add	r3, r2
 80133be:	781b      	ldrb	r3, [r3, #0]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d112      	bne.n	80133ea <main+0x1ba>
        {
          HAL_GPIO_WritePin(VALVE_PORT,GPIO_VALVES[i],GPIO_PIN_SET);
 80133c4:	4a46      	ldr	r2, [pc, #280]	; (80134e0 <main+0x2b0>)
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133cc:	2201      	movs	r2, #1
 80133ce:	4619      	mov	r1, r3
 80133d0:	4844      	ldr	r0, [pc, #272]	; (80134e4 <main+0x2b4>)
 80133d2:	f7f2 fb37 	bl	8005a44 <HAL_GPIO_WritePin>
          /*Renew the former buffer*/
          REG_COILS_BUF_FORMER[i]=REG_COILS_BUF[i];
 80133d6:	4a41      	ldr	r2, [pc, #260]	; (80134dc <main+0x2ac>)
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	4413      	add	r3, r2
 80133dc:	7819      	ldrb	r1, [r3, #0]
 80133de:	4a3e      	ldr	r2, [pc, #248]	; (80134d8 <main+0x2a8>)
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	4413      	add	r3, r2
 80133e4:	460a      	mov	r2, r1
 80133e6:	701a      	strb	r2, [r3, #0]
          continue;
 80133e8:	e029      	b.n	801343e <main+0x20e>
        }
        /*if currently the valve is open, we close it*/
        if(REG_COILS_BUF[i]==0 && HAL_GPIO_ReadPin(VALVE_PORT,GPIO_VALVES[i])==GPIO_PIN_SET && REG_COILS_BUF_FORMER[i]==1 )
 80133ea:	4a3c      	ldr	r2, [pc, #240]	; (80134dc <main+0x2ac>)
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	4413      	add	r3, r2
 80133f0:	781b      	ldrb	r3, [r3, #0]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d123      	bne.n	801343e <main+0x20e>
 80133f6:	4a3a      	ldr	r2, [pc, #232]	; (80134e0 <main+0x2b0>)
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133fe:	4619      	mov	r1, r3
 8013400:	4838      	ldr	r0, [pc, #224]	; (80134e4 <main+0x2b4>)
 8013402:	f7f2 fb07 	bl	8005a14 <HAL_GPIO_ReadPin>
 8013406:	4603      	mov	r3, r0
 8013408:	2b01      	cmp	r3, #1
 801340a:	d118      	bne.n	801343e <main+0x20e>
 801340c:	4a32      	ldr	r2, [pc, #200]	; (80134d8 <main+0x2a8>)
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	4413      	add	r3, r2
 8013412:	781b      	ldrb	r3, [r3, #0]
 8013414:	2b01      	cmp	r3, #1
 8013416:	d112      	bne.n	801343e <main+0x20e>
        {
          HAL_GPIO_WritePin(VALVE_PORT,GPIO_VALVES[i],GPIO_PIN_RESET);
 8013418:	4a31      	ldr	r2, [pc, #196]	; (80134e0 <main+0x2b0>)
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013420:	2200      	movs	r2, #0
 8013422:	4619      	mov	r1, r3
 8013424:	482f      	ldr	r0, [pc, #188]	; (80134e4 <main+0x2b4>)
 8013426:	f7f2 fb0d 	bl	8005a44 <HAL_GPIO_WritePin>
          /*Renew the former buffer*/
          REG_COILS_BUF_FORMER[i]=REG_COILS_BUF[i];
 801342a:	4a2c      	ldr	r2, [pc, #176]	; (80134dc <main+0x2ac>)
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	4413      	add	r3, r2
 8013430:	7819      	ldrb	r1, [r3, #0]
 8013432:	4a29      	ldr	r2, [pc, #164]	; (80134d8 <main+0x2a8>)
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	4413      	add	r3, r2
 8013438:	460a      	mov	r2, r1
 801343a:	701a      	strb	r2, [r3, #0]
          continue;
 801343c:	bf00      	nop
      for(int i=0; i<VALVE_NUM; i++)
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	3301      	adds	r3, #1
 8013442:	603b      	str	r3, [r7, #0]
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	2b03      	cmp	r3, #3
 8013448:	dda5      	ble.n	8013396 <main+0x166>
        }
      }
    }
    //if REG_COILS_BUF[4]==1, means the arm is moving so we can clear the size register
    if(REG_COILS_BUF[VALVE_NUM]==1 && cleared ==FALSE)
 801344a:	4b24      	ldr	r3, [pc, #144]	; (80134dc <main+0x2ac>)
 801344c:	791b      	ldrb	r3, [r3, #4]
 801344e:	2b01      	cmp	r3, #1
 8013450:	d112      	bne.n	8013478 <main+0x248>
 8013452:	4b25      	ldr	r3, [pc, #148]	; (80134e8 <main+0x2b8>)
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	f083 0301 	eor.w	r3, r3, #1
 801345a:	b2db      	uxtb	r3, r3
 801345c:	2b00      	cmp	r3, #0
 801345e:	d00b      	beq.n	8013478 <main+0x248>
    {
      REG_DISC_BUF[0]=0;
 8013460:	4b22      	ldr	r3, [pc, #136]	; (80134ec <main+0x2bc>)
 8013462:	2200      	movs	r2, #0
 8013464:	701a      	strb	r2, [r3, #0]
      REG_DISC_BUF[1]=0;
 8013466:	4b21      	ldr	r3, [pc, #132]	; (80134ec <main+0x2bc>)
 8013468:	2200      	movs	r2, #0
 801346a:	705a      	strb	r2, [r3, #1]
      REG_DISC_BUF[2]=0;
 801346c:	4b1f      	ldr	r3, [pc, #124]	; (80134ec <main+0x2bc>)
 801346e:	2200      	movs	r2, #0
 8013470:	709a      	strb	r2, [r3, #2]
      cleared = TRUE;
 8013472:	4b1d      	ldr	r3, [pc, #116]	; (80134e8 <main+0x2b8>)
 8013474:	2201      	movs	r2, #1
 8013476:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(100);
 8013478:	2064      	movs	r0, #100	; 0x64
 801347a:	f7f0 fe65 	bl	8004148 <HAL_Delay>
    #ifdef USE_POWERSTEP
    Pull_And_Run_Motor();
    #endif
    #ifdef USE_L6470
     //Receive Motor Running Cmd Using Uart
    HAL_UART_Receive_IT(&huart1, (uint8_t *)Rx_Buffer,RX_BUFFERSIZE);
 801347e:	2208      	movs	r2, #8
 8013480:	490c      	ldr	r1, [pc, #48]	; (80134b4 <main+0x284>)
 8013482:	480d      	ldr	r0, [pc, #52]	; (80134b8 <main+0x288>)
 8013484:	f7f4 f968 	bl	8007758 <HAL_UART_Receive_IT>
    #endif
    /*whiting for control input, DIAG1 led blinking*/
    HAL_GPIO_TogglePin(LED_DIAG_PORT,LED_DIAG1_PIN);
 8013488:	f44f 7100 	mov.w	r1, #512	; 0x200
 801348c:	4806      	ldr	r0, [pc, #24]	; (80134a8 <main+0x278>)
 801348e:	f7f2 faf2 	bl	8005a76 <HAL_GPIO_TogglePin>
  {
 8013492:	e771      	b.n	8013378 <main+0x148>
 8013494:	08018694 	.word	0x08018694
 8013498:	080186a0 	.word	0x080186a0
 801349c:	080186ac 	.word	0x080186ac
 80134a0:	080186bc 	.word	0x080186bc
 80134a4:	080186cc 	.word	0x080186cc
 80134a8:	40020800 	.word	0x40020800
 80134ac:	080186d8 	.word	0x080186d8
 80134b0:	2000e66c 	.word	0x2000e66c
 80134b4:	2000e664 	.word	0x2000e664
 80134b8:	2000eafc 	.word	0x2000eafc
 80134bc:	2000e67c 	.word	0x2000e67c
 80134c0:	2000e678 	.word	0x2000e678
 80134c4:	2000e680 	.word	0x2000e680
 80134c8:	2000e674 	.word	0x2000e674
 80134cc:	2000e675 	.word	0x2000e675
 80134d0:	2000e676 	.word	0x2000e676
 80134d4:	459c4000 	.word	0x459c4000
 80134d8:	2000e69c 	.word	0x2000e69c
 80134dc:	2000e690 	.word	0x2000e690
 80134e0:	20000474 	.word	0x20000474
 80134e4:	40020c00 	.word	0x40020c00
 80134e8:	2000047c 	.word	0x2000047c
 80134ec:	2000e684 	.word	0x2000e684

080134f0 <showscreen>:
  }

}

void showscreen(void){
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b082      	sub	sp, #8
 80134f4:	af02      	add	r7, sp, #8
      ssd1306_Line(0,0,0,63,White);
 80134f6:	2301      	movs	r3, #1
 80134f8:	9300      	str	r3, [sp, #0]
 80134fa:	233f      	movs	r3, #63	; 0x3f
 80134fc:	2200      	movs	r2, #0
 80134fe:	2100      	movs	r1, #0
 8013500:	2000      	movs	r0, #0
 8013502:	f000 fea3 	bl	801424c <ssd1306_Line>
      ssd1306_Line(1,0,127,0,White);
 8013506:	2301      	movs	r3, #1
 8013508:	9300      	str	r3, [sp, #0]
 801350a:	2300      	movs	r3, #0
 801350c:	227f      	movs	r2, #127	; 0x7f
 801350e:	2100      	movs	r1, #0
 8013510:	2001      	movs	r0, #1
 8013512:	f000 fe9b 	bl	801424c <ssd1306_Line>
      ssd1306_Line(127,1,127,63,White);
 8013516:	2301      	movs	r3, #1
 8013518:	9300      	str	r3, [sp, #0]
 801351a:	233f      	movs	r3, #63	; 0x3f
 801351c:	227f      	movs	r2, #127	; 0x7f
 801351e:	2101      	movs	r1, #1
 8013520:	207f      	movs	r0, #127	; 0x7f
 8013522:	f000 fe93 	bl	801424c <ssd1306_Line>
      ssd1306_Line(1,63,126,63,White);
 8013526:	2301      	movs	r3, #1
 8013528:	9300      	str	r3, [sp, #0]
 801352a:	233f      	movs	r3, #63	; 0x3f
 801352c:	227e      	movs	r2, #126	; 0x7e
 801352e:	213f      	movs	r1, #63	; 0x3f
 8013530:	2001      	movs	r0, #1
 8013532:	f000 fe8b 	bl	801424c <ssd1306_Line>
      ssd1306_Line(1,13,126,13,White);
 8013536:	2301      	movs	r3, #1
 8013538:	9300      	str	r3, [sp, #0]
 801353a:	230d      	movs	r3, #13
 801353c:	227e      	movs	r2, #126	; 0x7e
 801353e:	210d      	movs	r1, #13
 8013540:	2001      	movs	r0, #1
 8013542:	f000 fe83 	bl	801424c <ssd1306_Line>
      ssd1306_Line(1,25,126,25,White);
 8013546:	2301      	movs	r3, #1
 8013548:	9300      	str	r3, [sp, #0]
 801354a:	2319      	movs	r3, #25
 801354c:	227e      	movs	r2, #126	; 0x7e
 801354e:	2119      	movs	r1, #25
 8013550:	2001      	movs	r0, #1
 8013552:	f000 fe7b 	bl	801424c <ssd1306_Line>
      ssd1306_Line(1,37,126,37,White);
 8013556:	2301      	movs	r3, #1
 8013558:	9300      	str	r3, [sp, #0]
 801355a:	2325      	movs	r3, #37	; 0x25
 801355c:	227e      	movs	r2, #126	; 0x7e
 801355e:	2125      	movs	r1, #37	; 0x25
 8013560:	2001      	movs	r0, #1
 8013562:	f000 fe73 	bl	801424c <ssd1306_Line>
      ssd1306_SetCursor(1,3);
 8013566:	2103      	movs	r1, #3
 8013568:	2001      	movs	r0, #1
 801356a:	f000 fe57 	bl	801421c <ssd1306_SetCursor>
      ssd1306_WriteString("      Roplus      ", Font_7x10, White);
 801356e:	4a12      	ldr	r2, [pc, #72]	; (80135b8 <showscreen+0xc8>)
 8013570:	2301      	movs	r3, #1
 8013572:	ca06      	ldmia	r2, {r1, r2}
 8013574:	4811      	ldr	r0, [pc, #68]	; (80135bc <showscreen+0xcc>)
 8013576:	f000 fe2b 	bl	80141d0 <ssd1306_WriteString>
      Update_Home_Status();
 801357a:	f000 f825 	bl	80135c8 <Update_Home_Status>
      ssd1306_SetCursor(1,27);
 801357e:	211b      	movs	r1, #27
 8013580:	2001      	movs	r0, #1
 8013582:	f000 fe4b 	bl	801421c <ssd1306_SetCursor>
      ssd1306_WriteString(" Pos: ", Font_7x10, White);
 8013586:	4a0c      	ldr	r2, [pc, #48]	; (80135b8 <showscreen+0xc8>)
 8013588:	2301      	movs	r3, #1
 801358a:	ca06      	ldmia	r2, {r1, r2}
 801358c:	480c      	ldr	r0, [pc, #48]	; (80135c0 <showscreen+0xd0>)
 801358e:	f000 fe1f 	bl	80141d0 <ssd1306_WriteString>
      ssd1306_SetCursor(1,44);
 8013592:	212c      	movs	r1, #44	; 0x2c
 8013594:	2001      	movs	r0, #1
 8013596:	f000 fe41 	bl	801421c <ssd1306_SetCursor>
      ssd1306_WriteString("  Gear :    NA    ", Font_7x10, White);  
 801359a:	4a07      	ldr	r2, [pc, #28]	; (80135b8 <showscreen+0xc8>)
 801359c:	2301      	movs	r3, #1
 801359e:	ca06      	ldmia	r2, {r1, r2}
 80135a0:	4808      	ldr	r0, [pc, #32]	; (80135c4 <showscreen+0xd4>)
 80135a2:	f000 fe15 	bl	80141d0 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 80135a6:	f000 fd0f 	bl	8013fc8 <ssd1306_UpdateScreen>
      HAL_Delay(200);
 80135aa:	20c8      	movs	r0, #200	; 0xc8
 80135ac:	f7f0 fdcc 	bl	8004148 <HAL_Delay>
}
 80135b0:	bf00      	nop
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}
 80135b6:	bf00      	nop
 80135b8:	20000480 	.word	0x20000480
 80135bc:	080186e0 	.word	0x080186e0
 80135c0:	080186f4 	.word	0x080186f4
 80135c4:	080186fc 	.word	0x080186fc

080135c8 <Update_Home_Status>:

void Update_Home_Status()
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b084      	sub	sp, #16
 80135cc:	af00      	add	r7, sp, #0
  char Home_Flag[9]=" HOME:";
 80135ce:	4a1f      	ldr	r2, [pc, #124]	; (801364c <Update_Home_Status+0x84>)
 80135d0:	1d3b      	adds	r3, r7, #4
 80135d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80135d6:	6018      	str	r0, [r3, #0]
 80135d8:	3304      	adds	r3, #4
 80135da:	8019      	strh	r1, [r3, #0]
 80135dc:	3302      	adds	r3, #2
 80135de:	0c0a      	lsrs	r2, r1, #16
 80135e0:	701a      	strb	r2, [r3, #0]
 80135e2:	f107 030b 	add.w	r3, r7, #11
 80135e6:	2200      	movs	r2, #0
 80135e8:	801a      	strh	r2, [r3, #0]
  ssd1306_SetCursor(1,15);
 80135ea:	210f      	movs	r1, #15
 80135ec:	2001      	movs	r0, #1
 80135ee:	f000 fe15 	bl	801421c <ssd1306_SetCursor>
  if(is_home ==FALSE)
 80135f2:	4b17      	ldr	r3, [pc, #92]	; (8013650 <Update_Home_Status+0x88>)
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	f083 0301 	eor.w	r3, r3, #1
 80135fa:	b2db      	uxtb	r3, r3
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d00d      	beq.n	801361c <Update_Home_Status+0x54>
  {
      strcat(Home_Flag,"F ");
 8013600:	1d3b      	adds	r3, r7, #4
 8013602:	4618      	mov	r0, r3
 8013604:	f7ec fde4 	bl	80001d0 <strlen>
 8013608:	4603      	mov	r3, r0
 801360a:	461a      	mov	r2, r3
 801360c:	1d3b      	adds	r3, r7, #4
 801360e:	4413      	add	r3, r2
 8013610:	4a10      	ldr	r2, [pc, #64]	; (8013654 <Update_Home_Status+0x8c>)
 8013612:	8811      	ldrh	r1, [r2, #0]
 8013614:	7892      	ldrb	r2, [r2, #2]
 8013616:	8019      	strh	r1, [r3, #0]
 8013618:	709a      	strb	r2, [r3, #2]
 801361a:	e00c      	b.n	8013636 <Update_Home_Status+0x6e>
  }
  else
  {
      strcat(Home_Flag,"T ");
 801361c:	1d3b      	adds	r3, r7, #4
 801361e:	4618      	mov	r0, r3
 8013620:	f7ec fdd6 	bl	80001d0 <strlen>
 8013624:	4603      	mov	r3, r0
 8013626:	461a      	mov	r2, r3
 8013628:	1d3b      	adds	r3, r7, #4
 801362a:	4413      	add	r3, r2
 801362c:	4a0a      	ldr	r2, [pc, #40]	; (8013658 <Update_Home_Status+0x90>)
 801362e:	8811      	ldrh	r1, [r2, #0]
 8013630:	7892      	ldrb	r2, [r2, #2]
 8013632:	8019      	strh	r1, [r3, #0]
 8013634:	709a      	strb	r2, [r3, #2]
  }
  ssd1306_WriteString(Home_Flag,Font_7x10, White);
 8013636:	4a09      	ldr	r2, [pc, #36]	; (801365c <Update_Home_Status+0x94>)
 8013638:	1d38      	adds	r0, r7, #4
 801363a:	2301      	movs	r3, #1
 801363c:	ca06      	ldmia	r2, {r1, r2}
 801363e:	f000 fdc7 	bl	80141d0 <ssd1306_WriteString>
}
 8013642:	bf00      	nop
 8013644:	3710      	adds	r7, #16
 8013646:	46bd      	mov	sp, r7
 8013648:	bd80      	pop	{r7, pc}
 801364a:	bf00      	nop
 801364c:	08018718 	.word	0x08018718
 8013650:	2000e650 	.word	0x2000e650
 8013654:	08018710 	.word	0x08018710
 8013658:	08018714 	.word	0x08018714
 801365c:	20000480 	.word	0x20000480

08013660 <Update_Motor_Pos>:
     /* To be customized (for example Switch off a LED) */
   }
}
#endif
void Update_Motor_Pos()
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b084      	sub	sp, #16
 8013664:	af00      	add	r7, sp, #0
  //Position start cursor
  ssd1306_SetCursor(43,27);
 8013666:	211b      	movs	r1, #27
 8013668:	202b      	movs	r0, #43	; 0x2b
 801366a:	f000 fdd7 	bl	801421c <ssd1306_SetCursor>
  //Clear Screen first
  ssd1306_WriteString("            ", Font_7x10, White); 
 801366e:	4a16      	ldr	r2, [pc, #88]	; (80136c8 <Update_Motor_Pos+0x68>)
 8013670:	2301      	movs	r3, #1
 8013672:	ca06      	ldmia	r2, {r1, r2}
 8013674:	4815      	ldr	r0, [pc, #84]	; (80136cc <Update_Motor_Pos+0x6c>)
 8013676:	f000 fdab 	bl	80141d0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 801367a:	f000 fca5 	bl	8013fc8 <ssd1306_UpdateScreen>
  ssd1306_SetCursor(43,27);
 801367e:	211b      	movs	r1, #27
 8013680:	202b      	movs	r0, #43	; 0x2b
 8013682:	f000 fdcb 	bl	801421c <ssd1306_SetCursor>
  #ifdef USE_POWERSTEP
  cur_pos = BSP_MotorControl_GetPosition(0);
  #endif
  #ifdef USE_L6470
  cur_pos = (int32_t)StepperMotorBoardHandle->Command->GetParam(board, gripper_motor, L6470_ABS_POS_ID);
 8013686:	4b12      	ldr	r3, [pc, #72]	; (80136d0 <Update_Motor_Pos+0x70>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	689b      	ldr	r3, [r3, #8]
 801368c:	685b      	ldr	r3, [r3, #4]
 801368e:	4a11      	ldr	r2, [pc, #68]	; (80136d4 <Update_Motor_Pos+0x74>)
 8013690:	7810      	ldrb	r0, [r2, #0]
 8013692:	4a11      	ldr	r2, [pc, #68]	; (80136d8 <Update_Motor_Pos+0x78>)
 8013694:	7811      	ldrb	r1, [r2, #0]
 8013696:	2200      	movs	r2, #0
 8013698:	4798      	blx	r3
 801369a:	4603      	mov	r3, r0
 801369c:	461a      	mov	r2, r3
 801369e:	4b0f      	ldr	r3, [pc, #60]	; (80136dc <Update_Motor_Pos+0x7c>)
 80136a0:	601a      	str	r2, [r3, #0]
  #endif
  char position[11];
  sprintf(position, "%ld", cur_pos);
 80136a2:	4b0e      	ldr	r3, [pc, #56]	; (80136dc <Update_Motor_Pos+0x7c>)
 80136a4:	681a      	ldr	r2, [r3, #0]
 80136a6:	1d3b      	adds	r3, r7, #4
 80136a8:	490d      	ldr	r1, [pc, #52]	; (80136e0 <Update_Motor_Pos+0x80>)
 80136aa:	4618      	mov	r0, r3
 80136ac:	f001 fa92 	bl	8014bd4 <siprintf>
  ssd1306_WriteString(position, Font_7x10, White);    
 80136b0:	4a05      	ldr	r2, [pc, #20]	; (80136c8 <Update_Motor_Pos+0x68>)
 80136b2:	1d38      	adds	r0, r7, #4
 80136b4:	2301      	movs	r3, #1
 80136b6:	ca06      	ldmia	r2, {r1, r2}
 80136b8:	f000 fd8a 	bl	80141d0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80136bc:	f000 fc84 	bl	8013fc8 <ssd1306_UpdateScreen>
}
 80136c0:	bf00      	nop
 80136c2:	3710      	adds	r7, #16
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	20000480 	.word	0x20000480
 80136cc:	08018724 	.word	0x08018724
 80136d0:	2000e678 	.word	0x2000e678
 80136d4:	2000e674 	.word	0x2000e674
 80136d8:	2000e675 	.word	0x2000e675
 80136dc:	2000e654 	.word	0x2000e654
 80136e0:	08018734 	.word	0x08018734

080136e4 <Update_Gear_Status>:

void Update_Gear_Status(uint8_t GearVal)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b084      	sub	sp, #16
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	4603      	mov	r3, r0
 80136ec:	71fb      	strb	r3, [r7, #7]
  char Gear[3]; 
  char Gear_Status[3]=" ";
 80136ee:	4b12      	ldr	r3, [pc, #72]	; (8013738 <Update_Gear_Status+0x54>)
 80136f0:	881b      	ldrh	r3, [r3, #0]
 80136f2:	813b      	strh	r3, [r7, #8]
 80136f4:	2300      	movs	r3, #0
 80136f6:	72bb      	strb	r3, [r7, #10]
  sprintf(Gear,"%d", GearVal);
 80136f8:	79fa      	ldrb	r2, [r7, #7]
 80136fa:	f107 030c 	add.w	r3, r7, #12
 80136fe:	490f      	ldr	r1, [pc, #60]	; (801373c <Update_Gear_Status+0x58>)
 8013700:	4618      	mov	r0, r3
 8013702:	f001 fa67 	bl	8014bd4 <siprintf>
  strcat(Gear_Status,Gear);
 8013706:	f107 020c 	add.w	r2, r7, #12
 801370a:	f107 0308 	add.w	r3, r7, #8
 801370e:	4611      	mov	r1, r2
 8013710:	4618      	mov	r0, r3
 8013712:	f001 faff 	bl	8014d14 <strcat>
  ssd1306_SetCursor(84,44);
 8013716:	212c      	movs	r1, #44	; 0x2c
 8013718:	2054      	movs	r0, #84	; 0x54
 801371a:	f000 fd7f 	bl	801421c <ssd1306_SetCursor>
  ssd1306_WriteString(Gear_Status,Font_7x10,White);
 801371e:	4a08      	ldr	r2, [pc, #32]	; (8013740 <Update_Gear_Status+0x5c>)
 8013720:	f107 0008 	add.w	r0, r7, #8
 8013724:	2301      	movs	r3, #1
 8013726:	ca06      	ldmia	r2, {r1, r2}
 8013728:	f000 fd52 	bl	80141d0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 801372c:	f000 fc4c 	bl	8013fc8 <ssd1306_UpdateScreen>
}
 8013730:	bf00      	nop
 8013732:	3710      	adds	r7, #16
 8013734:	46bd      	mov	sp, r7
 8013736:	bd80      	pop	{r7, pc}
 8013738:	0801873c 	.word	0x0801873c
 801373c:	08018738 	.word	0x08018738
 8013740:	20000480 	.word	0x20000480

08013744 <Roplus_Pin_Init>:
  }
  return desired_pos;
}

void Roplus_Pin_Init()
{ 
 8013744:	b580      	push	{r7, lr}
 8013746:	b08a      	sub	sp, #40	; 0x28
 8013748:	af00      	add	r7, sp, #0
  //Enable GPIO Clock
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801374a:	2300      	movs	r3, #0
 801374c:	613b      	str	r3, [r7, #16]
 801374e:	4b5a      	ldr	r3, [pc, #360]	; (80138b8 <Roplus_Pin_Init+0x174>)
 8013750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013752:	4a59      	ldr	r2, [pc, #356]	; (80138b8 <Roplus_Pin_Init+0x174>)
 8013754:	f043 0301 	orr.w	r3, r3, #1
 8013758:	6313      	str	r3, [r2, #48]	; 0x30
 801375a:	4b57      	ldr	r3, [pc, #348]	; (80138b8 <Roplus_Pin_Init+0x174>)
 801375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801375e:	f003 0301 	and.w	r3, r3, #1
 8013762:	613b      	str	r3, [r7, #16]
 8013764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8013766:	2300      	movs	r3, #0
 8013768:	60fb      	str	r3, [r7, #12]
 801376a:	4b53      	ldr	r3, [pc, #332]	; (80138b8 <Roplus_Pin_Init+0x174>)
 801376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801376e:	4a52      	ldr	r2, [pc, #328]	; (80138b8 <Roplus_Pin_Init+0x174>)
 8013770:	f043 0302 	orr.w	r3, r3, #2
 8013774:	6313      	str	r3, [r2, #48]	; 0x30
 8013776:	4b50      	ldr	r3, [pc, #320]	; (80138b8 <Roplus_Pin_Init+0x174>)
 8013778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801377a:	f003 0302 	and.w	r3, r3, #2
 801377e:	60fb      	str	r3, [r7, #12]
 8013780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013782:	2300      	movs	r3, #0
 8013784:	60bb      	str	r3, [r7, #8]
 8013786:	4b4c      	ldr	r3, [pc, #304]	; (80138b8 <Roplus_Pin_Init+0x174>)
 8013788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801378a:	4a4b      	ldr	r2, [pc, #300]	; (80138b8 <Roplus_Pin_Init+0x174>)
 801378c:	f043 0304 	orr.w	r3, r3, #4
 8013790:	6313      	str	r3, [r2, #48]	; 0x30
 8013792:	4b49      	ldr	r3, [pc, #292]	; (80138b8 <Roplus_Pin_Init+0x174>)
 8013794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013796:	f003 0304 	and.w	r3, r3, #4
 801379a:	60bb      	str	r3, [r7, #8]
 801379c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801379e:	2300      	movs	r3, #0
 80137a0:	607b      	str	r3, [r7, #4]
 80137a2:	4b45      	ldr	r3, [pc, #276]	; (80138b8 <Roplus_Pin_Init+0x174>)
 80137a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137a6:	4a44      	ldr	r2, [pc, #272]	; (80138b8 <Roplus_Pin_Init+0x174>)
 80137a8:	f043 0308 	orr.w	r3, r3, #8
 80137ac:	6313      	str	r3, [r2, #48]	; 0x30
 80137ae:	4b42      	ldr	r3, [pc, #264]	; (80138b8 <Roplus_Pin_Init+0x174>)
 80137b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137b2:	f003 0308 	and.w	r3, r3, #8
 80137b6:	607b      	str	r3, [r7, #4]
 80137b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80137ba:	2300      	movs	r3, #0
 80137bc:	603b      	str	r3, [r7, #0]
 80137be:	4b3e      	ldr	r3, [pc, #248]	; (80138b8 <Roplus_Pin_Init+0x174>)
 80137c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137c2:	4a3d      	ldr	r2, [pc, #244]	; (80138b8 <Roplus_Pin_Init+0x174>)
 80137c4:	f043 0310 	orr.w	r3, r3, #16
 80137c8:	6313      	str	r3, [r2, #48]	; 0x30
 80137ca:	4b3b      	ldr	r3, [pc, #236]	; (80138b8 <Roplus_Pin_Init+0x174>)
 80137cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137ce:	f003 0310 	and.w	r3, r3, #16
 80137d2:	603b      	str	r3, [r7, #0]
 80137d4:	683b      	ldr	r3, [r7, #0]
  //Sensor Pin Init
  GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = SENSOR_EXTI_PIN;
 80137d6:	2301      	movs	r3, #1
 80137d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80137da:	2300      	movs	r3, #0
 80137dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137de:	2300      	movs	r3, #0
 80137e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80137e2:	2301      	movs	r3, #1
 80137e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SENSOR_EXTI_PORT, &GPIO_InitStruct);
 80137e6:	f107 0314 	add.w	r3, r7, #20
 80137ea:	4619      	mov	r1, r3
 80137ec:	4833      	ldr	r0, [pc, #204]	; (80138bc <Roplus_Pin_Init+0x178>)
 80137ee:	f7f1 ff75 	bl	80056dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SENSOR_EXTI_PIN_UPPER;
 80137f2:	2308      	movs	r3, #8
 80137f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80137f6:	2300      	movs	r3, #0
 80137f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137fa:	2300      	movs	r3, #0
 80137fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80137fe:	2301      	movs	r3, #1
 8013800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SENSOR_EXTI_PORT, &GPIO_InitStruct);
 8013802:	f107 0314 	add.w	r3, r7, #20
 8013806:	4619      	mov	r1, r3
 8013808:	482c      	ldr	r0, [pc, #176]	; (80138bc <Roplus_Pin_Init+0x178>)
 801380a:	f7f1 ff67 	bl	80056dc <HAL_GPIO_Init>

  //Reset all values
  HAL_GPIO_WritePin(VALVE_PORT,VALVE_1_PIN,GPIO_PIN_RESET);
 801380e:	2200      	movs	r2, #0
 8013810:	2180      	movs	r1, #128	; 0x80
 8013812:	482b      	ldr	r0, [pc, #172]	; (80138c0 <Roplus_Pin_Init+0x17c>)
 8013814:	f7f2 f916 	bl	8005a44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VALVE_PORT,VALVE_2_PIN,GPIO_PIN_RESET);
 8013818:	2200      	movs	r2, #0
 801381a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801381e:	4828      	ldr	r0, [pc, #160]	; (80138c0 <Roplus_Pin_Init+0x17c>)
 8013820:	f7f2 f910 	bl	8005a44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VALVE_PORT,VALVE_3_PIN,GPIO_PIN_RESET);
 8013824:	2200      	movs	r2, #0
 8013826:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801382a:	4825      	ldr	r0, [pc, #148]	; (80138c0 <Roplus_Pin_Init+0x17c>)
 801382c:	f7f2 f90a 	bl	8005a44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VALVE_PORT,VALVE_4_PIN,GPIO_PIN_RESET);
 8013830:	2200      	movs	r2, #0
 8013832:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8013836:	4822      	ldr	r0, [pc, #136]	; (80138c0 <Roplus_Pin_Init+0x17c>)
 8013838:	f7f2 f904 	bl	8005a44 <HAL_GPIO_WritePin>

  // Valves Pin init,
  GPIO_InitStruct.Pin = VALVE_1_PIN|VALVE_2_PIN|VALVE_3_PIN|VALVE_4_PIN;
 801383c:	f64c 0380 	movw	r3, #51328	; 0xc880
 8013840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013842:	2301      	movs	r3, #1
 8013844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013846:	2300      	movs	r3, #0
 8013848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801384a:	2300      	movs	r3, #0
 801384c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VALVE_PORT, &GPIO_InitStruct);
 801384e:	f107 0314 	add.w	r3, r7, #20
 8013852:	4619      	mov	r1, r3
 8013854:	481a      	ldr	r0, [pc, #104]	; (80138c0 <Roplus_Pin_Init+0x17c>)
 8013856:	f7f1 ff41 	bl	80056dc <HAL_GPIO_Init>
   
  //UR input Pin init, no  pull  mode
  GPIO_InitStruct.Pin = UR_INPUT_PIN1|UR_INPUT_PIN2|UR_INPUT_PIN3;
 801385a:	2370      	movs	r3, #112	; 0x70
 801385c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801385e:	2300      	movs	r3, #0
 8013860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013862:	2300      	movs	r3, #0
 8013864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8013866:	2301      	movs	r3, #1
 8013868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UR_INPUT_PORT, &GPIO_InitStruct);
 801386a:	f107 0314 	add.w	r3, r7, #20
 801386e:	4619      	mov	r1, r3
 8013870:	4814      	ldr	r0, [pc, #80]	; (80138c4 <Roplus_Pin_Init+0x180>)
 8013872:	f7f1 ff33 	bl	80056dc <HAL_GPIO_Init>

  //LED Pin Init
  GPIO_InitStruct.Pin = LED_DIAG2_PIN|LED_DIAG1_PIN;
 8013876:	f44f 7340 	mov.w	r3, #768	; 0x300
 801387a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801387c:	2301      	movs	r3, #1
 801387e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013880:	2300      	movs	r3, #0
 8013882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013884:	2300      	movs	r3, #0
 8013886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_DIAG_PORT, &GPIO_InitStruct);
 8013888:	f107 0314 	add.w	r3, r7, #20
 801388c:	4619      	mov	r1, r3
 801388e:	480e      	ldr	r0, [pc, #56]	; (80138c8 <Roplus_Pin_Init+0x184>)
 8013890:	f7f1 ff24 	bl	80056dc <HAL_GPIO_Init>

  //LED Pin Init
  GPIO_InitStruct.Pin = LED_RUN_PIN|LED_COMM_PIN;
 8013894:	2303      	movs	r3, #3
 8013896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013898:	2301      	movs	r3, #1
 801389a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801389c:	2300      	movs	r3, #0
 801389e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80138a0:	2300      	movs	r3, #0
 80138a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_STATUS_PORT, &GPIO_InitStruct);
 80138a4:	f107 0314 	add.w	r3, r7, #20
 80138a8:	4619      	mov	r1, r3
 80138aa:	4806      	ldr	r0, [pc, #24]	; (80138c4 <Roplus_Pin_Init+0x180>)
 80138ac:	f7f1 ff16 	bl	80056dc <HAL_GPIO_Init>
}
 80138b0:	bf00      	nop
 80138b2:	3728      	adds	r7, #40	; 0x28
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}
 80138b8:	40023800 	.word	0x40023800
 80138bc:	40020000 	.word	0x40020000
 80138c0:	40020c00 	.word	0x40020c00
 80138c4:	40021000 	.word	0x40021000
 80138c8:	40020800 	.word	0x40020800

080138cc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80138cc:	b480      	push	{r7}
 80138ce:	b083      	sub	sp, #12
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138da:	4a0b      	ldr	r2, [pc, #44]	; (8013908 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80138dc:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 80138de:	4b0a      	ldr	r3, [pc, #40]	; (8013908 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	b21a      	sxth	r2, r3
 80138e4:	4b09      	ldr	r3, [pc, #36]	; (801390c <HAL_TIM_IC_CaptureCallback+0x40>)
 80138e6:	801a      	strh	r2, [r3, #0]
	position = count/4;
 80138e8:	4b08      	ldr	r3, [pc, #32]	; (801390c <HAL_TIM_IC_CaptureCallback+0x40>)
 80138ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	da00      	bge.n	80138f4 <HAL_TIM_IC_CaptureCallback+0x28>
 80138f2:	3303      	adds	r3, #3
 80138f4:	109b      	asrs	r3, r3, #2
 80138f6:	b21a      	sxth	r2, r3
 80138f8:	4b05      	ldr	r3, [pc, #20]	; (8013910 <HAL_TIM_IC_CaptureCallback+0x44>)
 80138fa:	801a      	strh	r2, [r3, #0]
  // ssd1306_SetCursor(43,27);
  // char pos_[11];
  // sprintf(pos_, "%d", position);
  // ssd1306_WriteString(pos_, Font_7x10, White);    
  // ssd1306_UpdateScreen();
}
 80138fc:	bf00      	nop
 80138fe:	370c      	adds	r7, #12
 8013900:	46bd      	mov	sp, r7
 8013902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013906:	4770      	bx	lr
 8013908:	2000e65c 	.word	0x2000e65c
 801390c:	2000e660 	.word	0x2000e660
 8013910:	2000e662 	.word	0x2000e662

08013914 <Error_Handler>:
    HAL_Delay(100);
  }
}

void Error_Handler()
{
 8013914:	b580      	push	{r7, lr}
 8013916:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8013918:	b672      	cpsid	i
}
 801391a:	bf00      	nop
  __disable_irq();
  while (1)
  {
    //BLINKE DIAG2 LED
    HAL_GPIO_WritePin(LED_DIAG_PORT,LED_DIAG2_PIN,GPIO_PIN_SET);
 801391c:	2201      	movs	r2, #1
 801391e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013922:	4808      	ldr	r0, [pc, #32]	; (8013944 <Error_Handler+0x30>)
 8013924:	f7f2 f88e 	bl	8005a44 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8013928:	2064      	movs	r0, #100	; 0x64
 801392a:	f7f0 fc0d 	bl	8004148 <HAL_Delay>
    HAL_GPIO_WritePin(LED_DIAG_PORT,LED_DIAG2_PIN,GPIO_PIN_RESET);
 801392e:	2200      	movs	r2, #0
 8013930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013934:	4803      	ldr	r0, [pc, #12]	; (8013944 <Error_Handler+0x30>)
 8013936:	f7f2 f885 	bl	8005a44 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 801393a:	2064      	movs	r0, #100	; 0x64
 801393c:	f7f0 fc04 	bl	8004148 <HAL_Delay>
    HAL_GPIO_WritePin(LED_DIAG_PORT,LED_DIAG2_PIN,GPIO_PIN_SET);
 8013940:	e7ec      	b.n	801391c <Error_Handler+0x8>
 8013942:	bf00      	nop
 8013944:	40020800 	.word	0x40020800

08013948 <Motor_Find_Home>:
  }
}

#ifdef USE_L6470
void Motor_Find_Home(uint8_t deviceId,eL6470_DirId_t dir, uint32_t speed)
{
 8013948:	b590      	push	{r4, r7, lr}
 801394a:	b083      	sub	sp, #12
 801394c:	af00      	add	r7, sp, #0
 801394e:	4603      	mov	r3, r0
 8013950:	603a      	str	r2, [r7, #0]
 8013952:	71fb      	strb	r3, [r7, #7]
 8013954:	460b      	mov	r3, r1
 8013956:	71bb      	strb	r3, [r7, #6]
   StepperMotorBoardHandle->Command->Run(board, deviceId, dir, speed);
 8013958:	4b1f      	ldr	r3, [pc, #124]	; (80139d8 <Motor_Find_Home+0x90>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	689b      	ldr	r3, [r3, #8]
 801395e:	689c      	ldr	r4, [r3, #8]
 8013960:	4b1e      	ldr	r3, [pc, #120]	; (80139dc <Motor_Find_Home+0x94>)
 8013962:	7818      	ldrb	r0, [r3, #0]
 8013964:	79ba      	ldrb	r2, [r7, #6]
 8013966:	79f9      	ldrb	r1, [r7, #7]
 8013968:	683b      	ldr	r3, [r7, #0]
 801396a:	47a0      	blx	r4
   while(HAL_GPIO_ReadPin(SENSOR_EXTI_PORT,SENSOR_EXTI_PIN)==GPIO_PIN_SET)
 801396c:	e007      	b.n	801397e <Motor_Find_Home+0x36>
    {
      //Blinking DIAG2 while finfing home
      HAL_GPIO_TogglePin(LED_DIAG_PORT,LED_DIAG2_PIN);
 801396e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013972:	481b      	ldr	r0, [pc, #108]	; (80139e0 <Motor_Find_Home+0x98>)
 8013974:	f7f2 f87f 	bl	8005a76 <HAL_GPIO_TogglePin>
      HAL_Delay(200);
 8013978:	20c8      	movs	r0, #200	; 0xc8
 801397a:	f7f0 fbe5 	bl	8004148 <HAL_Delay>
   while(HAL_GPIO_ReadPin(SENSOR_EXTI_PORT,SENSOR_EXTI_PIN)==GPIO_PIN_SET)
 801397e:	2101      	movs	r1, #1
 8013980:	4818      	ldr	r0, [pc, #96]	; (80139e4 <Motor_Find_Home+0x9c>)
 8013982:	f7f2 f847 	bl	8005a14 <HAL_GPIO_ReadPin>
 8013986:	4603      	mov	r3, r0
 8013988:	2b01      	cmp	r3, #1
 801398a:	d0f0      	beq.n	801396e <Motor_Find_Home+0x26>
    }
    //Set indicator
    //HAL_GPIO_WritePin(LED_COMM_PORT,LED3_PIN,GPIO_PIN_SET);
    //Stop motor & set current position as home
    StepperMotorBoardHandle->Command->HardStop(board,deviceId);
 801398c:	4b12      	ldr	r3, [pc, #72]	; (80139d8 <Motor_Find_Home+0x90>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	689b      	ldr	r3, [r3, #8]
 8013992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013994:	4a11      	ldr	r2, [pc, #68]	; (80139dc <Motor_Find_Home+0x94>)
 8013996:	7812      	ldrb	r2, [r2, #0]
 8013998:	79f9      	ldrb	r1, [r7, #7]
 801399a:	4610      	mov	r0, r2
 801399c:	4798      	blx	r3
    is_home = TRUE;
 801399e:	4b12      	ldr	r3, [pc, #72]	; (80139e8 <Motor_Find_Home+0xa0>)
 80139a0:	2201      	movs	r2, #1
 80139a2:	701a      	strb	r2, [r3, #0]
    StepperMotorBoardHandle->Command->ResetPos(board,deviceId);
 80139a4:	4b0c      	ldr	r3, [pc, #48]	; (80139d8 <Motor_Find_Home+0x90>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	689b      	ldr	r3, [r3, #8]
 80139aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139ac:	4a0b      	ldr	r2, [pc, #44]	; (80139dc <Motor_Find_Home+0x94>)
 80139ae:	7812      	ldrb	r2, [r2, #0]
 80139b0:	79f9      	ldrb	r1, [r7, #7]
 80139b2:	4610      	mov	r0, r2
 80139b4:	4798      	blx	r3
    Update_Home_Status();
 80139b6:	f7ff fe07 	bl	80135c8 <Update_Home_Status>
    Update_Motor_Pos();
 80139ba:	f7ff fe51 	bl	8013660 <Update_Motor_Pos>
    cur_gear_pos = 0;
 80139be:	4b0b      	ldr	r3, [pc, #44]	; (80139ec <Motor_Find_Home+0xa4>)
 80139c0:	2200      	movs	r2, #0
 80139c2:	701a      	strb	r2, [r3, #0]
    Update_Gear_Status(cur_gear_pos);
 80139c4:	4b09      	ldr	r3, [pc, #36]	; (80139ec <Motor_Find_Home+0xa4>)
 80139c6:	781b      	ldrb	r3, [r3, #0]
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7ff fe8b 	bl	80136e4 <Update_Gear_Status>
}
 80139ce:	bf00      	nop
 80139d0:	370c      	adds	r7, #12
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd90      	pop	{r4, r7, pc}
 80139d6:	bf00      	nop
 80139d8:	2000e678 	.word	0x2000e678
 80139dc:	2000e674 	.word	0x2000e674
 80139e0:	40020800 	.word	0x40020800
 80139e4:	40020000 	.word	0x40020000
 80139e8:	2000e650 	.word	0x2000e650
 80139ec:	2000e658 	.word	0x2000e658

080139f0 <usrPow>:
  * @param  exponent  the exponent
  * @retval power     the result as (base^exponent)
  * @note   There is not OVF control.
  */
uint32_t usrPow(uint8_t base, uint8_t exponent)
{
 80139f0:	b480      	push	{r7}
 80139f2:	b085      	sub	sp, #20
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	4603      	mov	r3, r0
 80139f8:	460a      	mov	r2, r1
 80139fa:	71fb      	strb	r3, [r7, #7]
 80139fc:	4613      	mov	r3, r2
 80139fe:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  uint32_t power = 1;
 8013a00:	2301      	movs	r3, #1
 8013a02:	60bb      	str	r3, [r7, #8]
  
  for (i=0; i<exponent; i++)
 8013a04:	2300      	movs	r3, #0
 8013a06:	73fb      	strb	r3, [r7, #15]
 8013a08:	e007      	b.n	8013a1a <usrPow+0x2a>
    power *= base;
 8013a0a:	79fa      	ldrb	r2, [r7, #7]
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	fb02 f303 	mul.w	r3, r2, r3
 8013a12:	60bb      	str	r3, [r7, #8]
  for (i=0; i<exponent; i++)
 8013a14:	7bfb      	ldrb	r3, [r7, #15]
 8013a16:	3301      	adds	r3, #1
 8013a18:	73fb      	strb	r3, [r7, #15]
 8013a1a:	7bfa      	ldrb	r2, [r7, #15]
 8013a1c:	79bb      	ldrb	r3, [r7, #6]
 8013a1e:	429a      	cmp	r2, r3
 8013a20:	d3f3      	bcc.n	8013a0a <usrPow+0x1a>
  
  return power;
 8013a22:	68bb      	ldr	r3, [r7, #8]
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3714      	adds	r7, #20
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2e:	4770      	bx	lr

08013a30 <HAL_UART_RxCpltCallback>:

//Receive process finished
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8013a30:	b590      	push	{r4, r7, lr}
 8013a32:	b085      	sub	sp, #20
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
  /*Received, toggle COMM LED*/
  HAL_GPIO_TogglePin(LED_STATUS_PORT,LED_COMM_PIN);
 8013a38:	2102      	movs	r1, #2
 8013a3a:	486e      	ldr	r0, [pc, #440]	; (8013bf4 <HAL_UART_RxCpltCallback+0x1c4>)
 8013a3c:	f7f2 f81b 	bl	8005a76 <HAL_GPIO_TogglePin>
  //Different Msg Received
  if(Buffercmp((uint8_t *) Rx_Buffer,(uint8_t *)Rx_Buffer_former,RX_BUFFERSIZE) != 0)
 8013a40:	2208      	movs	r2, #8
 8013a42:	496d      	ldr	r1, [pc, #436]	; (8013bf8 <HAL_UART_RxCpltCallback+0x1c8>)
 8013a44:	486d      	ldr	r0, [pc, #436]	; (8013bfc <HAL_UART_RxCpltCallback+0x1cc>)
 8013a46:	f000 f8f3 	bl	8013c30 <Buffercmp>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	f000 809d 	beq.w	8013b8c <HAL_UART_RxCpltCallback+0x15c>
  {
    //HAL_USART_Transmit_IT(&huart5, (uint8_t *) Rx_Buffer, RX_BUFFERSIZE);
    if(Rx_Buffer[0] != 'A')
 8013a52:	4b6a      	ldr	r3, [pc, #424]	; (8013bfc <HAL_UART_RxCpltCallback+0x1cc>)
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	2b41      	cmp	r3, #65	; 0x41
 8013a58:	f040 80c4 	bne.w	8013be4 <HAL_UART_RxCpltCallback+0x1b4>
    }
    /*Parse the string and get the desired motor position*/
    else
    {
      //Inidicate one transmission complete, toggle the RUN LED
      HAL_GPIO_TogglePin(LED_STATUS_PORT,LED_RUN_PIN);
 8013a5c:	2101      	movs	r1, #1
 8013a5e:	4865      	ldr	r0, [pc, #404]	; (8013bf4 <HAL_UART_RxCpltCallback+0x1c4>)
 8013a60:	f7f2 f809 	bl	8005a76 <HAL_GPIO_TogglePin>
      //The arm is running, so cannot response, just skip
      if(REG_COILS_BUF[VALVE_NUM]==1)
 8013a64:	4b66      	ldr	r3, [pc, #408]	; (8013c00 <HAL_UART_RxCpltCallback+0x1d0>)
 8013a66:	791b      	ldrb	r3, [r3, #4]
 8013a68:	2b01      	cmp	r3, #1
 8013a6a:	f000 80bd 	beq.w	8013be8 <HAL_UART_RxCpltCallback+0x1b8>
      {
        return;
      }
      BufferCopy((uint8_t *) Rx_Buffer,(uint8_t *)Rx_Buffer_former,RX_BUFFERSIZE);
 8013a6e:	2208      	movs	r2, #8
 8013a70:	4961      	ldr	r1, [pc, #388]	; (8013bf8 <HAL_UART_RxCpltCallback+0x1c8>)
 8013a72:	4862      	ldr	r0, [pc, #392]	; (8013bfc <HAL_UART_RxCpltCallback+0x1cc>)
 8013a74:	f000 f939 	bl	8013cea <BufferCopy>
      //HAL_USART_Transmit_IT(&huart5, (uint8_t *) Rx_Buffer_former, RX_BUFFERSIZE);
      
      //Get Desired Pos
      uint32_t Desired_Pos = BufferParse((uint8_t *) Rx_Buffer);
 8013a78:	4860      	ldr	r0, [pc, #384]	; (8013bfc <HAL_UART_RxCpltCallback+0x1cc>)
 8013a7a:	f000 f955 	bl	8013d28 <BufferParse>
 8013a7e:	60f8      	str	r0, [r7, #12]
      /*Successful parsed*/
      if(Desired_Pos != -1)
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a86:	f000 80b2 	beq.w	8013bee <HAL_UART_RxCpltCallback+0x1be>
      {
        if(Desired_Pos!=cur_pos)
 8013a8a:	4b5e      	ldr	r3, [pc, #376]	; (8013c04 <HAL_UART_RxCpltCallback+0x1d4>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	461a      	mov	r2, r3
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	4293      	cmp	r3, r2
 8013a94:	f000 80ab 	beq.w	8013bee <HAL_UART_RxCpltCallback+0x1be>
        {
          /*Double check the range*/
          if(Desired_Pos >=2200000)
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	4a5b      	ldr	r2, [pc, #364]	; (8013c08 <HAL_UART_RxCpltCallback+0x1d8>)
 8013a9c:	4293      	cmp	r3, r2
 8013a9e:	d301      	bcc.n	8013aa4 <HAL_UART_RxCpltCallback+0x74>
          {
            Desired_Pos =2200000;
 8013aa0:	4b59      	ldr	r3, [pc, #356]	; (8013c08 <HAL_UART_RxCpltCallback+0x1d8>)
 8013aa2:	60fb      	str	r3, [r7, #12]
          }
          if(Desired_Pos<=200000)
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	4a59      	ldr	r2, [pc, #356]	; (8013c0c <HAL_UART_RxCpltCallback+0x1dc>)
 8013aa8:	4293      	cmp	r3, r2
 8013aaa:	d801      	bhi.n	8013ab0 <HAL_UART_RxCpltCallback+0x80>
          {
            Desired_Pos = 200000;
 8013aac:	4b57      	ldr	r3, [pc, #348]	; (8013c0c <HAL_UART_RxCpltCallback+0x1dc>)
 8013aae:	60fb      	str	r3, [r7, #12]
          }
          /*One Direction*/
          if(Desired_Pos>cur_pos)
 8013ab0:	4b54      	ldr	r3, [pc, #336]	; (8013c04 <HAL_UART_RxCpltCallback+0x1d4>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	461a      	mov	r2, r3
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	4293      	cmp	r3, r2
 8013aba:	d91e      	bls.n	8013afa <HAL_UART_RxCpltCallback+0xca>
          {
            StepperMotorBoardHandle->Command->GoToDir(board, gripper_motor, L6470_DIR_FWD_ID, Desired_Pos);
 8013abc:	4b54      	ldr	r3, [pc, #336]	; (8013c10 <HAL_UART_RxCpltCallback+0x1e0>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	689b      	ldr	r3, [r3, #8]
 8013ac2:	699c      	ldr	r4, [r3, #24]
 8013ac4:	4b53      	ldr	r3, [pc, #332]	; (8013c14 <HAL_UART_RxCpltCallback+0x1e4>)
 8013ac6:	7818      	ldrb	r0, [r3, #0]
 8013ac8:	4b53      	ldr	r3, [pc, #332]	; (8013c18 <HAL_UART_RxCpltCallback+0x1e8>)
 8013aca:	7819      	ldrb	r1, [r3, #0]
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	2201      	movs	r2, #1
 8013ad0:	47a0      	blx	r4
            while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, gripper_motor, BUSY_ID) == 0)
 8013ad2:	e003      	b.n	8013adc <HAL_UART_RxCpltCallback+0xac>
            {
               //Just in case the motor reach upper limit
                MX_LWIP_Process();
 8013ad4:	f7f4 fd6a 	bl	80085ac <MX_LWIP_Process>
	              ModbusTCPMain();
 8013ad8:	f7ee ffea 	bl	8002ab0 <ModbusTCPMain>
            while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, gripper_motor, BUSY_ID) == 0)
 8013adc:	4b4c      	ldr	r3, [pc, #304]	; (8013c10 <HAL_UART_RxCpltCallback+0x1e0>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	689b      	ldr	r3, [r3, #8]
 8013ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ae4:	4a4b      	ldr	r2, [pc, #300]	; (8013c14 <HAL_UART_RxCpltCallback+0x1e4>)
 8013ae6:	7810      	ldrb	r0, [r2, #0]
 8013ae8:	4a4b      	ldr	r2, [pc, #300]	; (8013c18 <HAL_UART_RxCpltCallback+0x1e8>)
 8013aea:	7811      	ldrb	r1, [r2, #0]
 8013aec:	2201      	movs	r2, #1
 8013aee:	4798      	blx	r3
 8013af0:	4603      	mov	r3, r0
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d0ee      	beq.n	8013ad4 <HAL_UART_RxCpltCallback+0xa4>
            }
            Update_Motor_Pos();
 8013af6:	f7ff fdb3 	bl	8013660 <Update_Motor_Pos>
            
          }
          /*Annother Direction*/
          if(Desired_Pos<cur_pos)
 8013afa:	4b42      	ldr	r3, [pc, #264]	; (8013c04 <HAL_UART_RxCpltCallback+0x1d4>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	461a      	mov	r2, r3
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	4293      	cmp	r3, r2
 8013b04:	d21e      	bcs.n	8013b44 <HAL_UART_RxCpltCallback+0x114>
          {
            StepperMotorBoardHandle->Command->GoToDir(board, gripper_motor, L6470_DIR_REV_ID, Desired_Pos);
 8013b06:	4b42      	ldr	r3, [pc, #264]	; (8013c10 <HAL_UART_RxCpltCallback+0x1e0>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	689b      	ldr	r3, [r3, #8]
 8013b0c:	699c      	ldr	r4, [r3, #24]
 8013b0e:	4b41      	ldr	r3, [pc, #260]	; (8013c14 <HAL_UART_RxCpltCallback+0x1e4>)
 8013b10:	7818      	ldrb	r0, [r3, #0]
 8013b12:	4b41      	ldr	r3, [pc, #260]	; (8013c18 <HAL_UART_RxCpltCallback+0x1e8>)
 8013b14:	7819      	ldrb	r1, [r3, #0]
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	2200      	movs	r2, #0
 8013b1a:	47a0      	blx	r4
            while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, gripper_motor, BUSY_ID) == 0)
 8013b1c:	e003      	b.n	8013b26 <HAL_UART_RxCpltCallback+0xf6>
            {
              //Just in case the motor reach lower limit
              MX_LWIP_Process();
 8013b1e:	f7f4 fd45 	bl	80085ac <MX_LWIP_Process>
	            ModbusTCPMain();
 8013b22:	f7ee ffc5 	bl	8002ab0 <ModbusTCPMain>
            while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, gripper_motor, BUSY_ID) == 0)
 8013b26:	4b3a      	ldr	r3, [pc, #232]	; (8013c10 <HAL_UART_RxCpltCallback+0x1e0>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	689b      	ldr	r3, [r3, #8]
 8013b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b2e:	4a39      	ldr	r2, [pc, #228]	; (8013c14 <HAL_UART_RxCpltCallback+0x1e4>)
 8013b30:	7810      	ldrb	r0, [r2, #0]
 8013b32:	4a39      	ldr	r2, [pc, #228]	; (8013c18 <HAL_UART_RxCpltCallback+0x1e8>)
 8013b34:	7811      	ldrb	r1, [r2, #0]
 8013b36:	2201      	movs	r2, #1
 8013b38:	4798      	blx	r3
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d0ee      	beq.n	8013b1e <HAL_UART_RxCpltCallback+0xee>
            }
            Update_Motor_Pos();
 8013b40:	f7ff fd8e 	bl	8013660 <Update_Motor_Pos>
          }
          /*Send Modbus Msg*/
          /*Small Size*/
          if(Desired_Pos<=500000)
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	4a35      	ldr	r2, [pc, #212]	; (8013c1c <HAL_UART_RxCpltCallback+0x1ec>)
 8013b48:	4293      	cmp	r3, r2
 8013b4a:	d802      	bhi.n	8013b52 <HAL_UART_RxCpltCallback+0x122>
          {
            REG_DISC_BUF[0]=1;
 8013b4c:	4b34      	ldr	r3, [pc, #208]	; (8013c20 <HAL_UART_RxCpltCallback+0x1f0>)
 8013b4e:	2201      	movs	r2, #1
 8013b50:	701a      	strb	r2, [r3, #0]
          }
          /*Middle Size*/
          if(Desired_Pos>500000 && Desired_Pos<=1200000)
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	4a31      	ldr	r2, [pc, #196]	; (8013c1c <HAL_UART_RxCpltCallback+0x1ec>)
 8013b56:	4293      	cmp	r3, r2
 8013b58:	d906      	bls.n	8013b68 <HAL_UART_RxCpltCallback+0x138>
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	4a31      	ldr	r2, [pc, #196]	; (8013c24 <HAL_UART_RxCpltCallback+0x1f4>)
 8013b5e:	4293      	cmp	r3, r2
 8013b60:	d802      	bhi.n	8013b68 <HAL_UART_RxCpltCallback+0x138>
          {
            REG_DISC_BUF[1]=1;
 8013b62:	4b2f      	ldr	r3, [pc, #188]	; (8013c20 <HAL_UART_RxCpltCallback+0x1f0>)
 8013b64:	2201      	movs	r2, #1
 8013b66:	705a      	strb	r2, [r3, #1]
          }
          /*Large Size*/
          if(Desired_Pos >1200000&&Desired_Pos<=2200000)
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	4a2e      	ldr	r2, [pc, #184]	; (8013c24 <HAL_UART_RxCpltCallback+0x1f4>)
 8013b6c:	4293      	cmp	r3, r2
 8013b6e:	d906      	bls.n	8013b7e <HAL_UART_RxCpltCallback+0x14e>
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	4a25      	ldr	r2, [pc, #148]	; (8013c08 <HAL_UART_RxCpltCallback+0x1d8>)
 8013b74:	4293      	cmp	r3, r2
 8013b76:	d802      	bhi.n	8013b7e <HAL_UART_RxCpltCallback+0x14e>
          {
            REG_DISC_BUF[2]=1;
 8013b78:	4b29      	ldr	r3, [pc, #164]	; (8013c20 <HAL_UART_RxCpltCallback+0x1f0>)
 8013b7a:	2201      	movs	r2, #1
 8013b7c:	709a      	strb	r2, [r3, #2]
          }
          cleared = FALSE;
 8013b7e:	4b2a      	ldr	r3, [pc, #168]	; (8013c28 <HAL_UART_RxCpltCallback+0x1f8>)
 8013b80:	2200      	movs	r2, #0
 8013b82:	701a      	strb	r2, [r3, #0]
          Uart_Send("M");
 8013b84:	4829      	ldr	r0, [pc, #164]	; (8013c2c <HAL_UART_RxCpltCallback+0x1fc>)
 8013b86:	f000 fe9f 	bl	80148c8 <Uart_Send>
 8013b8a:	e030      	b.n	8013bee <HAL_UART_RxCpltCallback+0x1be>
  {

    /*Same buffer, so no need to check whether the first byte is equal to 'A'*/
    //HAL_GPIO_TogglePin(LED_PORT,LED2_PIN);
    //The arm is running, so cannot response, just skip
    if(REG_COILS_BUF[VALVE_NUM]==1)
 8013b8c:	4b1c      	ldr	r3, [pc, #112]	; (8013c00 <HAL_UART_RxCpltCallback+0x1d0>)
 8013b8e:	791b      	ldrb	r3, [r3, #4]
 8013b90:	2b01      	cmp	r3, #1
 8013b92:	d02b      	beq.n	8013bec <HAL_UART_RxCpltCallback+0x1bc>
    {
      return;
    }
    //Get Desired Pos
    uint32_t Desired_Pos = BufferParse((uint8_t *) Rx_Buffer);
 8013b94:	4819      	ldr	r0, [pc, #100]	; (8013bfc <HAL_UART_RxCpltCallback+0x1cc>)
 8013b96:	f000 f8c7 	bl	8013d28 <BufferParse>
 8013b9a:	60b8      	str	r0, [r7, #8]
     /*Send Modbus Msg*/
    /*Small Size*/
    if(Desired_Pos<=500000)
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	4a1f      	ldr	r2, [pc, #124]	; (8013c1c <HAL_UART_RxCpltCallback+0x1ec>)
 8013ba0:	4293      	cmp	r3, r2
 8013ba2:	d802      	bhi.n	8013baa <HAL_UART_RxCpltCallback+0x17a>
    {
      REG_DISC_BUF[0]=1;
 8013ba4:	4b1e      	ldr	r3, [pc, #120]	; (8013c20 <HAL_UART_RxCpltCallback+0x1f0>)
 8013ba6:	2201      	movs	r2, #1
 8013ba8:	701a      	strb	r2, [r3, #0]
    }
    /*Middle Size*/
    if(Desired_Pos>500000 && Desired_Pos<=1200000)
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	4a1b      	ldr	r2, [pc, #108]	; (8013c1c <HAL_UART_RxCpltCallback+0x1ec>)
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	d906      	bls.n	8013bc0 <HAL_UART_RxCpltCallback+0x190>
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	4a1b      	ldr	r2, [pc, #108]	; (8013c24 <HAL_UART_RxCpltCallback+0x1f4>)
 8013bb6:	4293      	cmp	r3, r2
 8013bb8:	d802      	bhi.n	8013bc0 <HAL_UART_RxCpltCallback+0x190>
    {
      REG_DISC_BUF[1]=1;
 8013bba:	4b19      	ldr	r3, [pc, #100]	; (8013c20 <HAL_UART_RxCpltCallback+0x1f0>)
 8013bbc:	2201      	movs	r2, #1
 8013bbe:	705a      	strb	r2, [r3, #1]
    }
    /*Large Size*/
    if(Desired_Pos >1200000&&Desired_Pos<=2200000)
 8013bc0:	68bb      	ldr	r3, [r7, #8]
 8013bc2:	4a18      	ldr	r2, [pc, #96]	; (8013c24 <HAL_UART_RxCpltCallback+0x1f4>)
 8013bc4:	4293      	cmp	r3, r2
 8013bc6:	d906      	bls.n	8013bd6 <HAL_UART_RxCpltCallback+0x1a6>
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	4a0f      	ldr	r2, [pc, #60]	; (8013c08 <HAL_UART_RxCpltCallback+0x1d8>)
 8013bcc:	4293      	cmp	r3, r2
 8013bce:	d802      	bhi.n	8013bd6 <HAL_UART_RxCpltCallback+0x1a6>
    {
      REG_DISC_BUF[2]=1;
 8013bd0:	4b13      	ldr	r3, [pc, #76]	; (8013c20 <HAL_UART_RxCpltCallback+0x1f0>)
 8013bd2:	2201      	movs	r2, #1
 8013bd4:	709a      	strb	r2, [r3, #2]
    }
    cleared = FALSE;
 8013bd6:	4b14      	ldr	r3, [pc, #80]	; (8013c28 <HAL_UART_RxCpltCallback+0x1f8>)
 8013bd8:	2200      	movs	r2, #0
 8013bda:	701a      	strb	r2, [r3, #0]
    Uart_Send("M");
 8013bdc:	4813      	ldr	r0, [pc, #76]	; (8013c2c <HAL_UART_RxCpltCallback+0x1fc>)
 8013bde:	f000 fe73 	bl	80148c8 <Uart_Send>
 8013be2:	e004      	b.n	8013bee <HAL_UART_RxCpltCallback+0x1be>
      return;
 8013be4:	bf00      	nop
 8013be6:	e002      	b.n	8013bee <HAL_UART_RxCpltCallback+0x1be>
        return;
 8013be8:	bf00      	nop
 8013bea:	e000      	b.n	8013bee <HAL_UART_RxCpltCallback+0x1be>
      return;
 8013bec:	bf00      	nop
  }
}
 8013bee:	3714      	adds	r7, #20
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd90      	pop	{r4, r7, pc}
 8013bf4:	40021000 	.word	0x40021000
 8013bf8:	2000e66c 	.word	0x2000e66c
 8013bfc:	2000e664 	.word	0x2000e664
 8013c00:	2000e690 	.word	0x2000e690
 8013c04:	2000e654 	.word	0x2000e654
 8013c08:	002191c0 	.word	0x002191c0
 8013c0c:	00030d40 	.word	0x00030d40
 8013c10:	2000e678 	.word	0x2000e678
 8013c14:	2000e674 	.word	0x2000e674
 8013c18:	2000e675 	.word	0x2000e675
 8013c1c:	0007a120 	.word	0x0007a120
 8013c20:	2000e684 	.word	0x2000e684
 8013c24:	00124f80 	.word	0x00124f80
 8013c28:	2000047c 	.word	0x2000047c
 8013c2c:	08018740 	.word	0x08018740

08013c30 <Buffercmp>:

uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 8013c30:	b480      	push	{r7}
 8013c32:	b085      	sub	sp, #20
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	60f8      	str	r0, [r7, #12]
 8013c38:	60b9      	str	r1, [r7, #8]
 8013c3a:	4613      	mov	r3, r2
 8013c3c:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 8013c3e:	e00d      	b.n	8013c5c <Buffercmp+0x2c>
  {
    if ((*pBuffer1) != *pBuffer2)
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	781a      	ldrb	r2, [r3, #0]
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	429a      	cmp	r2, r3
 8013c4a:	d001      	beq.n	8013c50 <Buffercmp+0x20>
    {
      return 1;
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	e00b      	b.n	8013c68 <Buffercmp+0x38>
    }
    pBuffer1++;
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	3301      	adds	r3, #1
 8013c54:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	3301      	adds	r3, #1
 8013c5a:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8013c5c:	88fb      	ldrh	r3, [r7, #6]
 8013c5e:	1e5a      	subs	r2, r3, #1
 8013c60:	80fa      	strh	r2, [r7, #6]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d1ec      	bne.n	8013c40 <Buffercmp+0x10>
  }

  return 0;
 8013c66:	2300      	movs	r3, #0
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	3714      	adds	r7, #20
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr

08013c74 <BufferInit>:
void BufferInit(uint8_t* pBuffer1, uint8_t* pBuffer2, char *string ,uint16_t BufferLength)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b084      	sub	sp, #16
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	60b9      	str	r1, [r7, #8]
 8013c7e:	607a      	str	r2, [r7, #4]
 8013c80:	807b      	strh	r3, [r7, #2]
  if (strlen(string) != BufferLength)
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f7ec faa4 	bl	80001d0 <strlen>
 8013c88:	4602      	mov	r2, r0
 8013c8a:	887b      	ldrh	r3, [r7, #2]
 8013c8c:	429a      	cmp	r2, r3
 8013c8e:	d023      	beq.n	8013cd8 <BufferInit+0x64>
  {
    while(BufferLength--)
 8013c90:	e00b      	b.n	8013caa <BufferInit+0x36>
    {
      *pBuffer1 = 'E';
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	2245      	movs	r2, #69	; 0x45
 8013c96:	701a      	strb	r2, [r3, #0]
      *pBuffer2 = 'E';
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	2245      	movs	r2, #69	; 0x45
 8013c9c:	701a      	strb	r2, [r3, #0]
      pBuffer1++;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	3301      	adds	r3, #1
 8013ca2:	60fb      	str	r3, [r7, #12]
      pBuffer2++;
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	3301      	adds	r3, #1
 8013ca8:	60bb      	str	r3, [r7, #8]
    while(BufferLength--)
 8013caa:	887b      	ldrh	r3, [r7, #2]
 8013cac:	1e5a      	subs	r2, r3, #1
 8013cae:	807a      	strh	r2, [r7, #2]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d1ee      	bne.n	8013c92 <BufferInit+0x1e>
      pBuffer1++;
      pBuffer2++;
      string++;
    }
  }
}
 8013cb4:	e015      	b.n	8013ce2 <BufferInit+0x6e>
      *pBuffer1 = *pBuffer2 = *string;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	781a      	ldrb	r2, [r3, #0]
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	701a      	strb	r2, [r3, #0]
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	781a      	ldrb	r2, [r3, #0]
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	701a      	strb	r2, [r3, #0]
      pBuffer1++;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	3301      	adds	r3, #1
 8013cca:	60fb      	str	r3, [r7, #12]
      pBuffer2++;
 8013ccc:	68bb      	ldr	r3, [r7, #8]
 8013cce:	3301      	adds	r3, #1
 8013cd0:	60bb      	str	r3, [r7, #8]
      string++;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	3301      	adds	r3, #1
 8013cd6:	607b      	str	r3, [r7, #4]
    while(BufferLength--)
 8013cd8:	887b      	ldrh	r3, [r7, #2]
 8013cda:	1e5a      	subs	r2, r3, #1
 8013cdc:	807a      	strh	r2, [r7, #2]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d1e9      	bne.n	8013cb6 <BufferInit+0x42>
}
 8013ce2:	bf00      	nop
 8013ce4:	3710      	adds	r7, #16
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}

08013cea <BufferCopy>:

void BufferCopy(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 8013cea:	b480      	push	{r7}
 8013cec:	b085      	sub	sp, #20
 8013cee:	af00      	add	r7, sp, #0
 8013cf0:	60f8      	str	r0, [r7, #12]
 8013cf2:	60b9      	str	r1, [r7, #8]
 8013cf4:	4613      	mov	r3, r2
 8013cf6:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 8013cf8:	e009      	b.n	8013d0e <BufferCopy+0x24>
  {
    *pBuffer2= *pBuffer1;
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	781a      	ldrb	r2, [r3, #0]
 8013cfe:	68bb      	ldr	r3, [r7, #8]
 8013d00:	701a      	strb	r2, [r3, #0]
    pBuffer1++;
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	3301      	adds	r3, #1
 8013d06:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	3301      	adds	r3, #1
 8013d0c:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8013d0e:	88fb      	ldrh	r3, [r7, #6]
 8013d10:	1e5a      	subs	r2, r3, #1
 8013d12:	80fa      	strh	r2, [r7, #6]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d1f0      	bne.n	8013cfa <BufferCopy+0x10>
  }
}
 8013d18:	bf00      	nop
 8013d1a:	bf00      	nop
 8013d1c:	3714      	adds	r7, #20
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d24:	4770      	bx	lr
	...

08013d28 <BufferParse>:
uint32_t BufferParse(uint8_t* posBuffer)
{
 8013d28:	b590      	push	{r4, r7, lr}
 8013d2a:	b087      	sub	sp, #28
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  //minimum postion
  uint32_t pos = 0;
 8013d30:	2300      	movs	r3, #0
 8013d32:	617b      	str	r3, [r7, #20]
  /*Double Check the msg*/
  if(posBuffer[0] !='A')
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	781b      	ldrb	r3, [r3, #0]
 8013d38:	2b41      	cmp	r3, #65	; 0x41
 8013d3a:	d002      	beq.n	8013d42 <BufferParse+0x1a>
  {
    return -1;
 8013d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8013d40:	e073      	b.n	8013e2a <BufferParse+0x102>
  }
  bool find_first = false;
 8013d42:	2300      	movs	r3, #0
 8013d44:	73fb      	strb	r3, [r7, #15]
  for(int i=1;i<=7;i++)
 8013d46:	2301      	movs	r3, #1
 8013d48:	613b      	str	r3, [r7, #16]
 8013d4a:	e05e      	b.n	8013e0a <BufferParse+0xe2>
  {
    /*Find First None 0*/
    if(find_first ==false && posBuffer[i]!='0')
 8013d4c:	7bfb      	ldrb	r3, [r7, #15]
 8013d4e:	f083 0301 	eor.w	r3, r3, #1
 8013d52:	b2db      	uxtb	r3, r3
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d02d      	beq.n	8013db4 <BufferParse+0x8c>
 8013d58:	693b      	ldr	r3, [r7, #16]
 8013d5a:	687a      	ldr	r2, [r7, #4]
 8013d5c:	4413      	add	r3, r2
 8013d5e:	781b      	ldrb	r3, [r3, #0]
 8013d60:	2b30      	cmp	r3, #48	; 0x30
 8013d62:	d027      	beq.n	8013db4 <BufferParse+0x8c>
    {
      find_first = true;
 8013d64:	2301      	movs	r3, #1
 8013d66:	73fb      	strb	r3, [r7, #15]
      if(posBuffer[i]>=48 && posBuffer[i]<=57)
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	687a      	ldr	r2, [r7, #4]
 8013d6c:	4413      	add	r3, r2
 8013d6e:	781b      	ldrb	r3, [r3, #0]
 8013d70:	2b2f      	cmp	r3, #47	; 0x2f
 8013d72:	d91c      	bls.n	8013dae <BufferParse+0x86>
 8013d74:	693b      	ldr	r3, [r7, #16]
 8013d76:	687a      	ldr	r2, [r7, #4]
 8013d78:	4413      	add	r3, r2
 8013d7a:	781b      	ldrb	r3, [r3, #0]
 8013d7c:	2b39      	cmp	r3, #57	; 0x39
 8013d7e:	d816      	bhi.n	8013dae <BufferParse+0x86>
      {
        pos+=(posBuffer[i]-48)*usrPow(10,7-i);
 8013d80:	693b      	ldr	r3, [r7, #16]
 8013d82:	687a      	ldr	r2, [r7, #4]
 8013d84:	4413      	add	r3, r2
 8013d86:	781b      	ldrb	r3, [r3, #0]
 8013d88:	3b30      	subs	r3, #48	; 0x30
 8013d8a:	461c      	mov	r4, r3
 8013d8c:	693b      	ldr	r3, [r7, #16]
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	f1c3 0307 	rsb	r3, r3, #7
 8013d94:	b2db      	uxtb	r3, r3
 8013d96:	4619      	mov	r1, r3
 8013d98:	200a      	movs	r0, #10
 8013d9a:	f7ff fe29 	bl	80139f0 <usrPow>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	fb04 f303 	mul.w	r3, r4, r3
 8013da4:	697a      	ldr	r2, [r7, #20]
 8013da6:	4413      	add	r3, r2
 8013da8:	617b      	str	r3, [r7, #20]
 8013daa:	bf00      	nop
      }
      else
      {
        return -1;
      }
      break;
 8013dac:	e030      	b.n	8013e10 <BufferParse+0xe8>
        return -1;
 8013dae:	f04f 33ff 	mov.w	r3, #4294967295
 8013db2:	e03a      	b.n	8013e2a <BufferParse+0x102>
    }
    if(find_first == true)
 8013db4:	7bfb      	ldrb	r3, [r7, #15]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d024      	beq.n	8013e04 <BufferParse+0xdc>
    {
      if(posBuffer[i]>=48 && posBuffer[i]<=57)
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	687a      	ldr	r2, [r7, #4]
 8013dbe:	4413      	add	r3, r2
 8013dc0:	781b      	ldrb	r3, [r3, #0]
 8013dc2:	2b2f      	cmp	r3, #47	; 0x2f
 8013dc4:	d91b      	bls.n	8013dfe <BufferParse+0xd6>
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	687a      	ldr	r2, [r7, #4]
 8013dca:	4413      	add	r3, r2
 8013dcc:	781b      	ldrb	r3, [r3, #0]
 8013dce:	2b39      	cmp	r3, #57	; 0x39
 8013dd0:	d815      	bhi.n	8013dfe <BufferParse+0xd6>
      {
        pos+=(posBuffer[i]-48)*usrPow(10,8-i);
 8013dd2:	693b      	ldr	r3, [r7, #16]
 8013dd4:	687a      	ldr	r2, [r7, #4]
 8013dd6:	4413      	add	r3, r2
 8013dd8:	781b      	ldrb	r3, [r3, #0]
 8013dda:	3b30      	subs	r3, #48	; 0x30
 8013ddc:	461c      	mov	r4, r3
 8013dde:	693b      	ldr	r3, [r7, #16]
 8013de0:	b2db      	uxtb	r3, r3
 8013de2:	f1c3 0308 	rsb	r3, r3, #8
 8013de6:	b2db      	uxtb	r3, r3
 8013de8:	4619      	mov	r1, r3
 8013dea:	200a      	movs	r0, #10
 8013dec:	f7ff fe00 	bl	80139f0 <usrPow>
 8013df0:	4603      	mov	r3, r0
 8013df2:	fb04 f303 	mul.w	r3, r4, r3
 8013df6:	697a      	ldr	r2, [r7, #20]
 8013df8:	4413      	add	r3, r2
 8013dfa:	617b      	str	r3, [r7, #20]
 8013dfc:	e002      	b.n	8013e04 <BufferParse+0xdc>
      }
      else
      {
        return -1;
 8013dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8013e02:	e012      	b.n	8013e2a <BufferParse+0x102>
  for(int i=1;i<=7;i++)
 8013e04:	693b      	ldr	r3, [r7, #16]
 8013e06:	3301      	adds	r3, #1
 8013e08:	613b      	str	r3, [r7, #16]
 8013e0a:	693b      	ldr	r3, [r7, #16]
 8013e0c:	2b07      	cmp	r3, #7
 8013e0e:	dd9d      	ble.n	8013d4c <BufferParse+0x24>
      }
    }
  }
  if(pos>=2200000)
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	4a08      	ldr	r2, [pc, #32]	; (8013e34 <BufferParse+0x10c>)
 8013e14:	4293      	cmp	r3, r2
 8013e16:	d301      	bcc.n	8013e1c <BufferParse+0xf4>
  {
    pos = 2200000;
 8013e18:	4b06      	ldr	r3, [pc, #24]	; (8013e34 <BufferParse+0x10c>)
 8013e1a:	617b      	str	r3, [r7, #20]
  }
  if(pos<=200000)
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	4a06      	ldr	r2, [pc, #24]	; (8013e38 <BufferParse+0x110>)
 8013e20:	4293      	cmp	r3, r2
 8013e22:	d801      	bhi.n	8013e28 <BufferParse+0x100>
  {
    pos=200000;
 8013e24:	4b04      	ldr	r3, [pc, #16]	; (8013e38 <BufferParse+0x110>)
 8013e26:	617b      	str	r3, [r7, #20]
  }
  return pos;
 8013e28:	697b      	ldr	r3, [r7, #20]
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	371c      	adds	r7, #28
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd90      	pop	{r4, r7, pc}
 8013e32:	bf00      	nop
 8013e34:	002191c0 	.word	0x002191c0
 8013e38:	00030d40 	.word	0x00030d40

08013e3c <GetMotorParameterInitData>:
  * @brief  Return the initial motor parameters.
  * @param  index   The index inside the array of parameters to point the right data.
  * @retval MotorParameterData_t*   The pointer to the data structure of parameters.
  */
MotorParameterData_t *GetMotorParameterInitData(void)
{
 8013e3c:	b480      	push	{r7}
 8013e3e:	af00      	add	r7, sp, #0
  return (MotorParameterData_t*)(MotorParameterInitData);
 8013e40:	4b02      	ldr	r3, [pc, #8]	; (8013e4c <GetMotorParameterInitData+0x10>)
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	46bd      	mov	sp, r7
 8013e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4a:	4770      	bx	lr
 8013e4c:	08018b44 	.word	0x08018b44

08013e50 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8013e50:	b480      	push	{r7}
 8013e52:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8013e54:	bf00      	nop
 8013e56:	46bd      	mov	sp, r7
 8013e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5c:	4770      	bx	lr
	...

08013e60 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b086      	sub	sp, #24
 8013e64:	af04      	add	r7, sp, #16
 8013e66:	4603      	mov	r3, r0
 8013e68:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8013e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8013e6e:	9302      	str	r3, [sp, #8]
 8013e70:	2301      	movs	r3, #1
 8013e72:	9301      	str	r3, [sp, #4]
 8013e74:	1dfb      	adds	r3, r7, #7
 8013e76:	9300      	str	r3, [sp, #0]
 8013e78:	2301      	movs	r3, #1
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	2178      	movs	r1, #120	; 0x78
 8013e7e:	4803      	ldr	r0, [pc, #12]	; (8013e8c <ssd1306_WriteCommand+0x2c>)
 8013e80:	f7f1 ff70 	bl	8005d64 <HAL_I2C_Mem_Write>
}
 8013e84:	bf00      	nop
 8013e86:	3708      	adds	r7, #8
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bd80      	pop	{r7, pc}
 8013e8c:	2000e5fc 	.word	0x2000e5fc

08013e90 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b086      	sub	sp, #24
 8013e94:	af04      	add	r7, sp, #16
 8013e96:	6078      	str	r0, [r7, #4]
 8013e98:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	b29b      	uxth	r3, r3
 8013e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8013ea2:	9202      	str	r2, [sp, #8]
 8013ea4:	9301      	str	r3, [sp, #4]
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	9300      	str	r3, [sp, #0]
 8013eaa:	2301      	movs	r3, #1
 8013eac:	2240      	movs	r2, #64	; 0x40
 8013eae:	2178      	movs	r1, #120	; 0x78
 8013eb0:	4803      	ldr	r0, [pc, #12]	; (8013ec0 <ssd1306_WriteData+0x30>)
 8013eb2:	f7f1 ff57 	bl	8005d64 <HAL_I2C_Mem_Write>
}
 8013eb6:	bf00      	nop
 8013eb8:	3708      	adds	r7, #8
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd80      	pop	{r7, pc}
 8013ebe:	bf00      	nop
 8013ec0:	2000e5fc 	.word	0x2000e5fc

08013ec4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8013ec8:	f7ff ffc2 	bl	8013e50 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8013ecc:	2064      	movs	r0, #100	; 0x64
 8013ece:	f7f0 f93b 	bl	8004148 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8013ed2:	2000      	movs	r0, #0
 8013ed4:	f000 fa3a 	bl	801434c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8013ed8:	2020      	movs	r0, #32
 8013eda:	f7ff ffc1 	bl	8013e60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8013ede:	2000      	movs	r0, #0
 8013ee0:	f7ff ffbe 	bl	8013e60 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8013ee4:	20b0      	movs	r0, #176	; 0xb0
 8013ee6:	f7ff ffbb 	bl	8013e60 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8013eea:	20c8      	movs	r0, #200	; 0xc8
 8013eec:	f7ff ffb8 	bl	8013e60 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8013ef0:	2000      	movs	r0, #0
 8013ef2:	f7ff ffb5 	bl	8013e60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8013ef6:	2010      	movs	r0, #16
 8013ef8:	f7ff ffb2 	bl	8013e60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8013efc:	2040      	movs	r0, #64	; 0x40
 8013efe:	f7ff ffaf 	bl	8013e60 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8013f02:	20ff      	movs	r0, #255	; 0xff
 8013f04:	f000 fa0e 	bl	8014324 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8013f08:	20a1      	movs	r0, #161	; 0xa1
 8013f0a:	f7ff ffa9 	bl	8013e60 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8013f0e:	20a6      	movs	r0, #166	; 0xa6
 8013f10:	f7ff ffa6 	bl	8013e60 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8013f14:	20a8      	movs	r0, #168	; 0xa8
 8013f16:	f7ff ffa3 	bl	8013e60 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8013f1a:	203f      	movs	r0, #63	; 0x3f
 8013f1c:	f7ff ffa0 	bl	8013e60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8013f20:	20a4      	movs	r0, #164	; 0xa4
 8013f22:	f7ff ff9d 	bl	8013e60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8013f26:	20d3      	movs	r0, #211	; 0xd3
 8013f28:	f7ff ff9a 	bl	8013e60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8013f2c:	2000      	movs	r0, #0
 8013f2e:	f7ff ff97 	bl	8013e60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8013f32:	20d5      	movs	r0, #213	; 0xd5
 8013f34:	f7ff ff94 	bl	8013e60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8013f38:	20f0      	movs	r0, #240	; 0xf0
 8013f3a:	f7ff ff91 	bl	8013e60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8013f3e:	20d9      	movs	r0, #217	; 0xd9
 8013f40:	f7ff ff8e 	bl	8013e60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8013f44:	2022      	movs	r0, #34	; 0x22
 8013f46:	f7ff ff8b 	bl	8013e60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8013f4a:	20da      	movs	r0, #218	; 0xda
 8013f4c:	f7ff ff88 	bl	8013e60 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8013f50:	2012      	movs	r0, #18
 8013f52:	f7ff ff85 	bl	8013e60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8013f56:	20db      	movs	r0, #219	; 0xdb
 8013f58:	f7ff ff82 	bl	8013e60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8013f5c:	2020      	movs	r0, #32
 8013f5e:	f7ff ff7f 	bl	8013e60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8013f62:	208d      	movs	r0, #141	; 0x8d
 8013f64:	f7ff ff7c 	bl	8013e60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8013f68:	2014      	movs	r0, #20
 8013f6a:	f7ff ff79 	bl	8013e60 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8013f6e:	2001      	movs	r0, #1
 8013f70:	f000 f9ec 	bl	801434c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8013f74:	2000      	movs	r0, #0
 8013f76:	f000 f80f 	bl	8013f98 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8013f7a:	f000 f825 	bl	8013fc8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8013f7e:	4b05      	ldr	r3, [pc, #20]	; (8013f94 <ssd1306_Init+0xd0>)
 8013f80:	2200      	movs	r2, #0
 8013f82:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8013f84:	4b03      	ldr	r3, [pc, #12]	; (8013f94 <ssd1306_Init+0xd0>)
 8013f86:	2200      	movs	r2, #0
 8013f88:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8013f8a:	4b02      	ldr	r3, [pc, #8]	; (8013f94 <ssd1306_Init+0xd0>)
 8013f8c:	2201      	movs	r2, #1
 8013f8e:	711a      	strb	r2, [r3, #4]
}
 8013f90:	bf00      	nop
 8013f92:	bd80      	pop	{r7, pc}
 8013f94:	2000eaa8 	.word	0x2000eaa8

08013f98 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b082      	sub	sp, #8
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8013fa2:	79fb      	ldrb	r3, [r7, #7]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d101      	bne.n	8013fac <ssd1306_Fill+0x14>
 8013fa8:	2300      	movs	r3, #0
 8013faa:	e000      	b.n	8013fae <ssd1306_Fill+0x16>
 8013fac:	23ff      	movs	r3, #255	; 0xff
 8013fae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	4803      	ldr	r0, [pc, #12]	; (8013fc4 <ssd1306_Fill+0x2c>)
 8013fb6:	f000 fea5 	bl	8014d04 <memset>
}
 8013fba:	bf00      	nop
 8013fbc:	3708      	adds	r7, #8
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	bd80      	pop	{r7, pc}
 8013fc2:	bf00      	nop
 8013fc4:	2000e6a8 	.word	0x2000e6a8

08013fc8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b082      	sub	sp, #8
 8013fcc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8013fce:	2300      	movs	r3, #0
 8013fd0:	71fb      	strb	r3, [r7, #7]
 8013fd2:	e016      	b.n	8014002 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8013fd4:	79fb      	ldrb	r3, [r7, #7]
 8013fd6:	3b50      	subs	r3, #80	; 0x50
 8013fd8:	b2db      	uxtb	r3, r3
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f7ff ff40 	bl	8013e60 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8013fe0:	2000      	movs	r0, #0
 8013fe2:	f7ff ff3d 	bl	8013e60 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8013fe6:	2010      	movs	r0, #16
 8013fe8:	f7ff ff3a 	bl	8013e60 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8013fec:	79fb      	ldrb	r3, [r7, #7]
 8013fee:	01db      	lsls	r3, r3, #7
 8013ff0:	4a08      	ldr	r2, [pc, #32]	; (8014014 <ssd1306_UpdateScreen+0x4c>)
 8013ff2:	4413      	add	r3, r2
 8013ff4:	2180      	movs	r1, #128	; 0x80
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	f7ff ff4a 	bl	8013e90 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8013ffc:	79fb      	ldrb	r3, [r7, #7]
 8013ffe:	3301      	adds	r3, #1
 8014000:	71fb      	strb	r3, [r7, #7]
 8014002:	79fb      	ldrb	r3, [r7, #7]
 8014004:	2b07      	cmp	r3, #7
 8014006:	d9e5      	bls.n	8013fd4 <ssd1306_UpdateScreen+0xc>
    }
}
 8014008:	bf00      	nop
 801400a:	bf00      	nop
 801400c:	3708      	adds	r7, #8
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}
 8014012:	bf00      	nop
 8014014:	2000e6a8 	.word	0x2000e6a8

08014018 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8014018:	b480      	push	{r7}
 801401a:	b083      	sub	sp, #12
 801401c:	af00      	add	r7, sp, #0
 801401e:	4603      	mov	r3, r0
 8014020:	71fb      	strb	r3, [r7, #7]
 8014022:	460b      	mov	r3, r1
 8014024:	71bb      	strb	r3, [r7, #6]
 8014026:	4613      	mov	r3, r2
 8014028:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 801402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801402e:	2b00      	cmp	r3, #0
 8014030:	db3d      	blt.n	80140ae <ssd1306_DrawPixel+0x96>
 8014032:	79bb      	ldrb	r3, [r7, #6]
 8014034:	2b3f      	cmp	r3, #63	; 0x3f
 8014036:	d83a      	bhi.n	80140ae <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8014038:	797b      	ldrb	r3, [r7, #5]
 801403a:	2b01      	cmp	r3, #1
 801403c:	d11a      	bne.n	8014074 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 801403e:	79fa      	ldrb	r2, [r7, #7]
 8014040:	79bb      	ldrb	r3, [r7, #6]
 8014042:	08db      	lsrs	r3, r3, #3
 8014044:	b2d8      	uxtb	r0, r3
 8014046:	4603      	mov	r3, r0
 8014048:	01db      	lsls	r3, r3, #7
 801404a:	4413      	add	r3, r2
 801404c:	4a1b      	ldr	r2, [pc, #108]	; (80140bc <ssd1306_DrawPixel+0xa4>)
 801404e:	5cd3      	ldrb	r3, [r2, r3]
 8014050:	b25a      	sxtb	r2, r3
 8014052:	79bb      	ldrb	r3, [r7, #6]
 8014054:	f003 0307 	and.w	r3, r3, #7
 8014058:	2101      	movs	r1, #1
 801405a:	fa01 f303 	lsl.w	r3, r1, r3
 801405e:	b25b      	sxtb	r3, r3
 8014060:	4313      	orrs	r3, r2
 8014062:	b259      	sxtb	r1, r3
 8014064:	79fa      	ldrb	r2, [r7, #7]
 8014066:	4603      	mov	r3, r0
 8014068:	01db      	lsls	r3, r3, #7
 801406a:	4413      	add	r3, r2
 801406c:	b2c9      	uxtb	r1, r1
 801406e:	4a13      	ldr	r2, [pc, #76]	; (80140bc <ssd1306_DrawPixel+0xa4>)
 8014070:	54d1      	strb	r1, [r2, r3]
 8014072:	e01d      	b.n	80140b0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8014074:	79fa      	ldrb	r2, [r7, #7]
 8014076:	79bb      	ldrb	r3, [r7, #6]
 8014078:	08db      	lsrs	r3, r3, #3
 801407a:	b2d8      	uxtb	r0, r3
 801407c:	4603      	mov	r3, r0
 801407e:	01db      	lsls	r3, r3, #7
 8014080:	4413      	add	r3, r2
 8014082:	4a0e      	ldr	r2, [pc, #56]	; (80140bc <ssd1306_DrawPixel+0xa4>)
 8014084:	5cd3      	ldrb	r3, [r2, r3]
 8014086:	b25a      	sxtb	r2, r3
 8014088:	79bb      	ldrb	r3, [r7, #6]
 801408a:	f003 0307 	and.w	r3, r3, #7
 801408e:	2101      	movs	r1, #1
 8014090:	fa01 f303 	lsl.w	r3, r1, r3
 8014094:	b25b      	sxtb	r3, r3
 8014096:	43db      	mvns	r3, r3
 8014098:	b25b      	sxtb	r3, r3
 801409a:	4013      	ands	r3, r2
 801409c:	b259      	sxtb	r1, r3
 801409e:	79fa      	ldrb	r2, [r7, #7]
 80140a0:	4603      	mov	r3, r0
 80140a2:	01db      	lsls	r3, r3, #7
 80140a4:	4413      	add	r3, r2
 80140a6:	b2c9      	uxtb	r1, r1
 80140a8:	4a04      	ldr	r2, [pc, #16]	; (80140bc <ssd1306_DrawPixel+0xa4>)
 80140aa:	54d1      	strb	r1, [r2, r3]
 80140ac:	e000      	b.n	80140b0 <ssd1306_DrawPixel+0x98>
        return;
 80140ae:	bf00      	nop
    }
}
 80140b0:	370c      	adds	r7, #12
 80140b2:	46bd      	mov	sp, r7
 80140b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b8:	4770      	bx	lr
 80140ba:	bf00      	nop
 80140bc:	2000e6a8 	.word	0x2000e6a8

080140c0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80140c0:	b590      	push	{r4, r7, lr}
 80140c2:	b089      	sub	sp, #36	; 0x24
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	4604      	mov	r4, r0
 80140c8:	1d38      	adds	r0, r7, #4
 80140ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80140ce:	461a      	mov	r2, r3
 80140d0:	4623      	mov	r3, r4
 80140d2:	73fb      	strb	r3, [r7, #15]
 80140d4:	4613      	mov	r3, r2
 80140d6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80140d8:	7bfb      	ldrb	r3, [r7, #15]
 80140da:	2b1f      	cmp	r3, #31
 80140dc:	d902      	bls.n	80140e4 <ssd1306_WriteChar+0x24>
 80140de:	7bfb      	ldrb	r3, [r7, #15]
 80140e0:	2b7e      	cmp	r3, #126	; 0x7e
 80140e2:	d901      	bls.n	80140e8 <ssd1306_WriteChar+0x28>
        return 0;
 80140e4:	2300      	movs	r3, #0
 80140e6:	e06d      	b.n	80141c4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80140e8:	4b38      	ldr	r3, [pc, #224]	; (80141cc <ssd1306_WriteChar+0x10c>)
 80140ea:	881b      	ldrh	r3, [r3, #0]
 80140ec:	461a      	mov	r2, r3
 80140ee:	793b      	ldrb	r3, [r7, #4]
 80140f0:	4413      	add	r3, r2
 80140f2:	2b80      	cmp	r3, #128	; 0x80
 80140f4:	dc06      	bgt.n	8014104 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80140f6:	4b35      	ldr	r3, [pc, #212]	; (80141cc <ssd1306_WriteChar+0x10c>)
 80140f8:	885b      	ldrh	r3, [r3, #2]
 80140fa:	461a      	mov	r2, r3
 80140fc:	797b      	ldrb	r3, [r7, #5]
 80140fe:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8014100:	2b40      	cmp	r3, #64	; 0x40
 8014102:	dd01      	ble.n	8014108 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8014104:	2300      	movs	r3, #0
 8014106:	e05d      	b.n	80141c4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8014108:	2300      	movs	r3, #0
 801410a:	61fb      	str	r3, [r7, #28]
 801410c:	e04c      	b.n	80141a8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 801410e:	68ba      	ldr	r2, [r7, #8]
 8014110:	7bfb      	ldrb	r3, [r7, #15]
 8014112:	3b20      	subs	r3, #32
 8014114:	7979      	ldrb	r1, [r7, #5]
 8014116:	fb01 f303 	mul.w	r3, r1, r3
 801411a:	4619      	mov	r1, r3
 801411c:	69fb      	ldr	r3, [r7, #28]
 801411e:	440b      	add	r3, r1
 8014120:	005b      	lsls	r3, r3, #1
 8014122:	4413      	add	r3, r2
 8014124:	881b      	ldrh	r3, [r3, #0]
 8014126:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8014128:	2300      	movs	r3, #0
 801412a:	61bb      	str	r3, [r7, #24]
 801412c:	e034      	b.n	8014198 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 801412e:	697a      	ldr	r2, [r7, #20]
 8014130:	69bb      	ldr	r3, [r7, #24]
 8014132:	fa02 f303 	lsl.w	r3, r2, r3
 8014136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801413a:	2b00      	cmp	r3, #0
 801413c:	d012      	beq.n	8014164 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 801413e:	4b23      	ldr	r3, [pc, #140]	; (80141cc <ssd1306_WriteChar+0x10c>)
 8014140:	881b      	ldrh	r3, [r3, #0]
 8014142:	b2da      	uxtb	r2, r3
 8014144:	69bb      	ldr	r3, [r7, #24]
 8014146:	b2db      	uxtb	r3, r3
 8014148:	4413      	add	r3, r2
 801414a:	b2d8      	uxtb	r0, r3
 801414c:	4b1f      	ldr	r3, [pc, #124]	; (80141cc <ssd1306_WriteChar+0x10c>)
 801414e:	885b      	ldrh	r3, [r3, #2]
 8014150:	b2da      	uxtb	r2, r3
 8014152:	69fb      	ldr	r3, [r7, #28]
 8014154:	b2db      	uxtb	r3, r3
 8014156:	4413      	add	r3, r2
 8014158:	b2db      	uxtb	r3, r3
 801415a:	7bba      	ldrb	r2, [r7, #14]
 801415c:	4619      	mov	r1, r3
 801415e:	f7ff ff5b 	bl	8014018 <ssd1306_DrawPixel>
 8014162:	e016      	b.n	8014192 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8014164:	4b19      	ldr	r3, [pc, #100]	; (80141cc <ssd1306_WriteChar+0x10c>)
 8014166:	881b      	ldrh	r3, [r3, #0]
 8014168:	b2da      	uxtb	r2, r3
 801416a:	69bb      	ldr	r3, [r7, #24]
 801416c:	b2db      	uxtb	r3, r3
 801416e:	4413      	add	r3, r2
 8014170:	b2d8      	uxtb	r0, r3
 8014172:	4b16      	ldr	r3, [pc, #88]	; (80141cc <ssd1306_WriteChar+0x10c>)
 8014174:	885b      	ldrh	r3, [r3, #2]
 8014176:	b2da      	uxtb	r2, r3
 8014178:	69fb      	ldr	r3, [r7, #28]
 801417a:	b2db      	uxtb	r3, r3
 801417c:	4413      	add	r3, r2
 801417e:	b2d9      	uxtb	r1, r3
 8014180:	7bbb      	ldrb	r3, [r7, #14]
 8014182:	2b00      	cmp	r3, #0
 8014184:	bf0c      	ite	eq
 8014186:	2301      	moveq	r3, #1
 8014188:	2300      	movne	r3, #0
 801418a:	b2db      	uxtb	r3, r3
 801418c:	461a      	mov	r2, r3
 801418e:	f7ff ff43 	bl	8014018 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8014192:	69bb      	ldr	r3, [r7, #24]
 8014194:	3301      	adds	r3, #1
 8014196:	61bb      	str	r3, [r7, #24]
 8014198:	793b      	ldrb	r3, [r7, #4]
 801419a:	461a      	mov	r2, r3
 801419c:	69bb      	ldr	r3, [r7, #24]
 801419e:	4293      	cmp	r3, r2
 80141a0:	d3c5      	bcc.n	801412e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80141a2:	69fb      	ldr	r3, [r7, #28]
 80141a4:	3301      	adds	r3, #1
 80141a6:	61fb      	str	r3, [r7, #28]
 80141a8:	797b      	ldrb	r3, [r7, #5]
 80141aa:	461a      	mov	r2, r3
 80141ac:	69fb      	ldr	r3, [r7, #28]
 80141ae:	4293      	cmp	r3, r2
 80141b0:	d3ad      	bcc.n	801410e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80141b2:	4b06      	ldr	r3, [pc, #24]	; (80141cc <ssd1306_WriteChar+0x10c>)
 80141b4:	881a      	ldrh	r2, [r3, #0]
 80141b6:	793b      	ldrb	r3, [r7, #4]
 80141b8:	b29b      	uxth	r3, r3
 80141ba:	4413      	add	r3, r2
 80141bc:	b29a      	uxth	r2, r3
 80141be:	4b03      	ldr	r3, [pc, #12]	; (80141cc <ssd1306_WriteChar+0x10c>)
 80141c0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80141c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80141c4:	4618      	mov	r0, r3
 80141c6:	3724      	adds	r7, #36	; 0x24
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bd90      	pop	{r4, r7, pc}
 80141cc:	2000eaa8 	.word	0x2000eaa8

080141d0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b084      	sub	sp, #16
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	60f8      	str	r0, [r7, #12]
 80141d8:	1d38      	adds	r0, r7, #4
 80141da:	e880 0006 	stmia.w	r0, {r1, r2}
 80141de:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80141e0:	e012      	b.n	8014208 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	7818      	ldrb	r0, [r3, #0]
 80141e6:	78fb      	ldrb	r3, [r7, #3]
 80141e8:	1d3a      	adds	r2, r7, #4
 80141ea:	ca06      	ldmia	r2, {r1, r2}
 80141ec:	f7ff ff68 	bl	80140c0 <ssd1306_WriteChar>
 80141f0:	4603      	mov	r3, r0
 80141f2:	461a      	mov	r2, r3
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	781b      	ldrb	r3, [r3, #0]
 80141f8:	429a      	cmp	r2, r3
 80141fa:	d002      	beq.n	8014202 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	e008      	b.n	8014214 <ssd1306_WriteString+0x44>
        }
        str++;
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	3301      	adds	r3, #1
 8014206:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	781b      	ldrb	r3, [r3, #0]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d1e8      	bne.n	80141e2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	781b      	ldrb	r3, [r3, #0]
}
 8014214:	4618      	mov	r0, r3
 8014216:	3710      	adds	r7, #16
 8014218:	46bd      	mov	sp, r7
 801421a:	bd80      	pop	{r7, pc}

0801421c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 801421c:	b480      	push	{r7}
 801421e:	b083      	sub	sp, #12
 8014220:	af00      	add	r7, sp, #0
 8014222:	4603      	mov	r3, r0
 8014224:	460a      	mov	r2, r1
 8014226:	71fb      	strb	r3, [r7, #7]
 8014228:	4613      	mov	r3, r2
 801422a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 801422c:	79fb      	ldrb	r3, [r7, #7]
 801422e:	b29a      	uxth	r2, r3
 8014230:	4b05      	ldr	r3, [pc, #20]	; (8014248 <ssd1306_SetCursor+0x2c>)
 8014232:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8014234:	79bb      	ldrb	r3, [r7, #6]
 8014236:	b29a      	uxth	r2, r3
 8014238:	4b03      	ldr	r3, [pc, #12]	; (8014248 <ssd1306_SetCursor+0x2c>)
 801423a:	805a      	strh	r2, [r3, #2]
}
 801423c:	bf00      	nop
 801423e:	370c      	adds	r7, #12
 8014240:	46bd      	mov	sp, r7
 8014242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014246:	4770      	bx	lr
 8014248:	2000eaa8 	.word	0x2000eaa8

0801424c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 801424c:	b590      	push	{r4, r7, lr}
 801424e:	b089      	sub	sp, #36	; 0x24
 8014250:	af00      	add	r7, sp, #0
 8014252:	4604      	mov	r4, r0
 8014254:	4608      	mov	r0, r1
 8014256:	4611      	mov	r1, r2
 8014258:	461a      	mov	r2, r3
 801425a:	4623      	mov	r3, r4
 801425c:	71fb      	strb	r3, [r7, #7]
 801425e:	4603      	mov	r3, r0
 8014260:	71bb      	strb	r3, [r7, #6]
 8014262:	460b      	mov	r3, r1
 8014264:	717b      	strb	r3, [r7, #5]
 8014266:	4613      	mov	r3, r2
 8014268:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 801426a:	797a      	ldrb	r2, [r7, #5]
 801426c:	79fb      	ldrb	r3, [r7, #7]
 801426e:	1ad3      	subs	r3, r2, r3
 8014270:	2b00      	cmp	r3, #0
 8014272:	bfb8      	it	lt
 8014274:	425b      	neglt	r3, r3
 8014276:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8014278:	793a      	ldrb	r2, [r7, #4]
 801427a:	79bb      	ldrb	r3, [r7, #6]
 801427c:	1ad3      	subs	r3, r2, r3
 801427e:	2b00      	cmp	r3, #0
 8014280:	bfb8      	it	lt
 8014282:	425b      	neglt	r3, r3
 8014284:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8014286:	79fa      	ldrb	r2, [r7, #7]
 8014288:	797b      	ldrb	r3, [r7, #5]
 801428a:	429a      	cmp	r2, r3
 801428c:	d201      	bcs.n	8014292 <ssd1306_Line+0x46>
 801428e:	2301      	movs	r3, #1
 8014290:	e001      	b.n	8014296 <ssd1306_Line+0x4a>
 8014292:	f04f 33ff 	mov.w	r3, #4294967295
 8014296:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8014298:	79ba      	ldrb	r2, [r7, #6]
 801429a:	793b      	ldrb	r3, [r7, #4]
 801429c:	429a      	cmp	r2, r3
 801429e:	d201      	bcs.n	80142a4 <ssd1306_Line+0x58>
 80142a0:	2301      	movs	r3, #1
 80142a2:	e001      	b.n	80142a8 <ssd1306_Line+0x5c>
 80142a4:	f04f 33ff 	mov.w	r3, #4294967295
 80142a8:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80142aa:	69ba      	ldr	r2, [r7, #24]
 80142ac:	697b      	ldr	r3, [r7, #20]
 80142ae:	1ad3      	subs	r3, r2, r3
 80142b0:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80142b2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80142b6:	7939      	ldrb	r1, [r7, #4]
 80142b8:	797b      	ldrb	r3, [r7, #5]
 80142ba:	4618      	mov	r0, r3
 80142bc:	f7ff feac 	bl	8014018 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80142c0:	e024      	b.n	801430c <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80142c2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80142c6:	79b9      	ldrb	r1, [r7, #6]
 80142c8:	79fb      	ldrb	r3, [r7, #7]
 80142ca:	4618      	mov	r0, r3
 80142cc:	f7ff fea4 	bl	8014018 <ssd1306_DrawPixel>
        error2 = error * 2;
 80142d0:	69fb      	ldr	r3, [r7, #28]
 80142d2:	005b      	lsls	r3, r3, #1
 80142d4:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80142d6:	697b      	ldr	r3, [r7, #20]
 80142d8:	425b      	negs	r3, r3
 80142da:	68ba      	ldr	r2, [r7, #8]
 80142dc:	429a      	cmp	r2, r3
 80142de:	dd08      	ble.n	80142f2 <ssd1306_Line+0xa6>
            error -= deltaY;
 80142e0:	69fa      	ldr	r2, [r7, #28]
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	1ad3      	subs	r3, r2, r3
 80142e6:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80142e8:	693b      	ldr	r3, [r7, #16]
 80142ea:	b2da      	uxtb	r2, r3
 80142ec:	79fb      	ldrb	r3, [r7, #7]
 80142ee:	4413      	add	r3, r2
 80142f0:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80142f2:	68ba      	ldr	r2, [r7, #8]
 80142f4:	69bb      	ldr	r3, [r7, #24]
 80142f6:	429a      	cmp	r2, r3
 80142f8:	da08      	bge.n	801430c <ssd1306_Line+0xc0>
            error += deltaX;
 80142fa:	69fa      	ldr	r2, [r7, #28]
 80142fc:	69bb      	ldr	r3, [r7, #24]
 80142fe:	4413      	add	r3, r2
 8014300:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	b2da      	uxtb	r2, r3
 8014306:	79bb      	ldrb	r3, [r7, #6]
 8014308:	4413      	add	r3, r2
 801430a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 801430c:	79fa      	ldrb	r2, [r7, #7]
 801430e:	797b      	ldrb	r3, [r7, #5]
 8014310:	429a      	cmp	r2, r3
 8014312:	d1d6      	bne.n	80142c2 <ssd1306_Line+0x76>
 8014314:	79ba      	ldrb	r2, [r7, #6]
 8014316:	793b      	ldrb	r3, [r7, #4]
 8014318:	429a      	cmp	r2, r3
 801431a:	d1d2      	bne.n	80142c2 <ssd1306_Line+0x76>
        }
    }
    return;
 801431c:	bf00      	nop
}
 801431e:	3724      	adds	r7, #36	; 0x24
 8014320:	46bd      	mov	sp, r7
 8014322:	bd90      	pop	{r4, r7, pc}

08014324 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8014324:	b580      	push	{r7, lr}
 8014326:	b084      	sub	sp, #16
 8014328:	af00      	add	r7, sp, #0
 801432a:	4603      	mov	r3, r0
 801432c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 801432e:	2381      	movs	r3, #129	; 0x81
 8014330:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8014332:	7bfb      	ldrb	r3, [r7, #15]
 8014334:	4618      	mov	r0, r3
 8014336:	f7ff fd93 	bl	8013e60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 801433a:	79fb      	ldrb	r3, [r7, #7]
 801433c:	4618      	mov	r0, r3
 801433e:	f7ff fd8f 	bl	8013e60 <ssd1306_WriteCommand>
}
 8014342:	bf00      	nop
 8014344:	3710      	adds	r7, #16
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}
	...

0801434c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 801434c:	b580      	push	{r7, lr}
 801434e:	b084      	sub	sp, #16
 8014350:	af00      	add	r7, sp, #0
 8014352:	4603      	mov	r3, r0
 8014354:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8014356:	79fb      	ldrb	r3, [r7, #7]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d005      	beq.n	8014368 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 801435c:	23af      	movs	r3, #175	; 0xaf
 801435e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8014360:	4b08      	ldr	r3, [pc, #32]	; (8014384 <ssd1306_SetDisplayOn+0x38>)
 8014362:	2201      	movs	r2, #1
 8014364:	715a      	strb	r2, [r3, #5]
 8014366:	e004      	b.n	8014372 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8014368:	23ae      	movs	r3, #174	; 0xae
 801436a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 801436c:	4b05      	ldr	r3, [pc, #20]	; (8014384 <ssd1306_SetDisplayOn+0x38>)
 801436e:	2200      	movs	r2, #0
 8014370:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8014372:	7bfb      	ldrb	r3, [r7, #15]
 8014374:	4618      	mov	r0, r3
 8014376:	f7ff fd73 	bl	8013e60 <ssd1306_WriteCommand>
}
 801437a:	bf00      	nop
 801437c:	3710      	adds	r7, #16
 801437e:	46bd      	mov	sp, r7
 8014380:	bd80      	pop	{r7, pc}
 8014382:	bf00      	nop
 8014384:	2000eaa8 	.word	0x2000eaa8

08014388 <HAL_SPI_MspInit>:
}
#endif

#ifdef USE_L6470
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b08c      	sub	sp, #48	; 0x30
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	4a3a      	ldr	r2, [pc, #232]	; (8014480 <HAL_SPI_MspInit+0xf8>)
 8014396:	4293      	cmp	r3, r2
 8014398:	d13c      	bne.n	8014414 <HAL_SPI_MspInit+0x8c>
  {
    /* GPIO clocks enable */
    __GPIOA_CLK_ENABLE();
 801439a:	2300      	movs	r3, #0
 801439c:	61bb      	str	r3, [r7, #24]
 801439e:	4b39      	ldr	r3, [pc, #228]	; (8014484 <HAL_SPI_MspInit+0xfc>)
 80143a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143a2:	4a38      	ldr	r2, [pc, #224]	; (8014484 <HAL_SPI_MspInit+0xfc>)
 80143a4:	f043 0301 	orr.w	r3, r3, #1
 80143a8:	6313      	str	r3, [r2, #48]	; 0x30
 80143aa:	4b36      	ldr	r3, [pc, #216]	; (8014484 <HAL_SPI_MspInit+0xfc>)
 80143ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143ae:	f003 0301 	and.w	r3, r3, #1
 80143b2:	61bb      	str	r3, [r7, #24]
 80143b4:	69bb      	ldr	r3, [r7, #24]
#ifdef USE_PB3_AS_SCK
    __GPIOB_CLK_ENABLE();
#endif
    
    /* Peripheral clock enable */
    __SPI1_CLK_ENABLE();
 80143b6:	2300      	movs	r3, #0
 80143b8:	617b      	str	r3, [r7, #20]
 80143ba:	4b32      	ldr	r3, [pc, #200]	; (8014484 <HAL_SPI_MspInit+0xfc>)
 80143bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143be:	4a31      	ldr	r2, [pc, #196]	; (8014484 <HAL_SPI_MspInit+0xfc>)
 80143c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80143c4:	6453      	str	r3, [r2, #68]	; 0x44
 80143c6:	4b2f      	ldr	r3, [pc, #188]	; (8014484 <HAL_SPI_MspInit+0xfc>)
 80143c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80143ce:	617b      	str	r3, [r7, #20]
 80143d0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PA5/PB3 ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80143d2:	2330      	movs	r3, #48	; 0x30
 80143d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80143d6:	2302      	movs	r3, #2
 80143d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143da:	2300      	movs	r3, #0
 80143dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80143de:	2303      	movs	r3, #3
 80143e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80143e2:	2305      	movs	r3, #5
 80143e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80143e6:	f107 031c 	add.w	r3, r7, #28
 80143ea:	4619      	mov	r1, r3
 80143ec:	4826      	ldr	r0, [pc, #152]	; (8014488 <HAL_SPI_MspInit+0x100>)
 80143ee:	f7f1 f975 	bl	80056dc <HAL_GPIO_Init>

#ifdef USE_PB3_AS_SCK
    GPIO_InitStruct.Pin = GPIO_PIN_3;
#elif defined (USE_PA5_AS_SCK)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80143f2:	2320      	movs	r3, #32
 80143f4:	61fb      	str	r3, [r7, #28]
#endif
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80143f6:	2302      	movs	r3, #2
 80143f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143fa:	2300      	movs	r3, #0
 80143fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80143fe:	2303      	movs	r3, #3
 8014400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8014402:	2305      	movs	r3, #5
 8014404:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef USE_PB3_AS_SCK
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#elif defined (USE_PA5_AS_SCK)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014406:	f107 031c 	add.w	r3, r7, #28
 801440a:	4619      	mov	r1, r3
 801440c:	481f      	ldr	r0, [pc, #124]	; (801448c <HAL_SPI_MspInit+0x104>)
 801440e:	f7f1 f965 	bl	80056dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  }
}
 8014412:	e031      	b.n	8014478 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	4a1d      	ldr	r2, [pc, #116]	; (8014490 <HAL_SPI_MspInit+0x108>)
 801441a:	4293      	cmp	r3, r2
 801441c:	d12c      	bne.n	8014478 <HAL_SPI_MspInit+0xf0>
    __GPIOB_CLK_ENABLE();
 801441e:	2300      	movs	r3, #0
 8014420:	613b      	str	r3, [r7, #16]
 8014422:	4b18      	ldr	r3, [pc, #96]	; (8014484 <HAL_SPI_MspInit+0xfc>)
 8014424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014426:	4a17      	ldr	r2, [pc, #92]	; (8014484 <HAL_SPI_MspInit+0xfc>)
 8014428:	f043 0302 	orr.w	r3, r3, #2
 801442c:	6313      	str	r3, [r2, #48]	; 0x30
 801442e:	4b15      	ldr	r3, [pc, #84]	; (8014484 <HAL_SPI_MspInit+0xfc>)
 8014430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014432:	f003 0302 	and.w	r3, r3, #2
 8014436:	613b      	str	r3, [r7, #16]
 8014438:	693b      	ldr	r3, [r7, #16]
    __SPI2_CLK_ENABLE();
 801443a:	2300      	movs	r3, #0
 801443c:	60fb      	str	r3, [r7, #12]
 801443e:	4b11      	ldr	r3, [pc, #68]	; (8014484 <HAL_SPI_MspInit+0xfc>)
 8014440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014442:	4a10      	ldr	r2, [pc, #64]	; (8014484 <HAL_SPI_MspInit+0xfc>)
 8014444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014448:	6413      	str	r3, [r2, #64]	; 0x40
 801444a:	4b0e      	ldr	r3, [pc, #56]	; (8014484 <HAL_SPI_MspInit+0xfc>)
 801444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801444e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014452:	60fb      	str	r3, [r7, #12]
 8014454:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8014456:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 801445a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801445c:	2302      	movs	r3, #2
 801445e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014460:	2300      	movs	r3, #0
 8014462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8014464:	2303      	movs	r3, #3
 8014466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8014468:	2305      	movs	r3, #5
 801446a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801446c:	f107 031c 	add.w	r3, r7, #28
 8014470:	4619      	mov	r1, r3
 8014472:	4805      	ldr	r0, [pc, #20]	; (8014488 <HAL_SPI_MspInit+0x100>)
 8014474:	f7f1 f932 	bl	80056dc <HAL_GPIO_Init>
}
 8014478:	bf00      	nop
 801447a:	3730      	adds	r7, #48	; 0x30
 801447c:	46bd      	mov	sp, r7
 801447e:	bd80      	pop	{r7, pc}
 8014480:	40013000 	.word	0x40013000
 8014484:	40023800 	.word	0x40023800
 8014488:	40020400 	.word	0x40020400
 801448c:	40020000 	.word	0x40020000
 8014490:	40003800 	.word	0x40003800

08014494 <HAL_GPIO_EXTI_Callback>:
  * @brief External Line Callback 
  * @param[in] GPIO_Pin pin number
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b082      	sub	sp, #8
 8014498:	af00      	add	r7, sp, #0
 801449a:	4603      	mov	r3, r0
 801449c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BSP_MOTOR_CONTROL_BOARD_BUSY_PIN)
 801449e:	88fb      	ldrh	r3, [r7, #6]
 80144a0:	2b20      	cmp	r3, #32
 80144a2:	d101      	bne.n	80144a8 <HAL_GPIO_EXTI_Callback+0x14>
  {
    BSP_MotorControl_BusyInterruptHandler();
 80144a4:	f7ee fad6 	bl	8002a54 <BSP_MotorControl_BusyInterruptHandler>
  }

  if (GPIO_Pin == BSP_MOTOR_CONTROL_BOARD_FLAG_PIN)
 80144a8:	88fb      	ldrh	r3, [r7, #6]
 80144aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80144ae:	d101      	bne.n	80144b4 <HAL_GPIO_EXTI_Callback+0x20>
  {
    BSP_MotorControl_FlagInterruptHandler();
 80144b0:	f7ee fab6 	bl	8002a20 <BSP_MotorControl_FlagInterruptHandler>
  }
 }
 80144b4:	bf00      	nop
 80144b6:	3708      	adds	r7, #8
 80144b8:	46bd      	mov	sp, r7
 80144ba:	bd80      	pop	{r7, pc}

080144bc <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80144bc:	b480      	push	{r7}
 80144be:	af00      	add	r7, sp, #0
}
 80144c0:	bf00      	nop
 80144c2:	46bd      	mov	sp, r7
 80144c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c8:	4770      	bx	lr

080144ca <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80144ca:	b480      	push	{r7}
 80144cc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80144ce:	e7fe      	b.n	80144ce <HardFault_Handler+0x4>

080144d0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80144d0:	b480      	push	{r7}
 80144d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80144d4:	e7fe      	b.n	80144d4 <MemManage_Handler+0x4>

080144d6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80144d6:	b480      	push	{r7}
 80144d8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80144da:	e7fe      	b.n	80144da <BusFault_Handler+0x4>

080144dc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80144dc:	b480      	push	{r7}
 80144de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80144e0:	e7fe      	b.n	80144e0 <UsageFault_Handler+0x4>

080144e2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80144e2:	b480      	push	{r7}
 80144e4:	af00      	add	r7, sp, #0
}
 80144e6:	bf00      	nop
 80144e8:	46bd      	mov	sp, r7
 80144ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ee:	4770      	bx	lr

080144f0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80144f0:	b480      	push	{r7}
 80144f2:	af00      	add	r7, sp, #0
}
 80144f4:	bf00      	nop
 80144f6:	46bd      	mov	sp, r7
 80144f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fc:	4770      	bx	lr

080144fe <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80144fe:	b480      	push	{r7}
 8014500:	af00      	add	r7, sp, #0
}
 8014502:	bf00      	nop
 8014504:	46bd      	mov	sp, r7
 8014506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450a:	4770      	bx	lr

0801450c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 801450c:	b580      	push	{r7, lr}
 801450e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8014510:	f7ef fdfa 	bl	8004108 <HAL_IncTick>
}
 8014514:	bf00      	nop
 8014516:	bd80      	pop	{r7, pc}

08014518 <EXTI9_5_IRQHandler>:
  * @brief  This function handles interrupt for External lines 5 to 9
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler(void)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	af00      	add	r7, sp, #0
  //HAL_GPIO_TogglePin(LED_PORT,LED4_PIN);
  HAL_GPIO_EXTI_IRQHandler(BSP_MOTOR_CONTROL_BOARD_BUSY_PIN);
 801451c:	2020      	movs	r0, #32
 801451e:	f7f1 fac5 	bl	8005aac <HAL_GPIO_EXTI_IRQHandler>
}
 8014522:	bf00      	nop
 8014524:	bd80      	pop	{r7, pc}
	...

08014528 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8014528:	b480      	push	{r7}
 801452a:	af00      	add	r7, sp, #0
  if(is_home == FALSE)
 801452c:	4b05      	ldr	r3, [pc, #20]	; (8014544 <EXTI0_IRQHandler+0x1c>)
 801452e:	781b      	ldrb	r3, [r3, #0]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d102      	bne.n	801453a <EXTI0_IRQHandler+0x12>
  {
    is_home = TRUE;
 8014534:	4b03      	ldr	r3, [pc, #12]	; (8014544 <EXTI0_IRQHandler+0x1c>)
 8014536:	2201      	movs	r2, #1
 8014538:	701a      	strb	r2, [r3, #0]
  }
 // HAL_GPIO_TogglePin(LED_PORT,LED2_PIN);
}
 801453a:	bf00      	nop
 801453c:	46bd      	mov	sp, r7
 801453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014542:	4770      	bx	lr
 8014544:	2000e650 	.word	0x2000e650

08014548 <EXTI15_10_IRQHandler>:
  * @brief  This function handles interrupt for External lines 10 to 15
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BSP_MOTOR_CONTROL_BOARD_FLAG_PIN);
 801454c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014550:	f7f1 faac 	bl	8005aac <HAL_GPIO_EXTI_IRQHandler>
}
 8014554:	bf00      	nop
 8014556:	bd80      	pop	{r7, pc}

08014558 <TIM3_IRQHandler>:
  * @brief  This function handles TIM3 interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimStepClock);
 801455c:	4802      	ldr	r0, [pc, #8]	; (8014568 <TIM3_IRQHandler+0x10>)
 801455e:	f7f2 ff25 	bl	80073ac <HAL_TIM_IRQHandler>
}
 8014562:	bf00      	nop
 8014564:	bd80      	pop	{r7, pc}
 8014566:	bf00      	nop
 8014568:	20000588 	.word	0x20000588

0801456c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	af00      	add	r7, sp, #0
  // HAL_GPIO_TogglePin(LED_PORT,LED2_PIN);

  // HAL_Delay(1000);
  // }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8014570:	4802      	ldr	r0, [pc, #8]	; (801457c <TIM2_IRQHandler+0x10>)
 8014572:	f7f2 ff1b 	bl	80073ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8014576:	bf00      	nop
 8014578:	bd80      	pop	{r7, pc}
 801457a:	bf00      	nop
 801457c:	2000eab4 	.word	0x2000eab4

08014580 <USART1_IRQHandler>:

/*The interrupt handler for UART*/
void USART1_IRQHandler(void)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(& huart1);
 8014584:	4802      	ldr	r0, [pc, #8]	; (8014590 <USART1_IRQHandler+0x10>)
 8014586:	f7f3 f917 	bl	80077b8 <HAL_UART_IRQHandler>
}
 801458a:	bf00      	nop
 801458c:	bd80      	pop	{r7, pc}
 801458e:	bf00      	nop
 8014590:	2000eafc 	.word	0x2000eafc

08014594 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8014594:	b480      	push	{r7}
 8014596:	af00      	add	r7, sp, #0
  return 1;
 8014598:	2301      	movs	r3, #1
}
 801459a:	4618      	mov	r0, r3
 801459c:	46bd      	mov	sp, r7
 801459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a2:	4770      	bx	lr

080145a4 <_kill>:

int _kill(int pid, int sig)
{
 80145a4:	b480      	push	{r7}
 80145a6:	b083      	sub	sp, #12
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
 80145ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80145ae:	4b05      	ldr	r3, [pc, #20]	; (80145c4 <_kill+0x20>)
 80145b0:	2216      	movs	r2, #22
 80145b2:	601a      	str	r2, [r3, #0]
  return -1;
 80145b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	370c      	adds	r7, #12
 80145bc:	46bd      	mov	sp, r7
 80145be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c2:	4770      	bx	lr
 80145c4:	2000ec7c 	.word	0x2000ec7c

080145c8 <_exit>:

void _exit (int status)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b082      	sub	sp, #8
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80145d0:	f04f 31ff 	mov.w	r1, #4294967295
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f7ff ffe5 	bl	80145a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80145da:	e7fe      	b.n	80145da <_exit+0x12>

080145dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b086      	sub	sp, #24
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	60f8      	str	r0, [r7, #12]
 80145e4:	60b9      	str	r1, [r7, #8]
 80145e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80145e8:	2300      	movs	r3, #0
 80145ea:	617b      	str	r3, [r7, #20]
 80145ec:	e00a      	b.n	8014604 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80145ee:	f3af 8000 	nop.w
 80145f2:	4601      	mov	r1, r0
 80145f4:	68bb      	ldr	r3, [r7, #8]
 80145f6:	1c5a      	adds	r2, r3, #1
 80145f8:	60ba      	str	r2, [r7, #8]
 80145fa:	b2ca      	uxtb	r2, r1
 80145fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80145fe:	697b      	ldr	r3, [r7, #20]
 8014600:	3301      	adds	r3, #1
 8014602:	617b      	str	r3, [r7, #20]
 8014604:	697a      	ldr	r2, [r7, #20]
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	429a      	cmp	r2, r3
 801460a:	dbf0      	blt.n	80145ee <_read+0x12>
  }

  return len;
 801460c:	687b      	ldr	r3, [r7, #4]
}
 801460e:	4618      	mov	r0, r3
 8014610:	3718      	adds	r7, #24
 8014612:	46bd      	mov	sp, r7
 8014614:	bd80      	pop	{r7, pc}

08014616 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8014616:	b580      	push	{r7, lr}
 8014618:	b086      	sub	sp, #24
 801461a:	af00      	add	r7, sp, #0
 801461c:	60f8      	str	r0, [r7, #12]
 801461e:	60b9      	str	r1, [r7, #8]
 8014620:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014622:	2300      	movs	r3, #0
 8014624:	617b      	str	r3, [r7, #20]
 8014626:	e009      	b.n	801463c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	1c5a      	adds	r2, r3, #1
 801462c:	60ba      	str	r2, [r7, #8]
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	4618      	mov	r0, r3
 8014632:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014636:	697b      	ldr	r3, [r7, #20]
 8014638:	3301      	adds	r3, #1
 801463a:	617b      	str	r3, [r7, #20]
 801463c:	697a      	ldr	r2, [r7, #20]
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	429a      	cmp	r2, r3
 8014642:	dbf1      	blt.n	8014628 <_write+0x12>
  }
  return len;
 8014644:	687b      	ldr	r3, [r7, #4]
}
 8014646:	4618      	mov	r0, r3
 8014648:	3718      	adds	r7, #24
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}

0801464e <_close>:

int _close(int file)
{
 801464e:	b480      	push	{r7}
 8014650:	b083      	sub	sp, #12
 8014652:	af00      	add	r7, sp, #0
 8014654:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8014656:	f04f 33ff 	mov.w	r3, #4294967295
}
 801465a:	4618      	mov	r0, r3
 801465c:	370c      	adds	r7, #12
 801465e:	46bd      	mov	sp, r7
 8014660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014664:	4770      	bx	lr

08014666 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8014666:	b480      	push	{r7}
 8014668:	b083      	sub	sp, #12
 801466a:	af00      	add	r7, sp, #0
 801466c:	6078      	str	r0, [r7, #4]
 801466e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014676:	605a      	str	r2, [r3, #4]
  return 0;
 8014678:	2300      	movs	r3, #0
}
 801467a:	4618      	mov	r0, r3
 801467c:	370c      	adds	r7, #12
 801467e:	46bd      	mov	sp, r7
 8014680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014684:	4770      	bx	lr

08014686 <_isatty>:

int _isatty(int file)
{
 8014686:	b480      	push	{r7}
 8014688:	b083      	sub	sp, #12
 801468a:	af00      	add	r7, sp, #0
 801468c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801468e:	2301      	movs	r3, #1
}
 8014690:	4618      	mov	r0, r3
 8014692:	370c      	adds	r7, #12
 8014694:	46bd      	mov	sp, r7
 8014696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469a:	4770      	bx	lr

0801469c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801469c:	b480      	push	{r7}
 801469e:	b085      	sub	sp, #20
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	60f8      	str	r0, [r7, #12]
 80146a4:	60b9      	str	r1, [r7, #8]
 80146a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80146a8:	2300      	movs	r3, #0
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	3714      	adds	r7, #20
 80146ae:	46bd      	mov	sp, r7
 80146b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b4:	4770      	bx	lr
	...

080146b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80146b8:	b480      	push	{r7}
 80146ba:	b087      	sub	sp, #28
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80146c0:	4a14      	ldr	r2, [pc, #80]	; (8014714 <_sbrk+0x5c>)
 80146c2:	4b15      	ldr	r3, [pc, #84]	; (8014718 <_sbrk+0x60>)
 80146c4:	1ad3      	subs	r3, r2, r3
 80146c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80146c8:	697b      	ldr	r3, [r7, #20]
 80146ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80146cc:	4b13      	ldr	r3, [pc, #76]	; (801471c <_sbrk+0x64>)
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d102      	bne.n	80146da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80146d4:	4b11      	ldr	r3, [pc, #68]	; (801471c <_sbrk+0x64>)
 80146d6:	4a12      	ldr	r2, [pc, #72]	; (8014720 <_sbrk+0x68>)
 80146d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80146da:	4b10      	ldr	r3, [pc, #64]	; (801471c <_sbrk+0x64>)
 80146dc:	681a      	ldr	r2, [r3, #0]
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	4413      	add	r3, r2
 80146e2:	693a      	ldr	r2, [r7, #16]
 80146e4:	429a      	cmp	r2, r3
 80146e6:	d205      	bcs.n	80146f4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80146e8:	4b0e      	ldr	r3, [pc, #56]	; (8014724 <_sbrk+0x6c>)
 80146ea:	220c      	movs	r2, #12
 80146ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80146ee:	f04f 33ff 	mov.w	r3, #4294967295
 80146f2:	e009      	b.n	8014708 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80146f4:	4b09      	ldr	r3, [pc, #36]	; (801471c <_sbrk+0x64>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80146fa:	4b08      	ldr	r3, [pc, #32]	; (801471c <_sbrk+0x64>)
 80146fc:	681a      	ldr	r2, [r3, #0]
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	4413      	add	r3, r2
 8014702:	4a06      	ldr	r2, [pc, #24]	; (801471c <_sbrk+0x64>)
 8014704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8014706:	68fb      	ldr	r3, [r7, #12]
}
 8014708:	4618      	mov	r0, r3
 801470a:	371c      	adds	r7, #28
 801470c:	46bd      	mov	sp, r7
 801470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014712:	4770      	bx	lr
 8014714:	20020000 	.word	0x20020000
 8014718:	00000400 	.word	0x00000400
 801471c:	2000eab0 	.word	0x2000eab0
 8014720:	2000ec90 	.word	0x2000ec90
 8014724:	2000ec7c 	.word	0x2000ec7c

08014728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014728:	b480      	push	{r7}
 801472a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801472c:	4b16      	ldr	r3, [pc, #88]	; (8014788 <SystemInit+0x60>)
 801472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014732:	4a15      	ldr	r2, [pc, #84]	; (8014788 <SystemInit+0x60>)
 8014734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801473c:	4b13      	ldr	r3, [pc, #76]	; (801478c <SystemInit+0x64>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	4a12      	ldr	r2, [pc, #72]	; (801478c <SystemInit+0x64>)
 8014742:	f043 0301 	orr.w	r3, r3, #1
 8014746:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8014748:	4b10      	ldr	r3, [pc, #64]	; (801478c <SystemInit+0x64>)
 801474a:	2200      	movs	r2, #0
 801474c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801474e:	4b0f      	ldr	r3, [pc, #60]	; (801478c <SystemInit+0x64>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	4a0e      	ldr	r2, [pc, #56]	; (801478c <SystemInit+0x64>)
 8014754:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8014758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801475c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801475e:	4b0b      	ldr	r3, [pc, #44]	; (801478c <SystemInit+0x64>)
 8014760:	4a0b      	ldr	r2, [pc, #44]	; (8014790 <SystemInit+0x68>)
 8014762:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8014764:	4b09      	ldr	r3, [pc, #36]	; (801478c <SystemInit+0x64>)
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	4a08      	ldr	r2, [pc, #32]	; (801478c <SystemInit+0x64>)
 801476a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801476e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8014770:	4b06      	ldr	r3, [pc, #24]	; (801478c <SystemInit+0x64>)
 8014772:	2200      	movs	r2, #0
 8014774:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8014776:	4b04      	ldr	r3, [pc, #16]	; (8014788 <SystemInit+0x60>)
 8014778:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801477c:	609a      	str	r2, [r3, #8]
#endif
}
 801477e:	bf00      	nop
 8014780:	46bd      	mov	sp, r7
 8014782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014786:	4770      	bx	lr
 8014788:	e000ed00 	.word	0xe000ed00
 801478c:	40023800 	.word	0x40023800
 8014790:	24003010 	.word	0x24003010

08014794 <MX_USART1_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_Init()
{
 8014794:	b580      	push	{r7, lr}
 8014796:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8014798:	4b11      	ldr	r3, [pc, #68]	; (80147e0 <MX_USART1_Init+0x4c>)
 801479a:	4a12      	ldr	r2, [pc, #72]	; (80147e4 <MX_USART1_Init+0x50>)
 801479c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 801479e:	4b10      	ldr	r3, [pc, #64]	; (80147e0 <MX_USART1_Init+0x4c>)
 80147a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80147a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = USART_WORDLENGTH_8B;
 80147a6:	4b0e      	ldr	r3, [pc, #56]	; (80147e0 <MX_USART1_Init+0x4c>)
 80147a8:	2200      	movs	r2, #0
 80147aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = USART_STOPBITS_1;
 80147ac:	4b0c      	ldr	r3, [pc, #48]	; (80147e0 <MX_USART1_Init+0x4c>)
 80147ae:	2200      	movs	r2, #0
 80147b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = USART_PARITY_NONE;
 80147b2:	4b0b      	ldr	r3, [pc, #44]	; (80147e0 <MX_USART1_Init+0x4c>)
 80147b4:	2200      	movs	r2, #0
 80147b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = USART_MODE_TX_RX;
 80147b8:	4b09      	ldr	r3, [pc, #36]	; (80147e0 <MX_USART1_Init+0x4c>)
 80147ba:	220c      	movs	r2, #12
 80147bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80147be:	4b08      	ldr	r3, [pc, #32]	; (80147e0 <MX_USART1_Init+0x4c>)
 80147c0:	2200      	movs	r2, #0
 80147c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80147c4:	4b06      	ldr	r3, [pc, #24]	; (80147e0 <MX_USART1_Init+0x4c>)
 80147c6:	2200      	movs	r2, #0
 80147c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80147ca:	4805      	ldr	r0, [pc, #20]	; (80147e0 <MX_USART1_Init+0x4c>)
 80147cc:	f7f2 ff32 	bl	8007634 <HAL_UART_Init>
 80147d0:	4603      	mov	r3, r0
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d001      	beq.n	80147da <MX_USART1_Init+0x46>
  {
    Error_Handler();
 80147d6:	f7ff f89d 	bl	8013914 <Error_Handler>
  }

}
 80147da:	bf00      	nop
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	bf00      	nop
 80147e0:	2000eafc 	.word	0x2000eafc
 80147e4:	40011000 	.word	0x40011000

080147e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b08a      	sub	sp, #40	; 0x28
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80147f0:	f107 0314 	add.w	r3, r7, #20
 80147f4:	2200      	movs	r2, #0
 80147f6:	601a      	str	r2, [r3, #0]
 80147f8:	605a      	str	r2, [r3, #4]
 80147fa:	609a      	str	r2, [r3, #8]
 80147fc:	60da      	str	r2, [r3, #12]
 80147fe:	611a      	str	r2, [r3, #16]
    if(huart->Instance==USART1)
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	4a2d      	ldr	r2, [pc, #180]	; (80148bc <HAL_UART_MspInit+0xd4>)
 8014806:	4293      	cmp	r3, r2
 8014808:	d153      	bne.n	80148b2 <HAL_UART_MspInit+0xca>
     {
/* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801480a:	2300      	movs	r3, #0
 801480c:	613b      	str	r3, [r7, #16]
 801480e:	4b2c      	ldr	r3, [pc, #176]	; (80148c0 <HAL_UART_MspInit+0xd8>)
 8014810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014812:	4a2b      	ldr	r2, [pc, #172]	; (80148c0 <HAL_UART_MspInit+0xd8>)
 8014814:	f043 0310 	orr.w	r3, r3, #16
 8014818:	6453      	str	r3, [r2, #68]	; 0x44
 801481a:	4b29      	ldr	r3, [pc, #164]	; (80148c0 <HAL_UART_MspInit+0xd8>)
 801481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801481e:	f003 0310 	and.w	r3, r3, #16
 8014822:	613b      	str	r3, [r7, #16]
 8014824:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014826:	2300      	movs	r3, #0
 8014828:	60fb      	str	r3, [r7, #12]
 801482a:	4b25      	ldr	r3, [pc, #148]	; (80148c0 <HAL_UART_MspInit+0xd8>)
 801482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801482e:	4a24      	ldr	r2, [pc, #144]	; (80148c0 <HAL_UART_MspInit+0xd8>)
 8014830:	f043 0301 	orr.w	r3, r3, #1
 8014834:	6313      	str	r3, [r2, #48]	; 0x30
 8014836:	4b22      	ldr	r3, [pc, #136]	; (80148c0 <HAL_UART_MspInit+0xd8>)
 8014838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801483a:	f003 0301 	and.w	r3, r3, #1
 801483e:	60fb      	str	r3, [r7, #12]
 8014840:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014842:	2300      	movs	r3, #0
 8014844:	60bb      	str	r3, [r7, #8]
 8014846:	4b1e      	ldr	r3, [pc, #120]	; (80148c0 <HAL_UART_MspInit+0xd8>)
 8014848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801484a:	4a1d      	ldr	r2, [pc, #116]	; (80148c0 <HAL_UART_MspInit+0xd8>)
 801484c:	f043 0308 	orr.w	r3, r3, #8
 8014850:	6313      	str	r3, [r2, #48]	; 0x30
 8014852:	4b1b      	ldr	r3, [pc, #108]	; (80148c0 <HAL_UART_MspInit+0xd8>)
 8014854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014856:	f003 0308 	and.w	r3, r3, #8
 801485a:	60bb      	str	r3, [r7, #8]
 801485c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
        PC12     ------> UART5_TX
        PD2     ------> UART5_RX
        */
    //PA9:TX PA10:RX
    GPIO_InitStruct.Pin = UART1_TX_PIN;
 801485e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014864:	2302      	movs	r3, #2
 8014866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014868:	2300      	movs	r3, #0
 801486a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801486c:	2303      	movs	r3, #3
 801486e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014870:	2307      	movs	r3, #7
 8014872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(UART1_TX_PORT, &GPIO_InitStruct);
 8014874:	f107 0314 	add.w	r3, r7, #20
 8014878:	4619      	mov	r1, r3
 801487a:	4812      	ldr	r0, [pc, #72]	; (80148c4 <HAL_UART_MspInit+0xdc>)
 801487c:	f7f0 ff2e 	bl	80056dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART1_RX_PIN;
 8014880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014886:	2302      	movs	r3, #2
 8014888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801488a:	2300      	movs	r3, #0
 801488c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801488e:	2303      	movs	r3, #3
 8014890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014892:	2307      	movs	r3, #7
 8014894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(UART1_RX_PORT, &GPIO_InitStruct);
 8014896:	f107 0314 	add.w	r3, r7, #20
 801489a:	4619      	mov	r1, r3
 801489c:	4809      	ldr	r0, [pc, #36]	; (80148c4 <HAL_UART_MspInit+0xdc>)
 801489e:	f7f0 ff1d 	bl	80056dc <HAL_GPIO_Init>

    /*Interrupt mode enable*/
    /* USER CODE BEGIN UART5_MspInit 1 */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 80148a2:	2201      	movs	r2, #1
 80148a4:	2100      	movs	r1, #0
 80148a6:	2025      	movs	r0, #37	; 0x25
 80148a8:	f7ef fd4d 	bl	8004346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80148ac:	2025      	movs	r0, #37	; 0x25
 80148ae:	f7ef fd66 	bl	800437e <HAL_NVIC_EnableIRQ>
    /* USER CODE END UART5_MspInit 1 */
}

}
 80148b2:	bf00      	nop
 80148b4:	3728      	adds	r7, #40	; 0x28
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}
 80148ba:	bf00      	nop
 80148bc:	40011000 	.word	0x40011000
 80148c0:	40023800 	.word	0x40023800
 80148c4:	40020000 	.word	0x40020000

080148c8 <Uart_Send>:

void Uart_Send(char *string)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b084      	sub	sp, #16
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 80148d0:	6878      	ldr	r0, [r7, #4]
 80148d2:	f7eb fc7d 	bl	80001d0 <strlen>
 80148d6:	4603      	mov	r3, r0
 80148d8:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) string, len);
 80148da:	7bfb      	ldrb	r3, [r7, #15]
 80148dc:	b29b      	uxth	r3, r3
 80148de:	461a      	mov	r2, r3
 80148e0:	6879      	ldr	r1, [r7, #4]
 80148e2:	4803      	ldr	r0, [pc, #12]	; (80148f0 <Uart_Send+0x28>)
 80148e4:	f7f2 fef3 	bl	80076ce <HAL_UART_Transmit_IT>
	//HAL_UART_Transmit(&huart5, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 80148e8:	bf00      	nop
 80148ea:	3710      	adds	r7, #16
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd80      	pop	{r7, pc}
 80148f0:	2000eafc 	.word	0x2000eafc

080148f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80148f4:	480d      	ldr	r0, [pc, #52]	; (801492c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80148f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80148f8:	f7ff ff16 	bl	8014728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80148fc:	480c      	ldr	r0, [pc, #48]	; (8014930 <LoopForever+0x6>)
  ldr r1, =_edata
 80148fe:	490d      	ldr	r1, [pc, #52]	; (8014934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8014900:	4a0d      	ldr	r2, [pc, #52]	; (8014938 <LoopForever+0xe>)
  movs r3, #0
 8014902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8014904:	e002      	b.n	801490c <LoopCopyDataInit>

08014906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8014906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8014908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801490a:	3304      	adds	r3, #4

0801490c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801490c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801490e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8014910:	d3f9      	bcc.n	8014906 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8014912:	4a0a      	ldr	r2, [pc, #40]	; (801493c <LoopForever+0x12>)
  ldr r4, =_ebss
 8014914:	4c0a      	ldr	r4, [pc, #40]	; (8014940 <LoopForever+0x16>)
  movs r3, #0
 8014916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014918:	e001      	b.n	801491e <LoopFillZerobss>

0801491a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801491a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801491c:	3204      	adds	r2, #4

0801491e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801491e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8014920:	d3fb      	bcc.n	801491a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8014922:	f000 fa4d 	bl	8014dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8014926:	f7fe fc83 	bl	8013230 <main>

0801492a <LoopForever>:

LoopForever:
  b LoopForever
 801492a:	e7fe      	b.n	801492a <LoopForever>
  ldr   r0, =_estack
 801492c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8014930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8014934:	200004e8 	.word	0x200004e8
  ldr r2, =_sidata
 8014938:	08019518 	.word	0x08019518
  ldr r2, =_sbss
 801493c:	200004e8 	.word	0x200004e8
  ldr r4, =_ebss
 8014940:	2000ec8c 	.word	0x2000ec8c

08014944 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8014944:	e7fe      	b.n	8014944 <ADC_IRQHandler>
	...

08014948 <rand>:
 8014948:	4b16      	ldr	r3, [pc, #88]	; (80149a4 <rand+0x5c>)
 801494a:	b510      	push	{r4, lr}
 801494c:	681c      	ldr	r4, [r3, #0]
 801494e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014950:	b9b3      	cbnz	r3, 8014980 <rand+0x38>
 8014952:	2018      	movs	r0, #24
 8014954:	f000 fad4 	bl	8014f00 <malloc>
 8014958:	4602      	mov	r2, r0
 801495a:	6320      	str	r0, [r4, #48]	; 0x30
 801495c:	b920      	cbnz	r0, 8014968 <rand+0x20>
 801495e:	4b12      	ldr	r3, [pc, #72]	; (80149a8 <rand+0x60>)
 8014960:	4812      	ldr	r0, [pc, #72]	; (80149ac <rand+0x64>)
 8014962:	2152      	movs	r1, #82	; 0x52
 8014964:	f000 fa62 	bl	8014e2c <__assert_func>
 8014968:	4911      	ldr	r1, [pc, #68]	; (80149b0 <rand+0x68>)
 801496a:	4b12      	ldr	r3, [pc, #72]	; (80149b4 <rand+0x6c>)
 801496c:	e9c0 1300 	strd	r1, r3, [r0]
 8014970:	4b11      	ldr	r3, [pc, #68]	; (80149b8 <rand+0x70>)
 8014972:	6083      	str	r3, [r0, #8]
 8014974:	230b      	movs	r3, #11
 8014976:	8183      	strh	r3, [r0, #12]
 8014978:	2100      	movs	r1, #0
 801497a:	2001      	movs	r0, #1
 801497c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014980:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014982:	480e      	ldr	r0, [pc, #56]	; (80149bc <rand+0x74>)
 8014984:	690b      	ldr	r3, [r1, #16]
 8014986:	694c      	ldr	r4, [r1, #20]
 8014988:	4a0d      	ldr	r2, [pc, #52]	; (80149c0 <rand+0x78>)
 801498a:	4358      	muls	r0, r3
 801498c:	fb02 0004 	mla	r0, r2, r4, r0
 8014990:	fba3 3202 	umull	r3, r2, r3, r2
 8014994:	3301      	adds	r3, #1
 8014996:	eb40 0002 	adc.w	r0, r0, r2
 801499a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801499e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80149a2:	bd10      	pop	{r4, pc}
 80149a4:	200004e4 	.word	0x200004e4
 80149a8:	08019428 	.word	0x08019428
 80149ac:	0801943f 	.word	0x0801943f
 80149b0:	abcd330e 	.word	0xabcd330e
 80149b4:	e66d1234 	.word	0xe66d1234
 80149b8:	0005deec 	.word	0x0005deec
 80149bc:	5851f42d 	.word	0x5851f42d
 80149c0:	4c957f2d 	.word	0x4c957f2d

080149c4 <std>:
 80149c4:	2300      	movs	r3, #0
 80149c6:	b510      	push	{r4, lr}
 80149c8:	4604      	mov	r4, r0
 80149ca:	e9c0 3300 	strd	r3, r3, [r0]
 80149ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80149d2:	6083      	str	r3, [r0, #8]
 80149d4:	8181      	strh	r1, [r0, #12]
 80149d6:	6643      	str	r3, [r0, #100]	; 0x64
 80149d8:	81c2      	strh	r2, [r0, #14]
 80149da:	6183      	str	r3, [r0, #24]
 80149dc:	4619      	mov	r1, r3
 80149de:	2208      	movs	r2, #8
 80149e0:	305c      	adds	r0, #92	; 0x5c
 80149e2:	f000 f98f 	bl	8014d04 <memset>
 80149e6:	4b0d      	ldr	r3, [pc, #52]	; (8014a1c <std+0x58>)
 80149e8:	6263      	str	r3, [r4, #36]	; 0x24
 80149ea:	4b0d      	ldr	r3, [pc, #52]	; (8014a20 <std+0x5c>)
 80149ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80149ee:	4b0d      	ldr	r3, [pc, #52]	; (8014a24 <std+0x60>)
 80149f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80149f2:	4b0d      	ldr	r3, [pc, #52]	; (8014a28 <std+0x64>)
 80149f4:	6323      	str	r3, [r4, #48]	; 0x30
 80149f6:	4b0d      	ldr	r3, [pc, #52]	; (8014a2c <std+0x68>)
 80149f8:	6224      	str	r4, [r4, #32]
 80149fa:	429c      	cmp	r4, r3
 80149fc:	d006      	beq.n	8014a0c <std+0x48>
 80149fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014a02:	4294      	cmp	r4, r2
 8014a04:	d002      	beq.n	8014a0c <std+0x48>
 8014a06:	33d0      	adds	r3, #208	; 0xd0
 8014a08:	429c      	cmp	r4, r3
 8014a0a:	d105      	bne.n	8014a18 <std+0x54>
 8014a0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a14:	f000 b9f8 	b.w	8014e08 <__retarget_lock_init_recursive>
 8014a18:	bd10      	pop	{r4, pc}
 8014a1a:	bf00      	nop
 8014a1c:	08014c15 	.word	0x08014c15
 8014a20:	08014c37 	.word	0x08014c37
 8014a24:	08014c6f 	.word	0x08014c6f
 8014a28:	08014c93 	.word	0x08014c93
 8014a2c:	2000eb40 	.word	0x2000eb40

08014a30 <stdio_exit_handler>:
 8014a30:	4a02      	ldr	r2, [pc, #8]	; (8014a3c <stdio_exit_handler+0xc>)
 8014a32:	4903      	ldr	r1, [pc, #12]	; (8014a40 <stdio_exit_handler+0x10>)
 8014a34:	4803      	ldr	r0, [pc, #12]	; (8014a44 <stdio_exit_handler+0x14>)
 8014a36:	f000 b869 	b.w	8014b0c <_fwalk_sglue>
 8014a3a:	bf00      	nop
 8014a3c:	2000048c 	.word	0x2000048c
 8014a40:	080159cd 	.word	0x080159cd
 8014a44:	20000498 	.word	0x20000498

08014a48 <cleanup_stdio>:
 8014a48:	6841      	ldr	r1, [r0, #4]
 8014a4a:	4b0c      	ldr	r3, [pc, #48]	; (8014a7c <cleanup_stdio+0x34>)
 8014a4c:	4299      	cmp	r1, r3
 8014a4e:	b510      	push	{r4, lr}
 8014a50:	4604      	mov	r4, r0
 8014a52:	d001      	beq.n	8014a58 <cleanup_stdio+0x10>
 8014a54:	f000 ffba 	bl	80159cc <_fflush_r>
 8014a58:	68a1      	ldr	r1, [r4, #8]
 8014a5a:	4b09      	ldr	r3, [pc, #36]	; (8014a80 <cleanup_stdio+0x38>)
 8014a5c:	4299      	cmp	r1, r3
 8014a5e:	d002      	beq.n	8014a66 <cleanup_stdio+0x1e>
 8014a60:	4620      	mov	r0, r4
 8014a62:	f000 ffb3 	bl	80159cc <_fflush_r>
 8014a66:	68e1      	ldr	r1, [r4, #12]
 8014a68:	4b06      	ldr	r3, [pc, #24]	; (8014a84 <cleanup_stdio+0x3c>)
 8014a6a:	4299      	cmp	r1, r3
 8014a6c:	d004      	beq.n	8014a78 <cleanup_stdio+0x30>
 8014a6e:	4620      	mov	r0, r4
 8014a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a74:	f000 bfaa 	b.w	80159cc <_fflush_r>
 8014a78:	bd10      	pop	{r4, pc}
 8014a7a:	bf00      	nop
 8014a7c:	2000eb40 	.word	0x2000eb40
 8014a80:	2000eba8 	.word	0x2000eba8
 8014a84:	2000ec10 	.word	0x2000ec10

08014a88 <global_stdio_init.part.0>:
 8014a88:	b510      	push	{r4, lr}
 8014a8a:	4b0b      	ldr	r3, [pc, #44]	; (8014ab8 <global_stdio_init.part.0+0x30>)
 8014a8c:	4c0b      	ldr	r4, [pc, #44]	; (8014abc <global_stdio_init.part.0+0x34>)
 8014a8e:	4a0c      	ldr	r2, [pc, #48]	; (8014ac0 <global_stdio_init.part.0+0x38>)
 8014a90:	601a      	str	r2, [r3, #0]
 8014a92:	4620      	mov	r0, r4
 8014a94:	2200      	movs	r2, #0
 8014a96:	2104      	movs	r1, #4
 8014a98:	f7ff ff94 	bl	80149c4 <std>
 8014a9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014aa0:	2201      	movs	r2, #1
 8014aa2:	2109      	movs	r1, #9
 8014aa4:	f7ff ff8e 	bl	80149c4 <std>
 8014aa8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014aac:	2202      	movs	r2, #2
 8014aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ab2:	2112      	movs	r1, #18
 8014ab4:	f7ff bf86 	b.w	80149c4 <std>
 8014ab8:	2000ec78 	.word	0x2000ec78
 8014abc:	2000eb40 	.word	0x2000eb40
 8014ac0:	08014a31 	.word	0x08014a31

08014ac4 <__sfp_lock_acquire>:
 8014ac4:	4801      	ldr	r0, [pc, #4]	; (8014acc <__sfp_lock_acquire+0x8>)
 8014ac6:	f000 b9a0 	b.w	8014e0a <__retarget_lock_acquire_recursive>
 8014aca:	bf00      	nop
 8014acc:	2000ec81 	.word	0x2000ec81

08014ad0 <__sfp_lock_release>:
 8014ad0:	4801      	ldr	r0, [pc, #4]	; (8014ad8 <__sfp_lock_release+0x8>)
 8014ad2:	f000 b99b 	b.w	8014e0c <__retarget_lock_release_recursive>
 8014ad6:	bf00      	nop
 8014ad8:	2000ec81 	.word	0x2000ec81

08014adc <__sinit>:
 8014adc:	b510      	push	{r4, lr}
 8014ade:	4604      	mov	r4, r0
 8014ae0:	f7ff fff0 	bl	8014ac4 <__sfp_lock_acquire>
 8014ae4:	6a23      	ldr	r3, [r4, #32]
 8014ae6:	b11b      	cbz	r3, 8014af0 <__sinit+0x14>
 8014ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014aec:	f7ff bff0 	b.w	8014ad0 <__sfp_lock_release>
 8014af0:	4b04      	ldr	r3, [pc, #16]	; (8014b04 <__sinit+0x28>)
 8014af2:	6223      	str	r3, [r4, #32]
 8014af4:	4b04      	ldr	r3, [pc, #16]	; (8014b08 <__sinit+0x2c>)
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d1f5      	bne.n	8014ae8 <__sinit+0xc>
 8014afc:	f7ff ffc4 	bl	8014a88 <global_stdio_init.part.0>
 8014b00:	e7f2      	b.n	8014ae8 <__sinit+0xc>
 8014b02:	bf00      	nop
 8014b04:	08014a49 	.word	0x08014a49
 8014b08:	2000ec78 	.word	0x2000ec78

08014b0c <_fwalk_sglue>:
 8014b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b10:	4607      	mov	r7, r0
 8014b12:	4688      	mov	r8, r1
 8014b14:	4614      	mov	r4, r2
 8014b16:	2600      	movs	r6, #0
 8014b18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014b1c:	f1b9 0901 	subs.w	r9, r9, #1
 8014b20:	d505      	bpl.n	8014b2e <_fwalk_sglue+0x22>
 8014b22:	6824      	ldr	r4, [r4, #0]
 8014b24:	2c00      	cmp	r4, #0
 8014b26:	d1f7      	bne.n	8014b18 <_fwalk_sglue+0xc>
 8014b28:	4630      	mov	r0, r6
 8014b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b2e:	89ab      	ldrh	r3, [r5, #12]
 8014b30:	2b01      	cmp	r3, #1
 8014b32:	d907      	bls.n	8014b44 <_fwalk_sglue+0x38>
 8014b34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014b38:	3301      	adds	r3, #1
 8014b3a:	d003      	beq.n	8014b44 <_fwalk_sglue+0x38>
 8014b3c:	4629      	mov	r1, r5
 8014b3e:	4638      	mov	r0, r7
 8014b40:	47c0      	blx	r8
 8014b42:	4306      	orrs	r6, r0
 8014b44:	3568      	adds	r5, #104	; 0x68
 8014b46:	e7e9      	b.n	8014b1c <_fwalk_sglue+0x10>

08014b48 <iprintf>:
 8014b48:	b40f      	push	{r0, r1, r2, r3}
 8014b4a:	b507      	push	{r0, r1, r2, lr}
 8014b4c:	4906      	ldr	r1, [pc, #24]	; (8014b68 <iprintf+0x20>)
 8014b4e:	ab04      	add	r3, sp, #16
 8014b50:	6808      	ldr	r0, [r1, #0]
 8014b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b56:	6881      	ldr	r1, [r0, #8]
 8014b58:	9301      	str	r3, [sp, #4]
 8014b5a:	f000 fc07 	bl	801536c <_vfiprintf_r>
 8014b5e:	b003      	add	sp, #12
 8014b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b64:	b004      	add	sp, #16
 8014b66:	4770      	bx	lr
 8014b68:	200004e4 	.word	0x200004e4

08014b6c <sniprintf>:
 8014b6c:	b40c      	push	{r2, r3}
 8014b6e:	b530      	push	{r4, r5, lr}
 8014b70:	4b17      	ldr	r3, [pc, #92]	; (8014bd0 <sniprintf+0x64>)
 8014b72:	1e0c      	subs	r4, r1, #0
 8014b74:	681d      	ldr	r5, [r3, #0]
 8014b76:	b09d      	sub	sp, #116	; 0x74
 8014b78:	da08      	bge.n	8014b8c <sniprintf+0x20>
 8014b7a:	238b      	movs	r3, #139	; 0x8b
 8014b7c:	602b      	str	r3, [r5, #0]
 8014b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8014b82:	b01d      	add	sp, #116	; 0x74
 8014b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b88:	b002      	add	sp, #8
 8014b8a:	4770      	bx	lr
 8014b8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014b90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014b94:	bf14      	ite	ne
 8014b96:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014b9a:	4623      	moveq	r3, r4
 8014b9c:	9304      	str	r3, [sp, #16]
 8014b9e:	9307      	str	r3, [sp, #28]
 8014ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ba4:	9002      	str	r0, [sp, #8]
 8014ba6:	9006      	str	r0, [sp, #24]
 8014ba8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014bac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014bae:	ab21      	add	r3, sp, #132	; 0x84
 8014bb0:	a902      	add	r1, sp, #8
 8014bb2:	4628      	mov	r0, r5
 8014bb4:	9301      	str	r3, [sp, #4]
 8014bb6:	f000 fab1 	bl	801511c <_svfiprintf_r>
 8014bba:	1c43      	adds	r3, r0, #1
 8014bbc:	bfbc      	itt	lt
 8014bbe:	238b      	movlt	r3, #139	; 0x8b
 8014bc0:	602b      	strlt	r3, [r5, #0]
 8014bc2:	2c00      	cmp	r4, #0
 8014bc4:	d0dd      	beq.n	8014b82 <sniprintf+0x16>
 8014bc6:	9b02      	ldr	r3, [sp, #8]
 8014bc8:	2200      	movs	r2, #0
 8014bca:	701a      	strb	r2, [r3, #0]
 8014bcc:	e7d9      	b.n	8014b82 <sniprintf+0x16>
 8014bce:	bf00      	nop
 8014bd0:	200004e4 	.word	0x200004e4

08014bd4 <siprintf>:
 8014bd4:	b40e      	push	{r1, r2, r3}
 8014bd6:	b500      	push	{lr}
 8014bd8:	b09c      	sub	sp, #112	; 0x70
 8014bda:	ab1d      	add	r3, sp, #116	; 0x74
 8014bdc:	9002      	str	r0, [sp, #8]
 8014bde:	9006      	str	r0, [sp, #24]
 8014be0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014be4:	4809      	ldr	r0, [pc, #36]	; (8014c0c <siprintf+0x38>)
 8014be6:	9107      	str	r1, [sp, #28]
 8014be8:	9104      	str	r1, [sp, #16]
 8014bea:	4909      	ldr	r1, [pc, #36]	; (8014c10 <siprintf+0x3c>)
 8014bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bf0:	9105      	str	r1, [sp, #20]
 8014bf2:	6800      	ldr	r0, [r0, #0]
 8014bf4:	9301      	str	r3, [sp, #4]
 8014bf6:	a902      	add	r1, sp, #8
 8014bf8:	f000 fa90 	bl	801511c <_svfiprintf_r>
 8014bfc:	9b02      	ldr	r3, [sp, #8]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	701a      	strb	r2, [r3, #0]
 8014c02:	b01c      	add	sp, #112	; 0x70
 8014c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c08:	b003      	add	sp, #12
 8014c0a:	4770      	bx	lr
 8014c0c:	200004e4 	.word	0x200004e4
 8014c10:	ffff0208 	.word	0xffff0208

08014c14 <__sread>:
 8014c14:	b510      	push	{r4, lr}
 8014c16:	460c      	mov	r4, r1
 8014c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c1c:	f000 f8ac 	bl	8014d78 <_read_r>
 8014c20:	2800      	cmp	r0, #0
 8014c22:	bfab      	itete	ge
 8014c24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014c26:	89a3      	ldrhlt	r3, [r4, #12]
 8014c28:	181b      	addge	r3, r3, r0
 8014c2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014c2e:	bfac      	ite	ge
 8014c30:	6563      	strge	r3, [r4, #84]	; 0x54
 8014c32:	81a3      	strhlt	r3, [r4, #12]
 8014c34:	bd10      	pop	{r4, pc}

08014c36 <__swrite>:
 8014c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c3a:	461f      	mov	r7, r3
 8014c3c:	898b      	ldrh	r3, [r1, #12]
 8014c3e:	05db      	lsls	r3, r3, #23
 8014c40:	4605      	mov	r5, r0
 8014c42:	460c      	mov	r4, r1
 8014c44:	4616      	mov	r6, r2
 8014c46:	d505      	bpl.n	8014c54 <__swrite+0x1e>
 8014c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c4c:	2302      	movs	r3, #2
 8014c4e:	2200      	movs	r2, #0
 8014c50:	f000 f880 	bl	8014d54 <_lseek_r>
 8014c54:	89a3      	ldrh	r3, [r4, #12]
 8014c56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c5e:	81a3      	strh	r3, [r4, #12]
 8014c60:	4632      	mov	r2, r6
 8014c62:	463b      	mov	r3, r7
 8014c64:	4628      	mov	r0, r5
 8014c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c6a:	f000 b897 	b.w	8014d9c <_write_r>

08014c6e <__sseek>:
 8014c6e:	b510      	push	{r4, lr}
 8014c70:	460c      	mov	r4, r1
 8014c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c76:	f000 f86d 	bl	8014d54 <_lseek_r>
 8014c7a:	1c43      	adds	r3, r0, #1
 8014c7c:	89a3      	ldrh	r3, [r4, #12]
 8014c7e:	bf15      	itete	ne
 8014c80:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c8a:	81a3      	strheq	r3, [r4, #12]
 8014c8c:	bf18      	it	ne
 8014c8e:	81a3      	strhne	r3, [r4, #12]
 8014c90:	bd10      	pop	{r4, pc}

08014c92 <__sclose>:
 8014c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c96:	f000 b84d 	b.w	8014d34 <_close_r>
	...

08014c9c <viprintf>:
 8014c9c:	460b      	mov	r3, r1
 8014c9e:	4903      	ldr	r1, [pc, #12]	; (8014cac <viprintf+0x10>)
 8014ca0:	4602      	mov	r2, r0
 8014ca2:	6808      	ldr	r0, [r1, #0]
 8014ca4:	6881      	ldr	r1, [r0, #8]
 8014ca6:	f000 bb61 	b.w	801536c <_vfiprintf_r>
 8014caa:	bf00      	nop
 8014cac:	200004e4 	.word	0x200004e4

08014cb0 <memcmp>:
 8014cb0:	b510      	push	{r4, lr}
 8014cb2:	3901      	subs	r1, #1
 8014cb4:	4402      	add	r2, r0
 8014cb6:	4290      	cmp	r0, r2
 8014cb8:	d101      	bne.n	8014cbe <memcmp+0xe>
 8014cba:	2000      	movs	r0, #0
 8014cbc:	e005      	b.n	8014cca <memcmp+0x1a>
 8014cbe:	7803      	ldrb	r3, [r0, #0]
 8014cc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014cc4:	42a3      	cmp	r3, r4
 8014cc6:	d001      	beq.n	8014ccc <memcmp+0x1c>
 8014cc8:	1b18      	subs	r0, r3, r4
 8014cca:	bd10      	pop	{r4, pc}
 8014ccc:	3001      	adds	r0, #1
 8014cce:	e7f2      	b.n	8014cb6 <memcmp+0x6>

08014cd0 <memmove>:
 8014cd0:	4288      	cmp	r0, r1
 8014cd2:	b510      	push	{r4, lr}
 8014cd4:	eb01 0402 	add.w	r4, r1, r2
 8014cd8:	d902      	bls.n	8014ce0 <memmove+0x10>
 8014cda:	4284      	cmp	r4, r0
 8014cdc:	4623      	mov	r3, r4
 8014cde:	d807      	bhi.n	8014cf0 <memmove+0x20>
 8014ce0:	1e43      	subs	r3, r0, #1
 8014ce2:	42a1      	cmp	r1, r4
 8014ce4:	d008      	beq.n	8014cf8 <memmove+0x28>
 8014ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014cea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014cee:	e7f8      	b.n	8014ce2 <memmove+0x12>
 8014cf0:	4402      	add	r2, r0
 8014cf2:	4601      	mov	r1, r0
 8014cf4:	428a      	cmp	r2, r1
 8014cf6:	d100      	bne.n	8014cfa <memmove+0x2a>
 8014cf8:	bd10      	pop	{r4, pc}
 8014cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014cfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014d02:	e7f7      	b.n	8014cf4 <memmove+0x24>

08014d04 <memset>:
 8014d04:	4402      	add	r2, r0
 8014d06:	4603      	mov	r3, r0
 8014d08:	4293      	cmp	r3, r2
 8014d0a:	d100      	bne.n	8014d0e <memset+0xa>
 8014d0c:	4770      	bx	lr
 8014d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8014d12:	e7f9      	b.n	8014d08 <memset+0x4>

08014d14 <strcat>:
 8014d14:	b510      	push	{r4, lr}
 8014d16:	4602      	mov	r2, r0
 8014d18:	7814      	ldrb	r4, [r2, #0]
 8014d1a:	4613      	mov	r3, r2
 8014d1c:	3201      	adds	r2, #1
 8014d1e:	2c00      	cmp	r4, #0
 8014d20:	d1fa      	bne.n	8014d18 <strcat+0x4>
 8014d22:	3b01      	subs	r3, #1
 8014d24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d28:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014d2c:	2a00      	cmp	r2, #0
 8014d2e:	d1f9      	bne.n	8014d24 <strcat+0x10>
 8014d30:	bd10      	pop	{r4, pc}
	...

08014d34 <_close_r>:
 8014d34:	b538      	push	{r3, r4, r5, lr}
 8014d36:	4d06      	ldr	r5, [pc, #24]	; (8014d50 <_close_r+0x1c>)
 8014d38:	2300      	movs	r3, #0
 8014d3a:	4604      	mov	r4, r0
 8014d3c:	4608      	mov	r0, r1
 8014d3e:	602b      	str	r3, [r5, #0]
 8014d40:	f7ff fc85 	bl	801464e <_close>
 8014d44:	1c43      	adds	r3, r0, #1
 8014d46:	d102      	bne.n	8014d4e <_close_r+0x1a>
 8014d48:	682b      	ldr	r3, [r5, #0]
 8014d4a:	b103      	cbz	r3, 8014d4e <_close_r+0x1a>
 8014d4c:	6023      	str	r3, [r4, #0]
 8014d4e:	bd38      	pop	{r3, r4, r5, pc}
 8014d50:	2000ec7c 	.word	0x2000ec7c

08014d54 <_lseek_r>:
 8014d54:	b538      	push	{r3, r4, r5, lr}
 8014d56:	4d07      	ldr	r5, [pc, #28]	; (8014d74 <_lseek_r+0x20>)
 8014d58:	4604      	mov	r4, r0
 8014d5a:	4608      	mov	r0, r1
 8014d5c:	4611      	mov	r1, r2
 8014d5e:	2200      	movs	r2, #0
 8014d60:	602a      	str	r2, [r5, #0]
 8014d62:	461a      	mov	r2, r3
 8014d64:	f7ff fc9a 	bl	801469c <_lseek>
 8014d68:	1c43      	adds	r3, r0, #1
 8014d6a:	d102      	bne.n	8014d72 <_lseek_r+0x1e>
 8014d6c:	682b      	ldr	r3, [r5, #0]
 8014d6e:	b103      	cbz	r3, 8014d72 <_lseek_r+0x1e>
 8014d70:	6023      	str	r3, [r4, #0]
 8014d72:	bd38      	pop	{r3, r4, r5, pc}
 8014d74:	2000ec7c 	.word	0x2000ec7c

08014d78 <_read_r>:
 8014d78:	b538      	push	{r3, r4, r5, lr}
 8014d7a:	4d07      	ldr	r5, [pc, #28]	; (8014d98 <_read_r+0x20>)
 8014d7c:	4604      	mov	r4, r0
 8014d7e:	4608      	mov	r0, r1
 8014d80:	4611      	mov	r1, r2
 8014d82:	2200      	movs	r2, #0
 8014d84:	602a      	str	r2, [r5, #0]
 8014d86:	461a      	mov	r2, r3
 8014d88:	f7ff fc28 	bl	80145dc <_read>
 8014d8c:	1c43      	adds	r3, r0, #1
 8014d8e:	d102      	bne.n	8014d96 <_read_r+0x1e>
 8014d90:	682b      	ldr	r3, [r5, #0]
 8014d92:	b103      	cbz	r3, 8014d96 <_read_r+0x1e>
 8014d94:	6023      	str	r3, [r4, #0]
 8014d96:	bd38      	pop	{r3, r4, r5, pc}
 8014d98:	2000ec7c 	.word	0x2000ec7c

08014d9c <_write_r>:
 8014d9c:	b538      	push	{r3, r4, r5, lr}
 8014d9e:	4d07      	ldr	r5, [pc, #28]	; (8014dbc <_write_r+0x20>)
 8014da0:	4604      	mov	r4, r0
 8014da2:	4608      	mov	r0, r1
 8014da4:	4611      	mov	r1, r2
 8014da6:	2200      	movs	r2, #0
 8014da8:	602a      	str	r2, [r5, #0]
 8014daa:	461a      	mov	r2, r3
 8014dac:	f7ff fc33 	bl	8014616 <_write>
 8014db0:	1c43      	adds	r3, r0, #1
 8014db2:	d102      	bne.n	8014dba <_write_r+0x1e>
 8014db4:	682b      	ldr	r3, [r5, #0]
 8014db6:	b103      	cbz	r3, 8014dba <_write_r+0x1e>
 8014db8:	6023      	str	r3, [r4, #0]
 8014dba:	bd38      	pop	{r3, r4, r5, pc}
 8014dbc:	2000ec7c 	.word	0x2000ec7c

08014dc0 <__libc_init_array>:
 8014dc0:	b570      	push	{r4, r5, r6, lr}
 8014dc2:	4d0d      	ldr	r5, [pc, #52]	; (8014df8 <__libc_init_array+0x38>)
 8014dc4:	4c0d      	ldr	r4, [pc, #52]	; (8014dfc <__libc_init_array+0x3c>)
 8014dc6:	1b64      	subs	r4, r4, r5
 8014dc8:	10a4      	asrs	r4, r4, #2
 8014dca:	2600      	movs	r6, #0
 8014dcc:	42a6      	cmp	r6, r4
 8014dce:	d109      	bne.n	8014de4 <__libc_init_array+0x24>
 8014dd0:	4d0b      	ldr	r5, [pc, #44]	; (8014e00 <__libc_init_array+0x40>)
 8014dd2:	4c0c      	ldr	r4, [pc, #48]	; (8014e04 <__libc_init_array+0x44>)
 8014dd4:	f000 ffe0 	bl	8015d98 <_init>
 8014dd8:	1b64      	subs	r4, r4, r5
 8014dda:	10a4      	asrs	r4, r4, #2
 8014ddc:	2600      	movs	r6, #0
 8014dde:	42a6      	cmp	r6, r4
 8014de0:	d105      	bne.n	8014dee <__libc_init_array+0x2e>
 8014de2:	bd70      	pop	{r4, r5, r6, pc}
 8014de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8014de8:	4798      	blx	r3
 8014dea:	3601      	adds	r6, #1
 8014dec:	e7ee      	b.n	8014dcc <__libc_init_array+0xc>
 8014dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8014df2:	4798      	blx	r3
 8014df4:	3601      	adds	r6, #1
 8014df6:	e7f2      	b.n	8014dde <__libc_init_array+0x1e>
 8014df8:	08019510 	.word	0x08019510
 8014dfc:	08019510 	.word	0x08019510
 8014e00:	08019510 	.word	0x08019510
 8014e04:	08019514 	.word	0x08019514

08014e08 <__retarget_lock_init_recursive>:
 8014e08:	4770      	bx	lr

08014e0a <__retarget_lock_acquire_recursive>:
 8014e0a:	4770      	bx	lr

08014e0c <__retarget_lock_release_recursive>:
 8014e0c:	4770      	bx	lr

08014e0e <memcpy>:
 8014e0e:	440a      	add	r2, r1
 8014e10:	4291      	cmp	r1, r2
 8014e12:	f100 33ff 	add.w	r3, r0, #4294967295
 8014e16:	d100      	bne.n	8014e1a <memcpy+0xc>
 8014e18:	4770      	bx	lr
 8014e1a:	b510      	push	{r4, lr}
 8014e1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014e24:	4291      	cmp	r1, r2
 8014e26:	d1f9      	bne.n	8014e1c <memcpy+0xe>
 8014e28:	bd10      	pop	{r4, pc}
	...

08014e2c <__assert_func>:
 8014e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014e2e:	4614      	mov	r4, r2
 8014e30:	461a      	mov	r2, r3
 8014e32:	4b09      	ldr	r3, [pc, #36]	; (8014e58 <__assert_func+0x2c>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	4605      	mov	r5, r0
 8014e38:	68d8      	ldr	r0, [r3, #12]
 8014e3a:	b14c      	cbz	r4, 8014e50 <__assert_func+0x24>
 8014e3c:	4b07      	ldr	r3, [pc, #28]	; (8014e5c <__assert_func+0x30>)
 8014e3e:	9100      	str	r1, [sp, #0]
 8014e40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014e44:	4906      	ldr	r1, [pc, #24]	; (8014e60 <__assert_func+0x34>)
 8014e46:	462b      	mov	r3, r5
 8014e48:	f000 fde8 	bl	8015a1c <fiprintf>
 8014e4c:	f000 fe9e 	bl	8015b8c <abort>
 8014e50:	4b04      	ldr	r3, [pc, #16]	; (8014e64 <__assert_func+0x38>)
 8014e52:	461c      	mov	r4, r3
 8014e54:	e7f3      	b.n	8014e3e <__assert_func+0x12>
 8014e56:	bf00      	nop
 8014e58:	200004e4 	.word	0x200004e4
 8014e5c:	08019497 	.word	0x08019497
 8014e60:	080194a4 	.word	0x080194a4
 8014e64:	080194d2 	.word	0x080194d2

08014e68 <_free_r>:
 8014e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e6a:	2900      	cmp	r1, #0
 8014e6c:	d044      	beq.n	8014ef8 <_free_r+0x90>
 8014e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e72:	9001      	str	r0, [sp, #4]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	f1a1 0404 	sub.w	r4, r1, #4
 8014e7a:	bfb8      	it	lt
 8014e7c:	18e4      	addlt	r4, r4, r3
 8014e7e:	f000 f8e7 	bl	8015050 <__malloc_lock>
 8014e82:	4a1e      	ldr	r2, [pc, #120]	; (8014efc <_free_r+0x94>)
 8014e84:	9801      	ldr	r0, [sp, #4]
 8014e86:	6813      	ldr	r3, [r2, #0]
 8014e88:	b933      	cbnz	r3, 8014e98 <_free_r+0x30>
 8014e8a:	6063      	str	r3, [r4, #4]
 8014e8c:	6014      	str	r4, [r2, #0]
 8014e8e:	b003      	add	sp, #12
 8014e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e94:	f000 b8e2 	b.w	801505c <__malloc_unlock>
 8014e98:	42a3      	cmp	r3, r4
 8014e9a:	d908      	bls.n	8014eae <_free_r+0x46>
 8014e9c:	6825      	ldr	r5, [r4, #0]
 8014e9e:	1961      	adds	r1, r4, r5
 8014ea0:	428b      	cmp	r3, r1
 8014ea2:	bf01      	itttt	eq
 8014ea4:	6819      	ldreq	r1, [r3, #0]
 8014ea6:	685b      	ldreq	r3, [r3, #4]
 8014ea8:	1949      	addeq	r1, r1, r5
 8014eaa:	6021      	streq	r1, [r4, #0]
 8014eac:	e7ed      	b.n	8014e8a <_free_r+0x22>
 8014eae:	461a      	mov	r2, r3
 8014eb0:	685b      	ldr	r3, [r3, #4]
 8014eb2:	b10b      	cbz	r3, 8014eb8 <_free_r+0x50>
 8014eb4:	42a3      	cmp	r3, r4
 8014eb6:	d9fa      	bls.n	8014eae <_free_r+0x46>
 8014eb8:	6811      	ldr	r1, [r2, #0]
 8014eba:	1855      	adds	r5, r2, r1
 8014ebc:	42a5      	cmp	r5, r4
 8014ebe:	d10b      	bne.n	8014ed8 <_free_r+0x70>
 8014ec0:	6824      	ldr	r4, [r4, #0]
 8014ec2:	4421      	add	r1, r4
 8014ec4:	1854      	adds	r4, r2, r1
 8014ec6:	42a3      	cmp	r3, r4
 8014ec8:	6011      	str	r1, [r2, #0]
 8014eca:	d1e0      	bne.n	8014e8e <_free_r+0x26>
 8014ecc:	681c      	ldr	r4, [r3, #0]
 8014ece:	685b      	ldr	r3, [r3, #4]
 8014ed0:	6053      	str	r3, [r2, #4]
 8014ed2:	440c      	add	r4, r1
 8014ed4:	6014      	str	r4, [r2, #0]
 8014ed6:	e7da      	b.n	8014e8e <_free_r+0x26>
 8014ed8:	d902      	bls.n	8014ee0 <_free_r+0x78>
 8014eda:	230c      	movs	r3, #12
 8014edc:	6003      	str	r3, [r0, #0]
 8014ede:	e7d6      	b.n	8014e8e <_free_r+0x26>
 8014ee0:	6825      	ldr	r5, [r4, #0]
 8014ee2:	1961      	adds	r1, r4, r5
 8014ee4:	428b      	cmp	r3, r1
 8014ee6:	bf04      	itt	eq
 8014ee8:	6819      	ldreq	r1, [r3, #0]
 8014eea:	685b      	ldreq	r3, [r3, #4]
 8014eec:	6063      	str	r3, [r4, #4]
 8014eee:	bf04      	itt	eq
 8014ef0:	1949      	addeq	r1, r1, r5
 8014ef2:	6021      	streq	r1, [r4, #0]
 8014ef4:	6054      	str	r4, [r2, #4]
 8014ef6:	e7ca      	b.n	8014e8e <_free_r+0x26>
 8014ef8:	b003      	add	sp, #12
 8014efa:	bd30      	pop	{r4, r5, pc}
 8014efc:	2000ec84 	.word	0x2000ec84

08014f00 <malloc>:
 8014f00:	4b02      	ldr	r3, [pc, #8]	; (8014f0c <malloc+0xc>)
 8014f02:	4601      	mov	r1, r0
 8014f04:	6818      	ldr	r0, [r3, #0]
 8014f06:	f000 b823 	b.w	8014f50 <_malloc_r>
 8014f0a:	bf00      	nop
 8014f0c:	200004e4 	.word	0x200004e4

08014f10 <sbrk_aligned>:
 8014f10:	b570      	push	{r4, r5, r6, lr}
 8014f12:	4e0e      	ldr	r6, [pc, #56]	; (8014f4c <sbrk_aligned+0x3c>)
 8014f14:	460c      	mov	r4, r1
 8014f16:	6831      	ldr	r1, [r6, #0]
 8014f18:	4605      	mov	r5, r0
 8014f1a:	b911      	cbnz	r1, 8014f22 <sbrk_aligned+0x12>
 8014f1c:	f000 fe26 	bl	8015b6c <_sbrk_r>
 8014f20:	6030      	str	r0, [r6, #0]
 8014f22:	4621      	mov	r1, r4
 8014f24:	4628      	mov	r0, r5
 8014f26:	f000 fe21 	bl	8015b6c <_sbrk_r>
 8014f2a:	1c43      	adds	r3, r0, #1
 8014f2c:	d00a      	beq.n	8014f44 <sbrk_aligned+0x34>
 8014f2e:	1cc4      	adds	r4, r0, #3
 8014f30:	f024 0403 	bic.w	r4, r4, #3
 8014f34:	42a0      	cmp	r0, r4
 8014f36:	d007      	beq.n	8014f48 <sbrk_aligned+0x38>
 8014f38:	1a21      	subs	r1, r4, r0
 8014f3a:	4628      	mov	r0, r5
 8014f3c:	f000 fe16 	bl	8015b6c <_sbrk_r>
 8014f40:	3001      	adds	r0, #1
 8014f42:	d101      	bne.n	8014f48 <sbrk_aligned+0x38>
 8014f44:	f04f 34ff 	mov.w	r4, #4294967295
 8014f48:	4620      	mov	r0, r4
 8014f4a:	bd70      	pop	{r4, r5, r6, pc}
 8014f4c:	2000ec88 	.word	0x2000ec88

08014f50 <_malloc_r>:
 8014f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f54:	1ccd      	adds	r5, r1, #3
 8014f56:	f025 0503 	bic.w	r5, r5, #3
 8014f5a:	3508      	adds	r5, #8
 8014f5c:	2d0c      	cmp	r5, #12
 8014f5e:	bf38      	it	cc
 8014f60:	250c      	movcc	r5, #12
 8014f62:	2d00      	cmp	r5, #0
 8014f64:	4607      	mov	r7, r0
 8014f66:	db01      	blt.n	8014f6c <_malloc_r+0x1c>
 8014f68:	42a9      	cmp	r1, r5
 8014f6a:	d905      	bls.n	8014f78 <_malloc_r+0x28>
 8014f6c:	230c      	movs	r3, #12
 8014f6e:	603b      	str	r3, [r7, #0]
 8014f70:	2600      	movs	r6, #0
 8014f72:	4630      	mov	r0, r6
 8014f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801504c <_malloc_r+0xfc>
 8014f7c:	f000 f868 	bl	8015050 <__malloc_lock>
 8014f80:	f8d8 3000 	ldr.w	r3, [r8]
 8014f84:	461c      	mov	r4, r3
 8014f86:	bb5c      	cbnz	r4, 8014fe0 <_malloc_r+0x90>
 8014f88:	4629      	mov	r1, r5
 8014f8a:	4638      	mov	r0, r7
 8014f8c:	f7ff ffc0 	bl	8014f10 <sbrk_aligned>
 8014f90:	1c43      	adds	r3, r0, #1
 8014f92:	4604      	mov	r4, r0
 8014f94:	d155      	bne.n	8015042 <_malloc_r+0xf2>
 8014f96:	f8d8 4000 	ldr.w	r4, [r8]
 8014f9a:	4626      	mov	r6, r4
 8014f9c:	2e00      	cmp	r6, #0
 8014f9e:	d145      	bne.n	801502c <_malloc_r+0xdc>
 8014fa0:	2c00      	cmp	r4, #0
 8014fa2:	d048      	beq.n	8015036 <_malloc_r+0xe6>
 8014fa4:	6823      	ldr	r3, [r4, #0]
 8014fa6:	4631      	mov	r1, r6
 8014fa8:	4638      	mov	r0, r7
 8014faa:	eb04 0903 	add.w	r9, r4, r3
 8014fae:	f000 fddd 	bl	8015b6c <_sbrk_r>
 8014fb2:	4581      	cmp	r9, r0
 8014fb4:	d13f      	bne.n	8015036 <_malloc_r+0xe6>
 8014fb6:	6821      	ldr	r1, [r4, #0]
 8014fb8:	1a6d      	subs	r5, r5, r1
 8014fba:	4629      	mov	r1, r5
 8014fbc:	4638      	mov	r0, r7
 8014fbe:	f7ff ffa7 	bl	8014f10 <sbrk_aligned>
 8014fc2:	3001      	adds	r0, #1
 8014fc4:	d037      	beq.n	8015036 <_malloc_r+0xe6>
 8014fc6:	6823      	ldr	r3, [r4, #0]
 8014fc8:	442b      	add	r3, r5
 8014fca:	6023      	str	r3, [r4, #0]
 8014fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d038      	beq.n	8015046 <_malloc_r+0xf6>
 8014fd4:	685a      	ldr	r2, [r3, #4]
 8014fd6:	42a2      	cmp	r2, r4
 8014fd8:	d12b      	bne.n	8015032 <_malloc_r+0xe2>
 8014fda:	2200      	movs	r2, #0
 8014fdc:	605a      	str	r2, [r3, #4]
 8014fde:	e00f      	b.n	8015000 <_malloc_r+0xb0>
 8014fe0:	6822      	ldr	r2, [r4, #0]
 8014fe2:	1b52      	subs	r2, r2, r5
 8014fe4:	d41f      	bmi.n	8015026 <_malloc_r+0xd6>
 8014fe6:	2a0b      	cmp	r2, #11
 8014fe8:	d917      	bls.n	801501a <_malloc_r+0xca>
 8014fea:	1961      	adds	r1, r4, r5
 8014fec:	42a3      	cmp	r3, r4
 8014fee:	6025      	str	r5, [r4, #0]
 8014ff0:	bf18      	it	ne
 8014ff2:	6059      	strne	r1, [r3, #4]
 8014ff4:	6863      	ldr	r3, [r4, #4]
 8014ff6:	bf08      	it	eq
 8014ff8:	f8c8 1000 	streq.w	r1, [r8]
 8014ffc:	5162      	str	r2, [r4, r5]
 8014ffe:	604b      	str	r3, [r1, #4]
 8015000:	4638      	mov	r0, r7
 8015002:	f104 060b 	add.w	r6, r4, #11
 8015006:	f000 f829 	bl	801505c <__malloc_unlock>
 801500a:	f026 0607 	bic.w	r6, r6, #7
 801500e:	1d23      	adds	r3, r4, #4
 8015010:	1af2      	subs	r2, r6, r3
 8015012:	d0ae      	beq.n	8014f72 <_malloc_r+0x22>
 8015014:	1b9b      	subs	r3, r3, r6
 8015016:	50a3      	str	r3, [r4, r2]
 8015018:	e7ab      	b.n	8014f72 <_malloc_r+0x22>
 801501a:	42a3      	cmp	r3, r4
 801501c:	6862      	ldr	r2, [r4, #4]
 801501e:	d1dd      	bne.n	8014fdc <_malloc_r+0x8c>
 8015020:	f8c8 2000 	str.w	r2, [r8]
 8015024:	e7ec      	b.n	8015000 <_malloc_r+0xb0>
 8015026:	4623      	mov	r3, r4
 8015028:	6864      	ldr	r4, [r4, #4]
 801502a:	e7ac      	b.n	8014f86 <_malloc_r+0x36>
 801502c:	4634      	mov	r4, r6
 801502e:	6876      	ldr	r6, [r6, #4]
 8015030:	e7b4      	b.n	8014f9c <_malloc_r+0x4c>
 8015032:	4613      	mov	r3, r2
 8015034:	e7cc      	b.n	8014fd0 <_malloc_r+0x80>
 8015036:	230c      	movs	r3, #12
 8015038:	603b      	str	r3, [r7, #0]
 801503a:	4638      	mov	r0, r7
 801503c:	f000 f80e 	bl	801505c <__malloc_unlock>
 8015040:	e797      	b.n	8014f72 <_malloc_r+0x22>
 8015042:	6025      	str	r5, [r4, #0]
 8015044:	e7dc      	b.n	8015000 <_malloc_r+0xb0>
 8015046:	605b      	str	r3, [r3, #4]
 8015048:	deff      	udf	#255	; 0xff
 801504a:	bf00      	nop
 801504c:	2000ec84 	.word	0x2000ec84

08015050 <__malloc_lock>:
 8015050:	4801      	ldr	r0, [pc, #4]	; (8015058 <__malloc_lock+0x8>)
 8015052:	f7ff beda 	b.w	8014e0a <__retarget_lock_acquire_recursive>
 8015056:	bf00      	nop
 8015058:	2000ec80 	.word	0x2000ec80

0801505c <__malloc_unlock>:
 801505c:	4801      	ldr	r0, [pc, #4]	; (8015064 <__malloc_unlock+0x8>)
 801505e:	f7ff bed5 	b.w	8014e0c <__retarget_lock_release_recursive>
 8015062:	bf00      	nop
 8015064:	2000ec80 	.word	0x2000ec80

08015068 <__ssputs_r>:
 8015068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801506c:	688e      	ldr	r6, [r1, #8]
 801506e:	461f      	mov	r7, r3
 8015070:	42be      	cmp	r6, r7
 8015072:	680b      	ldr	r3, [r1, #0]
 8015074:	4682      	mov	sl, r0
 8015076:	460c      	mov	r4, r1
 8015078:	4690      	mov	r8, r2
 801507a:	d82c      	bhi.n	80150d6 <__ssputs_r+0x6e>
 801507c:	898a      	ldrh	r2, [r1, #12]
 801507e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015082:	d026      	beq.n	80150d2 <__ssputs_r+0x6a>
 8015084:	6965      	ldr	r5, [r4, #20]
 8015086:	6909      	ldr	r1, [r1, #16]
 8015088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801508c:	eba3 0901 	sub.w	r9, r3, r1
 8015090:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015094:	1c7b      	adds	r3, r7, #1
 8015096:	444b      	add	r3, r9
 8015098:	106d      	asrs	r5, r5, #1
 801509a:	429d      	cmp	r5, r3
 801509c:	bf38      	it	cc
 801509e:	461d      	movcc	r5, r3
 80150a0:	0553      	lsls	r3, r2, #21
 80150a2:	d527      	bpl.n	80150f4 <__ssputs_r+0x8c>
 80150a4:	4629      	mov	r1, r5
 80150a6:	f7ff ff53 	bl	8014f50 <_malloc_r>
 80150aa:	4606      	mov	r6, r0
 80150ac:	b360      	cbz	r0, 8015108 <__ssputs_r+0xa0>
 80150ae:	6921      	ldr	r1, [r4, #16]
 80150b0:	464a      	mov	r2, r9
 80150b2:	f7ff feac 	bl	8014e0e <memcpy>
 80150b6:	89a3      	ldrh	r3, [r4, #12]
 80150b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80150bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150c0:	81a3      	strh	r3, [r4, #12]
 80150c2:	6126      	str	r6, [r4, #16]
 80150c4:	6165      	str	r5, [r4, #20]
 80150c6:	444e      	add	r6, r9
 80150c8:	eba5 0509 	sub.w	r5, r5, r9
 80150cc:	6026      	str	r6, [r4, #0]
 80150ce:	60a5      	str	r5, [r4, #8]
 80150d0:	463e      	mov	r6, r7
 80150d2:	42be      	cmp	r6, r7
 80150d4:	d900      	bls.n	80150d8 <__ssputs_r+0x70>
 80150d6:	463e      	mov	r6, r7
 80150d8:	6820      	ldr	r0, [r4, #0]
 80150da:	4632      	mov	r2, r6
 80150dc:	4641      	mov	r1, r8
 80150de:	f7ff fdf7 	bl	8014cd0 <memmove>
 80150e2:	68a3      	ldr	r3, [r4, #8]
 80150e4:	1b9b      	subs	r3, r3, r6
 80150e6:	60a3      	str	r3, [r4, #8]
 80150e8:	6823      	ldr	r3, [r4, #0]
 80150ea:	4433      	add	r3, r6
 80150ec:	6023      	str	r3, [r4, #0]
 80150ee:	2000      	movs	r0, #0
 80150f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150f4:	462a      	mov	r2, r5
 80150f6:	f000 fd50 	bl	8015b9a <_realloc_r>
 80150fa:	4606      	mov	r6, r0
 80150fc:	2800      	cmp	r0, #0
 80150fe:	d1e0      	bne.n	80150c2 <__ssputs_r+0x5a>
 8015100:	6921      	ldr	r1, [r4, #16]
 8015102:	4650      	mov	r0, sl
 8015104:	f7ff feb0 	bl	8014e68 <_free_r>
 8015108:	230c      	movs	r3, #12
 801510a:	f8ca 3000 	str.w	r3, [sl]
 801510e:	89a3      	ldrh	r3, [r4, #12]
 8015110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015114:	81a3      	strh	r3, [r4, #12]
 8015116:	f04f 30ff 	mov.w	r0, #4294967295
 801511a:	e7e9      	b.n	80150f0 <__ssputs_r+0x88>

0801511c <_svfiprintf_r>:
 801511c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015120:	4698      	mov	r8, r3
 8015122:	898b      	ldrh	r3, [r1, #12]
 8015124:	061b      	lsls	r3, r3, #24
 8015126:	b09d      	sub	sp, #116	; 0x74
 8015128:	4607      	mov	r7, r0
 801512a:	460d      	mov	r5, r1
 801512c:	4614      	mov	r4, r2
 801512e:	d50e      	bpl.n	801514e <_svfiprintf_r+0x32>
 8015130:	690b      	ldr	r3, [r1, #16]
 8015132:	b963      	cbnz	r3, 801514e <_svfiprintf_r+0x32>
 8015134:	2140      	movs	r1, #64	; 0x40
 8015136:	f7ff ff0b 	bl	8014f50 <_malloc_r>
 801513a:	6028      	str	r0, [r5, #0]
 801513c:	6128      	str	r0, [r5, #16]
 801513e:	b920      	cbnz	r0, 801514a <_svfiprintf_r+0x2e>
 8015140:	230c      	movs	r3, #12
 8015142:	603b      	str	r3, [r7, #0]
 8015144:	f04f 30ff 	mov.w	r0, #4294967295
 8015148:	e0d0      	b.n	80152ec <_svfiprintf_r+0x1d0>
 801514a:	2340      	movs	r3, #64	; 0x40
 801514c:	616b      	str	r3, [r5, #20]
 801514e:	2300      	movs	r3, #0
 8015150:	9309      	str	r3, [sp, #36]	; 0x24
 8015152:	2320      	movs	r3, #32
 8015154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015158:	f8cd 800c 	str.w	r8, [sp, #12]
 801515c:	2330      	movs	r3, #48	; 0x30
 801515e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015304 <_svfiprintf_r+0x1e8>
 8015162:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015166:	f04f 0901 	mov.w	r9, #1
 801516a:	4623      	mov	r3, r4
 801516c:	469a      	mov	sl, r3
 801516e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015172:	b10a      	cbz	r2, 8015178 <_svfiprintf_r+0x5c>
 8015174:	2a25      	cmp	r2, #37	; 0x25
 8015176:	d1f9      	bne.n	801516c <_svfiprintf_r+0x50>
 8015178:	ebba 0b04 	subs.w	fp, sl, r4
 801517c:	d00b      	beq.n	8015196 <_svfiprintf_r+0x7a>
 801517e:	465b      	mov	r3, fp
 8015180:	4622      	mov	r2, r4
 8015182:	4629      	mov	r1, r5
 8015184:	4638      	mov	r0, r7
 8015186:	f7ff ff6f 	bl	8015068 <__ssputs_r>
 801518a:	3001      	adds	r0, #1
 801518c:	f000 80a9 	beq.w	80152e2 <_svfiprintf_r+0x1c6>
 8015190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015192:	445a      	add	r2, fp
 8015194:	9209      	str	r2, [sp, #36]	; 0x24
 8015196:	f89a 3000 	ldrb.w	r3, [sl]
 801519a:	2b00      	cmp	r3, #0
 801519c:	f000 80a1 	beq.w	80152e2 <_svfiprintf_r+0x1c6>
 80151a0:	2300      	movs	r3, #0
 80151a2:	f04f 32ff 	mov.w	r2, #4294967295
 80151a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151aa:	f10a 0a01 	add.w	sl, sl, #1
 80151ae:	9304      	str	r3, [sp, #16]
 80151b0:	9307      	str	r3, [sp, #28]
 80151b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80151b6:	931a      	str	r3, [sp, #104]	; 0x68
 80151b8:	4654      	mov	r4, sl
 80151ba:	2205      	movs	r2, #5
 80151bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151c0:	4850      	ldr	r0, [pc, #320]	; (8015304 <_svfiprintf_r+0x1e8>)
 80151c2:	f7eb f80d 	bl	80001e0 <memchr>
 80151c6:	9a04      	ldr	r2, [sp, #16]
 80151c8:	b9d8      	cbnz	r0, 8015202 <_svfiprintf_r+0xe6>
 80151ca:	06d0      	lsls	r0, r2, #27
 80151cc:	bf44      	itt	mi
 80151ce:	2320      	movmi	r3, #32
 80151d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151d4:	0711      	lsls	r1, r2, #28
 80151d6:	bf44      	itt	mi
 80151d8:	232b      	movmi	r3, #43	; 0x2b
 80151da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151de:	f89a 3000 	ldrb.w	r3, [sl]
 80151e2:	2b2a      	cmp	r3, #42	; 0x2a
 80151e4:	d015      	beq.n	8015212 <_svfiprintf_r+0xf6>
 80151e6:	9a07      	ldr	r2, [sp, #28]
 80151e8:	4654      	mov	r4, sl
 80151ea:	2000      	movs	r0, #0
 80151ec:	f04f 0c0a 	mov.w	ip, #10
 80151f0:	4621      	mov	r1, r4
 80151f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80151f6:	3b30      	subs	r3, #48	; 0x30
 80151f8:	2b09      	cmp	r3, #9
 80151fa:	d94d      	bls.n	8015298 <_svfiprintf_r+0x17c>
 80151fc:	b1b0      	cbz	r0, 801522c <_svfiprintf_r+0x110>
 80151fe:	9207      	str	r2, [sp, #28]
 8015200:	e014      	b.n	801522c <_svfiprintf_r+0x110>
 8015202:	eba0 0308 	sub.w	r3, r0, r8
 8015206:	fa09 f303 	lsl.w	r3, r9, r3
 801520a:	4313      	orrs	r3, r2
 801520c:	9304      	str	r3, [sp, #16]
 801520e:	46a2      	mov	sl, r4
 8015210:	e7d2      	b.n	80151b8 <_svfiprintf_r+0x9c>
 8015212:	9b03      	ldr	r3, [sp, #12]
 8015214:	1d19      	adds	r1, r3, #4
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	9103      	str	r1, [sp, #12]
 801521a:	2b00      	cmp	r3, #0
 801521c:	bfbb      	ittet	lt
 801521e:	425b      	neglt	r3, r3
 8015220:	f042 0202 	orrlt.w	r2, r2, #2
 8015224:	9307      	strge	r3, [sp, #28]
 8015226:	9307      	strlt	r3, [sp, #28]
 8015228:	bfb8      	it	lt
 801522a:	9204      	strlt	r2, [sp, #16]
 801522c:	7823      	ldrb	r3, [r4, #0]
 801522e:	2b2e      	cmp	r3, #46	; 0x2e
 8015230:	d10c      	bne.n	801524c <_svfiprintf_r+0x130>
 8015232:	7863      	ldrb	r3, [r4, #1]
 8015234:	2b2a      	cmp	r3, #42	; 0x2a
 8015236:	d134      	bne.n	80152a2 <_svfiprintf_r+0x186>
 8015238:	9b03      	ldr	r3, [sp, #12]
 801523a:	1d1a      	adds	r2, r3, #4
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	9203      	str	r2, [sp, #12]
 8015240:	2b00      	cmp	r3, #0
 8015242:	bfb8      	it	lt
 8015244:	f04f 33ff 	movlt.w	r3, #4294967295
 8015248:	3402      	adds	r4, #2
 801524a:	9305      	str	r3, [sp, #20]
 801524c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015314 <_svfiprintf_r+0x1f8>
 8015250:	7821      	ldrb	r1, [r4, #0]
 8015252:	2203      	movs	r2, #3
 8015254:	4650      	mov	r0, sl
 8015256:	f7ea ffc3 	bl	80001e0 <memchr>
 801525a:	b138      	cbz	r0, 801526c <_svfiprintf_r+0x150>
 801525c:	9b04      	ldr	r3, [sp, #16]
 801525e:	eba0 000a 	sub.w	r0, r0, sl
 8015262:	2240      	movs	r2, #64	; 0x40
 8015264:	4082      	lsls	r2, r0
 8015266:	4313      	orrs	r3, r2
 8015268:	3401      	adds	r4, #1
 801526a:	9304      	str	r3, [sp, #16]
 801526c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015270:	4825      	ldr	r0, [pc, #148]	; (8015308 <_svfiprintf_r+0x1ec>)
 8015272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015276:	2206      	movs	r2, #6
 8015278:	f7ea ffb2 	bl	80001e0 <memchr>
 801527c:	2800      	cmp	r0, #0
 801527e:	d038      	beq.n	80152f2 <_svfiprintf_r+0x1d6>
 8015280:	4b22      	ldr	r3, [pc, #136]	; (801530c <_svfiprintf_r+0x1f0>)
 8015282:	bb1b      	cbnz	r3, 80152cc <_svfiprintf_r+0x1b0>
 8015284:	9b03      	ldr	r3, [sp, #12]
 8015286:	3307      	adds	r3, #7
 8015288:	f023 0307 	bic.w	r3, r3, #7
 801528c:	3308      	adds	r3, #8
 801528e:	9303      	str	r3, [sp, #12]
 8015290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015292:	4433      	add	r3, r6
 8015294:	9309      	str	r3, [sp, #36]	; 0x24
 8015296:	e768      	b.n	801516a <_svfiprintf_r+0x4e>
 8015298:	fb0c 3202 	mla	r2, ip, r2, r3
 801529c:	460c      	mov	r4, r1
 801529e:	2001      	movs	r0, #1
 80152a0:	e7a6      	b.n	80151f0 <_svfiprintf_r+0xd4>
 80152a2:	2300      	movs	r3, #0
 80152a4:	3401      	adds	r4, #1
 80152a6:	9305      	str	r3, [sp, #20]
 80152a8:	4619      	mov	r1, r3
 80152aa:	f04f 0c0a 	mov.w	ip, #10
 80152ae:	4620      	mov	r0, r4
 80152b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152b4:	3a30      	subs	r2, #48	; 0x30
 80152b6:	2a09      	cmp	r2, #9
 80152b8:	d903      	bls.n	80152c2 <_svfiprintf_r+0x1a6>
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d0c6      	beq.n	801524c <_svfiprintf_r+0x130>
 80152be:	9105      	str	r1, [sp, #20]
 80152c0:	e7c4      	b.n	801524c <_svfiprintf_r+0x130>
 80152c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80152c6:	4604      	mov	r4, r0
 80152c8:	2301      	movs	r3, #1
 80152ca:	e7f0      	b.n	80152ae <_svfiprintf_r+0x192>
 80152cc:	ab03      	add	r3, sp, #12
 80152ce:	9300      	str	r3, [sp, #0]
 80152d0:	462a      	mov	r2, r5
 80152d2:	4b0f      	ldr	r3, [pc, #60]	; (8015310 <_svfiprintf_r+0x1f4>)
 80152d4:	a904      	add	r1, sp, #16
 80152d6:	4638      	mov	r0, r7
 80152d8:	f3af 8000 	nop.w
 80152dc:	1c42      	adds	r2, r0, #1
 80152de:	4606      	mov	r6, r0
 80152e0:	d1d6      	bne.n	8015290 <_svfiprintf_r+0x174>
 80152e2:	89ab      	ldrh	r3, [r5, #12]
 80152e4:	065b      	lsls	r3, r3, #25
 80152e6:	f53f af2d 	bmi.w	8015144 <_svfiprintf_r+0x28>
 80152ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152ec:	b01d      	add	sp, #116	; 0x74
 80152ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152f2:	ab03      	add	r3, sp, #12
 80152f4:	9300      	str	r3, [sp, #0]
 80152f6:	462a      	mov	r2, r5
 80152f8:	4b05      	ldr	r3, [pc, #20]	; (8015310 <_svfiprintf_r+0x1f4>)
 80152fa:	a904      	add	r1, sp, #16
 80152fc:	4638      	mov	r0, r7
 80152fe:	f000 f9bd 	bl	801567c <_printf_i>
 8015302:	e7eb      	b.n	80152dc <_svfiprintf_r+0x1c0>
 8015304:	080194d3 	.word	0x080194d3
 8015308:	080194dd 	.word	0x080194dd
 801530c:	00000000 	.word	0x00000000
 8015310:	08015069 	.word	0x08015069
 8015314:	080194d9 	.word	0x080194d9

08015318 <__sfputc_r>:
 8015318:	6893      	ldr	r3, [r2, #8]
 801531a:	3b01      	subs	r3, #1
 801531c:	2b00      	cmp	r3, #0
 801531e:	b410      	push	{r4}
 8015320:	6093      	str	r3, [r2, #8]
 8015322:	da08      	bge.n	8015336 <__sfputc_r+0x1e>
 8015324:	6994      	ldr	r4, [r2, #24]
 8015326:	42a3      	cmp	r3, r4
 8015328:	db01      	blt.n	801532e <__sfputc_r+0x16>
 801532a:	290a      	cmp	r1, #10
 801532c:	d103      	bne.n	8015336 <__sfputc_r+0x1e>
 801532e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015332:	f000 bb85 	b.w	8015a40 <__swbuf_r>
 8015336:	6813      	ldr	r3, [r2, #0]
 8015338:	1c58      	adds	r0, r3, #1
 801533a:	6010      	str	r0, [r2, #0]
 801533c:	7019      	strb	r1, [r3, #0]
 801533e:	4608      	mov	r0, r1
 8015340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015344:	4770      	bx	lr

08015346 <__sfputs_r>:
 8015346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015348:	4606      	mov	r6, r0
 801534a:	460f      	mov	r7, r1
 801534c:	4614      	mov	r4, r2
 801534e:	18d5      	adds	r5, r2, r3
 8015350:	42ac      	cmp	r4, r5
 8015352:	d101      	bne.n	8015358 <__sfputs_r+0x12>
 8015354:	2000      	movs	r0, #0
 8015356:	e007      	b.n	8015368 <__sfputs_r+0x22>
 8015358:	f814 1b01 	ldrb.w	r1, [r4], #1
 801535c:	463a      	mov	r2, r7
 801535e:	4630      	mov	r0, r6
 8015360:	f7ff ffda 	bl	8015318 <__sfputc_r>
 8015364:	1c43      	adds	r3, r0, #1
 8015366:	d1f3      	bne.n	8015350 <__sfputs_r+0xa>
 8015368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801536c <_vfiprintf_r>:
 801536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015370:	460d      	mov	r5, r1
 8015372:	b09d      	sub	sp, #116	; 0x74
 8015374:	4614      	mov	r4, r2
 8015376:	4698      	mov	r8, r3
 8015378:	4606      	mov	r6, r0
 801537a:	b118      	cbz	r0, 8015384 <_vfiprintf_r+0x18>
 801537c:	6a03      	ldr	r3, [r0, #32]
 801537e:	b90b      	cbnz	r3, 8015384 <_vfiprintf_r+0x18>
 8015380:	f7ff fbac 	bl	8014adc <__sinit>
 8015384:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015386:	07d9      	lsls	r1, r3, #31
 8015388:	d405      	bmi.n	8015396 <_vfiprintf_r+0x2a>
 801538a:	89ab      	ldrh	r3, [r5, #12]
 801538c:	059a      	lsls	r2, r3, #22
 801538e:	d402      	bmi.n	8015396 <_vfiprintf_r+0x2a>
 8015390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015392:	f7ff fd3a 	bl	8014e0a <__retarget_lock_acquire_recursive>
 8015396:	89ab      	ldrh	r3, [r5, #12]
 8015398:	071b      	lsls	r3, r3, #28
 801539a:	d501      	bpl.n	80153a0 <_vfiprintf_r+0x34>
 801539c:	692b      	ldr	r3, [r5, #16]
 801539e:	b99b      	cbnz	r3, 80153c8 <_vfiprintf_r+0x5c>
 80153a0:	4629      	mov	r1, r5
 80153a2:	4630      	mov	r0, r6
 80153a4:	f000 fb8a 	bl	8015abc <__swsetup_r>
 80153a8:	b170      	cbz	r0, 80153c8 <_vfiprintf_r+0x5c>
 80153aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80153ac:	07dc      	lsls	r4, r3, #31
 80153ae:	d504      	bpl.n	80153ba <_vfiprintf_r+0x4e>
 80153b0:	f04f 30ff 	mov.w	r0, #4294967295
 80153b4:	b01d      	add	sp, #116	; 0x74
 80153b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153ba:	89ab      	ldrh	r3, [r5, #12]
 80153bc:	0598      	lsls	r0, r3, #22
 80153be:	d4f7      	bmi.n	80153b0 <_vfiprintf_r+0x44>
 80153c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80153c2:	f7ff fd23 	bl	8014e0c <__retarget_lock_release_recursive>
 80153c6:	e7f3      	b.n	80153b0 <_vfiprintf_r+0x44>
 80153c8:	2300      	movs	r3, #0
 80153ca:	9309      	str	r3, [sp, #36]	; 0x24
 80153cc:	2320      	movs	r3, #32
 80153ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80153d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80153d6:	2330      	movs	r3, #48	; 0x30
 80153d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801558c <_vfiprintf_r+0x220>
 80153dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80153e0:	f04f 0901 	mov.w	r9, #1
 80153e4:	4623      	mov	r3, r4
 80153e6:	469a      	mov	sl, r3
 80153e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153ec:	b10a      	cbz	r2, 80153f2 <_vfiprintf_r+0x86>
 80153ee:	2a25      	cmp	r2, #37	; 0x25
 80153f0:	d1f9      	bne.n	80153e6 <_vfiprintf_r+0x7a>
 80153f2:	ebba 0b04 	subs.w	fp, sl, r4
 80153f6:	d00b      	beq.n	8015410 <_vfiprintf_r+0xa4>
 80153f8:	465b      	mov	r3, fp
 80153fa:	4622      	mov	r2, r4
 80153fc:	4629      	mov	r1, r5
 80153fe:	4630      	mov	r0, r6
 8015400:	f7ff ffa1 	bl	8015346 <__sfputs_r>
 8015404:	3001      	adds	r0, #1
 8015406:	f000 80a9 	beq.w	801555c <_vfiprintf_r+0x1f0>
 801540a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801540c:	445a      	add	r2, fp
 801540e:	9209      	str	r2, [sp, #36]	; 0x24
 8015410:	f89a 3000 	ldrb.w	r3, [sl]
 8015414:	2b00      	cmp	r3, #0
 8015416:	f000 80a1 	beq.w	801555c <_vfiprintf_r+0x1f0>
 801541a:	2300      	movs	r3, #0
 801541c:	f04f 32ff 	mov.w	r2, #4294967295
 8015420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015424:	f10a 0a01 	add.w	sl, sl, #1
 8015428:	9304      	str	r3, [sp, #16]
 801542a:	9307      	str	r3, [sp, #28]
 801542c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015430:	931a      	str	r3, [sp, #104]	; 0x68
 8015432:	4654      	mov	r4, sl
 8015434:	2205      	movs	r2, #5
 8015436:	f814 1b01 	ldrb.w	r1, [r4], #1
 801543a:	4854      	ldr	r0, [pc, #336]	; (801558c <_vfiprintf_r+0x220>)
 801543c:	f7ea fed0 	bl	80001e0 <memchr>
 8015440:	9a04      	ldr	r2, [sp, #16]
 8015442:	b9d8      	cbnz	r0, 801547c <_vfiprintf_r+0x110>
 8015444:	06d1      	lsls	r1, r2, #27
 8015446:	bf44      	itt	mi
 8015448:	2320      	movmi	r3, #32
 801544a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801544e:	0713      	lsls	r3, r2, #28
 8015450:	bf44      	itt	mi
 8015452:	232b      	movmi	r3, #43	; 0x2b
 8015454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015458:	f89a 3000 	ldrb.w	r3, [sl]
 801545c:	2b2a      	cmp	r3, #42	; 0x2a
 801545e:	d015      	beq.n	801548c <_vfiprintf_r+0x120>
 8015460:	9a07      	ldr	r2, [sp, #28]
 8015462:	4654      	mov	r4, sl
 8015464:	2000      	movs	r0, #0
 8015466:	f04f 0c0a 	mov.w	ip, #10
 801546a:	4621      	mov	r1, r4
 801546c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015470:	3b30      	subs	r3, #48	; 0x30
 8015472:	2b09      	cmp	r3, #9
 8015474:	d94d      	bls.n	8015512 <_vfiprintf_r+0x1a6>
 8015476:	b1b0      	cbz	r0, 80154a6 <_vfiprintf_r+0x13a>
 8015478:	9207      	str	r2, [sp, #28]
 801547a:	e014      	b.n	80154a6 <_vfiprintf_r+0x13a>
 801547c:	eba0 0308 	sub.w	r3, r0, r8
 8015480:	fa09 f303 	lsl.w	r3, r9, r3
 8015484:	4313      	orrs	r3, r2
 8015486:	9304      	str	r3, [sp, #16]
 8015488:	46a2      	mov	sl, r4
 801548a:	e7d2      	b.n	8015432 <_vfiprintf_r+0xc6>
 801548c:	9b03      	ldr	r3, [sp, #12]
 801548e:	1d19      	adds	r1, r3, #4
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	9103      	str	r1, [sp, #12]
 8015494:	2b00      	cmp	r3, #0
 8015496:	bfbb      	ittet	lt
 8015498:	425b      	neglt	r3, r3
 801549a:	f042 0202 	orrlt.w	r2, r2, #2
 801549e:	9307      	strge	r3, [sp, #28]
 80154a0:	9307      	strlt	r3, [sp, #28]
 80154a2:	bfb8      	it	lt
 80154a4:	9204      	strlt	r2, [sp, #16]
 80154a6:	7823      	ldrb	r3, [r4, #0]
 80154a8:	2b2e      	cmp	r3, #46	; 0x2e
 80154aa:	d10c      	bne.n	80154c6 <_vfiprintf_r+0x15a>
 80154ac:	7863      	ldrb	r3, [r4, #1]
 80154ae:	2b2a      	cmp	r3, #42	; 0x2a
 80154b0:	d134      	bne.n	801551c <_vfiprintf_r+0x1b0>
 80154b2:	9b03      	ldr	r3, [sp, #12]
 80154b4:	1d1a      	adds	r2, r3, #4
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	9203      	str	r2, [sp, #12]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	bfb8      	it	lt
 80154be:	f04f 33ff 	movlt.w	r3, #4294967295
 80154c2:	3402      	adds	r4, #2
 80154c4:	9305      	str	r3, [sp, #20]
 80154c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801559c <_vfiprintf_r+0x230>
 80154ca:	7821      	ldrb	r1, [r4, #0]
 80154cc:	2203      	movs	r2, #3
 80154ce:	4650      	mov	r0, sl
 80154d0:	f7ea fe86 	bl	80001e0 <memchr>
 80154d4:	b138      	cbz	r0, 80154e6 <_vfiprintf_r+0x17a>
 80154d6:	9b04      	ldr	r3, [sp, #16]
 80154d8:	eba0 000a 	sub.w	r0, r0, sl
 80154dc:	2240      	movs	r2, #64	; 0x40
 80154de:	4082      	lsls	r2, r0
 80154e0:	4313      	orrs	r3, r2
 80154e2:	3401      	adds	r4, #1
 80154e4:	9304      	str	r3, [sp, #16]
 80154e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154ea:	4829      	ldr	r0, [pc, #164]	; (8015590 <_vfiprintf_r+0x224>)
 80154ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80154f0:	2206      	movs	r2, #6
 80154f2:	f7ea fe75 	bl	80001e0 <memchr>
 80154f6:	2800      	cmp	r0, #0
 80154f8:	d03f      	beq.n	801557a <_vfiprintf_r+0x20e>
 80154fa:	4b26      	ldr	r3, [pc, #152]	; (8015594 <_vfiprintf_r+0x228>)
 80154fc:	bb1b      	cbnz	r3, 8015546 <_vfiprintf_r+0x1da>
 80154fe:	9b03      	ldr	r3, [sp, #12]
 8015500:	3307      	adds	r3, #7
 8015502:	f023 0307 	bic.w	r3, r3, #7
 8015506:	3308      	adds	r3, #8
 8015508:	9303      	str	r3, [sp, #12]
 801550a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801550c:	443b      	add	r3, r7
 801550e:	9309      	str	r3, [sp, #36]	; 0x24
 8015510:	e768      	b.n	80153e4 <_vfiprintf_r+0x78>
 8015512:	fb0c 3202 	mla	r2, ip, r2, r3
 8015516:	460c      	mov	r4, r1
 8015518:	2001      	movs	r0, #1
 801551a:	e7a6      	b.n	801546a <_vfiprintf_r+0xfe>
 801551c:	2300      	movs	r3, #0
 801551e:	3401      	adds	r4, #1
 8015520:	9305      	str	r3, [sp, #20]
 8015522:	4619      	mov	r1, r3
 8015524:	f04f 0c0a 	mov.w	ip, #10
 8015528:	4620      	mov	r0, r4
 801552a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801552e:	3a30      	subs	r2, #48	; 0x30
 8015530:	2a09      	cmp	r2, #9
 8015532:	d903      	bls.n	801553c <_vfiprintf_r+0x1d0>
 8015534:	2b00      	cmp	r3, #0
 8015536:	d0c6      	beq.n	80154c6 <_vfiprintf_r+0x15a>
 8015538:	9105      	str	r1, [sp, #20]
 801553a:	e7c4      	b.n	80154c6 <_vfiprintf_r+0x15a>
 801553c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015540:	4604      	mov	r4, r0
 8015542:	2301      	movs	r3, #1
 8015544:	e7f0      	b.n	8015528 <_vfiprintf_r+0x1bc>
 8015546:	ab03      	add	r3, sp, #12
 8015548:	9300      	str	r3, [sp, #0]
 801554a:	462a      	mov	r2, r5
 801554c:	4b12      	ldr	r3, [pc, #72]	; (8015598 <_vfiprintf_r+0x22c>)
 801554e:	a904      	add	r1, sp, #16
 8015550:	4630      	mov	r0, r6
 8015552:	f3af 8000 	nop.w
 8015556:	4607      	mov	r7, r0
 8015558:	1c78      	adds	r0, r7, #1
 801555a:	d1d6      	bne.n	801550a <_vfiprintf_r+0x19e>
 801555c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801555e:	07d9      	lsls	r1, r3, #31
 8015560:	d405      	bmi.n	801556e <_vfiprintf_r+0x202>
 8015562:	89ab      	ldrh	r3, [r5, #12]
 8015564:	059a      	lsls	r2, r3, #22
 8015566:	d402      	bmi.n	801556e <_vfiprintf_r+0x202>
 8015568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801556a:	f7ff fc4f 	bl	8014e0c <__retarget_lock_release_recursive>
 801556e:	89ab      	ldrh	r3, [r5, #12]
 8015570:	065b      	lsls	r3, r3, #25
 8015572:	f53f af1d 	bmi.w	80153b0 <_vfiprintf_r+0x44>
 8015576:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015578:	e71c      	b.n	80153b4 <_vfiprintf_r+0x48>
 801557a:	ab03      	add	r3, sp, #12
 801557c:	9300      	str	r3, [sp, #0]
 801557e:	462a      	mov	r2, r5
 8015580:	4b05      	ldr	r3, [pc, #20]	; (8015598 <_vfiprintf_r+0x22c>)
 8015582:	a904      	add	r1, sp, #16
 8015584:	4630      	mov	r0, r6
 8015586:	f000 f879 	bl	801567c <_printf_i>
 801558a:	e7e4      	b.n	8015556 <_vfiprintf_r+0x1ea>
 801558c:	080194d3 	.word	0x080194d3
 8015590:	080194dd 	.word	0x080194dd
 8015594:	00000000 	.word	0x00000000
 8015598:	08015347 	.word	0x08015347
 801559c:	080194d9 	.word	0x080194d9

080155a0 <_printf_common>:
 80155a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155a4:	4616      	mov	r6, r2
 80155a6:	4699      	mov	r9, r3
 80155a8:	688a      	ldr	r2, [r1, #8]
 80155aa:	690b      	ldr	r3, [r1, #16]
 80155ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80155b0:	4293      	cmp	r3, r2
 80155b2:	bfb8      	it	lt
 80155b4:	4613      	movlt	r3, r2
 80155b6:	6033      	str	r3, [r6, #0]
 80155b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80155bc:	4607      	mov	r7, r0
 80155be:	460c      	mov	r4, r1
 80155c0:	b10a      	cbz	r2, 80155c6 <_printf_common+0x26>
 80155c2:	3301      	adds	r3, #1
 80155c4:	6033      	str	r3, [r6, #0]
 80155c6:	6823      	ldr	r3, [r4, #0]
 80155c8:	0699      	lsls	r1, r3, #26
 80155ca:	bf42      	ittt	mi
 80155cc:	6833      	ldrmi	r3, [r6, #0]
 80155ce:	3302      	addmi	r3, #2
 80155d0:	6033      	strmi	r3, [r6, #0]
 80155d2:	6825      	ldr	r5, [r4, #0]
 80155d4:	f015 0506 	ands.w	r5, r5, #6
 80155d8:	d106      	bne.n	80155e8 <_printf_common+0x48>
 80155da:	f104 0a19 	add.w	sl, r4, #25
 80155de:	68e3      	ldr	r3, [r4, #12]
 80155e0:	6832      	ldr	r2, [r6, #0]
 80155e2:	1a9b      	subs	r3, r3, r2
 80155e4:	42ab      	cmp	r3, r5
 80155e6:	dc26      	bgt.n	8015636 <_printf_common+0x96>
 80155e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80155ec:	1e13      	subs	r3, r2, #0
 80155ee:	6822      	ldr	r2, [r4, #0]
 80155f0:	bf18      	it	ne
 80155f2:	2301      	movne	r3, #1
 80155f4:	0692      	lsls	r2, r2, #26
 80155f6:	d42b      	bmi.n	8015650 <_printf_common+0xb0>
 80155f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80155fc:	4649      	mov	r1, r9
 80155fe:	4638      	mov	r0, r7
 8015600:	47c0      	blx	r8
 8015602:	3001      	adds	r0, #1
 8015604:	d01e      	beq.n	8015644 <_printf_common+0xa4>
 8015606:	6823      	ldr	r3, [r4, #0]
 8015608:	6922      	ldr	r2, [r4, #16]
 801560a:	f003 0306 	and.w	r3, r3, #6
 801560e:	2b04      	cmp	r3, #4
 8015610:	bf02      	ittt	eq
 8015612:	68e5      	ldreq	r5, [r4, #12]
 8015614:	6833      	ldreq	r3, [r6, #0]
 8015616:	1aed      	subeq	r5, r5, r3
 8015618:	68a3      	ldr	r3, [r4, #8]
 801561a:	bf0c      	ite	eq
 801561c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015620:	2500      	movne	r5, #0
 8015622:	4293      	cmp	r3, r2
 8015624:	bfc4      	itt	gt
 8015626:	1a9b      	subgt	r3, r3, r2
 8015628:	18ed      	addgt	r5, r5, r3
 801562a:	2600      	movs	r6, #0
 801562c:	341a      	adds	r4, #26
 801562e:	42b5      	cmp	r5, r6
 8015630:	d11a      	bne.n	8015668 <_printf_common+0xc8>
 8015632:	2000      	movs	r0, #0
 8015634:	e008      	b.n	8015648 <_printf_common+0xa8>
 8015636:	2301      	movs	r3, #1
 8015638:	4652      	mov	r2, sl
 801563a:	4649      	mov	r1, r9
 801563c:	4638      	mov	r0, r7
 801563e:	47c0      	blx	r8
 8015640:	3001      	adds	r0, #1
 8015642:	d103      	bne.n	801564c <_printf_common+0xac>
 8015644:	f04f 30ff 	mov.w	r0, #4294967295
 8015648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801564c:	3501      	adds	r5, #1
 801564e:	e7c6      	b.n	80155de <_printf_common+0x3e>
 8015650:	18e1      	adds	r1, r4, r3
 8015652:	1c5a      	adds	r2, r3, #1
 8015654:	2030      	movs	r0, #48	; 0x30
 8015656:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801565a:	4422      	add	r2, r4
 801565c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015660:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015664:	3302      	adds	r3, #2
 8015666:	e7c7      	b.n	80155f8 <_printf_common+0x58>
 8015668:	2301      	movs	r3, #1
 801566a:	4622      	mov	r2, r4
 801566c:	4649      	mov	r1, r9
 801566e:	4638      	mov	r0, r7
 8015670:	47c0      	blx	r8
 8015672:	3001      	adds	r0, #1
 8015674:	d0e6      	beq.n	8015644 <_printf_common+0xa4>
 8015676:	3601      	adds	r6, #1
 8015678:	e7d9      	b.n	801562e <_printf_common+0x8e>
	...

0801567c <_printf_i>:
 801567c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015680:	7e0f      	ldrb	r7, [r1, #24]
 8015682:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015684:	2f78      	cmp	r7, #120	; 0x78
 8015686:	4691      	mov	r9, r2
 8015688:	4680      	mov	r8, r0
 801568a:	460c      	mov	r4, r1
 801568c:	469a      	mov	sl, r3
 801568e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015692:	d807      	bhi.n	80156a4 <_printf_i+0x28>
 8015694:	2f62      	cmp	r7, #98	; 0x62
 8015696:	d80a      	bhi.n	80156ae <_printf_i+0x32>
 8015698:	2f00      	cmp	r7, #0
 801569a:	f000 80d4 	beq.w	8015846 <_printf_i+0x1ca>
 801569e:	2f58      	cmp	r7, #88	; 0x58
 80156a0:	f000 80c0 	beq.w	8015824 <_printf_i+0x1a8>
 80156a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80156a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80156ac:	e03a      	b.n	8015724 <_printf_i+0xa8>
 80156ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80156b2:	2b15      	cmp	r3, #21
 80156b4:	d8f6      	bhi.n	80156a4 <_printf_i+0x28>
 80156b6:	a101      	add	r1, pc, #4	; (adr r1, 80156bc <_printf_i+0x40>)
 80156b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80156bc:	08015715 	.word	0x08015715
 80156c0:	08015729 	.word	0x08015729
 80156c4:	080156a5 	.word	0x080156a5
 80156c8:	080156a5 	.word	0x080156a5
 80156cc:	080156a5 	.word	0x080156a5
 80156d0:	080156a5 	.word	0x080156a5
 80156d4:	08015729 	.word	0x08015729
 80156d8:	080156a5 	.word	0x080156a5
 80156dc:	080156a5 	.word	0x080156a5
 80156e0:	080156a5 	.word	0x080156a5
 80156e4:	080156a5 	.word	0x080156a5
 80156e8:	0801582d 	.word	0x0801582d
 80156ec:	08015755 	.word	0x08015755
 80156f0:	080157e7 	.word	0x080157e7
 80156f4:	080156a5 	.word	0x080156a5
 80156f8:	080156a5 	.word	0x080156a5
 80156fc:	0801584f 	.word	0x0801584f
 8015700:	080156a5 	.word	0x080156a5
 8015704:	08015755 	.word	0x08015755
 8015708:	080156a5 	.word	0x080156a5
 801570c:	080156a5 	.word	0x080156a5
 8015710:	080157ef 	.word	0x080157ef
 8015714:	682b      	ldr	r3, [r5, #0]
 8015716:	1d1a      	adds	r2, r3, #4
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	602a      	str	r2, [r5, #0]
 801571c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015724:	2301      	movs	r3, #1
 8015726:	e09f      	b.n	8015868 <_printf_i+0x1ec>
 8015728:	6820      	ldr	r0, [r4, #0]
 801572a:	682b      	ldr	r3, [r5, #0]
 801572c:	0607      	lsls	r7, r0, #24
 801572e:	f103 0104 	add.w	r1, r3, #4
 8015732:	6029      	str	r1, [r5, #0]
 8015734:	d501      	bpl.n	801573a <_printf_i+0xbe>
 8015736:	681e      	ldr	r6, [r3, #0]
 8015738:	e003      	b.n	8015742 <_printf_i+0xc6>
 801573a:	0646      	lsls	r6, r0, #25
 801573c:	d5fb      	bpl.n	8015736 <_printf_i+0xba>
 801573e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015742:	2e00      	cmp	r6, #0
 8015744:	da03      	bge.n	801574e <_printf_i+0xd2>
 8015746:	232d      	movs	r3, #45	; 0x2d
 8015748:	4276      	negs	r6, r6
 801574a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801574e:	485a      	ldr	r0, [pc, #360]	; (80158b8 <_printf_i+0x23c>)
 8015750:	230a      	movs	r3, #10
 8015752:	e012      	b.n	801577a <_printf_i+0xfe>
 8015754:	682b      	ldr	r3, [r5, #0]
 8015756:	6820      	ldr	r0, [r4, #0]
 8015758:	1d19      	adds	r1, r3, #4
 801575a:	6029      	str	r1, [r5, #0]
 801575c:	0605      	lsls	r5, r0, #24
 801575e:	d501      	bpl.n	8015764 <_printf_i+0xe8>
 8015760:	681e      	ldr	r6, [r3, #0]
 8015762:	e002      	b.n	801576a <_printf_i+0xee>
 8015764:	0641      	lsls	r1, r0, #25
 8015766:	d5fb      	bpl.n	8015760 <_printf_i+0xe4>
 8015768:	881e      	ldrh	r6, [r3, #0]
 801576a:	4853      	ldr	r0, [pc, #332]	; (80158b8 <_printf_i+0x23c>)
 801576c:	2f6f      	cmp	r7, #111	; 0x6f
 801576e:	bf0c      	ite	eq
 8015770:	2308      	moveq	r3, #8
 8015772:	230a      	movne	r3, #10
 8015774:	2100      	movs	r1, #0
 8015776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801577a:	6865      	ldr	r5, [r4, #4]
 801577c:	60a5      	str	r5, [r4, #8]
 801577e:	2d00      	cmp	r5, #0
 8015780:	bfa2      	ittt	ge
 8015782:	6821      	ldrge	r1, [r4, #0]
 8015784:	f021 0104 	bicge.w	r1, r1, #4
 8015788:	6021      	strge	r1, [r4, #0]
 801578a:	b90e      	cbnz	r6, 8015790 <_printf_i+0x114>
 801578c:	2d00      	cmp	r5, #0
 801578e:	d04b      	beq.n	8015828 <_printf_i+0x1ac>
 8015790:	4615      	mov	r5, r2
 8015792:	fbb6 f1f3 	udiv	r1, r6, r3
 8015796:	fb03 6711 	mls	r7, r3, r1, r6
 801579a:	5dc7      	ldrb	r7, [r0, r7]
 801579c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80157a0:	4637      	mov	r7, r6
 80157a2:	42bb      	cmp	r3, r7
 80157a4:	460e      	mov	r6, r1
 80157a6:	d9f4      	bls.n	8015792 <_printf_i+0x116>
 80157a8:	2b08      	cmp	r3, #8
 80157aa:	d10b      	bne.n	80157c4 <_printf_i+0x148>
 80157ac:	6823      	ldr	r3, [r4, #0]
 80157ae:	07de      	lsls	r6, r3, #31
 80157b0:	d508      	bpl.n	80157c4 <_printf_i+0x148>
 80157b2:	6923      	ldr	r3, [r4, #16]
 80157b4:	6861      	ldr	r1, [r4, #4]
 80157b6:	4299      	cmp	r1, r3
 80157b8:	bfde      	ittt	le
 80157ba:	2330      	movle	r3, #48	; 0x30
 80157bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80157c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80157c4:	1b52      	subs	r2, r2, r5
 80157c6:	6122      	str	r2, [r4, #16]
 80157c8:	f8cd a000 	str.w	sl, [sp]
 80157cc:	464b      	mov	r3, r9
 80157ce:	aa03      	add	r2, sp, #12
 80157d0:	4621      	mov	r1, r4
 80157d2:	4640      	mov	r0, r8
 80157d4:	f7ff fee4 	bl	80155a0 <_printf_common>
 80157d8:	3001      	adds	r0, #1
 80157da:	d14a      	bne.n	8015872 <_printf_i+0x1f6>
 80157dc:	f04f 30ff 	mov.w	r0, #4294967295
 80157e0:	b004      	add	sp, #16
 80157e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157e6:	6823      	ldr	r3, [r4, #0]
 80157e8:	f043 0320 	orr.w	r3, r3, #32
 80157ec:	6023      	str	r3, [r4, #0]
 80157ee:	4833      	ldr	r0, [pc, #204]	; (80158bc <_printf_i+0x240>)
 80157f0:	2778      	movs	r7, #120	; 0x78
 80157f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80157f6:	6823      	ldr	r3, [r4, #0]
 80157f8:	6829      	ldr	r1, [r5, #0]
 80157fa:	061f      	lsls	r7, r3, #24
 80157fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8015800:	d402      	bmi.n	8015808 <_printf_i+0x18c>
 8015802:	065f      	lsls	r7, r3, #25
 8015804:	bf48      	it	mi
 8015806:	b2b6      	uxthmi	r6, r6
 8015808:	07df      	lsls	r7, r3, #31
 801580a:	bf48      	it	mi
 801580c:	f043 0320 	orrmi.w	r3, r3, #32
 8015810:	6029      	str	r1, [r5, #0]
 8015812:	bf48      	it	mi
 8015814:	6023      	strmi	r3, [r4, #0]
 8015816:	b91e      	cbnz	r6, 8015820 <_printf_i+0x1a4>
 8015818:	6823      	ldr	r3, [r4, #0]
 801581a:	f023 0320 	bic.w	r3, r3, #32
 801581e:	6023      	str	r3, [r4, #0]
 8015820:	2310      	movs	r3, #16
 8015822:	e7a7      	b.n	8015774 <_printf_i+0xf8>
 8015824:	4824      	ldr	r0, [pc, #144]	; (80158b8 <_printf_i+0x23c>)
 8015826:	e7e4      	b.n	80157f2 <_printf_i+0x176>
 8015828:	4615      	mov	r5, r2
 801582a:	e7bd      	b.n	80157a8 <_printf_i+0x12c>
 801582c:	682b      	ldr	r3, [r5, #0]
 801582e:	6826      	ldr	r6, [r4, #0]
 8015830:	6961      	ldr	r1, [r4, #20]
 8015832:	1d18      	adds	r0, r3, #4
 8015834:	6028      	str	r0, [r5, #0]
 8015836:	0635      	lsls	r5, r6, #24
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	d501      	bpl.n	8015840 <_printf_i+0x1c4>
 801583c:	6019      	str	r1, [r3, #0]
 801583e:	e002      	b.n	8015846 <_printf_i+0x1ca>
 8015840:	0670      	lsls	r0, r6, #25
 8015842:	d5fb      	bpl.n	801583c <_printf_i+0x1c0>
 8015844:	8019      	strh	r1, [r3, #0]
 8015846:	2300      	movs	r3, #0
 8015848:	6123      	str	r3, [r4, #16]
 801584a:	4615      	mov	r5, r2
 801584c:	e7bc      	b.n	80157c8 <_printf_i+0x14c>
 801584e:	682b      	ldr	r3, [r5, #0]
 8015850:	1d1a      	adds	r2, r3, #4
 8015852:	602a      	str	r2, [r5, #0]
 8015854:	681d      	ldr	r5, [r3, #0]
 8015856:	6862      	ldr	r2, [r4, #4]
 8015858:	2100      	movs	r1, #0
 801585a:	4628      	mov	r0, r5
 801585c:	f7ea fcc0 	bl	80001e0 <memchr>
 8015860:	b108      	cbz	r0, 8015866 <_printf_i+0x1ea>
 8015862:	1b40      	subs	r0, r0, r5
 8015864:	6060      	str	r0, [r4, #4]
 8015866:	6863      	ldr	r3, [r4, #4]
 8015868:	6123      	str	r3, [r4, #16]
 801586a:	2300      	movs	r3, #0
 801586c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015870:	e7aa      	b.n	80157c8 <_printf_i+0x14c>
 8015872:	6923      	ldr	r3, [r4, #16]
 8015874:	462a      	mov	r2, r5
 8015876:	4649      	mov	r1, r9
 8015878:	4640      	mov	r0, r8
 801587a:	47d0      	blx	sl
 801587c:	3001      	adds	r0, #1
 801587e:	d0ad      	beq.n	80157dc <_printf_i+0x160>
 8015880:	6823      	ldr	r3, [r4, #0]
 8015882:	079b      	lsls	r3, r3, #30
 8015884:	d413      	bmi.n	80158ae <_printf_i+0x232>
 8015886:	68e0      	ldr	r0, [r4, #12]
 8015888:	9b03      	ldr	r3, [sp, #12]
 801588a:	4298      	cmp	r0, r3
 801588c:	bfb8      	it	lt
 801588e:	4618      	movlt	r0, r3
 8015890:	e7a6      	b.n	80157e0 <_printf_i+0x164>
 8015892:	2301      	movs	r3, #1
 8015894:	4632      	mov	r2, r6
 8015896:	4649      	mov	r1, r9
 8015898:	4640      	mov	r0, r8
 801589a:	47d0      	blx	sl
 801589c:	3001      	adds	r0, #1
 801589e:	d09d      	beq.n	80157dc <_printf_i+0x160>
 80158a0:	3501      	adds	r5, #1
 80158a2:	68e3      	ldr	r3, [r4, #12]
 80158a4:	9903      	ldr	r1, [sp, #12]
 80158a6:	1a5b      	subs	r3, r3, r1
 80158a8:	42ab      	cmp	r3, r5
 80158aa:	dcf2      	bgt.n	8015892 <_printf_i+0x216>
 80158ac:	e7eb      	b.n	8015886 <_printf_i+0x20a>
 80158ae:	2500      	movs	r5, #0
 80158b0:	f104 0619 	add.w	r6, r4, #25
 80158b4:	e7f5      	b.n	80158a2 <_printf_i+0x226>
 80158b6:	bf00      	nop
 80158b8:	080194e4 	.word	0x080194e4
 80158bc:	080194f5 	.word	0x080194f5

080158c0 <__sflush_r>:
 80158c0:	898a      	ldrh	r2, [r1, #12]
 80158c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158c6:	4605      	mov	r5, r0
 80158c8:	0710      	lsls	r0, r2, #28
 80158ca:	460c      	mov	r4, r1
 80158cc:	d458      	bmi.n	8015980 <__sflush_r+0xc0>
 80158ce:	684b      	ldr	r3, [r1, #4]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	dc05      	bgt.n	80158e0 <__sflush_r+0x20>
 80158d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	dc02      	bgt.n	80158e0 <__sflush_r+0x20>
 80158da:	2000      	movs	r0, #0
 80158dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80158e2:	2e00      	cmp	r6, #0
 80158e4:	d0f9      	beq.n	80158da <__sflush_r+0x1a>
 80158e6:	2300      	movs	r3, #0
 80158e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80158ec:	682f      	ldr	r7, [r5, #0]
 80158ee:	6a21      	ldr	r1, [r4, #32]
 80158f0:	602b      	str	r3, [r5, #0]
 80158f2:	d032      	beq.n	801595a <__sflush_r+0x9a>
 80158f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80158f6:	89a3      	ldrh	r3, [r4, #12]
 80158f8:	075a      	lsls	r2, r3, #29
 80158fa:	d505      	bpl.n	8015908 <__sflush_r+0x48>
 80158fc:	6863      	ldr	r3, [r4, #4]
 80158fe:	1ac0      	subs	r0, r0, r3
 8015900:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015902:	b10b      	cbz	r3, 8015908 <__sflush_r+0x48>
 8015904:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015906:	1ac0      	subs	r0, r0, r3
 8015908:	2300      	movs	r3, #0
 801590a:	4602      	mov	r2, r0
 801590c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801590e:	6a21      	ldr	r1, [r4, #32]
 8015910:	4628      	mov	r0, r5
 8015912:	47b0      	blx	r6
 8015914:	1c43      	adds	r3, r0, #1
 8015916:	89a3      	ldrh	r3, [r4, #12]
 8015918:	d106      	bne.n	8015928 <__sflush_r+0x68>
 801591a:	6829      	ldr	r1, [r5, #0]
 801591c:	291d      	cmp	r1, #29
 801591e:	d82b      	bhi.n	8015978 <__sflush_r+0xb8>
 8015920:	4a29      	ldr	r2, [pc, #164]	; (80159c8 <__sflush_r+0x108>)
 8015922:	410a      	asrs	r2, r1
 8015924:	07d6      	lsls	r6, r2, #31
 8015926:	d427      	bmi.n	8015978 <__sflush_r+0xb8>
 8015928:	2200      	movs	r2, #0
 801592a:	6062      	str	r2, [r4, #4]
 801592c:	04d9      	lsls	r1, r3, #19
 801592e:	6922      	ldr	r2, [r4, #16]
 8015930:	6022      	str	r2, [r4, #0]
 8015932:	d504      	bpl.n	801593e <__sflush_r+0x7e>
 8015934:	1c42      	adds	r2, r0, #1
 8015936:	d101      	bne.n	801593c <__sflush_r+0x7c>
 8015938:	682b      	ldr	r3, [r5, #0]
 801593a:	b903      	cbnz	r3, 801593e <__sflush_r+0x7e>
 801593c:	6560      	str	r0, [r4, #84]	; 0x54
 801593e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015940:	602f      	str	r7, [r5, #0]
 8015942:	2900      	cmp	r1, #0
 8015944:	d0c9      	beq.n	80158da <__sflush_r+0x1a>
 8015946:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801594a:	4299      	cmp	r1, r3
 801594c:	d002      	beq.n	8015954 <__sflush_r+0x94>
 801594e:	4628      	mov	r0, r5
 8015950:	f7ff fa8a 	bl	8014e68 <_free_r>
 8015954:	2000      	movs	r0, #0
 8015956:	6360      	str	r0, [r4, #52]	; 0x34
 8015958:	e7c0      	b.n	80158dc <__sflush_r+0x1c>
 801595a:	2301      	movs	r3, #1
 801595c:	4628      	mov	r0, r5
 801595e:	47b0      	blx	r6
 8015960:	1c41      	adds	r1, r0, #1
 8015962:	d1c8      	bne.n	80158f6 <__sflush_r+0x36>
 8015964:	682b      	ldr	r3, [r5, #0]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d0c5      	beq.n	80158f6 <__sflush_r+0x36>
 801596a:	2b1d      	cmp	r3, #29
 801596c:	d001      	beq.n	8015972 <__sflush_r+0xb2>
 801596e:	2b16      	cmp	r3, #22
 8015970:	d101      	bne.n	8015976 <__sflush_r+0xb6>
 8015972:	602f      	str	r7, [r5, #0]
 8015974:	e7b1      	b.n	80158da <__sflush_r+0x1a>
 8015976:	89a3      	ldrh	r3, [r4, #12]
 8015978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801597c:	81a3      	strh	r3, [r4, #12]
 801597e:	e7ad      	b.n	80158dc <__sflush_r+0x1c>
 8015980:	690f      	ldr	r7, [r1, #16]
 8015982:	2f00      	cmp	r7, #0
 8015984:	d0a9      	beq.n	80158da <__sflush_r+0x1a>
 8015986:	0793      	lsls	r3, r2, #30
 8015988:	680e      	ldr	r6, [r1, #0]
 801598a:	bf08      	it	eq
 801598c:	694b      	ldreq	r3, [r1, #20]
 801598e:	600f      	str	r7, [r1, #0]
 8015990:	bf18      	it	ne
 8015992:	2300      	movne	r3, #0
 8015994:	eba6 0807 	sub.w	r8, r6, r7
 8015998:	608b      	str	r3, [r1, #8]
 801599a:	f1b8 0f00 	cmp.w	r8, #0
 801599e:	dd9c      	ble.n	80158da <__sflush_r+0x1a>
 80159a0:	6a21      	ldr	r1, [r4, #32]
 80159a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80159a4:	4643      	mov	r3, r8
 80159a6:	463a      	mov	r2, r7
 80159a8:	4628      	mov	r0, r5
 80159aa:	47b0      	blx	r6
 80159ac:	2800      	cmp	r0, #0
 80159ae:	dc06      	bgt.n	80159be <__sflush_r+0xfe>
 80159b0:	89a3      	ldrh	r3, [r4, #12]
 80159b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159b6:	81a3      	strh	r3, [r4, #12]
 80159b8:	f04f 30ff 	mov.w	r0, #4294967295
 80159bc:	e78e      	b.n	80158dc <__sflush_r+0x1c>
 80159be:	4407      	add	r7, r0
 80159c0:	eba8 0800 	sub.w	r8, r8, r0
 80159c4:	e7e9      	b.n	801599a <__sflush_r+0xda>
 80159c6:	bf00      	nop
 80159c8:	dfbffffe 	.word	0xdfbffffe

080159cc <_fflush_r>:
 80159cc:	b538      	push	{r3, r4, r5, lr}
 80159ce:	690b      	ldr	r3, [r1, #16]
 80159d0:	4605      	mov	r5, r0
 80159d2:	460c      	mov	r4, r1
 80159d4:	b913      	cbnz	r3, 80159dc <_fflush_r+0x10>
 80159d6:	2500      	movs	r5, #0
 80159d8:	4628      	mov	r0, r5
 80159da:	bd38      	pop	{r3, r4, r5, pc}
 80159dc:	b118      	cbz	r0, 80159e6 <_fflush_r+0x1a>
 80159de:	6a03      	ldr	r3, [r0, #32]
 80159e0:	b90b      	cbnz	r3, 80159e6 <_fflush_r+0x1a>
 80159e2:	f7ff f87b 	bl	8014adc <__sinit>
 80159e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d0f3      	beq.n	80159d6 <_fflush_r+0xa>
 80159ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80159f0:	07d0      	lsls	r0, r2, #31
 80159f2:	d404      	bmi.n	80159fe <_fflush_r+0x32>
 80159f4:	0599      	lsls	r1, r3, #22
 80159f6:	d402      	bmi.n	80159fe <_fflush_r+0x32>
 80159f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80159fa:	f7ff fa06 	bl	8014e0a <__retarget_lock_acquire_recursive>
 80159fe:	4628      	mov	r0, r5
 8015a00:	4621      	mov	r1, r4
 8015a02:	f7ff ff5d 	bl	80158c0 <__sflush_r>
 8015a06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015a08:	07da      	lsls	r2, r3, #31
 8015a0a:	4605      	mov	r5, r0
 8015a0c:	d4e4      	bmi.n	80159d8 <_fflush_r+0xc>
 8015a0e:	89a3      	ldrh	r3, [r4, #12]
 8015a10:	059b      	lsls	r3, r3, #22
 8015a12:	d4e1      	bmi.n	80159d8 <_fflush_r+0xc>
 8015a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a16:	f7ff f9f9 	bl	8014e0c <__retarget_lock_release_recursive>
 8015a1a:	e7dd      	b.n	80159d8 <_fflush_r+0xc>

08015a1c <fiprintf>:
 8015a1c:	b40e      	push	{r1, r2, r3}
 8015a1e:	b503      	push	{r0, r1, lr}
 8015a20:	4601      	mov	r1, r0
 8015a22:	ab03      	add	r3, sp, #12
 8015a24:	4805      	ldr	r0, [pc, #20]	; (8015a3c <fiprintf+0x20>)
 8015a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a2a:	6800      	ldr	r0, [r0, #0]
 8015a2c:	9301      	str	r3, [sp, #4]
 8015a2e:	f7ff fc9d 	bl	801536c <_vfiprintf_r>
 8015a32:	b002      	add	sp, #8
 8015a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a38:	b003      	add	sp, #12
 8015a3a:	4770      	bx	lr
 8015a3c:	200004e4 	.word	0x200004e4

08015a40 <__swbuf_r>:
 8015a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a42:	460e      	mov	r6, r1
 8015a44:	4614      	mov	r4, r2
 8015a46:	4605      	mov	r5, r0
 8015a48:	b118      	cbz	r0, 8015a52 <__swbuf_r+0x12>
 8015a4a:	6a03      	ldr	r3, [r0, #32]
 8015a4c:	b90b      	cbnz	r3, 8015a52 <__swbuf_r+0x12>
 8015a4e:	f7ff f845 	bl	8014adc <__sinit>
 8015a52:	69a3      	ldr	r3, [r4, #24]
 8015a54:	60a3      	str	r3, [r4, #8]
 8015a56:	89a3      	ldrh	r3, [r4, #12]
 8015a58:	071a      	lsls	r2, r3, #28
 8015a5a:	d525      	bpl.n	8015aa8 <__swbuf_r+0x68>
 8015a5c:	6923      	ldr	r3, [r4, #16]
 8015a5e:	b31b      	cbz	r3, 8015aa8 <__swbuf_r+0x68>
 8015a60:	6823      	ldr	r3, [r4, #0]
 8015a62:	6922      	ldr	r2, [r4, #16]
 8015a64:	1a98      	subs	r0, r3, r2
 8015a66:	6963      	ldr	r3, [r4, #20]
 8015a68:	b2f6      	uxtb	r6, r6
 8015a6a:	4283      	cmp	r3, r0
 8015a6c:	4637      	mov	r7, r6
 8015a6e:	dc04      	bgt.n	8015a7a <__swbuf_r+0x3a>
 8015a70:	4621      	mov	r1, r4
 8015a72:	4628      	mov	r0, r5
 8015a74:	f7ff ffaa 	bl	80159cc <_fflush_r>
 8015a78:	b9e0      	cbnz	r0, 8015ab4 <__swbuf_r+0x74>
 8015a7a:	68a3      	ldr	r3, [r4, #8]
 8015a7c:	3b01      	subs	r3, #1
 8015a7e:	60a3      	str	r3, [r4, #8]
 8015a80:	6823      	ldr	r3, [r4, #0]
 8015a82:	1c5a      	adds	r2, r3, #1
 8015a84:	6022      	str	r2, [r4, #0]
 8015a86:	701e      	strb	r6, [r3, #0]
 8015a88:	6962      	ldr	r2, [r4, #20]
 8015a8a:	1c43      	adds	r3, r0, #1
 8015a8c:	429a      	cmp	r2, r3
 8015a8e:	d004      	beq.n	8015a9a <__swbuf_r+0x5a>
 8015a90:	89a3      	ldrh	r3, [r4, #12]
 8015a92:	07db      	lsls	r3, r3, #31
 8015a94:	d506      	bpl.n	8015aa4 <__swbuf_r+0x64>
 8015a96:	2e0a      	cmp	r6, #10
 8015a98:	d104      	bne.n	8015aa4 <__swbuf_r+0x64>
 8015a9a:	4621      	mov	r1, r4
 8015a9c:	4628      	mov	r0, r5
 8015a9e:	f7ff ff95 	bl	80159cc <_fflush_r>
 8015aa2:	b938      	cbnz	r0, 8015ab4 <__swbuf_r+0x74>
 8015aa4:	4638      	mov	r0, r7
 8015aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015aa8:	4621      	mov	r1, r4
 8015aaa:	4628      	mov	r0, r5
 8015aac:	f000 f806 	bl	8015abc <__swsetup_r>
 8015ab0:	2800      	cmp	r0, #0
 8015ab2:	d0d5      	beq.n	8015a60 <__swbuf_r+0x20>
 8015ab4:	f04f 37ff 	mov.w	r7, #4294967295
 8015ab8:	e7f4      	b.n	8015aa4 <__swbuf_r+0x64>
	...

08015abc <__swsetup_r>:
 8015abc:	b538      	push	{r3, r4, r5, lr}
 8015abe:	4b2a      	ldr	r3, [pc, #168]	; (8015b68 <__swsetup_r+0xac>)
 8015ac0:	4605      	mov	r5, r0
 8015ac2:	6818      	ldr	r0, [r3, #0]
 8015ac4:	460c      	mov	r4, r1
 8015ac6:	b118      	cbz	r0, 8015ad0 <__swsetup_r+0x14>
 8015ac8:	6a03      	ldr	r3, [r0, #32]
 8015aca:	b90b      	cbnz	r3, 8015ad0 <__swsetup_r+0x14>
 8015acc:	f7ff f806 	bl	8014adc <__sinit>
 8015ad0:	89a3      	ldrh	r3, [r4, #12]
 8015ad2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015ad6:	0718      	lsls	r0, r3, #28
 8015ad8:	d422      	bmi.n	8015b20 <__swsetup_r+0x64>
 8015ada:	06d9      	lsls	r1, r3, #27
 8015adc:	d407      	bmi.n	8015aee <__swsetup_r+0x32>
 8015ade:	2309      	movs	r3, #9
 8015ae0:	602b      	str	r3, [r5, #0]
 8015ae2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015ae6:	81a3      	strh	r3, [r4, #12]
 8015ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8015aec:	e034      	b.n	8015b58 <__swsetup_r+0x9c>
 8015aee:	0758      	lsls	r0, r3, #29
 8015af0:	d512      	bpl.n	8015b18 <__swsetup_r+0x5c>
 8015af2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015af4:	b141      	cbz	r1, 8015b08 <__swsetup_r+0x4c>
 8015af6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015afa:	4299      	cmp	r1, r3
 8015afc:	d002      	beq.n	8015b04 <__swsetup_r+0x48>
 8015afe:	4628      	mov	r0, r5
 8015b00:	f7ff f9b2 	bl	8014e68 <_free_r>
 8015b04:	2300      	movs	r3, #0
 8015b06:	6363      	str	r3, [r4, #52]	; 0x34
 8015b08:	89a3      	ldrh	r3, [r4, #12]
 8015b0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015b0e:	81a3      	strh	r3, [r4, #12]
 8015b10:	2300      	movs	r3, #0
 8015b12:	6063      	str	r3, [r4, #4]
 8015b14:	6923      	ldr	r3, [r4, #16]
 8015b16:	6023      	str	r3, [r4, #0]
 8015b18:	89a3      	ldrh	r3, [r4, #12]
 8015b1a:	f043 0308 	orr.w	r3, r3, #8
 8015b1e:	81a3      	strh	r3, [r4, #12]
 8015b20:	6923      	ldr	r3, [r4, #16]
 8015b22:	b94b      	cbnz	r3, 8015b38 <__swsetup_r+0x7c>
 8015b24:	89a3      	ldrh	r3, [r4, #12]
 8015b26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015b2e:	d003      	beq.n	8015b38 <__swsetup_r+0x7c>
 8015b30:	4621      	mov	r1, r4
 8015b32:	4628      	mov	r0, r5
 8015b34:	f000 f886 	bl	8015c44 <__smakebuf_r>
 8015b38:	89a0      	ldrh	r0, [r4, #12]
 8015b3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015b3e:	f010 0301 	ands.w	r3, r0, #1
 8015b42:	d00a      	beq.n	8015b5a <__swsetup_r+0x9e>
 8015b44:	2300      	movs	r3, #0
 8015b46:	60a3      	str	r3, [r4, #8]
 8015b48:	6963      	ldr	r3, [r4, #20]
 8015b4a:	425b      	negs	r3, r3
 8015b4c:	61a3      	str	r3, [r4, #24]
 8015b4e:	6923      	ldr	r3, [r4, #16]
 8015b50:	b943      	cbnz	r3, 8015b64 <__swsetup_r+0xa8>
 8015b52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015b56:	d1c4      	bne.n	8015ae2 <__swsetup_r+0x26>
 8015b58:	bd38      	pop	{r3, r4, r5, pc}
 8015b5a:	0781      	lsls	r1, r0, #30
 8015b5c:	bf58      	it	pl
 8015b5e:	6963      	ldrpl	r3, [r4, #20]
 8015b60:	60a3      	str	r3, [r4, #8]
 8015b62:	e7f4      	b.n	8015b4e <__swsetup_r+0x92>
 8015b64:	2000      	movs	r0, #0
 8015b66:	e7f7      	b.n	8015b58 <__swsetup_r+0x9c>
 8015b68:	200004e4 	.word	0x200004e4

08015b6c <_sbrk_r>:
 8015b6c:	b538      	push	{r3, r4, r5, lr}
 8015b6e:	4d06      	ldr	r5, [pc, #24]	; (8015b88 <_sbrk_r+0x1c>)
 8015b70:	2300      	movs	r3, #0
 8015b72:	4604      	mov	r4, r0
 8015b74:	4608      	mov	r0, r1
 8015b76:	602b      	str	r3, [r5, #0]
 8015b78:	f7fe fd9e 	bl	80146b8 <_sbrk>
 8015b7c:	1c43      	adds	r3, r0, #1
 8015b7e:	d102      	bne.n	8015b86 <_sbrk_r+0x1a>
 8015b80:	682b      	ldr	r3, [r5, #0]
 8015b82:	b103      	cbz	r3, 8015b86 <_sbrk_r+0x1a>
 8015b84:	6023      	str	r3, [r4, #0]
 8015b86:	bd38      	pop	{r3, r4, r5, pc}
 8015b88:	2000ec7c 	.word	0x2000ec7c

08015b8c <abort>:
 8015b8c:	b508      	push	{r3, lr}
 8015b8e:	2006      	movs	r0, #6
 8015b90:	f000 f8bc 	bl	8015d0c <raise>
 8015b94:	2001      	movs	r0, #1
 8015b96:	f7fe fd17 	bl	80145c8 <_exit>

08015b9a <_realloc_r>:
 8015b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b9e:	4680      	mov	r8, r0
 8015ba0:	4614      	mov	r4, r2
 8015ba2:	460e      	mov	r6, r1
 8015ba4:	b921      	cbnz	r1, 8015bb0 <_realloc_r+0x16>
 8015ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015baa:	4611      	mov	r1, r2
 8015bac:	f7ff b9d0 	b.w	8014f50 <_malloc_r>
 8015bb0:	b92a      	cbnz	r2, 8015bbe <_realloc_r+0x24>
 8015bb2:	f7ff f959 	bl	8014e68 <_free_r>
 8015bb6:	4625      	mov	r5, r4
 8015bb8:	4628      	mov	r0, r5
 8015bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bbe:	f000 f8e3 	bl	8015d88 <_malloc_usable_size_r>
 8015bc2:	4284      	cmp	r4, r0
 8015bc4:	4607      	mov	r7, r0
 8015bc6:	d802      	bhi.n	8015bce <_realloc_r+0x34>
 8015bc8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015bcc:	d812      	bhi.n	8015bf4 <_realloc_r+0x5a>
 8015bce:	4621      	mov	r1, r4
 8015bd0:	4640      	mov	r0, r8
 8015bd2:	f7ff f9bd 	bl	8014f50 <_malloc_r>
 8015bd6:	4605      	mov	r5, r0
 8015bd8:	2800      	cmp	r0, #0
 8015bda:	d0ed      	beq.n	8015bb8 <_realloc_r+0x1e>
 8015bdc:	42bc      	cmp	r4, r7
 8015bde:	4622      	mov	r2, r4
 8015be0:	4631      	mov	r1, r6
 8015be2:	bf28      	it	cs
 8015be4:	463a      	movcs	r2, r7
 8015be6:	f7ff f912 	bl	8014e0e <memcpy>
 8015bea:	4631      	mov	r1, r6
 8015bec:	4640      	mov	r0, r8
 8015bee:	f7ff f93b 	bl	8014e68 <_free_r>
 8015bf2:	e7e1      	b.n	8015bb8 <_realloc_r+0x1e>
 8015bf4:	4635      	mov	r5, r6
 8015bf6:	e7df      	b.n	8015bb8 <_realloc_r+0x1e>

08015bf8 <__swhatbuf_r>:
 8015bf8:	b570      	push	{r4, r5, r6, lr}
 8015bfa:	460c      	mov	r4, r1
 8015bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c00:	2900      	cmp	r1, #0
 8015c02:	b096      	sub	sp, #88	; 0x58
 8015c04:	4615      	mov	r5, r2
 8015c06:	461e      	mov	r6, r3
 8015c08:	da0d      	bge.n	8015c26 <__swhatbuf_r+0x2e>
 8015c0a:	89a3      	ldrh	r3, [r4, #12]
 8015c0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015c10:	f04f 0100 	mov.w	r1, #0
 8015c14:	bf0c      	ite	eq
 8015c16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015c1a:	2340      	movne	r3, #64	; 0x40
 8015c1c:	2000      	movs	r0, #0
 8015c1e:	6031      	str	r1, [r6, #0]
 8015c20:	602b      	str	r3, [r5, #0]
 8015c22:	b016      	add	sp, #88	; 0x58
 8015c24:	bd70      	pop	{r4, r5, r6, pc}
 8015c26:	466a      	mov	r2, sp
 8015c28:	f000 f878 	bl	8015d1c <_fstat_r>
 8015c2c:	2800      	cmp	r0, #0
 8015c2e:	dbec      	blt.n	8015c0a <__swhatbuf_r+0x12>
 8015c30:	9901      	ldr	r1, [sp, #4]
 8015c32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015c36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015c3a:	4259      	negs	r1, r3
 8015c3c:	4159      	adcs	r1, r3
 8015c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015c42:	e7eb      	b.n	8015c1c <__swhatbuf_r+0x24>

08015c44 <__smakebuf_r>:
 8015c44:	898b      	ldrh	r3, [r1, #12]
 8015c46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015c48:	079d      	lsls	r5, r3, #30
 8015c4a:	4606      	mov	r6, r0
 8015c4c:	460c      	mov	r4, r1
 8015c4e:	d507      	bpl.n	8015c60 <__smakebuf_r+0x1c>
 8015c50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015c54:	6023      	str	r3, [r4, #0]
 8015c56:	6123      	str	r3, [r4, #16]
 8015c58:	2301      	movs	r3, #1
 8015c5a:	6163      	str	r3, [r4, #20]
 8015c5c:	b002      	add	sp, #8
 8015c5e:	bd70      	pop	{r4, r5, r6, pc}
 8015c60:	ab01      	add	r3, sp, #4
 8015c62:	466a      	mov	r2, sp
 8015c64:	f7ff ffc8 	bl	8015bf8 <__swhatbuf_r>
 8015c68:	9900      	ldr	r1, [sp, #0]
 8015c6a:	4605      	mov	r5, r0
 8015c6c:	4630      	mov	r0, r6
 8015c6e:	f7ff f96f 	bl	8014f50 <_malloc_r>
 8015c72:	b948      	cbnz	r0, 8015c88 <__smakebuf_r+0x44>
 8015c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c78:	059a      	lsls	r2, r3, #22
 8015c7a:	d4ef      	bmi.n	8015c5c <__smakebuf_r+0x18>
 8015c7c:	f023 0303 	bic.w	r3, r3, #3
 8015c80:	f043 0302 	orr.w	r3, r3, #2
 8015c84:	81a3      	strh	r3, [r4, #12]
 8015c86:	e7e3      	b.n	8015c50 <__smakebuf_r+0xc>
 8015c88:	89a3      	ldrh	r3, [r4, #12]
 8015c8a:	6020      	str	r0, [r4, #0]
 8015c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c90:	81a3      	strh	r3, [r4, #12]
 8015c92:	9b00      	ldr	r3, [sp, #0]
 8015c94:	6163      	str	r3, [r4, #20]
 8015c96:	9b01      	ldr	r3, [sp, #4]
 8015c98:	6120      	str	r0, [r4, #16]
 8015c9a:	b15b      	cbz	r3, 8015cb4 <__smakebuf_r+0x70>
 8015c9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ca0:	4630      	mov	r0, r6
 8015ca2:	f000 f84d 	bl	8015d40 <_isatty_r>
 8015ca6:	b128      	cbz	r0, 8015cb4 <__smakebuf_r+0x70>
 8015ca8:	89a3      	ldrh	r3, [r4, #12]
 8015caa:	f023 0303 	bic.w	r3, r3, #3
 8015cae:	f043 0301 	orr.w	r3, r3, #1
 8015cb2:	81a3      	strh	r3, [r4, #12]
 8015cb4:	89a3      	ldrh	r3, [r4, #12]
 8015cb6:	431d      	orrs	r5, r3
 8015cb8:	81a5      	strh	r5, [r4, #12]
 8015cba:	e7cf      	b.n	8015c5c <__smakebuf_r+0x18>

08015cbc <_raise_r>:
 8015cbc:	291f      	cmp	r1, #31
 8015cbe:	b538      	push	{r3, r4, r5, lr}
 8015cc0:	4604      	mov	r4, r0
 8015cc2:	460d      	mov	r5, r1
 8015cc4:	d904      	bls.n	8015cd0 <_raise_r+0x14>
 8015cc6:	2316      	movs	r3, #22
 8015cc8:	6003      	str	r3, [r0, #0]
 8015cca:	f04f 30ff 	mov.w	r0, #4294967295
 8015cce:	bd38      	pop	{r3, r4, r5, pc}
 8015cd0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015cd2:	b112      	cbz	r2, 8015cda <_raise_r+0x1e>
 8015cd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015cd8:	b94b      	cbnz	r3, 8015cee <_raise_r+0x32>
 8015cda:	4620      	mov	r0, r4
 8015cdc:	f000 f852 	bl	8015d84 <_getpid_r>
 8015ce0:	462a      	mov	r2, r5
 8015ce2:	4601      	mov	r1, r0
 8015ce4:	4620      	mov	r0, r4
 8015ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015cea:	f000 b839 	b.w	8015d60 <_kill_r>
 8015cee:	2b01      	cmp	r3, #1
 8015cf0:	d00a      	beq.n	8015d08 <_raise_r+0x4c>
 8015cf2:	1c59      	adds	r1, r3, #1
 8015cf4:	d103      	bne.n	8015cfe <_raise_r+0x42>
 8015cf6:	2316      	movs	r3, #22
 8015cf8:	6003      	str	r3, [r0, #0]
 8015cfa:	2001      	movs	r0, #1
 8015cfc:	e7e7      	b.n	8015cce <_raise_r+0x12>
 8015cfe:	2400      	movs	r4, #0
 8015d00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015d04:	4628      	mov	r0, r5
 8015d06:	4798      	blx	r3
 8015d08:	2000      	movs	r0, #0
 8015d0a:	e7e0      	b.n	8015cce <_raise_r+0x12>

08015d0c <raise>:
 8015d0c:	4b02      	ldr	r3, [pc, #8]	; (8015d18 <raise+0xc>)
 8015d0e:	4601      	mov	r1, r0
 8015d10:	6818      	ldr	r0, [r3, #0]
 8015d12:	f7ff bfd3 	b.w	8015cbc <_raise_r>
 8015d16:	bf00      	nop
 8015d18:	200004e4 	.word	0x200004e4

08015d1c <_fstat_r>:
 8015d1c:	b538      	push	{r3, r4, r5, lr}
 8015d1e:	4d07      	ldr	r5, [pc, #28]	; (8015d3c <_fstat_r+0x20>)
 8015d20:	2300      	movs	r3, #0
 8015d22:	4604      	mov	r4, r0
 8015d24:	4608      	mov	r0, r1
 8015d26:	4611      	mov	r1, r2
 8015d28:	602b      	str	r3, [r5, #0]
 8015d2a:	f7fe fc9c 	bl	8014666 <_fstat>
 8015d2e:	1c43      	adds	r3, r0, #1
 8015d30:	d102      	bne.n	8015d38 <_fstat_r+0x1c>
 8015d32:	682b      	ldr	r3, [r5, #0]
 8015d34:	b103      	cbz	r3, 8015d38 <_fstat_r+0x1c>
 8015d36:	6023      	str	r3, [r4, #0]
 8015d38:	bd38      	pop	{r3, r4, r5, pc}
 8015d3a:	bf00      	nop
 8015d3c:	2000ec7c 	.word	0x2000ec7c

08015d40 <_isatty_r>:
 8015d40:	b538      	push	{r3, r4, r5, lr}
 8015d42:	4d06      	ldr	r5, [pc, #24]	; (8015d5c <_isatty_r+0x1c>)
 8015d44:	2300      	movs	r3, #0
 8015d46:	4604      	mov	r4, r0
 8015d48:	4608      	mov	r0, r1
 8015d4a:	602b      	str	r3, [r5, #0]
 8015d4c:	f7fe fc9b 	bl	8014686 <_isatty>
 8015d50:	1c43      	adds	r3, r0, #1
 8015d52:	d102      	bne.n	8015d5a <_isatty_r+0x1a>
 8015d54:	682b      	ldr	r3, [r5, #0]
 8015d56:	b103      	cbz	r3, 8015d5a <_isatty_r+0x1a>
 8015d58:	6023      	str	r3, [r4, #0]
 8015d5a:	bd38      	pop	{r3, r4, r5, pc}
 8015d5c:	2000ec7c 	.word	0x2000ec7c

08015d60 <_kill_r>:
 8015d60:	b538      	push	{r3, r4, r5, lr}
 8015d62:	4d07      	ldr	r5, [pc, #28]	; (8015d80 <_kill_r+0x20>)
 8015d64:	2300      	movs	r3, #0
 8015d66:	4604      	mov	r4, r0
 8015d68:	4608      	mov	r0, r1
 8015d6a:	4611      	mov	r1, r2
 8015d6c:	602b      	str	r3, [r5, #0]
 8015d6e:	f7fe fc19 	bl	80145a4 <_kill>
 8015d72:	1c43      	adds	r3, r0, #1
 8015d74:	d102      	bne.n	8015d7c <_kill_r+0x1c>
 8015d76:	682b      	ldr	r3, [r5, #0]
 8015d78:	b103      	cbz	r3, 8015d7c <_kill_r+0x1c>
 8015d7a:	6023      	str	r3, [r4, #0]
 8015d7c:	bd38      	pop	{r3, r4, r5, pc}
 8015d7e:	bf00      	nop
 8015d80:	2000ec7c 	.word	0x2000ec7c

08015d84 <_getpid_r>:
 8015d84:	f7fe bc06 	b.w	8014594 <_getpid>

08015d88 <_malloc_usable_size_r>:
 8015d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d8c:	1f18      	subs	r0, r3, #4
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	bfbc      	itt	lt
 8015d92:	580b      	ldrlt	r3, [r1, r0]
 8015d94:	18c0      	addlt	r0, r0, r3
 8015d96:	4770      	bx	lr

08015d98 <_init>:
 8015d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d9a:	bf00      	nop
 8015d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d9e:	bc08      	pop	{r3}
 8015da0:	469e      	mov	lr, r3
 8015da2:	4770      	bx	lr

08015da4 <_fini>:
 8015da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015da6:	bf00      	nop
 8015da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015daa:	bc08      	pop	{r3}
 8015dac:	469e      	mov	lr, r3
 8015dae:	4770      	bx	lr
