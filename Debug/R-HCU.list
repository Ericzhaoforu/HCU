
R-HCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016870  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037c8  08016a00  08016a00  00026a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a1c8  0801a1c8  000304e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801a1c8  0801a1c8  0002a1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a1d0  0801a1d0  000304e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a1d0  0801a1d0  0002a1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a1d4  0801a1d4  0002a1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004e0  20000000  0801a1d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000304e0  2**0
                  CONTENTS
 10 .bss          0000e840  200004e0  200004e0  000304e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000ed20  2000ed20  000304e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030510  2**0
                  CONTENTS, READONLY
 14 .debug_info   00032b5d  00000000  00000000  00030553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008706  00000000  00000000  000630b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002b70  00000000  00000000  0006b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002219  00000000  00000000  0006e328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037f4b  00000000  00000000  00070541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004ddf3  00000000  00000000  000a848c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb948  00000000  00000000  000f627f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000bbfc  00000000  00000000  001f1bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001fd7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004e0 	.word	0x200004e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080169e8 	.word	0x080169e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004e4 	.word	0x200004e4
 80001cc:	080169e8 	.word	0x080169e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <L6470_ResetAppCmdPkg>:
  * @brief  Reset the structure used to store the identifier of the L6470
  *         application command and its the needed parameters.
  * @param  L6470_AppCmdPkg   The structure to be reset.
  */
void L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  uint8_t id;
  
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]
 8000588:	e01a      	b.n	80005c0 <L6470_ResetAppCmdPkg+0x44>
  {
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	011b      	lsls	r3, r3, #4
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	011b      	lsls	r3, r3, #4
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	011b      	lsls	r3, r3, #4
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	011b      	lsls	r3, r3, #4
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	3301      	adds	r3, #1
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0e1      	beq.n	800058a <L6470_ResetAppCmdPkg+0xe>
  }
}
 80005c6:	bf00      	nop
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <L6470_FillAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_FillAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60b9      	str	r1, [r7, #8]
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4603      	mov	r3, r0
 80005e0:	73fb      	strb	r3, [r7, #15]
 80005e2:	4613      	mov	r3, r2
 80005e4:	73bb      	strb	r3, [r7, #14]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	4413      	add	r3, r2
 80005ee:	7bba      	ldrb	r2, [r7, #14]
 80005f0:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	011b      	lsls	r3, r3, #4
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	4413      	add	r3, r2
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	4413      	add	r3, r2
 8000606:	69ba      	ldr	r2, [r7, #24]
 8000608:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	4413      	add	r3, r2
 8000612:	69fa      	ldr	r2, [r7, #28]
 8000614:	60da      	str	r2, [r3, #12]
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <L6470_PrepareAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_PrepareAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af02      	add	r7, sp, #8
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4603      	mov	r3, r0
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	4613      	mov	r3, r2
 8000634:	73bb      	strb	r3, [r7, #14]
  if(!L6470_DaisyChain_HalfPrepared)
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <L6470_PrepareAppCmdPkg+0x44>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d105      	bne.n	800064a <L6470_PrepareAppCmdPkg+0x26>
  {
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <L6470_PrepareAppCmdPkg+0x44>)
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8000644:	68b8      	ldr	r0, [r7, #8]
 8000646:	f7ff ff99 	bl	800057c <L6470_ResetAppCmdPkg>
  }
  
  L6470_FillAppCmdPkg(L6470_Id, pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800064a:	7bba      	ldrb	r2, [r7, #14]
 800064c:	7bf8      	ldrb	r0, [r7, #15]
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	68b9      	ldr	r1, [r7, #8]
 800065a:	f7ff ffbb 	bl	80005d4 <L6470_FillAppCmdPkg>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000514 	.word	0x20000514

0800066c <L6470_PrepareDaisyChainCommand>:
  *
  * @param  pL6470_AppCmdPkg              Pointer to the sL6470_AppCmdPkg_t to be filled.
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the structure used by SPI to send the commands.
  */
void L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
  uint8_t PARAMLengthBytes; /* The number of bytes related to the numeric value for the addressed register */
  uint8_t spibyte;
  uint8_t i;
  
  /* Reset the structure used to send the command to the L6470 Daisy Chain through the SPI */
  i = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	737b      	strb	r3, [r7, #13]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800067a:	2300      	movs	r3, #0
 800067c:	73bb      	strb	r3, [r7, #14]
 800067e:	e013      	b.n	80006a8 <L6470_PrepareDaisyChainCommand+0x3c>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e00a      	b.n	800069c <L6470_PrepareDaisyChainCommand+0x30>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8000686:	7b7b      	ldrb	r3, [r7, #13]
 8000688:	1c5a      	adds	r2, r3, #1
 800068a:	737a      	strb	r2, [r7, #13]
 800068c:	461a      	mov	r2, r3
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	4413      	add	r3, r2
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	3301      	adds	r3, #1
 800069a:	73fb      	strb	r3, [r7, #15]
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f1      	beq.n	8000686 <L6470_PrepareDaisyChainCommand+0x1a>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	3301      	adds	r3, #1
 80006a6:	73bb      	strb	r3, [r7, #14]
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d9e8      	bls.n	8000680 <L6470_PrepareDaisyChainCommand+0x14>
  
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	e1f0      	b.n	8000a96 <L6470_PrepareDaisyChainCommand+0x42a>
  {
    /* Build the 1st bytes to transmit with the binary code of the command */
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	011b      	lsls	r3, r3, #4
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	441a      	add	r2, r3
 80006c6:	49b0      	ldr	r1, [pc, #704]	; (8000988 <L6470_PrepareDaisyChainCommand+0x31c>)
 80006c8:	4603      	mov	r3, r0
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	1a1b      	subs	r3, r3, r0
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	440b      	add	r3, r1
 80006d2:	330c      	adds	r3, #12
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	7013      	strb	r3, [r2, #0]
    
    /* Perform the related L6470_AppCmdId */
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	011b      	lsls	r3, r3, #4
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4413      	add	r3, r2
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b12      	cmp	r3, #18
 80006e4:	f200 81d4 	bhi.w	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <L6470_PrepareDaisyChainCommand+0x84>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000a91 	.word	0x08000a91
 80006f4:	0800073d 	.word	0x0800073d
 80006f8:	080007c1 	.word	0x080007c1
 80006fc:	080007ef 	.word	0x080007ef
 8000700:	08000855 	.word	0x08000855
 8000704:	08000883 	.word	0x08000883
 8000708:	080008e9 	.word	0x080008e9
 800070c:	08000923 	.word	0x08000923
 8000710:	08000995 	.word	0x08000995
 8000714:	08000a2f 	.word	0x08000a2f
 8000718:	08000a91 	.word	0x08000a91
 800071c:	08000a91 	.word	0x08000a91
 8000720:	08000a91 	.word	0x08000a91
 8000724:	08000a91 	.word	0x08000a91
 8000728:	08000a91 	.word	0x08000a91
 800072c:	08000a91 	.word	0x08000a91
 8000730:	08000a91 	.word	0x08000a91
 8000734:	08000a91 	.word	0x08000a91
 8000738:	08000a91 	.word	0x08000a91
    {
    case L6470_NOP_ID:
      break;
    case L6470_SETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	4413      	add	r3, r2
 8000742:	7819      	ldrb	r1, [r3, #0]
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	011b      	lsls	r3, r3, #4
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4413      	add	r3, r2
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	488f      	ldr	r0, [pc, #572]	; (800098c <L6470_PrepareDaisyChainCommand+0x320>)
 8000750:	4613      	mov	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4403      	add	r3, r0
 800075a:	781a      	ldrb	r2, [r3, #0]
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	6838      	ldr	r0, [r7, #0]
 8000760:	4403      	add	r3, r0
 8000762:	430a      	orrs	r2, r1
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	701a      	strb	r2, [r3, #0]
      
      /* The length, in byte, of this register (PARAM) is... */
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4413      	add	r3, r2
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	4986      	ldr	r1, [pc, #536]	; (800098c <L6470_PrepareDaisyChainCommand+0x320>)
 8000774:	4613      	mov	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4413      	add	r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	440b      	add	r3, r1
 800077e:	330e      	adds	r3, #14
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	733b      	strb	r3, [r7, #12]
      
      /* Build the others bytes to transmit (VALUE) */
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8000784:	2301      	movs	r3, #1
 8000786:	73bb      	strb	r3, [r7, #14]
 8000788:	e015      	b.n	80007b6 <L6470_PrepareDaisyChainCommand+0x14a>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	011b      	lsls	r3, r3, #4
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	689a      	ldr	r2, [r3, #8]
 8000794:	7b39      	ldrb	r1, [r7, #12]
 8000796:	7bbb      	ldrb	r3, [r7, #14]
 8000798:	1acb      	subs	r3, r1, r3
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	fa22 f103 	lsr.w	r1, r2, r3
 80007a0:	7bba      	ldrb	r2, [r7, #14]
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	4413      	add	r3, r2
 80007a6:	461a      	mov	r2, r3
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	b2ca      	uxtb	r2, r1
 80007ae:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	3301      	adds	r3, #1
 80007b4:	73bb      	strb	r3, [r7, #14]
 80007b6:	7b3a      	ldrb	r2, [r7, #12]
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d2e5      	bcs.n	800078a <L6470_PrepareDaisyChainCommand+0x11e>
      }
      break;
 80007be:	e167      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
    case L6470_GETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	7819      	ldrb	r1, [r3, #0]
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	011b      	lsls	r3, r3, #4
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	4413      	add	r3, r2
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	486e      	ldr	r0, [pc, #440]	; (800098c <L6470_PrepareDaisyChainCommand+0x320>)
 80007d4:	4613      	mov	r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4403      	add	r3, r0
 80007de:	781a      	ldrb	r2, [r3, #0]
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	6838      	ldr	r0, [r7, #0]
 80007e4:	4403      	add	r3, r0
 80007e6:	430a      	orrs	r2, r1
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	701a      	strb	r2, [r3, #0]
      break;
 80007ec:	e150      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
    case L6470_RUN_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	683a      	ldr	r2, [r7, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	7819      	ldrb	r1, [r3, #0]
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	011b      	lsls	r3, r3, #4
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	685a      	ldr	r2, [r3, #4]
 8000800:	4863      	ldr	r0, [pc, #396]	; (8000990 <L6470_PrepareDaisyChainCommand+0x324>)
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	4403      	add	r3, r0
 800080a:	3308      	adds	r3, #8
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	4403      	add	r3, r0
 8000814:	430a      	orrs	r2, r1
 8000816:	b2d2      	uxtb	r2, r2
 8000818:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800081a:	2301      	movs	r3, #1
 800081c:	73bb      	strb	r3, [r7, #14]
 800081e:	e015      	b.n	800084c <L6470_PrepareDaisyChainCommand+0x1e0>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	f1c3 0303 	rsb	r3, r3, #3
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	fa22 f103 	lsr.w	r1, r2, r3
 8000836:	7bba      	ldrb	r2, [r7, #14]
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	4413      	add	r3, r2
 800083c:	461a      	mov	r2, r3
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	4413      	add	r3, r2
 8000842:	b2ca      	uxtb	r2, r1
 8000844:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	3301      	adds	r3, #1
 800084a:	73bb      	strb	r3, [r7, #14]
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	2b03      	cmp	r3, #3
 8000850:	d9e6      	bls.n	8000820 <L6470_PrepareDaisyChainCommand+0x1b4>
      }
      break;
 8000852:	e11d      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
    case L6470_STEPCLOCK_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	4413      	add	r3, r2
 800085a:	7819      	ldrb	r1, [r3, #0]
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	011b      	lsls	r3, r3, #4
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	4413      	add	r3, r2
 8000864:	685a      	ldr	r2, [r3, #4]
 8000866:	484a      	ldr	r0, [pc, #296]	; (8000990 <L6470_PrepareDaisyChainCommand+0x324>)
 8000868:	4613      	mov	r3, r2
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	4413      	add	r3, r2
 800086e:	4403      	add	r3, r0
 8000870:	3308      	adds	r3, #8
 8000872:	781a      	ldrb	r2, [r3, #0]
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	6838      	ldr	r0, [r7, #0]
 8000878:	4403      	add	r3, r0
 800087a:	430a      	orrs	r2, r1
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	701a      	strb	r2, [r3, #0]
      break;
 8000880:	e106      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
    case L6470_MOVE_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	4413      	add	r3, r2
 8000888:	7819      	ldrb	r1, [r3, #0]
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	483e      	ldr	r0, [pc, #248]	; (8000990 <L6470_PrepareDaisyChainCommand+0x324>)
 8000896:	4613      	mov	r3, r2
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	4413      	add	r3, r2
 800089c:	4403      	add	r3, r0
 800089e:	3308      	adds	r3, #8
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	6838      	ldr	r0, [r7, #0]
 80008a6:	4403      	add	r3, r0
 80008a8:	430a      	orrs	r2, r1
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (N_STEP) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80008ae:	2301      	movs	r3, #1
 80008b0:	73bb      	strb	r3, [r7, #14]
 80008b2:	e015      	b.n	80008e0 <L6470_PrepareDaisyChainCommand+0x274>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	011b      	lsls	r3, r3, #4
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	4413      	add	r3, r2
 80008bc:	689a      	ldr	r2, [r3, #8]
 80008be:	7bbb      	ldrb	r3, [r7, #14]
 80008c0:	f1c3 0303 	rsb	r3, r3, #3
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	fa22 f103 	lsr.w	r1, r2, r3
 80008ca:	7bba      	ldrb	r2, [r7, #14]
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	4413      	add	r3, r2
 80008d0:	461a      	mov	r2, r3
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	b2ca      	uxtb	r2, r1
 80008d8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80008da:	7bbb      	ldrb	r3, [r7, #14]
 80008dc:	3301      	adds	r3, #1
 80008de:	73bb      	strb	r3, [r7, #14]
 80008e0:	7bbb      	ldrb	r3, [r7, #14]
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d9e6      	bls.n	80008b4 <L6470_PrepareDaisyChainCommand+0x248>
      }      
      break;
 80008e6:	e0d3      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
    case L6470_GOTO_ID:
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80008e8:	2301      	movs	r3, #1
 80008ea:	73bb      	strb	r3, [r7, #14]
 80008ec:	e015      	b.n	800091a <L6470_PrepareDaisyChainCommand+0x2ae>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	7bbb      	ldrb	r3, [r7, #14]
 80008fa:	f1c3 0303 	rsb	r3, r3, #3
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	fa22 f103 	lsr.w	r1, r2, r3
 8000904:	7bba      	ldrb	r2, [r7, #14]
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	4413      	add	r3, r2
 800090a:	461a      	mov	r2, r3
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	4413      	add	r3, r2
 8000910:	b2ca      	uxtb	r2, r1
 8000912:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8000914:	7bbb      	ldrb	r3, [r7, #14]
 8000916:	3301      	adds	r3, #1
 8000918:	73bb      	strb	r3, [r7, #14]
 800091a:	7bbb      	ldrb	r3, [r7, #14]
 800091c:	2b03      	cmp	r3, #3
 800091e:	d9e6      	bls.n	80008ee <L6470_PrepareDaisyChainCommand+0x282>
      }
      break;
 8000920:	e0b6      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
    case L6470_GOTODIR_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	4413      	add	r3, r2
 8000928:	7819      	ldrb	r1, [r3, #0]
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	011b      	lsls	r3, r3, #4
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	685a      	ldr	r2, [r3, #4]
 8000934:	4816      	ldr	r0, [pc, #88]	; (8000990 <L6470_PrepareDaisyChainCommand+0x324>)
 8000936:	4613      	mov	r3, r2
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	4413      	add	r3, r2
 800093c:	4403      	add	r3, r0
 800093e:	3308      	adds	r3, #8
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	6838      	ldr	r0, [r7, #0]
 8000946:	4403      	add	r3, r0
 8000948:	430a      	orrs	r2, r1
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800094e:	2301      	movs	r3, #1
 8000950:	73bb      	strb	r3, [r7, #14]
 8000952:	e015      	b.n	8000980 <L6470_PrepareDaisyChainCommand+0x314>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	f1c3 0303 	rsb	r3, r3, #3
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	fa22 f103 	lsr.w	r1, r2, r3
 800096a:	7bba      	ldrb	r2, [r7, #14]
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	4413      	add	r3, r2
 8000970:	461a      	mov	r2, r3
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	4413      	add	r3, r2
 8000976:	b2ca      	uxtb	r2, r1
 8000978:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	3301      	adds	r3, #1
 800097e:	73bb      	strb	r3, [r7, #14]
 8000980:	7bbb      	ldrb	r3, [r7, #14]
 8000982:	2b03      	cmp	r3, #3
 8000984:	d9e6      	bls.n	8000954 <L6470_PrepareDaisyChainCommand+0x2e8>
      }
      break;
 8000986:	e083      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
 8000988:	080195f8 	.word	0x080195f8
 800098c:	08019404 	.word	0x08019404
 8000990:	08019704 	.word	0x08019704
    case L6470_GOUNTIL_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	4413      	add	r3, r2
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b259      	sxtb	r1, r3
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	011b      	lsls	r3, r3, #4
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	685a      	ldr	r2, [r3, #4]
 80009a8:	4840      	ldr	r0, [pc, #256]	; (8000aac <L6470_PrepareDaisyChainCommand+0x440>)
 80009aa:	4613      	mov	r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	4413      	add	r3, r2
 80009b0:	4403      	add	r3, r0
 80009b2:	3304      	adds	r3, #4
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	430b      	orrs	r3, r1
 80009bc:	b259      	sxtb	r1, r3
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	b2ca      	uxtb	r2, r1
 80009c6:	701a      	strb	r2, [r3, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	683a      	ldr	r2, [r7, #0]
 80009cc:	4413      	add	r3, r2
 80009ce:	7819      	ldrb	r1, [r3, #0]
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	011b      	lsls	r3, r3, #4
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	4835      	ldr	r0, [pc, #212]	; (8000ab0 <L6470_PrepareDaisyChainCommand+0x444>)
 80009dc:	4613      	mov	r3, r2
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	4413      	add	r3, r2
 80009e2:	4403      	add	r3, r0
 80009e4:	3308      	adds	r3, #8
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	6838      	ldr	r0, [r7, #0]
 80009ec:	4403      	add	r3, r0
 80009ee:	430a      	orrs	r2, r1
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	701a      	strb	r2, [r3, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80009f4:	2301      	movs	r3, #1
 80009f6:	73bb      	strb	r3, [r7, #14]
 80009f8:	e015      	b.n	8000a26 <L6470_PrepareDaisyChainCommand+0x3ba>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	011b      	lsls	r3, r3, #4
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	7bbb      	ldrb	r3, [r7, #14]
 8000a06:	f1c3 0303 	rsb	r3, r3, #3
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	fa22 f103 	lsr.w	r1, r2, r3
 8000a10:	7bba      	ldrb	r2, [r7, #14]
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	4413      	add	r3, r2
 8000a16:	461a      	mov	r2, r3
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b2ca      	uxtb	r2, r1
 8000a1e:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8000a20:	7bbb      	ldrb	r3, [r7, #14]
 8000a22:	3301      	adds	r3, #1
 8000a24:	73bb      	strb	r3, [r7, #14]
 8000a26:	7bbb      	ldrb	r3, [r7, #14]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d9e6      	bls.n	80009fa <L6470_PrepareDaisyChainCommand+0x38e>
      }
      break;
 8000a2c:	e030      	b.n	8000a90 <L6470_PrepareDaisyChainCommand+0x424>
    case L6470_RELEASESW_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b259      	sxtb	r1, r3
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	011b      	lsls	r3, r3, #4
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	4413      	add	r3, r2
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	481a      	ldr	r0, [pc, #104]	; (8000aac <L6470_PrepareDaisyChainCommand+0x440>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	4403      	add	r3, r0
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	430b      	orrs	r3, r1
 8000a56:	b259      	sxtb	r1, r3
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b2ca      	uxtb	r2, r1
 8000a60:	701a      	strb	r2, [r3, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	7819      	ldrb	r1, [r3, #0]
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	011b      	lsls	r3, r3, #4
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <L6470_PrepareDaisyChainCommand+0x444>)
 8000a76:	4613      	mov	r3, r2
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4403      	add	r3, r0
 8000a7e:	3308      	adds	r3, #8
 8000a80:	781a      	ldrb	r2, [r3, #0]
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	6838      	ldr	r0, [r7, #0]
 8000a86:	4403      	add	r3, r0
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	701a      	strb	r2, [r3, #0]
      break;
 8000a8e:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	3301      	adds	r3, #1
 8000a94:	73fb      	strb	r3, [r7, #15]
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f43f ae0b 	beq.w	80006b4 <L6470_PrepareDaisyChainCommand+0x48>
      break;
    case L6470_GETSTATUS_ID:
      break;
    }
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	08019718 	.word	0x08019718
 8000ab0:	08019704 	.word	0x08019704

08000ab4 <Step_s_2_Speed>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
uint32_t Step_s_2_Speed(float Step_s)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 8000abe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ac2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000af4 <Step_s_2_Speed+0x40>
 8000ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ace:	d80a      	bhi.n	8000ae6 <Step_s_2_Speed+0x32>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 8000ad0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ad4:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000af8 <Step_s_2_Speed+0x44>
 8000ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ae0:	ee17 3a90 	vmov	r3, s15
 8000ae4:	e000      	b.n	8000ae8 <Step_s_2_Speed+0x34>
  else
    return 0;   // Warning
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	4674241b 	.word	0x4674241b
 8000af8:	3c74242a 	.word	0x3c74242a

08000afc <Step_s2_2_Acc>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACC register value.
  */
uint16_t Step_s2_2_Acc(float Step_s2)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8000b06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b0a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000b40 <Step_s2_2_Acc+0x44>
 8000b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b16:	d80b      	bhi.n	8000b30 <Step_s2_2_Acc+0x34>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8000b18:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b1c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000b44 <Step_s2_2_Acc+0x48>
 8000b20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b28:	ee17 3a90 	vmov	r3, s15
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	e000      	b.n	8000b32 <Step_s2_2_Acc+0x36>
  else
    return 0;   // Warning
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	4768c671 	.word	0x4768c671
 8000b44:	4168d4fe 	.word	0x4168d4fe

08000b48 <Step_s2_2_Dec>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DEC register value.
  */
uint16_t Step_s2_2_Dec(float Step_s2)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8000b52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b56:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000b8c <Step_s2_2_Dec+0x44>
 8000b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b62:	d80b      	bhi.n	8000b7c <Step_s2_2_Dec+0x34>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8000b64:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b68:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000b90 <Step_s2_2_Dec+0x48>
 8000b6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b74:	ee17 3a90 	vmov	r3, s15
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	e000      	b.n	8000b7e <Step_s2_2_Dec+0x36>
  else
    return 0;   // Warning
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	4768c671 	.word	0x4768c671
 8000b90:	4168d4fe 	.word	0x4168d4fe

08000b94 <Step_s_2_MaxSpeed>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
uint16_t Step_s_2_MaxSpeed(float Step_s)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8000b9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ba2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000bd8 <Step_s_2_MaxSpeed+0x44>
 8000ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bae:	d80b      	bhi.n	8000bc8 <Step_s_2_MaxSpeed+0x34>
    return (uint16_t)(Step_s / ((float)15.2588));
 8000bb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bb4:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000bdc <Step_s_2_MaxSpeed+0x48>
 8000bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bc0:	ee17 3a90 	vmov	r3, s15
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	e000      	b.n	8000bca <Step_s_2_MaxSpeed+0x36>
  else
    return 0;   // Warning
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	4673e702 	.word	0x4673e702
 8000bdc:	4174240b 	.word	0x4174240b

08000be0 <Step_s_2_MinSpeed>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
uint16_t Step_s_2_MinSpeed(float Step_s)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8000bea:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bee:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000c24 <Step_s_2_MinSpeed+0x44>
 8000bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bfa:	d80b      	bhi.n	8000c14 <Step_s_2_MinSpeed+0x34>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8000bfc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c00:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000c28 <Step_s_2_MinSpeed+0x48>
 8000c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c0c:	ee17 3a90 	vmov	r3, s15
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	e000      	b.n	8000c16 <Step_s_2_MinSpeed+0x36>
  else
    return 0;   // Warning
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	447414bf 	.word	0x447414bf
 8000c28:	3e742401 	.word	0x3e742401

08000c2c <Step_s_2_FsSpd>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t Step_s_2_FsSpd(float Step_s)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8000c36:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c3a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000c78 <Step_s_2_FsSpd+0x4c>
 8000c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c46:	d80f      	bhi.n	8000c68 <Step_s_2_FsSpd+0x3c>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8000c48:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c4c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000c7c <Step_s_2_FsSpd+0x50>
 8000c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c54:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c60:	ee17 3a90 	vmov	r3, s15
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	e000      	b.n	8000c6a <Step_s_2_FsSpd+0x3e>
  else
    return 0;   // Warning
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	4673e180 	.word	0x4673e180
 8000c7c:	41740000 	.word	0x41740000

08000c80 <Step_s_2_IntSpeed>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t Step_s_2_IntSpeed(float Step_s)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8000c8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c8e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000cc4 <Step_s_2_IntSpeed+0x44>
 8000c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9a:	d80b      	bhi.n	8000cb4 <Step_s_2_IntSpeed+0x34>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8000c9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ca0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000cc8 <Step_s_2_IntSpeed+0x48>
 8000ca4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cac:	ee17 3a90 	vmov	r3, s15
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	e000      	b.n	8000cb6 <Step_s_2_IntSpeed+0x36>
  else
    return 0;   // Warning
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	44742023 	.word	0x44742023
 8000cc8:	3d7423f4 	.word	0x3d7423f4

08000ccc <s_Step_2_StSlp>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_StSlp(float s_Step)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8000cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cda:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000d10 <s_Step_2_StSlp+0x44>
 8000cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce6:	d80c      	bhi.n	8000d02 <s_Step_2_StSlp+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8000ce8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cec:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000d14 <s_Step_2_StSlp+0x48>
 8000cf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf8:	edc7 7a00 	vstr	s15, [r7]
 8000cfc:	783b      	ldrb	r3, [r7, #0]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	e000      	b.n	8000d04 <s_Step_2_StSlp+0x38>
  else
    return 0;   // Warning
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	3b8311d9 	.word	0x3b8311d9
 8000d14:	3783956e 	.word	0x3783956e

08000d18 <s_Step_2_FnSlpAcc>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_FnSlpAcc(float s_Step)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8000d22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d26:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000d5c <s_Step_2_FnSlpAcc+0x44>
 8000d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d32:	d80c      	bhi.n	8000d4e <s_Step_2_FnSlpAcc+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8000d34:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d38:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000d60 <s_Step_2_FnSlpAcc+0x48>
 8000d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d44:	edc7 7a00 	vstr	s15, [r7]
 8000d48:	783b      	ldrb	r3, [r7, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	e000      	b.n	8000d50 <s_Step_2_FnSlpAcc+0x38>
  else
    return 0;   // Warning
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	3b8311d9 	.word	0x3b8311d9
 8000d60:	3783956e 	.word	0x3783956e

08000d64 <s_Step_2_FnSlpDec>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_FnSlpDec(float s_Step)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8000d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d72:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000da8 <s_Step_2_FnSlpDec+0x44>
 8000d76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7e:	d80c      	bhi.n	8000d9a <s_Step_2_FnSlpDec+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8000d80:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d84:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000dac <s_Step_2_FnSlpDec+0x48>
 8000d88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d90:	edc7 7a00 	vstr	s15, [r7]
 8000d94:	783b      	ldrb	r3, [r7, #0]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	e000      	b.n	8000d9c <s_Step_2_FnSlpDec+0x38>
  else
    return 0;   // Warning
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	3b8311d9 	.word	0x3b8311d9
 8000dac:	3783956e 	.word	0x3783956e

08000db0 <mA_2_OcdTh>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
uint8_t mA_2_OcdTh(float mA)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	ed87 0a01 	vstr	s0, [r7, #4]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8000dba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dbe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000e48 <mA_2_OcdTh+0x98>
 8000dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dca:	d836      	bhi.n	8000e3a <mA_2_OcdTh+0x8a>
  {
    result = (mA / ((float)375));
 8000dcc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dd0:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000e4c <mA_2_OcdTh+0x9c>
 8000dd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dd8:	edc7 7a03 	vstr	s15, [r7, #12]
    decimal = result - (uint8_t)result;
 8000ddc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000de4:	edc7 7a00 	vstr	s15, [r7]
 8000de8:	783b      	ldrb	r3, [r7, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000df4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dfc:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (decimal < (float)0.5)
 8000e00:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e10:	d50a      	bpl.n	8000e28 <mA_2_OcdTh+0x78>
      return ((uint8_t)result - 1);
 8000e12:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e1a:	edc7 7a00 	vstr	s15, [r7]
 8000e1e:	783b      	ldrb	r3, [r7, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	3b01      	subs	r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	e009      	b.n	8000e3c <mA_2_OcdTh+0x8c>
    else
      return ((uint8_t)result);    
 8000e28:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e30:	edc7 7a00 	vstr	s15, [r7]
 8000e34:	783b      	ldrb	r3, [r7, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	e000      	b.n	8000e3c <mA_2_OcdTh+0x8c>
  }
  else
    return 0;   // Warning
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	45bb8000 	.word	0x45bb8000
 8000e4c:	43bb8000 	.word	0x43bb8000

08000e50 <mA_2_StallTh>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
uint8_t mA_2_StallTh(float mA)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	ed87 0a01 	vstr	s0, [r7, #4]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8000e5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e5e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000ee8 <mA_2_StallTh+0x98>
 8000e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6a:	d836      	bhi.n	8000eda <mA_2_StallTh+0x8a>
  {
    result = (mA / ((float)31.25));
 8000e6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e70:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000eec <mA_2_StallTh+0x9c>
 8000e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e78:	edc7 7a03 	vstr	s15, [r7, #12]
    decimal = result - (uint8_t)result;
 8000e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e84:	edc7 7a00 	vstr	s15, [r7]
 8000e88:	783b      	ldrb	r3, [r7, #0]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	ee07 3a90 	vmov	s15, r3
 8000e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e94:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9c:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (decimal < (float)0.5)
 8000ea0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ea4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb0:	d50a      	bpl.n	8000ec8 <mA_2_StallTh+0x78>
      return ((uint8_t)result - 1);
 8000eb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eba:	edc7 7a00 	vstr	s15, [r7]
 8000ebe:	783b      	ldrb	r3, [r7, #0]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	e009      	b.n	8000edc <mA_2_StallTh+0x8c>
    else
      return ((uint8_t)result);    
 8000ec8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ed0:	edc7 7a00 	vstr	s15, [r7]
 8000ed4:	783b      	ldrb	r3, [r7, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	e000      	b.n	8000edc <mA_2_StallTh+0x8c>
  }
  else
    return 0;   // Warning
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	457a0000 	.word	0x457a0000
 8000eec:	41fa0000 	.word	0x41fa0000

08000ef0 <L6470_SetParam>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * @param  Value         The new value.
  */
void L6470_SetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	603a      	str	r2, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
 8000efc:	460b      	mov	r3, r1
 8000efe:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8000f00:	79ba      	ldrb	r2, [r7, #6]
 8000f02:	79f8      	ldrb	r0, [r7, #7]
 8000f04:	2300      	movs	r3, #0
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4907      	ldr	r1, [pc, #28]	; (8000f30 <L6470_SetParam+0x40>)
 8000f12:	f7ff fb87 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000f16:	4907      	ldr	r1, [pc, #28]	; (8000f34 <L6470_SetParam+0x44>)
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <L6470_SetParam+0x40>)
 8000f1a:	f7ff fba7 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000f1e:	4906      	ldr	r1, [pc, #24]	; (8000f38 <L6470_SetParam+0x48>)
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <L6470_SetParam+0x44>)
 8000f22:	f000 fc61 	bl	80017e8 <L6470_DaisyChainCommand>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200004fc 	.word	0x200004fc
 8000f34:	2000050c 	.word	0x2000050c
 8000f38:	20000510 	.word	0x20000510

08000f3c <L6470_GetParam>:
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * 
  * @retval ReceivedValue The register value.
  */
uint32_t L6470_GetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	4603      	mov	r3, r0
 8000f44:	460a      	mov	r2, r1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	71bb      	strb	r3, [r7, #6]
  uint8_t ValueLengthByte;
  uint32_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	79f8      	ldrb	r0, [r7, #7]
 8000f50:	2200      	movs	r2, #0
 8000f52:	9201      	str	r2, [sp, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	9200      	str	r2, [sp, #0]
 8000f58:	2202      	movs	r2, #2
 8000f5a:	4910      	ldr	r1, [pc, #64]	; (8000f9c <L6470_GetParam+0x60>)
 8000f5c:	f7ff fb62 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000f60:	490f      	ldr	r1, [pc, #60]	; (8000fa0 <L6470_GetParam+0x64>)
 8000f62:	480e      	ldr	r0, [pc, #56]	; (8000f9c <L6470_GetParam+0x60>)
 8000f64:	f7ff fb82 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000f68:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <L6470_GetParam+0x68>)
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <L6470_GetParam+0x64>)
 8000f6c:	f000 fc3c 	bl	80017e8 <L6470_DaisyChainCommand>
  
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8000f70:	79ba      	ldrb	r2, [r7, #6]
 8000f72:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <L6470_GetParam+0x6c>)
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	330e      	adds	r3, #14
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	73fb      	strb	r3, [r7, #15]
  
  ReceivedValue = L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4906      	ldr	r1, [pc, #24]	; (8000fa4 <L6470_GetParam+0x68>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fc76 	bl	800187c <L6470_ExtractReturnedData>
 8000f90:	60b8      	str	r0, [r7, #8]
  
  return ReceivedValue;
 8000f92:	68bb      	ldr	r3, [r7, #8]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200004fc 	.word	0x200004fc
 8000fa0:	2000050c 	.word	0x2000050c
 8000fa4:	20000510 	.word	0x20000510
 8000fa8:	08019404 	.word	0x08019404

08000fac <L6470_Run>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470_Run(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	603a      	str	r2, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8000fbc:	79ba      	ldrb	r2, [r7, #6]
 8000fbe:	79f8      	ldrb	r0, [r7, #7]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	2203      	movs	r2, #3
 8000fcc:	4907      	ldr	r1, [pc, #28]	; (8000fec <L6470_Run+0x40>)
 8000fce:	f7ff fb29 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8000fd2:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <L6470_Run+0x44>)
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <L6470_Run+0x40>)
 8000fd6:	f7ff fb49 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8000fda:	4906      	ldr	r1, [pc, #24]	; (8000ff4 <L6470_Run+0x48>)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <L6470_Run+0x44>)
 8000fde:	f000 fc03 	bl	80017e8 <L6470_DaisyChainCommand>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200004fc 	.word	0x200004fc
 8000ff0:	2000050c 	.word	0x2000050c
 8000ff4:	20000510 	.word	0x20000510

08000ff8 <L6470_StepClock>:
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470_StepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	79f8      	ldrb	r0, [r7, #7]
 800100c:	2200      	movs	r2, #0
 800100e:	9201      	str	r2, [sp, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	9200      	str	r2, [sp, #0]
 8001014:	2204      	movs	r2, #4
 8001016:	4907      	ldr	r1, [pc, #28]	; (8001034 <L6470_StepClock+0x3c>)
 8001018:	f7ff fb04 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800101c:	4906      	ldr	r1, [pc, #24]	; (8001038 <L6470_StepClock+0x40>)
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <L6470_StepClock+0x3c>)
 8001020:	f7ff fb24 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001024:	4905      	ldr	r1, [pc, #20]	; (800103c <L6470_StepClock+0x44>)
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <L6470_StepClock+0x40>)
 8001028:	f000 fbde 	bl	80017e8 <L6470_DaisyChainCommand>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200004fc 	.word	0x200004fc
 8001038:	2000050c 	.word	0x2000050c
 800103c:	20000510 	.word	0x20000510

08001040 <L6470_Move>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  N_Step        The number of microsteps.
  */
void L6470_Move(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af02      	add	r7, sp, #8
 8001046:	4603      	mov	r3, r0
 8001048:	603a      	str	r2, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	460b      	mov	r3, r1
 800104e:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8001050:	79ba      	ldrb	r2, [r7, #6]
 8001052:	79f8      	ldrb	r0, [r7, #7]
 8001054:	2300      	movs	r3, #0
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	4613      	mov	r3, r2
 800105e:	2205      	movs	r2, #5
 8001060:	4907      	ldr	r1, [pc, #28]	; (8001080 <L6470_Move+0x40>)
 8001062:	f7ff fadf 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001066:	4907      	ldr	r1, [pc, #28]	; (8001084 <L6470_Move+0x44>)
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <L6470_Move+0x40>)
 800106a:	f7ff faff 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800106e:	4906      	ldr	r1, [pc, #24]	; (8001088 <L6470_Move+0x48>)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <L6470_Move+0x44>)
 8001072:	f000 fbb9 	bl	80017e8 <L6470_DaisyChainCommand>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200004fc 	.word	0x200004fc
 8001084:	2000050c 	.word	0x2000050c
 8001088:	20000510 	.word	0x20000510

0800108c <L6470_GoTo>:
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  AbsPos        The target absolute position.
  */
void L6470_GoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af02      	add	r7, sp, #8
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if (AbsPos <= L6470_POSITION_RANGE)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800109e:	d211      	bcs.n	80010c4 <L6470_GoTo+0x38>
  {
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80010a0:	79f8      	ldrb	r0, [r7, #7]
 80010a2:	2300      	movs	r3, #0
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	2300      	movs	r3, #0
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2206      	movs	r2, #6
 80010ae:	4907      	ldr	r1, [pc, #28]	; (80010cc <L6470_GoTo+0x40>)
 80010b0:	f7ff fab8 	bl	8000624 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80010b4:	4906      	ldr	r1, [pc, #24]	; (80010d0 <L6470_GoTo+0x44>)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <L6470_GoTo+0x40>)
 80010b8:	f7ff fad8 	bl	800066c <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80010bc:	4905      	ldr	r1, [pc, #20]	; (80010d4 <L6470_GoTo+0x48>)
 80010be:	4804      	ldr	r0, [pc, #16]	; (80010d0 <L6470_GoTo+0x44>)
 80010c0:	f000 fb92 	bl	80017e8 <L6470_DaisyChainCommand>
  }
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200004fc 	.word	0x200004fc
 80010d0:	2000050c 	.word	0x2000050c
 80010d4:	20000510 	.word	0x20000510

080010d8 <L6470_GoToDir>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  AbsPos        The target absolute position.
  */
void L6470_GoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4603      	mov	r3, r0
 80010e0:	603a      	str	r2, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	460b      	mov	r3, r1
 80010e6:	71bb      	strb	r3, [r7, #6]
  if (AbsPos <= L6470_POSITION_RANGE)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010ee:	d212      	bcs.n	8001116 <L6470_GoToDir+0x3e>
  {
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 80010f0:	79ba      	ldrb	r2, [r7, #6]
 80010f2:	79f8      	ldrb	r0, [r7, #7]
 80010f4:	2300      	movs	r3, #0
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	4613      	mov	r3, r2
 80010fe:	2207      	movs	r2, #7
 8001100:	4907      	ldr	r1, [pc, #28]	; (8001120 <L6470_GoToDir+0x48>)
 8001102:	f7ff fa8f 	bl	8000624 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001106:	4907      	ldr	r1, [pc, #28]	; (8001124 <L6470_GoToDir+0x4c>)
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <L6470_GoToDir+0x48>)
 800110a:	f7ff faaf 	bl	800066c <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800110e:	4906      	ldr	r1, [pc, #24]	; (8001128 <L6470_GoToDir+0x50>)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <L6470_GoToDir+0x4c>)
 8001112:	f000 fb69 	bl	80017e8 <L6470_DaisyChainCommand>
  }
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200004fc 	.word	0x200004fc
 8001124:	2000050c 	.word	0x2000050c
 8001128:	20000510 	.word	0x20000510

0800112c <L6470_GoUntil>:
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470_GoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af02      	add	r7, sp, #8
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	460b      	mov	r3, r1
 800113a:	71bb      	strb	r3, [r7, #6]
 800113c:	4613      	mov	r3, r2
 800113e:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8001140:	79b9      	ldrb	r1, [r7, #6]
 8001142:	797b      	ldrb	r3, [r7, #5]
 8001144:	79f8      	ldrb	r0, [r7, #7]
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	9201      	str	r2, [sp, #4]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	460b      	mov	r3, r1
 800114e:	2208      	movs	r2, #8
 8001150:	4907      	ldr	r1, [pc, #28]	; (8001170 <L6470_GoUntil+0x44>)
 8001152:	f7ff fa67 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001156:	4907      	ldr	r1, [pc, #28]	; (8001174 <L6470_GoUntil+0x48>)
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <L6470_GoUntil+0x44>)
 800115a:	f7ff fa87 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800115e:	4906      	ldr	r1, [pc, #24]	; (8001178 <L6470_GoUntil+0x4c>)
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <L6470_GoUntil+0x48>)
 8001162:	f000 fb41 	bl	80017e8 <L6470_DaisyChainCommand>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200004fc 	.word	0x200004fc
 8001174:	2000050c 	.word	0x2000050c
 8001178:	20000510 	.word	0x20000510

0800117c <L6470_ReleaseSW>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470_ReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af02      	add	r7, sp, #8
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	460b      	mov	r3, r1
 8001188:	71bb      	strb	r3, [r7, #6]
 800118a:	4613      	mov	r3, r2
 800118c:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800118e:	79ba      	ldrb	r2, [r7, #6]
 8001190:	797b      	ldrb	r3, [r7, #5]
 8001192:	79f8      	ldrb	r0, [r7, #7]
 8001194:	2100      	movs	r1, #0
 8001196:	9101      	str	r1, [sp, #4]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	4613      	mov	r3, r2
 800119c:	2209      	movs	r2, #9
 800119e:	4907      	ldr	r1, [pc, #28]	; (80011bc <L6470_ReleaseSW+0x40>)
 80011a0:	f7ff fa40 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80011a4:	4906      	ldr	r1, [pc, #24]	; (80011c0 <L6470_ReleaseSW+0x44>)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <L6470_ReleaseSW+0x40>)
 80011a8:	f7ff fa60 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80011ac:	4905      	ldr	r1, [pc, #20]	; (80011c4 <L6470_ReleaseSW+0x48>)
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <L6470_ReleaseSW+0x44>)
 80011b0:	f000 fb1a 	bl	80017e8 <L6470_DaisyChainCommand>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200004fc 	.word	0x200004fc
 80011c0:	2000050c 	.word	0x2000050c
 80011c4:	20000510 	.word	0x20000510

080011c8 <L6470_GoHome>:
  *         via the shortest path.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_GoHome(uint8_t L6470_Id)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 80011d2:	79f8      	ldrb	r0, [r7, #7]
 80011d4:	2300      	movs	r3, #0
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	2300      	movs	r3, #0
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2300      	movs	r3, #0
 80011de:	220a      	movs	r2, #10
 80011e0:	4907      	ldr	r1, [pc, #28]	; (8001200 <L6470_GoHome+0x38>)
 80011e2:	f7ff fa1f 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80011e6:	4907      	ldr	r1, [pc, #28]	; (8001204 <L6470_GoHome+0x3c>)
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <L6470_GoHome+0x38>)
 80011ea:	f7ff fa3f 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80011ee:	4906      	ldr	r1, [pc, #24]	; (8001208 <L6470_GoHome+0x40>)
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <L6470_GoHome+0x3c>)
 80011f2:	f000 faf9 	bl	80017e8 <L6470_DaisyChainCommand>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200004fc 	.word	0x200004fc
 8001204:	2000050c 	.word	0x2000050c
 8001208:	20000510 	.word	0x20000510

0800120c <L6470_GoMark>:
  *         minimum path.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_GoMark(uint8_t L6470_Id)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af02      	add	r7, sp, #8
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8001216:	79f8      	ldrb	r0, [r7, #7]
 8001218:	2300      	movs	r3, #0
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	2300      	movs	r3, #0
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2300      	movs	r3, #0
 8001222:	220b      	movs	r2, #11
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <L6470_GoMark+0x38>)
 8001226:	f7ff f9fd 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800122a:	4907      	ldr	r1, [pc, #28]	; (8001248 <L6470_GoMark+0x3c>)
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <L6470_GoMark+0x38>)
 800122e:	f7ff fa1d 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001232:	4906      	ldr	r1, [pc, #24]	; (800124c <L6470_GoMark+0x40>)
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <L6470_GoMark+0x3c>)
 8001236:	f000 fad7 	bl	80017e8 <L6470_DaisyChainCommand>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200004fc 	.word	0x200004fc
 8001248:	2000050c 	.word	0x2000050c
 800124c:	20000510 	.word	0x20000510

08001250 <L6470_ResetPos>:
  * @brief  ResetPos command resets the ABS_POS register to zero.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_ResetPos(uint8_t L6470_Id)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af02      	add	r7, sp, #8
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800125a:	79f8      	ldrb	r0, [r7, #7]
 800125c:	2300      	movs	r3, #0
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2300      	movs	r3, #0
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	220c      	movs	r2, #12
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <L6470_ResetPos+0x38>)
 800126a:	f7ff f9db 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800126e:	4907      	ldr	r1, [pc, #28]	; (800128c <L6470_ResetPos+0x3c>)
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <L6470_ResetPos+0x38>)
 8001272:	f7ff f9fb 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001276:	4906      	ldr	r1, [pc, #24]	; (8001290 <L6470_ResetPos+0x40>)
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <L6470_ResetPos+0x3c>)
 800127a:	f000 fab5 	bl	80017e8 <L6470_DaisyChainCommand>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200004fc 	.word	0x200004fc
 800128c:	2000050c 	.word	0x2000050c
 8001290:	20000510 	.word	0x20000510

08001294 <L6470_ResetDevice>:
  * @brief  ResetDevice command resets the device to power-up conditions.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_ResetDevice(uint8_t L6470_Id)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af02      	add	r7, sp, #8
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800129e:	79f8      	ldrb	r0, [r7, #7]
 80012a0:	2300      	movs	r3, #0
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	2300      	movs	r3, #0
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2300      	movs	r3, #0
 80012aa:	220d      	movs	r2, #13
 80012ac:	4907      	ldr	r1, [pc, #28]	; (80012cc <L6470_ResetDevice+0x38>)
 80012ae:	f7ff f9b9 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80012b2:	4907      	ldr	r1, [pc, #28]	; (80012d0 <L6470_ResetDevice+0x3c>)
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <L6470_ResetDevice+0x38>)
 80012b6:	f7ff f9d9 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80012ba:	4906      	ldr	r1, [pc, #24]	; (80012d4 <L6470_ResetDevice+0x40>)
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <L6470_ResetDevice+0x3c>)
 80012be:	f000 fa93 	bl	80017e8 <L6470_DaisyChainCommand>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200004fc 	.word	0x200004fc
 80012d0:	2000050c 	.word	0x2000050c
 80012d4:	20000510 	.word	0x20000510

080012d8 <L6470_SoftStop>:
  *         in the DEC register.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_SoftStop(uint8_t L6470_Id)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af02      	add	r7, sp, #8
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80012e2:	79f8      	ldrb	r0, [r7, #7]
 80012e4:	2300      	movs	r3, #0
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2300      	movs	r3, #0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2300      	movs	r3, #0
 80012ee:	220e      	movs	r2, #14
 80012f0:	4907      	ldr	r1, [pc, #28]	; (8001310 <L6470_SoftStop+0x38>)
 80012f2:	f7ff f997 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80012f6:	4907      	ldr	r1, [pc, #28]	; (8001314 <L6470_SoftStop+0x3c>)
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <L6470_SoftStop+0x38>)
 80012fa:	f7ff f9b7 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80012fe:	4906      	ldr	r1, [pc, #24]	; (8001318 <L6470_SoftStop+0x40>)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <L6470_SoftStop+0x3c>)
 8001302:	f000 fa71 	bl	80017e8 <L6470_DaisyChainCommand>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200004fc 	.word	0x200004fc
 8001314:	2000050c 	.word	0x2000050c
 8001318:	20000510 	.word	0x20000510

0800131c <L6470_HardStop>:
  * @brief  HardStop command causes an immediate motor stop with infinite deceleration.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_HardStop(uint8_t L6470_Id)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af02      	add	r7, sp, #8
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8001326:	79f8      	ldrb	r0, [r7, #7]
 8001328:	2300      	movs	r3, #0
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	2300      	movs	r3, #0
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2300      	movs	r3, #0
 8001332:	220f      	movs	r2, #15
 8001334:	4907      	ldr	r1, [pc, #28]	; (8001354 <L6470_HardStop+0x38>)
 8001336:	f7ff f975 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800133a:	4907      	ldr	r1, [pc, #28]	; (8001358 <L6470_HardStop+0x3c>)
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <L6470_HardStop+0x38>)
 800133e:	f7ff f995 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001342:	4906      	ldr	r1, [pc, #24]	; (800135c <L6470_HardStop+0x40>)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <L6470_HardStop+0x3c>)
 8001346:	f000 fa4f 	bl	80017e8 <L6470_DaisyChainCommand>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200004fc 	.word	0x200004fc
 8001358:	2000050c 	.word	0x2000050c
 800135c:	20000510 	.word	0x20000510

08001360 <L6470_SoftHiZ>:
  *         stored in the DEC register.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_SoftHiZ(uint8_t L6470_Id)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af02      	add	r7, sp, #8
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800136a:	79f8      	ldrb	r0, [r7, #7]
 800136c:	2300      	movs	r3, #0
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	2300      	movs	r3, #0
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2300      	movs	r3, #0
 8001376:	2210      	movs	r2, #16
 8001378:	4907      	ldr	r1, [pc, #28]	; (8001398 <L6470_SoftHiZ+0x38>)
 800137a:	f7ff f953 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800137e:	4907      	ldr	r1, [pc, #28]	; (800139c <L6470_SoftHiZ+0x3c>)
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <L6470_SoftHiZ+0x38>)
 8001382:	f7ff f973 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8001386:	4906      	ldr	r1, [pc, #24]	; (80013a0 <L6470_SoftHiZ+0x40>)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <L6470_SoftHiZ+0x3c>)
 800138a:	f000 fa2d 	bl	80017e8 <L6470_DaisyChainCommand>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200004fc 	.word	0x200004fc
 800139c:	2000050c 	.word	0x2000050c
 80013a0:	20000510 	.word	0x20000510

080013a4 <L6470_HardHiZ>:
  * @brief  HardHiZ command immediately disables the power bridges (high impedance state).
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_HardHiZ(uint8_t L6470_Id)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80013ae:	79f8      	ldrb	r0, [r7, #7]
 80013b0:	2300      	movs	r3, #0
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	2300      	movs	r3, #0
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2300      	movs	r3, #0
 80013ba:	2211      	movs	r2, #17
 80013bc:	4907      	ldr	r1, [pc, #28]	; (80013dc <L6470_HardHiZ+0x38>)
 80013be:	f7ff f931 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80013c2:	4907      	ldr	r1, [pc, #28]	; (80013e0 <L6470_HardHiZ+0x3c>)
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <L6470_HardHiZ+0x38>)
 80013c6:	f7ff f951 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80013ca:	4906      	ldr	r1, [pc, #24]	; (80013e4 <L6470_HardHiZ+0x40>)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <L6470_HardHiZ+0x3c>)
 80013ce:	f000 fa0b 	bl	80017e8 <L6470_DaisyChainCommand>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200004fc 	.word	0x200004fc
 80013e0:	2000050c 	.word	0x2000050c
 80013e4:	20000510 	.word	0x20000510

080013e8 <L6470_GetStatus>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * 
  * @retval ReceivedValue The register value.
  */
uint16_t L6470_GetStatus(uint8_t L6470_Id)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
  uint16_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80013f2:	79f8      	ldrb	r0, [r7, #7]
 80013f4:	2300      	movs	r3, #0
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	2300      	movs	r3, #0
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2300      	movs	r3, #0
 80013fe:	2212      	movs	r2, #18
 8001400:	490b      	ldr	r1, [pc, #44]	; (8001430 <L6470_GetStatus+0x48>)
 8001402:	f7ff f90f 	bl	8000624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001406:	490b      	ldr	r1, [pc, #44]	; (8001434 <L6470_GetStatus+0x4c>)
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <L6470_GetStatus+0x48>)
 800140a:	f7ff f92f 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800140e:	490a      	ldr	r1, [pc, #40]	; (8001438 <L6470_GetStatus+0x50>)
 8001410:	4808      	ldr	r0, [pc, #32]	; (8001434 <L6470_GetStatus+0x4c>)
 8001412:	f000 f9e9 	bl	80017e8 <L6470_DaisyChainCommand>
  
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2202      	movs	r2, #2
 800141a:	4907      	ldr	r1, [pc, #28]	; (8001438 <L6470_GetStatus+0x50>)
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fa2d 	bl	800187c <L6470_ExtractReturnedData>
 8001422:	4603      	mov	r3, r0
 8001424:	81fb      	strh	r3, [r7, #14]
  
  return ReceivedValue;
 8001426:	89fb      	ldrh	r3, [r7, #14]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200004fc 	.word	0x200004fc
 8001434:	2000050c 	.word	0x2000050c
 8001438:	20000510 	.word	0x20000510

0800143c <L6470_PrepareSetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af02      	add	r7, sp, #8
 8001442:	4603      	mov	r3, r0
 8001444:	603a      	str	r2, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	460b      	mov	r3, r1
 800144a:	71bb      	strb	r3, [r7, #6]
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 800144c:	79ba      	ldrb	r2, [r7, #6]
 800144e:	79f8      	ldrb	r0, [r7, #7]
 8001450:	2300      	movs	r3, #0
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	4613      	mov	r3, r2
 800145a:	2201      	movs	r2, #1
 800145c:	4903      	ldr	r1, [pc, #12]	; (800146c <L6470_PrepareSetParam+0x30>)
 800145e:	f7ff f8e1 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200004fc 	.word	0x200004fc

08001470 <L6470_PrepareGetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af02      	add	r7, sp, #8
 8001476:	4603      	mov	r3, r0
 8001478:	460a      	mov	r2, r1
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	4613      	mov	r3, r2
 800147e:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	79f8      	ldrb	r0, [r7, #7]
 8001484:	2200      	movs	r2, #0
 8001486:	9201      	str	r2, [sp, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	9200      	str	r2, [sp, #0]
 800148c:	2202      	movs	r2, #2
 800148e:	4903      	ldr	r1, [pc, #12]	; (800149c <L6470_PrepareGetParam+0x2c>)
 8001490:	f7ff f8c8 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200004fc 	.word	0x200004fc

080014a0 <L6470_PrepareRun>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareRun(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	4603      	mov	r3, r0
 80014a8:	603a      	str	r2, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	460b      	mov	r3, r1
 80014ae:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80014b0:	79ba      	ldrb	r2, [r7, #6]
 80014b2:	79f8      	ldrb	r0, [r7, #7]
 80014b4:	2300      	movs	r3, #0
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4613      	mov	r3, r2
 80014be:	2203      	movs	r2, #3
 80014c0:	4903      	ldr	r1, [pc, #12]	; (80014d0 <L6470_PrepareRun+0x30>)
 80014c2:	f7ff f8af 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200004fc 	.word	0x200004fc

080014d4 <L6470_PrepareStepClock>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareStepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af02      	add	r7, sp, #8
 80014da:	4603      	mov	r3, r0
 80014dc:	460a      	mov	r2, r1
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	4613      	mov	r3, r2
 80014e2:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80014e4:	79bb      	ldrb	r3, [r7, #6]
 80014e6:	79f8      	ldrb	r0, [r7, #7]
 80014e8:	2200      	movs	r2, #0
 80014ea:	9201      	str	r2, [sp, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	9200      	str	r2, [sp, #0]
 80014f0:	2204      	movs	r2, #4
 80014f2:	4903      	ldr	r1, [pc, #12]	; (8001500 <L6470_PrepareStepClock+0x2c>)
 80014f4:	f7ff f896 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200004fc 	.word	0x200004fc

08001504 <L6470_PrepareMove>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareMove(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af02      	add	r7, sp, #8
 800150a:	4603      	mov	r3, r0
 800150c:	603a      	str	r2, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	460b      	mov	r3, r1
 8001512:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8001514:	79ba      	ldrb	r2, [r7, #6]
 8001516:	79f8      	ldrb	r0, [r7, #7]
 8001518:	2300      	movs	r3, #0
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4613      	mov	r3, r2
 8001522:	2205      	movs	r2, #5
 8001524:	4903      	ldr	r1, [pc, #12]	; (8001534 <L6470_PrepareMove+0x30>)
 8001526:	f7ff f87d 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200004fc 	.word	0x200004fc

08001538 <L6470_PrepareGoTo>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af02      	add	r7, sp, #8
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8001544:	79f8      	ldrb	r0, [r7, #7]
 8001546:	2300      	movs	r3, #0
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	2300      	movs	r3, #0
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2206      	movs	r2, #6
 8001552:	4903      	ldr	r1, [pc, #12]	; (8001560 <L6470_PrepareGoTo+0x28>)
 8001554:	f7ff f866 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200004fc 	.word	0x200004fc

08001564 <L6470_PrepareGoToDir>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af02      	add	r7, sp, #8
 800156a:	4603      	mov	r3, r0
 800156c:	603a      	str	r2, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	460b      	mov	r3, r1
 8001572:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8001574:	79ba      	ldrb	r2, [r7, #6]
 8001576:	79f8      	ldrb	r0, [r7, #7]
 8001578:	2300      	movs	r3, #0
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	4613      	mov	r3, r2
 8001582:	2207      	movs	r2, #7
 8001584:	4903      	ldr	r1, [pc, #12]	; (8001594 <L6470_PrepareGoToDir+0x30>)
 8001586:	f7ff f84d 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200004fc 	.word	0x200004fc

08001598 <L6470_PrepareGoUntil>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af02      	add	r7, sp, #8
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
 80015a4:	460b      	mov	r3, r1
 80015a6:	71bb      	strb	r3, [r7, #6]
 80015a8:	4613      	mov	r3, r2
 80015aa:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 80015ac:	79b9      	ldrb	r1, [r7, #6]
 80015ae:	797b      	ldrb	r3, [r7, #5]
 80015b0:	79f8      	ldrb	r0, [r7, #7]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	9201      	str	r2, [sp, #4]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	460b      	mov	r3, r1
 80015ba:	2208      	movs	r2, #8
 80015bc:	4903      	ldr	r1, [pc, #12]	; (80015cc <L6470_PrepareGoUntil+0x34>)
 80015be:	f7ff f831 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200004fc 	.word	0x200004fc

080015d0 <L6470_PrepareReleaseSW>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
 80015da:	460b      	mov	r3, r1
 80015dc:	71bb      	strb	r3, [r7, #6]
 80015de:	4613      	mov	r3, r2
 80015e0:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80015e2:	79ba      	ldrb	r2, [r7, #6]
 80015e4:	797b      	ldrb	r3, [r7, #5]
 80015e6:	79f8      	ldrb	r0, [r7, #7]
 80015e8:	2100      	movs	r1, #0
 80015ea:	9101      	str	r1, [sp, #4]
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	4613      	mov	r3, r2
 80015f0:	2209      	movs	r2, #9
 80015f2:	4903      	ldr	r1, [pc, #12]	; (8001600 <L6470_PrepareReleaseSW+0x30>)
 80015f4:	f7ff f816 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200004fc 	.word	0x200004fc

08001604 <L6470_PrepareGoHome>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoHome(uint8_t L6470_Id)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af02      	add	r7, sp, #8
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800160e:	79f8      	ldrb	r0, [r7, #7]
 8001610:	2300      	movs	r3, #0
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	2300      	movs	r3, #0
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2300      	movs	r3, #0
 800161a:	220a      	movs	r2, #10
 800161c:	4903      	ldr	r1, [pc, #12]	; (800162c <L6470_PrepareGoHome+0x28>)
 800161e:	f7ff f801 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200004fc 	.word	0x200004fc

08001630 <L6470_PrepareGoMark>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoMark(uint8_t L6470_Id)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af02      	add	r7, sp, #8
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800163a:	79f8      	ldrb	r0, [r7, #7]
 800163c:	2300      	movs	r3, #0
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	2300      	movs	r3, #0
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2300      	movs	r3, #0
 8001646:	220b      	movs	r2, #11
 8001648:	4903      	ldr	r1, [pc, #12]	; (8001658 <L6470_PrepareGoMark+0x28>)
 800164a:	f7fe ffeb 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200004fc 	.word	0x200004fc

0800165c <L6470_PrepareResetPos>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetPos(uint8_t L6470_Id)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af02      	add	r7, sp, #8
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8001666:	79f8      	ldrb	r0, [r7, #7]
 8001668:	2300      	movs	r3, #0
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	2300      	movs	r3, #0
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2300      	movs	r3, #0
 8001672:	220c      	movs	r2, #12
 8001674:	4903      	ldr	r1, [pc, #12]	; (8001684 <L6470_PrepareResetPos+0x28>)
 8001676:	f7fe ffd5 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200004fc 	.word	0x200004fc

08001688 <L6470_PrepareResetDevice>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetDevice(uint8_t L6470_Id)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af02      	add	r7, sp, #8
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8001692:	79f8      	ldrb	r0, [r7, #7]
 8001694:	2300      	movs	r3, #0
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	2300      	movs	r3, #0
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2300      	movs	r3, #0
 800169e:	220d      	movs	r2, #13
 80016a0:	4903      	ldr	r1, [pc, #12]	; (80016b0 <L6470_PrepareResetDevice+0x28>)
 80016a2:	f7fe ffbf 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200004fc 	.word	0x200004fc

080016b4 <L6470_PrepareSoftStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftStop(uint8_t L6470_Id)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80016be:	79f8      	ldrb	r0, [r7, #7]
 80016c0:	2300      	movs	r3, #0
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	2300      	movs	r3, #0
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2300      	movs	r3, #0
 80016ca:	220e      	movs	r2, #14
 80016cc:	4903      	ldr	r1, [pc, #12]	; (80016dc <L6470_PrepareSoftStop+0x28>)
 80016ce:	f7fe ffa9 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200004fc 	.word	0x200004fc

080016e0 <L6470_PrepareHardStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardStop(uint8_t L6470_Id)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80016ea:	79f8      	ldrb	r0, [r7, #7]
 80016ec:	2300      	movs	r3, #0
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	2300      	movs	r3, #0
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2300      	movs	r3, #0
 80016f6:	220f      	movs	r2, #15
 80016f8:	4903      	ldr	r1, [pc, #12]	; (8001708 <L6470_PrepareHardStop+0x28>)
 80016fa:	f7fe ff93 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200004fc 	.word	0x200004fc

0800170c <L6470_PrepareSoftHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftHiZ(uint8_t L6470_Id)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af02      	add	r7, sp, #8
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8001716:	79f8      	ldrb	r0, [r7, #7]
 8001718:	2300      	movs	r3, #0
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	2300      	movs	r3, #0
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2300      	movs	r3, #0
 8001722:	2210      	movs	r2, #16
 8001724:	4903      	ldr	r1, [pc, #12]	; (8001734 <L6470_PrepareSoftHiZ+0x28>)
 8001726:	f7fe ff7d 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200004fc 	.word	0x200004fc

08001738 <L6470_PrepareHardHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardHiZ(uint8_t L6470_Id)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af02      	add	r7, sp, #8
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8001742:	79f8      	ldrb	r0, [r7, #7]
 8001744:	2300      	movs	r3, #0
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	2300      	movs	r3, #0
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2300      	movs	r3, #0
 800174e:	2211      	movs	r2, #17
 8001750:	4903      	ldr	r1, [pc, #12]	; (8001760 <L6470_PrepareHardHiZ+0x28>)
 8001752:	f7fe ff67 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200004fc 	.word	0x200004fc

08001764 <L6470_PrepareGetStatus>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetStatus(uint8_t L6470_Id)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af02      	add	r7, sp, #8
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 800176e:	79f8      	ldrb	r0, [r7, #7]
 8001770:	2300      	movs	r3, #0
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	2300      	movs	r3, #0
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2300      	movs	r3, #0
 800177a:	2212      	movs	r2, #18
 800177c:	4903      	ldr	r1, [pc, #12]	; (800178c <L6470_PrepareGetStatus+0x28>)
 800177e:	f7fe ff51 	bl	8000624 <L6470_PrepareAppCmdPkg>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200004fc 	.word	0x200004fc

08001790 <L6470_PerformPreparedApplicationCommand>:
  * @retval (uint8_t*)L6470_DaisyChainSpiRxStruct  The pointer to the structure
  *         containing returned values from each L6470 of the daisy chain for each
  *         sent SPI data.
  */
uint8_t* L6470_PerformPreparedApplicationCommand(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8001794:	4905      	ldr	r1, [pc, #20]	; (80017ac <L6470_PerformPreparedApplicationCommand+0x1c>)
 8001796:	4806      	ldr	r0, [pc, #24]	; (80017b0 <L6470_PerformPreparedApplicationCommand+0x20>)
 8001798:	f7fe ff68 	bl	800066c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800179c:	4905      	ldr	r1, [pc, #20]	; (80017b4 <L6470_PerformPreparedApplicationCommand+0x24>)
 800179e:	4803      	ldr	r0, [pc, #12]	; (80017ac <L6470_PerformPreparedApplicationCommand+0x1c>)
 80017a0:	f000 f822 	bl	80017e8 <L6470_DaisyChainCommand>
  
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <L6470_PerformPreparedApplicationCommand+0x24>)
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000050c 	.word	0x2000050c
 80017b0:	200004fc 	.word	0x200004fc
 80017b4:	20000510 	.word	0x20000510

080017b8 <L6470_ID>:
  *
  * @note   The position '1' is close the uC MISO.
  * @note   If the position is not allowable the returned value is 0xFF.
  */
uint8_t L6470_ID(uint8_t position)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
   if ((position == 0) || ((position > 0) && (position < L6470DAISYCHAINSIZE)))
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <L6470_ID+0x1c>
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d004      	beq.n	80017d8 <L6470_ID+0x20>
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <L6470_ID+0x20>
  {
    return (position);
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	e000      	b.n	80017da <L6470_ID+0x22>
  }
  else
  {
    return 0xFF;
 80017d8:	23ff      	movs	r3, #255	; 0xff
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <L6470_DaisyChainCommand>:
  * @brief  Send command to the L6470 daisy chain via SPI
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the matrix array of bytes to be sent to the daisy chain L6470
  * @param  pL6470_DaisyChainSpiRxStruct  Pointer to the matrix array of bytes to be received from the daisy chain L6470
  */
void L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint8_t spibyte;
  
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 80017f2:	4b1e      	ldr	r3, [pc, #120]	; (800186c <L6470_DaisyChainCommand+0x84>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
  
  /* Send all command bytes via SPI */
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
 80017fc:	e02d      	b.n	800185a <L6470_DaisyChainCommand+0x72>
  {
    /* Enable SPI communication for L6470 */
    L6470_nCS_LOW();
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <L6470_DaisyChainCommand+0x88>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <L6470_DaisyChainCommand+0x88>)
 8001804:	8911      	ldrh	r1, [r2, #8]
 8001806:	2200      	movs	r2, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f004 fce7 	bl	80061dc <HAL_GPIO_WritePin>
    
    /* Send the command via SPI */
    L6470_SPI_Communication(&HSPI, (pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	18d1      	adds	r1, r2, r3
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	441a      	add	r2, r3
 800181a:	230a      	movs	r3, #10
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2301      	movs	r3, #1
 8001820:	4814      	ldr	r0, [pc, #80]	; (8001874 <L6470_DaisyChainCommand+0x8c>)
 8001822:	f005 feb2 	bl	800758a <HAL_SPI_TransmitReceive>
    
    /* Allow the device to decode the received command */
    L6470_nCS_HIGH();
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <L6470_DaisyChainCommand+0x88>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4a11      	ldr	r2, [pc, #68]	; (8001870 <L6470_DaisyChainCommand+0x88>)
 800182c:	8911      	ldrh	r1, [r2, #8]
 800182e:	2201      	movs	r2, #1
 8001830:	4618      	mov	r0, r3
 8001832:	f004 fcd3 	bl	80061dc <HAL_GPIO_WritePin>
    
    _DELAY(TDISCS);
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <L6470_DaisyChainCommand+0x90>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	e006      	b.n	800184c <L6470_DaisyChainCommand+0x64>
 800183e:	bf00      	nop
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <L6470_DaisyChainCommand+0x90>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <L6470_DaisyChainCommand+0x90>)
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <L6470_DaisyChainCommand+0x90>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b13      	cmp	r3, #19
 8001852:	d9f4      	bls.n	800183e <L6470_DaisyChainCommand+0x56>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	3301      	adds	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	2b03      	cmp	r3, #3
 800185e:	d9ce      	bls.n	80017fe <L6470_DaisyChainCommand+0x16>
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000514 	.word	0x20000514
 8001870:	2000051c 	.word	0x2000051c
 8001874:	20000528 	.word	0x20000528
 8001878:	2000051a 	.word	0x2000051a

0800187c <L6470_ExtractReturnedData>:
  * @param    pL6470_DaisyChainSpiRxStruct  uint8_t-pointer to the matrix that
  *           contains the received data by SPI from the L6470 daisy chain.
  * @param    LengthByte  The number of bytes about the received value.
  */
uint32_t L6470_ExtractReturnedData(uint8_t L6470_Id, uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
  uint32_t value;
  uint8_t i;
  
  value = 0x000000;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8001890:	2301      	movs	r3, #1
 8001892:	72fb      	strb	r3, [r7, #11]
 8001894:	e013      	b.n	80018be <L6470_ExtractReturnedData+0x42>
  {
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8001896:	7afa      	ldrb	r2, [r7, #11]
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4413      	add	r3, r2
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	79ba      	ldrb	r2, [r7, #6]
 80018a6:	7afb      	ldrb	r3, [r7, #11]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80018b8:	7afb      	ldrb	r3, [r7, #11]
 80018ba:	3301      	adds	r3, #1
 80018bc:	72fb      	strb	r3, [r7, #11]
 80018be:	7afb      	ldrb	r3, [r7, #11]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d9e8      	bls.n	8001896 <L6470_ExtractReturnedData+0x1a>
  }
  
  return value;
 80018c4:	68fb      	ldr	r3, [r7, #12]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <L6470_CheckStatusRegisterFlag>:
  *
  * @retval state The flag state.
  */

uint8_t L6470_CheckStatusRegisterFlag(uint8_t L6470_Id, uint8_t L6470_StatusRegisterFlagId)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71bb      	strb	r3, [r7, #6]
  uint8_t state = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]
  
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_Id, L6470_STATUS_ID);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2118      	movs	r1, #24
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fb25 	bl	8000f3c <L6470_GetParam>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	b292      	uxth	r2, r2
 80018fa:	801a      	strh	r2, [r3, #0]
  
  switch(L6470_StatusRegisterFlagId)
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	2b0e      	cmp	r3, #14
 8001900:	f200 809a 	bhi.w	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
 8001904:	a201      	add	r2, pc, #4	; (adr r2, 800190c <L6470_CheckStatusRegisterFlag+0x38>)
 8001906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190a:	bf00      	nop
 800190c:	08001949 	.word	0x08001949
 8001910:	08001959 	.word	0x08001959
 8001914:	08001969 	.word	0x08001969
 8001918:	08001979 	.word	0x08001979
 800191c:	08001989 	.word	0x08001989
 8001920:	08001999 	.word	0x08001999
 8001924:	080019a9 	.word	0x080019a9
 8001928:	080019b9 	.word	0x080019b9
 800192c:	080019c9 	.word	0x080019c9
 8001930:	080019d9 	.word	0x080019d9
 8001934:	080019e9 	.word	0x080019e9
 8001938:	080019f9 	.word	0x080019f9
 800193c:	08001a09 	.word	0x08001a09
 8001940:	08001a19 	.word	0x08001a19
 8001944:	08001a29 	.word	0x08001a29
  {
  case HiZ_ID:
    state = pL6470_StatusRegister->HiZ;
 8001948:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	73fb      	strb	r3, [r7, #15]
    break;
 8001956:	e06f      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case BUSY_ID:
    state = pL6470_StatusRegister->BUSY;
 8001958:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	73fb      	strb	r3, [r7, #15]
    break;
 8001966:	e067      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case SW_F_ID:
    state = pL6470_StatusRegister->SW_F;
 8001968:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	73fb      	strb	r3, [r7, #15]
    break;
 8001976:	e05f      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case SW_EVN_ID:
    state = pL6470_StatusRegister->SW_EVN;
 8001978:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	73fb      	strb	r3, [r7, #15]
    break;
 8001986:	e057      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case DIR_ID:
    state = pL6470_StatusRegister->DIR;
 8001988:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001992:	b2db      	uxtb	r3, r3
 8001994:	73fb      	strb	r3, [r7, #15]
    break;
 8001996:	e04f      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case MOT_STATUS_ID:
    state = pL6470_StatusRegister->MOT_STATUS;
 8001998:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	73fb      	strb	r3, [r7, #15]
    break;
 80019a6:	e047      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case NOTPERF_CMD_ID:
    state = pL6470_StatusRegister->NOTPERF_CMD;
 80019a8:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	73fb      	strb	r3, [r7, #15]
    break;
 80019b6:	e03f      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case WRONG_CMD_ID:
    state = pL6470_StatusRegister->WRONG_CMD;
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	73fb      	strb	r3, [r7, #15]
    break;
 80019c6:	e037      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case UVLO_ID:
    state = pL6470_StatusRegister->UVLO;
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	785b      	ldrb	r3, [r3, #1]
 80019ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	73fb      	strb	r3, [r7, #15]
    break;
 80019d6:	e02f      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case TH_WRN_ID:
    state = pL6470_StatusRegister->TH_WRN;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	785b      	ldrb	r3, [r3, #1]
 80019de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	73fb      	strb	r3, [r7, #15]
    break;
 80019e6:	e027      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case TH_SD_ID:
    state = pL6470_StatusRegister->TH_SD;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	785b      	ldrb	r3, [r3, #1]
 80019ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	73fb      	strb	r3, [r7, #15]
    break;
 80019f6:	e01f      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case OCD_ID:
    state = pL6470_StatusRegister->OCD;
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	785b      	ldrb	r3, [r3, #1]
 80019fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	73fb      	strb	r3, [r7, #15]
    break;
 8001a06:	e017      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case STEP_LOSS_A_ID:
    state = pL6470_StatusRegister->STEP_LOSS_A;
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	785b      	ldrb	r3, [r3, #1]
 8001a0e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	73fb      	strb	r3, [r7, #15]
    break;
 8001a16:	e00f      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case STEP_LOSS_B_ID:
    state = pL6470_StatusRegister->STEP_LOSS_B;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	785b      	ldrb	r3, [r3, #1]
 8001a1e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	73fb      	strb	r3, [r7, #15]
    break;
 8001a26:	e007      	b.n	8001a38 <L6470_CheckStatusRegisterFlag+0x164>
  case SCK_MOD_ID:
    state = pL6470_StatusRegister->SCK_MOD;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <L6470_CheckStatusRegisterFlag+0x170>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	785b      	ldrb	r3, [r3, #1]
 8001a2e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	73fb      	strb	r3, [r7, #15]
    break;
 8001a36:	bf00      	nop
  }
  
  return state;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000094 	.word	0x20000094

08001a48 <L6470_Config>:
  * @brief  Configures the L6470 registers.
  * @param  StepperMotorDriverHandle_t* The pointer to the stepper motor driver handle structure.
  * @param  MotorParameterData_t* The pointer to the related parameter data structure.
  */
void L6470_Config(StepperMotorDriverHandle_t *StepperMotorDriverHandle, MotorParameterData_t *MotorParameterData)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  StepperMotorDriverHandle->Register.ACC = Step_s2_2_Acc(MotorParameterData->acc);
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a58:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5c:	f7ff f84e 	bl	8000afc <Step_s2_2_Acc>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	839a      	strh	r2, [r3, #28]
  StepperMotorDriverHandle->Register.DEC = Step_s2_2_Dec(MotorParameterData->dec);
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a72:	f7ff f869 	bl	8000b48 <Step_s2_2_Dec>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	83da      	strh	r2, [r3, #30]
  StepperMotorDriverHandle->Register.MAX_SPEED = Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a84:	eeb0 0a67 	vmov.f32	s0, s15
 8001a88:	f7ff f884 	bl	8000b94 <Step_s_2_MaxSpeed>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	841a      	strh	r2, [r3, #32]
  StepperMotorDriverHandle->Register.MIN_SPEED = Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9e:	f7ff f89f 	bl	8000be0 <Step_s_2_MinSpeed>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	845a      	strh	r2, [r3, #34]	; 0x22
  StepperMotorDriverHandle->Register.FS_SPD = Step_s_2_FsSpd(MotorParameterData->fsspd);
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab4:	f7ff f8ba 	bl	8000c2c <Step_s_2_FsSpd>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	849a      	strh	r2, [r3, #36]	; 0x24
  StepperMotorDriverHandle->Register.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ac6:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001d74 <L6470_Config+0x32c>
 8001aca:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	ed93 7a00 	vldr	s14, [r3]
 8001ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001adc:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ae0:	793b      	ldrb	r3, [r7, #4]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  StepperMotorDriverHandle->Register.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001af0:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001d74 <L6470_Config+0x32c>
 8001af4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	ed93 7a00 	vldr	s14, [r3]
 8001afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b06:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b0a:	793b      	ldrb	r3, [r7, #4]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  StepperMotorDriverHandle->Register.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001b1a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001d74 <L6470_Config+0x32c>
 8001b1e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b30:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b34:	793b      	ldrb	r3, [r7, #4]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  StepperMotorDriverHandle->Register.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001b44:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001d74 <L6470_Config+0x32c>
 8001b48:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	ed93 7a00 	vldr	s14, [r3]
 8001b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b5a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b5e:	793b      	ldrb	r3, [r7, #4]
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  StepperMotorDriverHandle->Register.INT_SPEED = Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b72:	f7ff f885 	bl	8000c80 <Step_s_2_IntSpeed>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  StepperMotorDriverHandle->Register.ST_SLP = s_Step_2_StSlp(MotorParameterData->stslp);
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b84:	eeb0 0a67 	vmov.f32	s0, s15
 8001b88:	f7ff f8a0 	bl	8000ccc <s_Step_2_StSlp>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  StepperMotorDriverHandle->Register.FN_SLP_ACC = s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba0:	f7ff f8ba 	bl	8000d18 <s_Step_2_FnSlpAcc>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  StepperMotorDriverHandle->Register.FN_SLP_DEC = s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb8:	f7ff f8d4 	bl	8000d64 <s_Step_2_FnSlpDec>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  StepperMotorDriverHandle->Register.K_THERM = MotorParameterData->kterm;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  StepperMotorDriverHandle->Register.OCD_TH = mA_2_OcdTh(MotorParameterData->ocdth);
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bdc:	f7ff f8e8 	bl	8000db0 <mA_2_OcdTh>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  StepperMotorDriverHandle->Register.STALL_TH = mA_2_StallTh(MotorParameterData->stallth);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf4:	f7ff f92c 	bl	8000e50 <mA_2_StallTh>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  StepperMotorDriverHandle->Register.STEP_MODE = MotorParameterData->step_sel;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  StepperMotorDriverHandle->Register.ALARM_EN = MotorParameterData->alarmen;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  StepperMotorDriverHandle->Register.CONFIG = MotorParameterData->config;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	86da      	strh	r2, [r3, #54]	; 0x36
  
  /* Write the L6470 registers with the prepared data */
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ACC_ID, StepperMotorDriverHandle->Register.ACC);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	7810      	ldrb	r0, [r2, #0]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	8b92      	ldrh	r2, [r2, #28]
 8001c32:	2104      	movs	r1, #4
 8001c34:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_DEC_ID, StepperMotorDriverHandle->Register.DEC);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	7810      	ldrb	r0, [r2, #0]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	8bd2      	ldrh	r2, [r2, #30]
 8001c44:	2105      	movs	r1, #5
 8001c46:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MAX_SPEED_ID, StepperMotorDriverHandle->Register.MAX_SPEED);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	7810      	ldrb	r0, [r2, #0]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	8c12      	ldrh	r2, [r2, #32]
 8001c56:	2106      	movs	r1, #6
 8001c58:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MIN_SPEED_ID, StepperMotorDriverHandle->Register.MIN_SPEED);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	7810      	ldrb	r0, [r2, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001c68:	2107      	movs	r1, #7
 8001c6a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FS_SPD_ID, StepperMotorDriverHandle->Register.FS_SPD);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	7810      	ldrb	r0, [r2, #0]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001c7a:	2108      	movs	r1, #8
 8001c7c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_HOLD_ID, StepperMotorDriverHandle->Register.KVAL_HOLD);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	7810      	ldrb	r0, [r2, #0]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001c8e:	2109      	movs	r1, #9
 8001c90:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_RUN_ID, StepperMotorDriverHandle->Register.KVAL_RUN);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	7810      	ldrb	r0, [r2, #0]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8001ca2:	210a      	movs	r1, #10
 8001ca4:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_ACC_ID, StepperMotorDriverHandle->Register.KVAL_ACC);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	7810      	ldrb	r0, [r2, #0]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8001cb6:	210b      	movs	r1, #11
 8001cb8:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_DEC_ID, StepperMotorDriverHandle->Register.KVAL_DEC);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	7810      	ldrb	r0, [r2, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8001cca:	210c      	movs	r1, #12
 8001ccc:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_INT_SPEED_ID, StepperMotorDriverHandle->Register.INT_SPEED);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	7810      	ldrb	r0, [r2, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8001cdc:	210d      	movs	r1, #13
 8001cde:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ST_SLP_ID, StepperMotorDriverHandle->Register.ST_SLP);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	7810      	ldrb	r0, [r2, #0]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001cf0:	210e      	movs	r1, #14
 8001cf2:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_ACC_ID, StepperMotorDriverHandle->Register.FN_SLP_ACC);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	7810      	ldrb	r0, [r2, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8001d04:	210f      	movs	r1, #15
 8001d06:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_DEC_ID, StepperMotorDriverHandle->Register.FN_SLP_DEC);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	7810      	ldrb	r0, [r2, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8001d18:	2110      	movs	r1, #16
 8001d1a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_K_THERM_ID, StepperMotorDriverHandle->Register.K_THERM);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	7810      	ldrb	r0, [r2, #0]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8001d2c:	2111      	movs	r1, #17
 8001d2e:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_OCD_TH_ID, StepperMotorDriverHandle->Register.OCD_TH);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	7810      	ldrb	r0, [r2, #0]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8001d40:	2113      	movs	r1, #19
 8001d42:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STALL_TH_ID, StepperMotorDriverHandle->Register.STALL_TH);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	7810      	ldrb	r0, [r2, #0]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001d54:	2114      	movs	r1, #20
 8001d56:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STEP_MODE_ID, StepperMotorDriverHandle->Register.STEP_MODE);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	7810      	ldrb	r0, [r2, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8001d68:	2115      	movs	r1, #21
 8001d6a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ALARM_EN_ID, StepperMotorDriverHandle->Register.ALARM_EN);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	e001      	b.n	8001d78 <L6470_Config+0x330>
 8001d74:	43800000 	.word	0x43800000
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	7810      	ldrb	r0, [r2, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001d82:	2116      	movs	r1, #22
 8001d84:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_CONFIG_ID, StepperMotorDriverHandle->Register.CONFIG);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	7810      	ldrb	r0, [r2, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8001d94:	2117      	movs	r1, #23
 8001d96:	4798      	blx	r3
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00b      	beq.n	8001dc8 <LAN8742_RegisterBusIO+0x28>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <LAN8742_RegisterBusIO+0x28>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <LAN8742_RegisterBusIO+0x28>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dcc:	e014      	b.n	8001df8 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d17c      	bne.n	8001f1e <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2220      	movs	r2, #32
 8001e36:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	e01c      	b.n	8001e78 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f107 0208 	add.w	r2, r7, #8
 8001e46:	2112      	movs	r1, #18
 8001e48:	6978      	ldr	r0, [r7, #20]
 8001e4a:	4798      	blx	r3
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	da03      	bge.n	8001e5a <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001e52:	f06f 0304 	mvn.w	r3, #4
 8001e56:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001e58:	e00b      	b.n	8001e72 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d105      	bne.n	8001e72 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
         break;
 8001e70:	e005      	b.n	8001e7e <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b1f      	cmp	r3, #31
 8001e7c:	d9df      	bls.n	8001e3e <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b1f      	cmp	r3, #31
 8001e84:	d902      	bls.n	8001e8c <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001e86:	f06f 0302 	mvn.w	r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d145      	bne.n	8001f1e <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6810      	ldr	r0, [r2, #0]
 8001e9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4798      	blx	r3
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db37      	blt.n	8001f18 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6810      	ldr	r0, [r2, #0]
 8001eb0:	f107 0208 	add.w	r2, r7, #8
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4798      	blx	r3
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db28      	blt.n	8001f10 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	4798      	blx	r3
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001ec8:	e01c      	b.n	8001f04 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	4798      	blx	r3
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001edc:	d80e      	bhi.n	8001efc <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6810      	ldr	r0, [r2, #0]
 8001ee6:	f107 0208 	add.w	r2, r7, #8
 8001eea:	2100      	movs	r1, #0
 8001eec:	4798      	blx	r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	da07      	bge.n	8001f04 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8001ef4:	f06f 0304 	mvn.w	r3, #4
 8001ef8:	613b      	str	r3, [r7, #16]
                 break;
 8001efa:	e010      	b.n	8001f1e <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001efc:	f06f 0301 	mvn.w	r3, #1
 8001f00:	613b      	str	r3, [r7, #16]
               break;
 8001f02:	e00c      	b.n	8001f1e <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1dd      	bne.n	8001eca <LAN8742_Init+0xc6>
 8001f0e:	e006      	b.n	8001f1e <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001f10:	f06f 0304 	mvn.w	r3, #4
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	e002      	b.n	8001f1e <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001f18:	f06f 0303 	mvn.w	r3, #3
 8001f1c:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d112      	bne.n	8001f4a <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4798      	blx	r3
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001f2e:	bf00      	nop
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4798      	blx	r3
 8001f36:	4603      	mov	r3, r0
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f42:	d9f5      	bls.n	8001f30 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 }
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6810      	ldr	r0, [r2, #0]
 8001f68:	f107 020c 	add.w	r2, r7, #12
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	4798      	blx	r3
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	da02      	bge.n	8001f7c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001f76:	f06f 0304 	mvn.w	r3, #4
 8001f7a:	e06e      	b.n	800205a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6810      	ldr	r0, [r2, #0]
 8001f84:	f107 020c 	add.w	r2, r7, #12
 8001f88:	2101      	movs	r1, #1
 8001f8a:	4798      	blx	r3
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	da02      	bge.n	8001f98 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001f92:	f06f 0304 	mvn.w	r3, #4
 8001f96:	e060      	b.n	800205a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e059      	b.n	800205a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6810      	ldr	r0, [r2, #0]
 8001fae:	f107 020c 	add.w	r2, r7, #12
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4798      	blx	r3
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	da02      	bge.n	8001fc2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001fbc:	f06f 0304 	mvn.w	r3, #4
 8001fc0:	e04b      	b.n	800205a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d11b      	bne.n	8002004 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <LAN8742_GetLinkState+0x90>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e03a      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e033      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	e02c      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002000:	2305      	movs	r3, #5
 8002002:	e02a      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6810      	ldr	r0, [r2, #0]
 800200c:	f107 020c 	add.w	r2, r7, #12
 8002010:	211f      	movs	r1, #31
 8002012:	4798      	blx	r3
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	da02      	bge.n	8002020 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800201a:	f06f 0304 	mvn.w	r3, #4
 800201e:	e01c      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800202a:	2306      	movs	r3, #6
 800202c:	e015      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 031c 	and.w	r3, r3, #28
 8002034:	2b18      	cmp	r3, #24
 8002036:	d101      	bne.n	800203c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002038:	2302      	movs	r3, #2
 800203a:	e00e      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 031c 	and.w	r3, r3, #28
 8002042:	2b08      	cmp	r3, #8
 8002044:	d101      	bne.n	800204a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002046:	2303      	movs	r3, #3
 8002048:	e007      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 031c 	and.w	r3, r3, #28
 8002050:	2b14      	cmp	r3, #20
 8002052:	d101      	bne.n	8002058 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002054:	2304      	movs	r3, #4
 8002056:	e000      	b.n	800205a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002058:	2305      	movs	r3, #5
    }
  }
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <BSP_NUCLEO_GPIO_Init>:
  *         - nBUSY_SYNC (Input with IRQ on falling edge)
  *         - nFLAG (Input with IRQ on falling edge)
  *         - one or more nCS (Output Push-Pull)
  */
void BSP_NUCLEO_GPIO_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  uint8_t ExpBrd;
  
  /* Initialize X-NUCLEO-IHM02A1 nSTBY_nRST pin */
  GPIO_CLK_ENABLE(L6470_nSTBY_nRST_GPIO.gpio_clk_enable);
 800206a:	4b46      	ldr	r3, [pc, #280]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 800206c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800206e:	4b46      	ldr	r3, [pc, #280]	; (8002188 <BSP_NUCLEO_GPIO_Init+0x124>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4944      	ldr	r1, [pc, #272]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 8002074:	4313      	orrs	r3, r2
 8002076:	630b      	str	r3, [r1, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nSTBY_nRST_GPIO.pin;
 8002078:	4b43      	ldr	r3, [pc, #268]	; (8002188 <BSP_NUCLEO_GPIO_Init+0x124>)
 800207a:	891b      	ldrh	r3, [r3, #8]
 800207c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800207e:	2311      	movs	r3, #17
 8002080:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(L6470_nSTBY_nRST_GPIO.port, &GPIO_InitStruct);
 800208a:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <BSP_NUCLEO_GPIO_Init+0x124>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	463a      	mov	r2, r7
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f003 feee 	bl	8005e74 <HAL_GPIO_Init>
  
  /* Initialize the X-NUCLEO-IHM02A1 nBUSY_SYNC pin */
  GPIO_CLK_ENABLE(L6470_nBUSY_SYNC_GPIO.gpio_clk_enable);
 8002098:	4b3a      	ldr	r3, [pc, #232]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 800209a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800209c:	4b3b      	ldr	r3, [pc, #236]	; (800218c <BSP_NUCLEO_GPIO_Init+0x128>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4938      	ldr	r1, [pc, #224]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	630b      	str	r3, [r1, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nBUSY_SYNC_GPIO.pin;
 80020a6:	4b39      	ldr	r3, [pc, #228]	; (800218c <BSP_NUCLEO_GPIO_Init+0x128>)
 80020a8:	891b      	ldrh	r3, [r3, #8]
 80020aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020ac:	4b38      	ldr	r3, [pc, #224]	; (8002190 <BSP_NUCLEO_GPIO_Init+0x12c>)
 80020ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(L6470_nBUSY_SYNC_GPIO.port, &GPIO_InitStruct);
 80020b4:	4b35      	ldr	r3, [pc, #212]	; (800218c <BSP_NUCLEO_GPIO_Init+0x128>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	463a      	mov	r2, r7
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f003 fed9 	bl	8005e74 <HAL_GPIO_Init>

  /* Sets the priority grouping field */
  HAL_NVIC_SetPriority(L6470_nBUSY_SYNC_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2006      	movs	r0, #6
 80020c8:	f002 fd09 	bl	8004ade <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(L6470_nBUSY_SYNC_IRQn);

  /* Initialize X-NUCLEO-IHM02A1 nFLAG pin */
  GPIO_CLK_ENABLE(L6470_nFLAG_GPIO.gpio_clk_enable);
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 80020ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d0:	4b30      	ldr	r3, [pc, #192]	; (8002194 <BSP_NUCLEO_GPIO_Init+0x130>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	492b      	ldr	r1, [pc, #172]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	630b      	str	r3, [r1, #48]	; 0x30
  GPIO_InitStruct.Pin = L6470_nFLAG_GPIO.pin;
 80020da:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <BSP_NUCLEO_GPIO_Init+0x130>)
 80020dc:	891b      	ldrh	r3, [r3, #8]
 80020de:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020e0:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <BSP_NUCLEO_GPIO_Init+0x12c>)
 80020e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(L6470_nFLAG_GPIO.port, &GPIO_InitStruct);
 80020e8:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <BSP_NUCLEO_GPIO_Init+0x130>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	463a      	mov	r2, r7
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f003 febf 	bl	8005e74 <HAL_GPIO_Init>

  /* Sets the priority grouping field */
  HAL_NVIC_SetPriority(L6470_nFLAG_IRQn, 0, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2100      	movs	r1, #0
 80020fa:	2007      	movs	r0, #7
 80020fc:	f002 fcef 	bl	8004ade <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(L6470_nFLAG_IRQn);
  
  /* Initialize X-NUCLEO-IHM02A1 nCS pin */
  for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); ExpBrd++)
 8002100:	2000      	movs	r0, #0
 8002102:	f000 fa8d 	bl	8002620 <EXPBRD_ID>
 8002106:	4603      	mov	r3, r0
 8002108:	75fb      	strb	r3, [r7, #23]
 800210a:	e02d      	b.n	8002168 <BSP_NUCLEO_GPIO_Init+0x104>
  {
    GPIO_CLK_ENABLE(L6470_nCS_GPIO_Array[ExpBrd].gpio_clk_enable);
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 800210e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002110:	7dfa      	ldrb	r2, [r7, #23]
 8002112:	4821      	ldr	r0, [pc, #132]	; (8002198 <BSP_NUCLEO_GPIO_Init+0x134>)
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4403      	add	r3, r0
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a18      	ldr	r2, [pc, #96]	; (8002184 <BSP_NUCLEO_GPIO_Init+0x120>)
 8002122:	430b      	orrs	r3, r1
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = L6470_nCS_GPIO_Array[ExpBrd].pin;
 8002126:	7dfa      	ldrb	r2, [r7, #23]
 8002128:	491b      	ldr	r1, [pc, #108]	; (8002198 <BSP_NUCLEO_GPIO_Init+0x134>)
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	3308      	adds	r3, #8
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(L6470_nCS_GPIO_Array[ExpBrd].port, &GPIO_InitStruct);
 8002146:	7dfa      	ldrb	r2, [r7, #23]
 8002148:	4913      	ldr	r1, [pc, #76]	; (8002198 <BSP_NUCLEO_GPIO_Init+0x134>)
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	3304      	adds	r3, #4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	463a      	mov	r2, r7
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fe89 	bl	8005e74 <HAL_GPIO_Init>
  for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); ExpBrd++)
 8002162:	7dfb      	ldrb	r3, [r7, #23]
 8002164:	3301      	adds	r3, #1
 8002166:	75fb      	strb	r3, [r7, #23]
 8002168:	2000      	movs	r0, #0
 800216a:	f000 fa59 	bl	8002620 <EXPBRD_ID>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
 8002172:	7dfb      	ldrb	r3, [r7, #23]
 8002174:	4293      	cmp	r3, r2
 8002176:	d9c9      	bls.n	800210c <BSP_NUCLEO_GPIO_Init+0xa8>
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	20000328 	.word	0x20000328
 800218c:	20000334 	.word	0x20000334
 8002190:	10210000 	.word	0x10210000
 8002194:	20000340 	.word	0x20000340
 8002198:	2000034c 	.word	0x2000034c

0800219c <BSP_L6470_Init>:

/**
  * @brief  Initialize the X-NUCLEO-IHM02A1 mounted board and theirs L6470 devices.
  */
void BSP_L6470_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
  uint8_t ExpBrd;                     /* to index the expansion board to be addressed */
  uint8_t L6470_Id;                   /* to index the L6470 to be addressed */
  
  /* Disable the L6470 */
  L6470_DISABLE();
 80021a2:	4b28      	ldr	r3, [pc, #160]	; (8002244 <BSP_L6470_Init+0xa8>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a27      	ldr	r2, [pc, #156]	; (8002244 <BSP_L6470_Init+0xa8>)
 80021a8:	8911      	ldrh	r1, [r2, #8]
 80021aa:	2200      	movs	r2, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f004 f815 	bl	80061dc <HAL_GPIO_WritePin>
  
  /* Enable the L6470 */
  L6470_ENABLE();
 80021b2:	4b24      	ldr	r3, [pc, #144]	; (8002244 <BSP_L6470_Init+0xa8>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4a23      	ldr	r2, [pc, #140]	; (8002244 <BSP_L6470_Init+0xa8>)
 80021b8:	8911      	ldrh	r1, [r2, #8]
 80021ba:	2201      	movs	r2, #1
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 f80d 	bl	80061dc <HAL_GPIO_WritePin>
  
  /* Initialize all mounted L6470 for each stacked X-NUCLEO-IHM02A1 */
  for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); ExpBrd++)
 80021c2:	2000      	movs	r0, #0
 80021c4:	f000 fa2c 	bl	8002620 <EXPBRD_ID>
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
 80021cc:	e027      	b.n	800221e <BSP_L6470_Init+0x82>
  {
    /* Select the used GPIO for the L6470 nCS mounted on the addressed X-NUCLEO-IHM02A1 */
    BSP_Select(ExpBrd);
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fa37 	bl	8002644 <BSP_Select>
    
    /* Disable SPI communication for L6470 */
    L6470_nCS_HIGH();
 80021d6:	4b1c      	ldr	r3, [pc, #112]	; (8002248 <BSP_L6470_Init+0xac>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <BSP_L6470_Init+0xac>)
 80021dc:	8911      	ldrh	r1, [r2, #8]
 80021de:	2201      	movs	r2, #1
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fffb 	bl	80061dc <HAL_GPIO_WritePin>
    
    for (L6470_Id = L6470_ID(0); L6470_Id<=L6470_ID(L6470DAISYCHAINSIZE-1); L6470_Id++)
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7ff fae6 	bl	80017b8 <L6470_ID>
 80021ec:	4603      	mov	r3, r0
 80021ee:	71bb      	strb	r3, [r7, #6]
 80021f0:	e00a      	b.n	8002208 <BSP_L6470_Init+0x6c>
    {
      /* Reset the devices */
      L6470_ResetDevice(L6470_Id);
 80021f2:	79bb      	ldrb	r3, [r7, #6]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff f84d 	bl	8001294 <L6470_ResetDevice>
      
      /* Reset all Status Register Flags */
      L6470_GetStatus(L6470_Id);
 80021fa:	79bb      	ldrb	r3, [r7, #6]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff f8f3 	bl	80013e8 <L6470_GetStatus>
    for (L6470_Id = L6470_ID(0); L6470_Id<=L6470_ID(L6470DAISYCHAINSIZE-1); L6470_Id++)
 8002202:	79bb      	ldrb	r3, [r7, #6]
 8002204:	3301      	adds	r3, #1
 8002206:	71bb      	strb	r3, [r7, #6]
 8002208:	2000      	movs	r0, #0
 800220a:	f7ff fad5 	bl	80017b8 <L6470_ID>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	79bb      	ldrb	r3, [r7, #6]
 8002214:	4293      	cmp	r3, r2
 8002216:	d9ec      	bls.n	80021f2 <BSP_L6470_Init+0x56>
  for (ExpBrd = EXPBRD_ID(0); ExpBrd <= EXPBRD_ID(EXPBRD_MOUNTED_NR-1); ExpBrd++)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	3301      	adds	r3, #1
 800221c:	71fb      	strb	r3, [r7, #7]
 800221e:	2000      	movs	r0, #0
 8002220:	f000 f9fe 	bl	8002620 <EXPBRD_ID>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	4293      	cmp	r3, r2
 800222c:	d9cf      	bls.n	80021ce <BSP_L6470_Init+0x32>
    }
  }
 
  /* Select the default X-NUCLEO-IHM02A1 to be addressed by SPI */
  BSP_Select(EXPBRD_ID(0));
 800222e:	2000      	movs	r0, #0
 8002230:	f000 f9f6 	bl	8002620 <EXPBRD_ID>
 8002234:	4603      	mov	r3, r0
 8002236:	4618      	mov	r0, r3
 8002238:	f000 fa04 	bl	8002644 <BSP_Select>
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000328 	.word	0x20000328
 8002248:	2000051c 	.word	0x2000051c

0800224c <BSP_L6470_SetParam>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_RegId     The L6470 Register identifier
  * @param  Value           The new value for the L6470 Register
  */
void BSP_L6470_SetParam(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4603      	mov	r3, r0
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	460b      	mov	r3, r1
 800225a:	71bb      	strb	r3, [r7, #6]
 800225c:	4613      	mov	r3, r2
 800225e:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f9ee 	bl	8002644 <BSP_Select>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <BSP_L6470_SetParam+0x2e>
  {
    /* Perform the related L6470 Application Command */
    L6470_SetParam(L6470_Id, L6470_RegId, Value);
 800226e:	7979      	ldrb	r1, [r7, #5]
 8002270:	79bb      	ldrb	r3, [r7, #6]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fe3b 	bl	8000ef0 <L6470_SetParam>
  }
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <BSP_L6470_GetParam>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_RegId     The L6470 Register identifier
  * @retval uint32_t        The value of the L6470 Register
  */
uint32_t BSP_L6470_GetParam(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	71fb      	strb	r3, [r7, #7]
 800228c:	460b      	mov	r3, r1
 800228e:	71bb      	strb	r3, [r7, #6]
 8002290:	4613      	mov	r3, r2
 8002292:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f9d4 	bl	8002644 <BSP_Select>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <BSP_L6470_GetParam+0x30>
  {
    /* Perform the related L6470 Application Command */
    return L6470_GetParam(L6470_Id, L6470_RegId);
 80022a2:	797a      	ldrb	r2, [r7, #5]
 80022a4:	79bb      	ldrb	r3, [r7, #6]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fe47 	bl	8000f3c <L6470_GetParam>
 80022ae:	4603      	mov	r3, r0
 80022b0:	e000      	b.n	80022b4 <BSP_L6470_GetParam+0x32>
  }
  else
    return 0xFF;
 80022b2:	23ff      	movs	r3, #255	; 0xff
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <BSP_L6470_Run>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_DirId     The L6470 Direction identifier
  * @param  Speed           The new value about the speed
  */
void BSP_L6470_Run(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
 80022c8:	460b      	mov	r3, r1
 80022ca:	71bb      	strb	r3, [r7, #6]
 80022cc:	4613      	mov	r3, r2
 80022ce:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f9b6 	bl	8002644 <BSP_Select>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <BSP_L6470_Run+0x2e>
  {
    /* Perform the related L6470 Application Command */
    L6470_Run(L6470_Id, L6470_DirId, Speed);
 80022de:	7979      	ldrb	r1, [r7, #5]
 80022e0:	79bb      	ldrb	r3, [r7, #6]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fe61 	bl	8000fac <L6470_Run>
  }
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <BSP_L6470_StepClock>:
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_DirId     The L6470 Direction identifier
  */
void BSP_L6470_StepClock(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	71fb      	strb	r3, [r7, #7]
 80022fc:	460b      	mov	r3, r1
 80022fe:	71bb      	strb	r3, [r7, #6]
 8002300:	4613      	mov	r3, r2
 8002302:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f99c 	bl	8002644 <BSP_Select>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <BSP_L6470_StepClock+0x2c>
  {
    /* Perform the related L6470 Application Command */
    L6470_StepClock(L6470_Id, L6470_DirId);
 8002312:	797a      	ldrb	r2, [r7, #5]
 8002314:	79bb      	ldrb	r3, [r7, #6]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fe6d 	bl	8000ff8 <L6470_StepClock>
  }
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <BSP_L6470_Move>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_DirId     The L6470 Direction identifier
  * @param  N_Step          The number of step about the movement to be performed
  */
void BSP_L6470_Move(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
 8002332:	460b      	mov	r3, r1
 8002334:	71bb      	strb	r3, [r7, #6]
 8002336:	4613      	mov	r3, r2
 8002338:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f000 f981 	bl	8002644 <BSP_Select>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <BSP_L6470_Move+0x2e>
  {
    /* Perform the related L6470 Application Command */
    L6470_Move(L6470_Id, L6470_DirId, N_Step);
 8002348:	7979      	ldrb	r1, [r7, #5]
 800234a:	79bb      	ldrb	r3, [r7, #6]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fe76 	bl	8001040 <L6470_Move>
  }
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <BSP_L6470_GoTo>:
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  AbsPos          The L6470 absolute position to be reached
  */
void BSP_L6470_GoTo(uint8_t ExpBrd_Id, uint8_t L6470_Id, uint32_t AbsPos)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	603a      	str	r2, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
 8002368:	460b      	mov	r3, r1
 800236a:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f968 	bl	8002644 <BSP_Select>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <BSP_L6470_GoTo+0x28>
  {
    /* Perform the related L6470 Application Command */
    L6470_GoTo(L6470_Id, AbsPos);
 800237a:	79bb      	ldrb	r3, [r7, #6]
 800237c:	6839      	ldr	r1, [r7, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fe84 	bl	800108c <L6470_GoTo>
  }
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <BSP_L6470_GoToDir>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_DirId     The L6470 Direction identifier
  * @param  AbsPos          The L6470 absolute position to be reached
  */
void BSP_L6470_GoToDir(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
 8002398:	460b      	mov	r3, r1
 800239a:	71bb      	strb	r3, [r7, #6]
 800239c:	4613      	mov	r3, r2
 800239e:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f94e 	bl	8002644 <BSP_Select>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <BSP_L6470_GoToDir+0x2e>
  {
    /* Perform the related L6470 Application Command */
    L6470_GoToDir(L6470_Id, L6470_DirId, AbsPos);
 80023ae:	7979      	ldrb	r1, [r7, #5]
 80023b0:	79bb      	ldrb	r3, [r7, #6]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe fe8f 	bl	80010d8 <L6470_GoToDir>
  }
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <BSP_L6470_GoUntil>:
  * @param  L6470_ActId     The L6470 Action identifier about ABS_POS register
  * @param  L6470_DirId     The L6470 Direction identifier
  * @param  Speed           The new value about the speed
  */
void BSP_L6470_GoUntil(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 80023c2:	b590      	push	{r4, r7, lr}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4604      	mov	r4, r0
 80023ca:	4608      	mov	r0, r1
 80023cc:	4611      	mov	r1, r2
 80023ce:	461a      	mov	r2, r3
 80023d0:	4623      	mov	r3, r4
 80023d2:	71fb      	strb	r3, [r7, #7]
 80023d4:	4603      	mov	r3, r0
 80023d6:	71bb      	strb	r3, [r7, #6]
 80023d8:	460b      	mov	r3, r1
 80023da:	717b      	strb	r3, [r7, #5]
 80023dc:	4613      	mov	r3, r2
 80023de:	713b      	strb	r3, [r7, #4]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f92e 	bl	8002644 <BSP_Select>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <BSP_L6470_GoUntil+0x38>
  {
    /* Perform the related L6470 Application Command */
    L6470_GoUntil(L6470_Id, L6470_ActId, L6470_DirId, Speed);
 80023ee:	793a      	ldrb	r2, [r7, #4]
 80023f0:	7979      	ldrb	r1, [r7, #5]
 80023f2:	79b8      	ldrb	r0, [r7, #6]
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	f7fe fe99 	bl	800112c <L6470_GoUntil>
  }
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd90      	pop	{r4, r7, pc}

08002402 <BSP_L6470_ReleaseSW>:
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @param  L6470_ActId     The L6470 Action identifier about ABS_POS register
  * @param  L6470_DirId     The L6470 Direction identifier
  */
void BSP_L6470_ReleaseSW(uint8_t ExpBrd_Id, uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 8002402:	b590      	push	{r4, r7, lr}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	4604      	mov	r4, r0
 800240a:	4608      	mov	r0, r1
 800240c:	4611      	mov	r1, r2
 800240e:	461a      	mov	r2, r3
 8002410:	4623      	mov	r3, r4
 8002412:	71fb      	strb	r3, [r7, #7]
 8002414:	4603      	mov	r3, r0
 8002416:	71bb      	strb	r3, [r7, #6]
 8002418:	460b      	mov	r3, r1
 800241a:	717b      	strb	r3, [r7, #5]
 800241c:	4613      	mov	r3, r2
 800241e:	713b      	strb	r3, [r7, #4]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f90e 	bl	8002644 <BSP_Select>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <BSP_L6470_ReleaseSW+0x38>
  {
    /* Perform the related L6470 Application Command */
    L6470_ReleaseSW(L6470_Id, L6470_ActId, L6470_DirId);
 800242e:	793a      	ldrb	r2, [r7, #4]
 8002430:	7979      	ldrb	r1, [r7, #5]
 8002432:	79bb      	ldrb	r3, [r7, #6]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fea1 	bl	800117c <L6470_ReleaseSW>
  }
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bd90      	pop	{r4, r7, pc}

08002442 <BSP_L6470_GoHome>:
  * @brief  Perform the L6470_GoHome Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_GoHome(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	460a      	mov	r2, r1
 800244c:	71fb      	strb	r3, [r7, #7]
 800244e:	4613      	mov	r3, r2
 8002450:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	4618      	mov	r0, r3
 8002456:	f000 f8f5 	bl	8002644 <BSP_Select>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <BSP_L6470_GoHome+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_GoHome(L6470_Id);
 8002460:	79bb      	ldrb	r3, [r7, #6]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe feb0 	bl	80011c8 <L6470_GoHome>
  }
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <BSP_L6470_GoMark>:
  * @brief  Perform the L6470_GoMark Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_GoMark(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	460a      	mov	r2, r1
 800247a:	71fb      	strb	r3, [r7, #7]
 800247c:	4613      	mov	r3, r2
 800247e:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f8de 	bl	8002644 <BSP_Select>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <BSP_L6470_GoMark+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_GoMark(L6470_Id);
 800248e:	79bb      	ldrb	r3, [r7, #6]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe febb 	bl	800120c <L6470_GoMark>
  }
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <BSP_L6470_ResetPos>:
  * @brief  Perform the L6470_ResetPos Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_ResetPos(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	460a      	mov	r2, r1
 80024a8:	71fb      	strb	r3, [r7, #7]
 80024aa:	4613      	mov	r3, r2
 80024ac:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f8c7 	bl	8002644 <BSP_Select>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <BSP_L6470_ResetPos+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_ResetPos(L6470_Id);
 80024bc:	79bb      	ldrb	r3, [r7, #6]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fec6 	bl	8001250 <L6470_ResetPos>
  }
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <BSP_L6470_ResetDevice>:
  * @brief  Perform the L6470_ResetDevice Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_ResetDevice(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	460a      	mov	r2, r1
 80024d6:	71fb      	strb	r3, [r7, #7]
 80024d8:	4613      	mov	r3, r2
 80024da:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f8b0 	bl	8002644 <BSP_Select>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <BSP_L6470_ResetDevice+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_ResetDevice(L6470_Id);
 80024ea:	79bb      	ldrb	r3, [r7, #6]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fed1 	bl	8001294 <L6470_ResetDevice>
  }
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <BSP_L6470_SoftStop>:
  * @brief  Perform the L6470_SoftStop Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_SoftStop(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	460a      	mov	r2, r1
 8002504:	71fb      	strb	r3, [r7, #7]
 8002506:	4613      	mov	r3, r2
 8002508:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 f899 	bl	8002644 <BSP_Select>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <BSP_L6470_SoftStop+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_SoftStop(L6470_Id);
 8002518:	79bb      	ldrb	r3, [r7, #6]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fedc 	bl	80012d8 <L6470_SoftStop>
  }
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <BSP_L6470_HardStop>:
  * @brief  Perform the L6470_HardStop Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_HardStop(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	460a      	mov	r2, r1
 8002532:	71fb      	strb	r3, [r7, #7]
 8002534:	4613      	mov	r3, r2
 8002536:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f882 	bl	8002644 <BSP_Select>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <BSP_L6470_HardStop+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_HardStop(L6470_Id);
 8002546:	79bb      	ldrb	r3, [r7, #6]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fee7 	bl	800131c <L6470_HardStop>
  }
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <BSP_L6470_SoftHiZ>:
  * @brief  Perform the L6470_SoftHiZ Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_SoftHiZ(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	460a      	mov	r2, r1
 8002560:	71fb      	strb	r3, [r7, #7]
 8002562:	4613      	mov	r3, r2
 8002564:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f86b 	bl	8002644 <BSP_Select>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <BSP_L6470_SoftHiZ+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_SoftHiZ(L6470_Id);
 8002574:	79bb      	ldrb	r3, [r7, #6]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fef2 	bl	8001360 <L6470_SoftHiZ>
  }
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <BSP_L6470_HardHiZ>:
  * @brief  Perform the L6470_HardHiZ Application Command for the selected device on the selected Expansion Board.
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  */
void BSP_L6470_HardHiZ(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	460a      	mov	r2, r1
 800258e:	71fb      	strb	r3, [r7, #7]
 8002590:	4613      	mov	r3, r2
 8002592:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f854 	bl	8002644 <BSP_Select>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <BSP_L6470_HardHiZ+0x26>
  {
    /* Perform the related L6470 Application Command */
    L6470_HardHiZ(L6470_Id);
 80025a2:	79bb      	ldrb	r3, [r7, #6]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fefd 	bl	80013a4 <L6470_HardHiZ>
  }
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <BSP_L6470_GetStatus>:
  * @param  ExpBrd_Id       The addressed Expansion Board
  * @param  L6470_Id        The L6470 identifier inside the daisy chain
  * @retval uint16_t        The value of the L6470 Status Register
  */
uint16_t BSP_L6470_GetStatus(uint8_t ExpBrd_Id, uint8_t L6470_Id)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	460a      	mov	r2, r1
 80025bc:	71fb      	strb	r3, [r7, #7]
 80025be:	4613      	mov	r3, r2
 80025c0:	71bb      	strb	r3, [r7, #6]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 f83d 	bl	8002644 <BSP_Select>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <BSP_L6470_GetStatus+0x2a>
  {
    /* Perform the related L6470 Application Command */
    return L6470_GetStatus(L6470_Id);
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe ff08 	bl	80013e8 <L6470_GetStatus>
 80025d8:	4603      	mov	r3, r0
 80025da:	e000      	b.n	80025de <BSP_L6470_GetStatus+0x2c>
  }
  else
    return 0;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <BSP_L6470_CheckStatusRegisterFlag>:
  * @param  L6470_Id                    The L6470 identifier inside the daisy chain
  * @param  L6470_StatusRegisterFlagId  The L6470 Status Register Flag identifier
  * @retval uint8_t                     The actual flag status.
  */
uint8_t BSP_L6470_CheckStatusRegisterFlag(uint8_t ExpBrd_Id, uint8_t L6470_Id, uint8_t L6470_StatusRegisterFlagId)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	71fb      	strb	r3, [r7, #7]
 80025f0:	460b      	mov	r3, r1
 80025f2:	71bb      	strb	r3, [r7, #6]
 80025f4:	4613      	mov	r3, r2
 80025f6:	717b      	strb	r3, [r7, #5]
  /* Initialize the used GPIO for the L6470 nCS related to the addressed X-NUCLEO-IHM02A1 */
  if (BSP_Select(ExpBrd_Id))
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f822 	bl	8002644 <BSP_Select>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <BSP_L6470_CheckStatusRegisterFlag+0x30>
  {
    /* Check the flag of the L6470 Register Status related to the device mounted on the addressed X-NUCLEO-IHM02A1 */
    return L6470_CheckStatusRegisterFlag(L6470_Id, L6470_StatusRegisterFlagId);
 8002606:	797a      	ldrb	r2, [r7, #5]
 8002608:	79bb      	ldrb	r3, [r7, #6]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff f961 	bl	80018d4 <L6470_CheckStatusRegisterFlag>
 8002612:	4603      	mov	r3, r0
 8002614:	e000      	b.n	8002618 <BSP_L6470_CheckStatusRegisterFlag+0x32>
  }
  else
    return 0xFF;
 8002616:	23ff      	movs	r3, #255	; 0xff
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <EXPBRD_ID>:
  *
  * @note The first accepted position is '0'.
  * @note If the position is not allowable the returned value is 0xFF.
  */
uint8_t EXPBRD_ID(uint8_t position)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  if (position < EXPBRD_MOUNTED_NR)
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <EXPBRD_ID+0x14>
  {
    return (position);
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	e000      	b.n	8002636 <EXPBRD_ID+0x16>
  }
  else
  {
    return 0xFF;
 8002634:	23ff      	movs	r3, #255	; 0xff
  }
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <BSP_Select>:
  * @brief  Select the used SPI nCS mounted on the addressed X-NUCLEO-IHM02A1.
  * @param  ExpBrd_Id   The identifier of the Expansion Board to be addressed.
  * @retval FlagStatus  SET or RESET related to the result.
  */
uint8_t BSP_Select(uint8_t ExpBrd_Id)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if (ExpBrd_Id < EXPBRD_MOUNTED_NR)
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d121      	bne.n	8002698 <BSP_Select+0x54>
  {
    L6470_nCS_GPIO.gpio_clk_enable = L6470_nCS_GPIO_Array[ExpBrd_Id].gpio_clk_enable;
 8002654:	79fa      	ldrb	r2, [r7, #7]
 8002656:	4914      	ldr	r1, [pc, #80]	; (80026a8 <BSP_Select+0x64>)
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a11      	ldr	r2, [pc, #68]	; (80026ac <BSP_Select+0x68>)
 8002666:	6013      	str	r3, [r2, #0]
    L6470_nCS_GPIO.port = L6470_nCS_GPIO_Array[ExpBrd_Id].port;
 8002668:	79fa      	ldrb	r2, [r7, #7]
 800266a:	490f      	ldr	r1, [pc, #60]	; (80026a8 <BSP_Select+0x64>)
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	3304      	adds	r3, #4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <BSP_Select+0x68>)
 800267c:	6053      	str	r3, [r2, #4]
    L6470_nCS_GPIO.pin = L6470_nCS_GPIO_Array[ExpBrd_Id].pin;
 800267e:	79fa      	ldrb	r2, [r7, #7]
 8002680:	4909      	ldr	r1, [pc, #36]	; (80026a8 <BSP_Select+0x64>)
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	3308      	adds	r3, #8
 800268e:	881a      	ldrh	r2, [r3, #0]
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <BSP_Select+0x68>)
 8002692:	811a      	strh	r2, [r3, #8]
    return SET;
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <BSP_Select+0x56>
  }
  else
    return RESET;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	2000034c 	.word	0x2000034c
 80026ac:	2000051c 	.word	0x2000051c

080026b0 <BSP_Init>:

/**
  * @brief  X-NUCLEO-IHM02A1 initialization
  */
void BSP_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Select the default L6470_nCS_GPIO */
  BSP_Select(EXPBRD_ID(0));
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7ff ffb3 	bl	8002620 <EXPBRD_ID>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ffc1 	bl	8002644 <BSP_Select>
  
  /* Initialize the NUCLEO GPIO used by the X-NUCLEO-IHM02A1 */
  BSP_NUCLEO_GPIO_Init();
 80026c2:	f7ff fccf 	bl	8002064 <BSP_NUCLEO_GPIO_Init>
  
  /* Initialize the L6470 devices mounted on the X-NUCLEO-IHM02A1 */
  BSP_L6470_Init();
 80026c6:	f7ff fd69 	bl	800219c <BSP_L6470_Init>
  /* Enable the IRQ for the nBUSY_SYNC and the nFLAG of the X-NUCLEO-IHM02A1*/
  //BSP_IRQ(ENABLE);
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <BSP_0_Config>:
/**
 * @brief   Initialize the data structure related to the stepper motor board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_0_Config(MotorParameterData_t *MotorParameterData)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  StepperMotorBoardHandle_t *StepperMotorBoardHandle;
  
  StepperMotorBoardHandle = &XNUCLEOIHM02A1Drv[0];
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <BSP_0_Config+0x1c>)
 80026da:	60fb      	str	r3, [r7, #12]
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f8f0 	bl	80028c4 <BSP_Config>
}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	200002c8 	.word	0x200002c8

080026f0 <BSP_1_Config>:
/**
 * @brief   Initialize the data structure related to the stepper motor board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_1_Config(MotorParameterData_t *MotorParameterData)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  StepperMotorBoardHandle_t *StepperMotorBoardHandle;
  
  StepperMotorBoardHandle = &XNUCLEOIHM02A1Drv[1];
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <BSP_1_Config+0x1c>)
 80026fa:	60fb      	str	r3, [r7, #12]
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f8e0 	bl	80028c4 <BSP_Config>
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	200002e0 	.word	0x200002e0

08002710 <BSP_2_Config>:
/**
 * @brief   Initialize the data structure related to the stepper motor board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_2_Config(MotorParameterData_t *MotorParameterData)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  StepperMotorBoardHandle_t *StepperMotorBoardHandle;
  
  StepperMotorBoardHandle = &XNUCLEOIHM02A1Drv[2];
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <BSP_2_Config+0x1c>)
 800271a:	60fb      	str	r3, [r7, #12]
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f8d0 	bl	80028c4 <BSP_Config>
}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	200002f8 	.word	0x200002f8

08002730 <BSP_3_Config>:
/**
 * @brief   Initialize the data structure related to the stepper motor board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_3_Config(MotorParameterData_t *MotorParameterData)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  StepperMotorBoardHandle_t *StepperMotorBoardHandle;
  
  StepperMotorBoardHandle = &XNUCLEOIHM02A1Drv[3];
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <BSP_3_Config+0x1c>)
 800273a:	60fb      	str	r3, [r7, #12]
  BSP_Config(StepperMotorBoardHandle, MotorParameterData);
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f8c0 	bl	80028c4 <BSP_Config>
}
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000310 	.word	0x20000310

08002750 <BSP_L6470_0_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
*/
void BSP_L6470_0_0_Config(MotorParameterData_t *MotorParameterData)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[0][0];
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <BSP_L6470_0_0_Config+0x1c>)
 800275a:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f7ff f972 	bl	8001a48 <L6470_Config>
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	200000e8 	.word	0x200000e8

08002770 <BSP_L6470_0_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #0.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_0_1_Config(MotorParameterData_t *MotorParameterData)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[0][1];
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <BSP_L6470_0_1_Config+0x1c>)
 800277a:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f7ff f962 	bl	8001a48 <L6470_Config>
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000124 	.word	0x20000124

08002790 <BSP_L6470_1_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_1_0_Config(MotorParameterData_t *MotorParameterData)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[1][0];
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <BSP_L6470_1_0_Config+0x1c>)
 800279a:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7ff f952 	bl	8001a48 <L6470_Config>
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000160 	.word	0x20000160

080027b0 <BSP_L6470_1_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #1.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_1_1_Config(MotorParameterData_t *MotorParameterData)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[1][1];
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <BSP_L6470_1_1_Config+0x1c>)
 80027ba:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7ff f942 	bl	8001a48 <L6470_Config>
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	2000019c 	.word	0x2000019c

080027d0 <BSP_L6470_2_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_2_0_Config(MotorParameterData_t *MotorParameterData)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[2][0];
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <BSP_L6470_2_0_Config+0x1c>)
 80027da:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f7ff f932 	bl	8001a48 <L6470_Config>
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	200001d8 	.word	0x200001d8

080027f0 <BSP_L6470_2_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #2.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_2_1_Config(MotorParameterData_t *MotorParameterData)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[2][1];
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <BSP_L6470_2_1_Config+0x1c>)
 80027fa:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f7ff f922 	bl	8001a48 <L6470_Config>
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000214 	.word	0x20000214

08002810 <BSP_L6470_3_0_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #0
 *          of the expansion board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_3_0_Config(MotorParameterData_t *MotorParameterData)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[3][0];
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <BSP_L6470_3_0_Config+0x1c>)
 800281a:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f7ff f912 	bl	8001a48 <L6470_Config>
}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000250 	.word	0x20000250

08002830 <BSP_L6470_3_1_Config>:
 * @brief   Initialize the data structure related to the stepper motor driver #1
 *          of the expansion board #3.
 * @param   MotorParameterData_t* The pointer to the related parameter data structure.
 */
void BSP_L6470_3_1_Config(MotorParameterData_t *MotorParameterData)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  StepperMotorDriverHandle_t *StepperMotorDriverHandle;
  
  StepperMotorDriverHandle = &L6470DrvMtx[3][1];
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <BSP_L6470_3_1_Config+0x1c>)
 800283a:	60fb      	str	r3, [r7, #12]
  L6470_Config(StepperMotorDriverHandle, MotorParameterData);
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff f902 	bl	8001a48 <L6470_Config>
}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	2000028c 	.word	0x2000028c

08002850 <BSP_GetExpansionBoardHandle>:
 * @brief Return expansion board handle (pointer to the L6470 motor driver structure)
 * @param id Identifier inside the daisy chain
 * @retval Pointer to the StepperMotorDriverHandle_t structure
 */
StepperMotorBoardHandle_t *BSP_GetExpansionBoardHandle(uint8_t id)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  if (id == EXPBRD_ID(0))
 800285a:	2000      	movs	r0, #0
 800285c:	f7ff fee0 	bl	8002620 <EXPBRD_ID>
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <BSP_GetExpansionBoardHandle+0x1e>
    return (&XNUCLEOIHM02A1Drv[0]);
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <BSP_GetExpansionBoardHandle+0x64>)
 800286c:	e01e      	b.n	80028ac <BSP_GetExpansionBoardHandle+0x5c>
  if (id == EXPBRD_ID(1))
 800286e:	2001      	movs	r0, #1
 8002870:	f7ff fed6 	bl	8002620 <EXPBRD_ID>
 8002874:	4603      	mov	r3, r0
 8002876:	461a      	mov	r2, r3
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	4293      	cmp	r3, r2
 800287c:	d101      	bne.n	8002882 <BSP_GetExpansionBoardHandle+0x32>
    return (&XNUCLEOIHM02A1Drv[1]);
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <BSP_GetExpansionBoardHandle+0x68>)
 8002880:	e014      	b.n	80028ac <BSP_GetExpansionBoardHandle+0x5c>
  if (id == EXPBRD_ID(2))
 8002882:	2002      	movs	r0, #2
 8002884:	f7ff fecc 	bl	8002620 <EXPBRD_ID>
 8002888:	4603      	mov	r3, r0
 800288a:	461a      	mov	r2, r3
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <BSP_GetExpansionBoardHandle+0x46>
    return (&XNUCLEOIHM02A1Drv[2]);
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <BSP_GetExpansionBoardHandle+0x6c>)
 8002894:	e00a      	b.n	80028ac <BSP_GetExpansionBoardHandle+0x5c>
  if (id == EXPBRD_ID(3))
 8002896:	2003      	movs	r0, #3
 8002898:	f7ff fec2 	bl	8002620 <EXPBRD_ID>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d101      	bne.n	80028aa <BSP_GetExpansionBoardHandle+0x5a>
    return (&XNUCLEOIHM02A1Drv[3]);
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <BSP_GetExpansionBoardHandle+0x70>)
 80028a8:	e000      	b.n	80028ac <BSP_GetExpansionBoardHandle+0x5c>
  
  return 0;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	200002c8 	.word	0x200002c8
 80028b8:	200002e0 	.word	0x200002e0
 80028bc:	200002f8 	.word	0x200002f8
 80028c0:	20000310 	.word	0x20000310

080028c4 <BSP_Config>:
  * @brief  Configures each L6470 mounted on the X-NUCLEO-IHM02A1.
  * @param  StepperMotorBoardHandle_t* The pointer to the stepper motor board handle structure.
  * @param  MotorParameterData_t* The pointer to the parameter data structure.
  */
void BSP_Config(StepperMotorBoardHandle_t *StepperMotorBoardHandle, MotorParameterData_t *MotorParameterData)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  StepperMotorBoardHandle->Select(StepperMotorBoardHandle->StackedPosition);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	7812      	ldrb	r2, [r2, #0]
 80028d6:	4610      	mov	r0, r2
 80028d8:	4798      	blx	r3
  
  StepperMotorBoardHandle->StepperMotorDriverHandle[0]->Config(MotorParameterData+0);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	6838      	ldr	r0, [r7, #0]
 80028e2:	4798      	blx	r3
  StepperMotorBoardHandle->StepperMotorDriverHandle[1]->Config(MotorParameterData+1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	3258      	adds	r2, #88	; 0x58
 80028ee:	4610      	mov	r0, r2
 80028f0:	4798      	blx	r3
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <MX_SPI_Init>:
  *
  * @note   It selects the @ref MX_SPI1_Init or @ref MX_SPI2_Init
  *         related to the defined macro @ref NUCLEO_USE_SPI_1 or @ref NUCLEO_USE_SPI_2.
  */
void MX_SPI_Init(void)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	af00      	add	r7, sp, #0
#ifdef NUCLEO_USE_SPI_1
  MX_SPI1_Init();
 80028fe:	f000 f803 	bl	8002908 <MX_SPI1_Init>
#endif
#ifdef NUCLEO_USE_SPI_3
  MX_SPI3_Init();
#endif
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <MX_SPI1_Init>:
  *         - CPOL High
  *         - CPHA 2nd Edge
  *         - Baud Rate lower than 5 MBits/s
  */
void MX_SPI1_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
  #define MAX_BAUDRATE  5000000
  uint32_t freq;
  uint16_t freq_div;
  uint32_t spi_baudrateprescaler;
  
  hspi1.Instance = SPI1;
 800290e:	4b32      	ldr	r3, [pc, #200]	; (80029d8 <MX_SPI1_Init+0xd0>)
 8002910:	4a32      	ldr	r2, [pc, #200]	; (80029dc <MX_SPI1_Init+0xd4>)
 8002912:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002914:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <MX_SPI1_Init+0xd0>)
 8002916:	f44f 7282 	mov.w	r2, #260	; 0x104
 800291a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800291c:	4b2e      	ldr	r3, [pc, #184]	; (80029d8 <MX_SPI1_Init+0xd0>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002922:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <MX_SPI1_Init+0xd0>)
 8002924:	2200      	movs	r2, #0
 8002926:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <MX_SPI1_Init+0xd0>)
 800292a:	2202      	movs	r2, #2
 800292c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800292e:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <MX_SPI1_Init+0xd0>)
 8002930:	2201      	movs	r2, #1
 8002932:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002934:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <MX_SPI1_Init+0xd0>)
 8002936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800293a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800293c:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <MX_SPI1_Init+0xd0>)
 800293e:	2200      	movs	r2, #0
 8002940:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLED;
 8002942:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <MX_SPI1_Init+0xd0>)
 8002944:	2200      	movs	r2, #0
 8002946:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002948:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <MX_SPI1_Init+0xd0>)
 800294a:	2200      	movs	r2, #0
 800294c:	629a      	str	r2, [r3, #40]	; 0x28
  
  freq = HAL_RCC_GetPCLK2Freq();
 800294e:	f004 fd77 	bl	8007440 <HAL_RCC_GetPCLK2Freq>
 8002952:	60b8      	str	r0, [r7, #8]
  freq_div = (freq / MAX_BAUDRATE);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <MX_SPI1_Init+0xd8>)
 8002958:	fba2 2303 	umull	r2, r3, r2, r3
 800295c:	0d5b      	lsrs	r3, r3, #21
 800295e:	80fb      	strh	r3, [r7, #6]
  
  if (freq_div < 2)
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d802      	bhi.n	800296c <MX_SPI1_Init+0x64>
  {
    spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_2;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	e02a      	b.n	80029c2 <MX_SPI1_Init+0xba>
  }
  else
  {
    if (freq_div < 4)
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d802      	bhi.n	8002978 <MX_SPI1_Init+0x70>
    {
      spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_4;
 8002972:	2308      	movs	r3, #8
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	e024      	b.n	80029c2 <MX_SPI1_Init+0xba>
    }
    else
    {
      if (freq_div < 8)
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	2b07      	cmp	r3, #7
 800297c:	d802      	bhi.n	8002984 <MX_SPI1_Init+0x7c>
      {
        spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_8;
 800297e:	2310      	movs	r3, #16
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e01e      	b.n	80029c2 <MX_SPI1_Init+0xba>
      }
      else
      {
        if (freq_div < 16)
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	d802      	bhi.n	8002990 <MX_SPI1_Init+0x88>
        {
          spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_16;
 800298a:	2318      	movs	r3, #24
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e018      	b.n	80029c2 <MX_SPI1_Init+0xba>
        }
        else
        {
          if (freq_div < 32)
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	2b1f      	cmp	r3, #31
 8002994:	d802      	bhi.n	800299c <MX_SPI1_Init+0x94>
          {
            spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_32;
 8002996:	2320      	movs	r3, #32
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e012      	b.n	80029c2 <MX_SPI1_Init+0xba>
          }
          else
          {
            if (freq_div < 64)
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	2b3f      	cmp	r3, #63	; 0x3f
 80029a0:	d802      	bhi.n	80029a8 <MX_SPI1_Init+0xa0>
            {
              spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_64;
 80029a2:	2328      	movs	r3, #40	; 0x28
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	e00c      	b.n	80029c2 <MX_SPI1_Init+0xba>
            }
            else
            {
              if (freq_div < 128)
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	2b7f      	cmp	r3, #127	; 0x7f
 80029ac:	d802      	bhi.n	80029b4 <MX_SPI1_Init+0xac>
              {
                spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_128;
 80029ae:	2330      	movs	r3, #48	; 0x30
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	e006      	b.n	80029c2 <MX_SPI1_Init+0xba>
              }
              else
              {
                if (freq_div < 256)
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	2bff      	cmp	r3, #255	; 0xff
 80029b8:	d802      	bhi.n	80029c0 <MX_SPI1_Init+0xb8>
                {
                  spi_baudrateprescaler = SPI_BAUDRATEPRESCALER_256;
 80029ba:	2338      	movs	r3, #56	; 0x38
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	e000      	b.n	80029c2 <MX_SPI1_Init+0xba>
                }
                else
                {
                  /* the condition is not possible, you should reduce the CPU frequency */
                  while(1);
 80029c0:	e7fe      	b.n	80029c0 <MX_SPI1_Init+0xb8>
        }
      }
    }
  }
  
  hspi1.Init.BaudRatePrescaler = spi_baudrateprescaler;  // the baudrate will be lower than MAX_BAUDRATE (5 MBits/s)
 80029c2:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <MX_SPI1_Init+0xd0>)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	61d3      	str	r3, [r2, #28]
  HAL_SPI_Init(&hspi1);
 80029c8:	4803      	ldr	r0, [pc, #12]	; (80029d8 <MX_SPI1_Init+0xd0>)
 80029ca:	f004 fd4d 	bl	8007468 <HAL_SPI_Init>
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000528 	.word	0x20000528
 80029dc:	40013000 	.word	0x40013000
 80029e0:	6b5fca6b 	.word	0x6b5fca6b

080029e4 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <BSP_MotorControl_ErrorHandler+0x38>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00d      	beq.n	8002a12 <BSP_MotorControl_ErrorHandler+0x2e>
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <BSP_MotorControl_ErrorHandler+0x38>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <BSP_MotorControl_ErrorHandler+0x38>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a0a:	88fa      	ldrh	r2, [r7, #6]
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8002a10:	e000      	b.n	8002a14 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 8002a12:	e7fe      	b.n	8002a12 <BSP_MotorControl_ErrorHandler+0x2e>
}
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200005c8 	.word	0x200005c8

08002a20 <BSP_MotorControl_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void BSP_MotorControl_FlagInterruptHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  if ((motorDrvHandle != 0)&&(motorDrvHandle->FlagInterruptHandler != 0))
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d009      	beq.n	8002a40 <BSP_MotorControl_FlagInterruptHandler+0x20>
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <BSP_MotorControl_FlagInterruptHandler+0x20>
  {
    motorDrvHandle->FlagInterruptHandler();
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	4798      	blx	r3
 8002a3e:	e004      	b.n	8002a4a <BSP_MotorControl_FlagInterruptHandler+0x2a>
  }    
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(5);
 8002a40:	f640 0005 	movw	r0, #2053	; 0x805
 8002a44:	f7ff ffce 	bl	80029e4 <BSP_MotorControl_ErrorHandler>
  }  
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200005c8 	.word	0x200005c8

08002a54 <BSP_MotorControl_BusyInterruptHandler>:
/******************************************************//**
 * @brief Handler of the busy interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void BSP_MotorControl_BusyInterruptHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  if ((motorDrvHandle != 0)&&(motorDrvHandle->BusyInterruptHandler != 0))
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <BSP_MotorControl_BusyInterruptHandler+0x34>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00b      	beq.n	8002a78 <BSP_MotorControl_BusyInterruptHandler+0x24>
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <BSP_MotorControl_BusyInterruptHandler+0x34>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <BSP_MotorControl_BusyInterruptHandler+0x24>
  {
    motorDrvHandle->BusyInterruptHandler();
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <BSP_MotorControl_BusyInterruptHandler+0x34>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a74:	4798      	blx	r3
 8002a76:	e004      	b.n	8002a82 <BSP_MotorControl_BusyInterruptHandler+0x2e>
  }    
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(61);
 8002a78:	f640 003d 	movw	r0, #2109	; 0x83d
 8002a7c:	f7ff ffb2 	bl	80029e4 <BSP_MotorControl_ErrorHandler>
  }  
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	200005c8 	.word	0x200005c8

08002a8c <ModbusTCPInit>:
#include "User_modbus_TCP.h"
#include "mb.h"
#include "mbutils.h"

void ModbusTCPInit(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
    eMBTCPInit(MODBUS_TCP_PORT);
 8002a90:	f44f 70fb 	mov.w	r0, #502	; 0x1f6
 8002a94:	f000 f9a8 	bl	8002de8 <eMBTCPInit>
    eMBEnable();
 8002a98:	f000 fa14 	bl	8002ec4 <eMBEnable>
}
 8002a9c:	bf00      	nop
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <ModbusTCPDeInit>:

void ModbusTCPDeInit(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
    eMBDisable();
 8002aa4:	f000 fa2a 	bl	8002efc <eMBDisable>
    eMBClose();
 8002aa8:	f000 f9f0 	bl	8002e8c <eMBClose>
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <ModbusTCPMain>:

void ModbusTCPMain(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
    if (MB_ENOERR != eMBPoll())
 8002ab4:	f000 fa44 	bl	8002f40 <eMBPoll>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <ModbusTCPMain+0x16>
    {
        ModbusTCPDeInit();
 8002abe:	f7ff ffef 	bl	8002aa0 <ModbusTCPDeInit>
        ModbusTCPInit();
 8002ac2:	f7ff ffe3 	bl	8002a8c <ModbusTCPInit>
    }
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <eMBRegCoilsCB>:
#define REG_COILS_SIZE      10
//uint8_t REG_COILS_BUF[REG_COILS_SIZE];
extern uint8_t REG_COILS_BUF[10];

eMBErrorCode eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode )
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	4608      	mov	r0, r1
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4603      	mov	r3, r0
 8002adc:	817b      	strh	r3, [r7, #10]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	813b      	strh	r3, [r7, #8]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	71fb      	strb	r3, [r7, #7]
	 USHORT usRegIndex   = usAddress - 1;;
 8002ae6:	897b      	ldrh	r3, [r7, #10]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	82fb      	strh	r3, [r7, #22]
	 USHORT usCoilGroups = ((usNCoils - 1) / 8 + 1);
 8002aec:	893b      	ldrh	r3, [r7, #8]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	da00      	bge.n	8002af6 <eMBRegCoilsCB+0x2a>
 8002af4:	3307      	adds	r3, #7
 8002af6:	10db      	asrs	r3, r3, #3
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	82bb      	strh	r3, [r7, #20]
	 UCHAR  ucStatus     = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	74fb      	strb	r3, [r7, #19]
	 UCHAR  ucBits       = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	74bb      	strb	r3, [r7, #18]

	 UCHAR  ucDisp       = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	747b      	strb	r3, [r7, #17]
	 // 非法检测
	 if((usRegIndex + usNCoils)> REG_COILS_SIZE)
 8002b0a:	8afa      	ldrh	r2, [r7, #22]
 8002b0c:	893b      	ldrh	r3, [r7, #8]
 8002b0e:	4413      	add	r3, r2
 8002b10:	2b0a      	cmp	r3, #10
 8002b12:	dd01      	ble.n	8002b18 <eMBRegCoilsCB+0x4c>
	 {
		 return MB_ENOREG;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e054      	b.n	8002bc2 <eMBRegCoilsCB+0xf6>
	 }
	 // 写线圈
	 if(eMode == MB_REG_WRITE)
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d14b      	bne.n	8002bb6 <eMBRegCoilsCB+0xea>
	 {
	     while(usCoilGroups--)
 8002b1e:	e01e      	b.n	8002b5e <eMBRegCoilsCB+0x92>
	     {
	        ucStatus=*pucRegBuffer++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	60fa      	str	r2, [r7, #12]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	74fb      	strb	r3, [r7, #19]
	        ucBits =8;
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	74bb      	strb	r3, [r7, #18]
	        while((usNCoils--)!=0&& (ucBits--)!= 0)
 8002b2e:	e00c      	b.n	8002b4a <eMBRegCoilsCB+0x7e>
	        {
	         REG_COILS_BUF[usRegIndex++]= ucStatus & 0X01;
 8002b30:	8afb      	ldrh	r3, [r7, #22]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	82fa      	strh	r2, [r7, #22]
 8002b36:	461a      	mov	r2, r3
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	b2d9      	uxtb	r1, r3
 8002b40:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <eMBRegCoilsCB+0x104>)
 8002b42:	5499      	strb	r1, [r3, r2]
	         ucStatus >>=1;
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	74fb      	strb	r3, [r7, #19]
	        while((usNCoils--)!=0&& (ucBits--)!= 0)
 8002b4a:	893b      	ldrh	r3, [r7, #8]
 8002b4c:	1e5a      	subs	r2, r3, #1
 8002b4e:	813a      	strh	r2, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d004      	beq.n	8002b5e <eMBRegCoilsCB+0x92>
 8002b54:	7cbb      	ldrb	r3, [r7, #18]
 8002b56:	1e5a      	subs	r2, r3, #1
 8002b58:	74ba      	strb	r2, [r7, #18]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1e8      	bne.n	8002b30 <eMBRegCoilsCB+0x64>
	     while(usCoilGroups--)
 8002b5e:	8abb      	ldrh	r3, [r7, #20]
 8002b60:	1e5a      	subs	r2, r3, #1
 8002b62:	82ba      	strh	r2, [r7, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1db      	bne.n	8002b20 <eMBRegCoilsCB+0x54>
 8002b68:	e02a      	b.n	8002bc0 <eMBRegCoilsCB+0xf4>
	 // 读线圈
	     else
	     {
	         while(usCoilGroups--)
	         {
	             ucDisp = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	747b      	strb	r3, [r7, #17]
	             ucBits = 8;
 8002b6e:	2308      	movs	r3, #8
 8002b70:	74bb      	strb	r3, [r7, #18]
	             while((usNCoils--) != 0 && (ucBits--) != 0)
 8002b72:	e011      	b.n	8002b98 <eMBRegCoilsCB+0xcc>
	             {
	                 ucStatus |= (REG_COILS_BUF[usRegIndex++] << (ucDisp++));
 8002b74:	8afb      	ldrh	r3, [r7, #22]
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	82fa      	strh	r2, [r7, #22]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <eMBRegCoilsCB+0x104>)
 8002b7e:	5c9b      	ldrb	r3, [r3, r2]
 8002b80:	461a      	mov	r2, r3
 8002b82:	7c7b      	ldrb	r3, [r7, #17]
 8002b84:	1c59      	adds	r1, r3, #1
 8002b86:	7479      	strb	r1, [r7, #17]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	b25a      	sxtb	r2, r3
 8002b8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	74fb      	strb	r3, [r7, #19]
	             while((usNCoils--) != 0 && (ucBits--) != 0)
 8002b98:	893b      	ldrh	r3, [r7, #8]
 8002b9a:	1e5a      	subs	r2, r3, #1
 8002b9c:	813a      	strh	r2, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d004      	beq.n	8002bac <eMBRegCoilsCB+0xe0>
 8002ba2:	7cbb      	ldrb	r3, [r7, #18]
 8002ba4:	1e5a      	subs	r2, r3, #1
 8002ba6:	74ba      	strb	r2, [r7, #18]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e3      	bne.n	8002b74 <eMBRegCoilsCB+0xa8>
	             }
	             *pucRegBuffer++ = ucStatus;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	60fa      	str	r2, [r7, #12]
 8002bb2:	7cfa      	ldrb	r2, [r7, #19]
 8002bb4:	701a      	strb	r2, [r3, #0]
	         while(usCoilGroups--)
 8002bb6:	8abb      	ldrh	r3, [r7, #20]
 8002bb8:	1e5a      	subs	r2, r3, #1
 8002bba:	82ba      	strh	r2, [r7, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1d4      	bne.n	8002b6a <eMBRegCoilsCB+0x9e>
	         }
	     }
	     return MB_ENOERR;
 8002bc0:	2300      	movs	r3, #0
	 }
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	2000e710 	.word	0x2000e710

08002bd4 <eMBRegDiscreteCB>:
#define REG_DISC_SIZE  10
//uint8_t REG_DISC_BUF[10]={0,0,1,0,1};
extern uint8_t REG_DISC_BUF[10];
 //离散寄存器
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
 8002be0:	4613      	mov	r3, r2
 8002be2:	803b      	strh	r3, [r7, #0]
	USHORT usRegIndex   = usAddress - 1;
 8002be4:	887b      	ldrh	r3, [r7, #2]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	813b      	strh	r3, [r7, #8]
	    USHORT usCoilGroups = ((usNDiscrete - 1) / 8 + 1);
 8002bea:	883b      	ldrh	r3, [r7, #0]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	da00      	bge.n	8002bf4 <eMBRegDiscreteCB+0x20>
 8002bf2:	3307      	adds	r3, #7
 8002bf4:	10db      	asrs	r3, r3, #3
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	81fb      	strh	r3, [r7, #14]
	    UCHAR  ucStatus     = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	737b      	strb	r3, [r7, #13]
	    UCHAR  ucBits       = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	733b      	strb	r3, [r7, #12]
	    UCHAR  ucDisp       = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	72fb      	strb	r3, [r7, #11]

	    // 非法检测
	    if((usRegIndex + usNDiscrete) > REG_DISC_SIZE)
 8002c08:	893a      	ldrh	r2, [r7, #8]
 8002c0a:	883b      	ldrh	r3, [r7, #0]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	2b0a      	cmp	r3, #10
 8002c10:	dd27      	ble.n	8002c62 <eMBRegDiscreteCB+0x8e>
	    {
	        return MB_ENOREG;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e02b      	b.n	8002c6e <eMBRegDiscreteCB+0x9a>
	    }

	        // 读离散输入
	        while(usCoilGroups--)
	        {
	                ucDisp = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	72fb      	strb	r3, [r7, #11]
	                ucBits = 8;
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	733b      	strb	r3, [r7, #12]
	                while((usNDiscrete--) != 0 && (ucBits--) != 0)
 8002c1e:	e011      	b.n	8002c44 <eMBRegDiscreteCB+0x70>
	                {
	                        if(REG_DISC_BUF[usRegIndex])
 8002c20:	893b      	ldrh	r3, [r7, #8]
 8002c22:	4a16      	ldr	r2, [pc, #88]	; (8002c7c <eMBRegDiscreteCB+0xa8>)
 8002c24:	5cd3      	ldrb	r3, [r2, r3]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <eMBRegDiscreteCB+0x6a>
	                        {
	                                ucStatus |= (1 << ucDisp);
 8002c2a:	7afb      	ldrb	r3, [r7, #11]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	b25a      	sxtb	r2, r3
 8002c34:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b25b      	sxtb	r3, r3
 8002c3c:	737b      	strb	r3, [r7, #13]
	                        }
	                        ucDisp++;
 8002c3e:	7afb      	ldrb	r3, [r7, #11]
 8002c40:	3301      	adds	r3, #1
 8002c42:	72fb      	strb	r3, [r7, #11]
	                while((usNDiscrete--) != 0 && (ucBits--) != 0)
 8002c44:	883b      	ldrh	r3, [r7, #0]
 8002c46:	1e5a      	subs	r2, r3, #1
 8002c48:	803a      	strh	r2, [r7, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <eMBRegDiscreteCB+0x84>
 8002c4e:	7b3b      	ldrb	r3, [r7, #12]
 8002c50:	1e5a      	subs	r2, r3, #1
 8002c52:	733a      	strb	r2, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e3      	bne.n	8002c20 <eMBRegDiscreteCB+0x4c>
	                }
	                *pucRegBuffer++ = ucStatus;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	7b7a      	ldrb	r2, [r7, #13]
 8002c60:	701a      	strb	r2, [r3, #0]
	        while(usCoilGroups--)
 8002c62:	89fb      	ldrh	r3, [r7, #14]
 8002c64:	1e5a      	subs	r2, r3, #1
 8002c66:	81fa      	strh	r2, [r7, #14]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1d4      	bne.n	8002c16 <eMBRegDiscreteCB+0x42>
//	    for(usRegIndex = 0; usRegIndex < REG_DISC_SIZE; usRegIndex++)
//	    {
//	        REG_DISC_BUF[usRegIndex] = !REG_DISC_BUF[usRegIndex];
//	    }

	    return MB_ENOERR;
 8002c6c:	2300      	movs	r3, #0

}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	2000e704 	.word	0x2000e704

08002c80 <eMBRegHoldingCB>:
 * @param eMode         读写模式
 * @return eMBErrorCode 返回错误码
 */

eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	4608      	mov	r0, r1
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	817b      	strh	r3, [r7, #10]
 8002c92:	460b      	mov	r3, r1
 8002c94:	813b      	strh	r3, [r7, #8]
 8002c96:	4613      	mov	r3, r2
 8002c98:	71fb      	strb	r3, [r7, #7]
    uint16_t i = 0,RegIndex = usAddress - REG_HOLDING_REGISTER_START-1;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	82fb      	strh	r3, [r7, #22]
 8002c9e:	897b      	ldrh	r3, [r7, #10]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	82bb      	strh	r3, [r7, #20]
  
    if ((usAddress >= REG_HOLDING_REGISTER_START )&&(usAddress + usNRegs <= REG_HOLDING_REGISTER_START  + REG_HOLDING_REGISTER_SIZE+1))
 8002ca4:	897a      	ldrh	r2, [r7, #10]
 8002ca6:	893b      	ldrh	r3, [r7, #8]
 8002ca8:	4413      	add	r3, r2
 8002caa:	2b1f      	cmp	r3, #31
 8002cac:	dc4c      	bgt.n	8002d48 <eMBRegHoldingCB+0xc8>
    {
        if (MB_REG_READ == eMode)//读
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d126      	bne.n	8002d02 <eMBRegHoldingCB+0x82>
        {
          for(i=0;i<usNRegs;i++)
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	82fb      	strh	r3, [r7, #22]
 8002cb8:	e01e      	b.n	8002cf8 <eMBRegHoldingCB+0x78>
          {
            pucRegBuffer[i*2] = (UCHAR)(Holding_Data[RegIndex+i]>>8);
 8002cba:	8aba      	ldrh	r2, [r7, #20]
 8002cbc:	8afb      	ldrh	r3, [r7, #22]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a26      	ldr	r2, [pc, #152]	; (8002d5c <eMBRegHoldingCB+0xdc>)
 8002cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	8afb      	ldrh	r3, [r7, #22]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4619      	mov	r1, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	440b      	add	r3, r1
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]
            pucRegBuffer[i*2+1] = (UCHAR)Holding_Data[RegIndex+i];
 8002cd8:	8aba      	ldrh	r2, [r7, #20]
 8002cda:	8afb      	ldrh	r3, [r7, #22]
 8002cdc:	4413      	add	r3, r2
 8002cde:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <eMBRegHoldingCB+0xdc>)
 8002ce0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002ce4:	8afb      	ldrh	r3, [r7, #22]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	3301      	adds	r3, #1
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4413      	add	r3, r2
 8002cee:	b2ca      	uxtb	r2, r1
 8002cf0:	701a      	strb	r2, [r3, #0]
          for(i=0;i<usNRegs;i++)
 8002cf2:	8afb      	ldrh	r3, [r7, #22]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	82fb      	strh	r3, [r7, #22]
 8002cf8:	8afa      	ldrh	r2, [r7, #22]
 8002cfa:	893b      	ldrh	r3, [r7, #8]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3dc      	bcc.n	8002cba <eMBRegHoldingCB+0x3a>
 8002d00:	e024      	b.n	8002d4c <eMBRegHoldingCB+0xcc>
          }
        }
        else//写
        {
          for(i=0;i<usNRegs;i++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	82fb      	strh	r3, [r7, #22]
 8002d06:	e01a      	b.n	8002d3e <eMBRegHoldingCB+0xbe>
          {
            Holding_Data[RegIndex+i]=(pucRegBuffer[i*2]<<8)|(pucRegBuffer[i*2+1]);
 8002d08:	8afb      	ldrh	r3, [r7, #22]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4413      	add	r3, r2
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	b21a      	sxth	r2, r3
 8002d18:	8afb      	ldrh	r3, [r7, #22]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	68f9      	ldr	r1, [r7, #12]
 8002d20:	440b      	add	r3, r1
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	b21b      	sxth	r3, r3
 8002d26:	4313      	orrs	r3, r2
 8002d28:	b219      	sxth	r1, r3
 8002d2a:	8aba      	ldrh	r2, [r7, #20]
 8002d2c:	8afb      	ldrh	r3, [r7, #22]
 8002d2e:	4413      	add	r3, r2
 8002d30:	b289      	uxth	r1, r1
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <eMBRegHoldingCB+0xdc>)
 8002d34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          for(i=0;i<usNRegs;i++)
 8002d38:	8afb      	ldrh	r3, [r7, #22]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	82fb      	strh	r3, [r7, #22]
 8002d3e:	8afa      	ldrh	r2, [r7, #22]
 8002d40:	893b      	ldrh	r3, [r7, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d3e0      	bcc.n	8002d08 <eMBRegHoldingCB+0x88>
 8002d46:	e001      	b.n	8002d4c <eMBRegHoldingCB+0xcc>
          }
        }
    }
    else
    {
        return MB_ENOREG;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <eMBRegHoldingCB+0xce>
    }

    return MB_ENOERR;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000358 	.word	0x20000358

08002d60 <eMBRegInputCB>:
 * @param usAddress     起始地址
 * @param usNRegs       寄存器个数
 * @return eMBErrorCode 返回错误码
 */
eMBErrorCode eMBRegInputCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	803b      	strh	r3, [r7, #0]
    uint16_t i = 0,RegIndex = usAddress - REG_INPUT_REGISTER_START-1;
 8002d70:	2300      	movs	r3, #0
 8002d72:	81fb      	strh	r3, [r7, #14]
 8002d74:	887b      	ldrh	r3, [r7, #2]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	81bb      	strh	r3, [r7, #12]
    if ((usAddress >= REG_INPUT_REGISTER_START)&&(usAddress + usNRegs <= REG_INPUT_REGISTER_START + REG_INPUT_REGISTER_SIZE+1))
 8002d7a:	887a      	ldrh	r2, [r7, #2]
 8002d7c:	883b      	ldrh	r3, [r7, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	2b15      	cmp	r3, #21
 8002d82:	dc26      	bgt.n	8002dd2 <eMBRegInputCB+0x72>
    {
        for(i=0;i<usNRegs;i++)
 8002d84:	2300      	movs	r3, #0
 8002d86:	81fb      	strh	r3, [r7, #14]
 8002d88:	e01e      	b.n	8002dc8 <eMBRegInputCB+0x68>
        {
          pucRegBuffer[i*2] = (UCHAR)(Input_Data[RegIndex+i]>>8);
 8002d8a:	89ba      	ldrh	r2, [r7, #12]
 8002d8c:	89fb      	ldrh	r3, [r7, #14]
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <eMBRegInputCB+0x84>)
 8002d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	89fb      	ldrh	r3, [r7, #14]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4619      	mov	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	440b      	add	r3, r1
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]
          pucRegBuffer[i*2+1] = (UCHAR)Input_Data[RegIndex+i];
 8002da8:	89ba      	ldrh	r2, [r7, #12]
 8002daa:	89fb      	ldrh	r3, [r7, #14]
 8002dac:	4413      	add	r3, r2
 8002dae:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <eMBRegInputCB+0x84>)
 8002db0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002db4:	89fb      	ldrh	r3, [r7, #14]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	3301      	adds	r3, #1
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b2ca      	uxtb	r2, r1
 8002dc0:	701a      	strb	r2, [r3, #0]
        for(i=0;i<usNRegs;i++)
 8002dc2:	89fb      	ldrh	r3, [r7, #14]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	81fb      	strh	r3, [r7, #14]
 8002dc8:	89fa      	ldrh	r2, [r7, #14]
 8002dca:	883b      	ldrh	r3, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d3dc      	bcc.n	8002d8a <eMBRegInputCB+0x2a>
 8002dd0:	e001      	b.n	8002dd6 <eMBRegInputCB+0x76>
        }
    }
    else
    {
        return MB_ENOREG;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <eMBRegInputCB+0x78>
    }
    
    return MB_ENOERR;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	20000394 	.word	0x20000394

08002de8 <eMBTCPInit>:
}

#if MB_TCP_ENABLED > 0
eMBErrorCode
eMBTCPInit( USHORT ucTCPPort )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	80fb      	strh	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]

    if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f001 f8ab 	bl	8003f54 <eMBTCPDoInit>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	73fb      	strb	r3, [r7, #15]
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <eMBTCPInit+0x28>
    {
        eMBState = STATE_DISABLED;
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <eMBTCPInit+0x74>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e01f      	b.n	8002e50 <eMBTCPInit+0x68>
    }
    else if( !xMBPortEventInit(  ) )
 8002e10:	f000 fd60 	bl	80038d4 <xMBPortEventInit>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <eMBTCPInit+0x38>
    {
        /* Port dependent event module initalization failed. */
        eStatus = MB_EPORTERR;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	73fb      	strb	r3, [r7, #15]
 8002e1e:	e017      	b.n	8002e50 <eMBTCPInit+0x68>
    }
    else
    {
        pvMBFrameStartCur = eMBTCPStart;
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <eMBTCPInit+0x78>)
 8002e22:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <eMBTCPInit+0x7c>)
 8002e24:	601a      	str	r2, [r3, #0]
        pvMBFrameStopCur = eMBTCPStop;
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <eMBTCPInit+0x80>)
 8002e28:	4a10      	ldr	r2, [pc, #64]	; (8002e6c <eMBTCPInit+0x84>)
 8002e2a:	601a      	str	r2, [r3, #0]
        peMBFrameReceiveCur = eMBTCPReceive;
 8002e2c:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <eMBTCPInit+0x88>)
 8002e2e:	4a11      	ldr	r2, [pc, #68]	; (8002e74 <eMBTCPInit+0x8c>)
 8002e30:	601a      	str	r2, [r3, #0]
        peMBFrameSendCur = eMBTCPSend;
 8002e32:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <eMBTCPInit+0x90>)
 8002e34:	4a11      	ldr	r2, [pc, #68]	; (8002e7c <eMBTCPInit+0x94>)
 8002e36:	601a      	str	r2, [r3, #0]
        pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <eMBTCPInit+0x98>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
        ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <eMBTCPInit+0x9c>)
 8002e40:	22ff      	movs	r2, #255	; 0xff
 8002e42:	701a      	strb	r2, [r3, #0]
        eMBCurrentMode = MB_TCP;
 8002e44:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <eMBTCPInit+0xa0>)
 8002e46:	2202      	movs	r2, #2
 8002e48:	701a      	strb	r2, [r3, #0]
        eMBState = STATE_DISABLED;
 8002e4a:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <eMBTCPInit+0x74>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200003bc 	.word	0x200003bc
 8002e60:	200005d4 	.word	0x200005d4
 8002e64:	08003f7f 	.word	0x08003f7f
 8002e68:	200005d8 	.word	0x200005d8
 8002e6c:	08003f8d 	.word	0x08003f8d
 8002e70:	200005dc 	.word	0x200005dc
 8002e74:	08003f99 	.word	0x08003f99
 8002e78:	200005d0 	.word	0x200005d0
 8002e7c:	0800400b 	.word	0x0800400b
 8002e80:	200005e0 	.word	0x200005e0
 8002e84:	200005cc 	.word	0x200005cc
 8002e88:	200005cd 	.word	0x200005cd

08002e8c <eMBClose>:
}


eMBErrorCode
eMBClose( void )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8002e92:	2300      	movs	r3, #0
 8002e94:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <eMBClose+0x30>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d107      	bne.n	8002eae <eMBClose+0x22>
    {
        if( pvMBFrameCloseCur != NULL )
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <eMBClose+0x34>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <eMBClose+0x26>
        {
            pvMBFrameCloseCur(  );
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <eMBClose+0x34>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4798      	blx	r3
 8002eac:	e001      	b.n	8002eb2 <eMBClose+0x26>
        }
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8002eae:	2306      	movs	r3, #6
 8002eb0:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	200003bc 	.word	0x200003bc
 8002ec0:	200005e0 	.word	0x200005e0

08002ec4 <eMBEnable>:

eMBErrorCode
eMBEnable( void )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <eMBEnable+0x30>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d106      	bne.n	8002ee4 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <eMBEnable+0x34>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <eMBEnable+0x30>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e001      	b.n	8002ee8 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8002ee4:	2306      	movs	r3, #6
 8002ee6:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200003bc 	.word	0x200003bc
 8002ef8:	200005d4 	.word	0x200005d4

08002efc <eMBDisable>:

eMBErrorCode
eMBDisable( void )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus;

    if( eMBState == STATE_ENABLED )
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <eMBDisable+0x3c>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d108      	bne.n	8002f1c <eMBDisable+0x20>
    {
        pvMBFrameStopCur(  );
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <eMBDisable+0x40>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4798      	blx	r3
        eMBState = STATE_DISABLED;
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <eMBDisable+0x3c>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
        eStatus = MB_ENOERR;
 8002f16:	2300      	movs	r3, #0
 8002f18:	71fb      	strb	r3, [r7, #7]
 8002f1a:	e008      	b.n	8002f2e <eMBDisable+0x32>
    }
    else if( eMBState == STATE_DISABLED )
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <eMBDisable+0x3c>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d102      	bne.n	8002f2a <eMBDisable+0x2e>
    {
        eStatus = MB_ENOERR;
 8002f24:	2300      	movs	r3, #0
 8002f26:	71fb      	strb	r3, [r7, #7]
 8002f28:	e001      	b.n	8002f2e <eMBDisable+0x32>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8002f2a:	2306      	movs	r3, #6
 8002f2c:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	200003bc 	.word	0x200003bc
 8002f3c:	200005d8 	.word	0x200005d8

08002f40 <eMBPoll>:

eMBErrorCode
eMBPoll( void )
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8002f46:	2300      	movs	r3, #0
 8002f48:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8002f4a:	4b50      	ldr	r3, [pc, #320]	; (800308c <eMBPoll+0x14c>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8002f52:	2306      	movs	r3, #6
 8002f54:	e095      	b.n	8003082 <eMBPoll+0x142>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8002f56:	1cbb      	adds	r3, r7, #2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fcdf 	bl	800391c <xMBPortEventGet>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	f040 808d 	bne.w	8003080 <eMBPoll+0x140>
    {
        switch ( eEvent )
 8002f66:	78bb      	ldrb	r3, [r7, #2]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	f200 8089 	bhi.w	8003080 <eMBPoll+0x140>
 8002f6e:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <eMBPoll+0x34>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08003081 	.word	0x08003081
 8002f78:	08002f85 	.word	0x08002f85
 8002f7c:	08002fb7 	.word	0x08002fb7
 8002f80:	08003081 	.word	0x08003081
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8002f84:	4b42      	ldr	r3, [pc, #264]	; (8003090 <eMBPoll+0x150>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a42      	ldr	r2, [pc, #264]	; (8003094 <eMBPoll+0x154>)
 8002f8a:	4943      	ldr	r1, [pc, #268]	; (8003098 <eMBPoll+0x158>)
 8002f8c:	4843      	ldr	r0, [pc, #268]	; (800309c <eMBPoll+0x15c>)
 8002f8e:	4798      	blx	r3
 8002f90:	4603      	mov	r3, r0
 8002f92:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d16f      	bne.n	800307a <eMBPoll+0x13a>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8002f9a:	4b40      	ldr	r3, [pc, #256]	; (800309c <eMBPoll+0x15c>)
 8002f9c:	781a      	ldrb	r2, [r3, #0]
 8002f9e:	4b40      	ldr	r3, [pc, #256]	; (80030a0 <eMBPoll+0x160>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d003      	beq.n	8002fae <eMBPoll+0x6e>
 8002fa6:	4b3d      	ldr	r3, [pc, #244]	; (800309c <eMBPoll+0x15c>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d165      	bne.n	800307a <eMBPoll+0x13a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8002fae:	2002      	movs	r0, #2
 8002fb0:	f000 fc9e 	bl	80038f0 <xMBPortEventPost>
                }
            }
            break;
 8002fb4:	e061      	b.n	800307a <eMBPoll+0x13a>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8002fb6:	4b38      	ldr	r3, [pc, #224]	; (8003098 <eMBPoll+0x158>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	781a      	ldrb	r2, [r3, #0]
 8002fbc:	4b39      	ldr	r3, [pc, #228]	; (80030a4 <eMBPoll+0x164>)
 8002fbe:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8002fc0:	4b39      	ldr	r3, [pc, #228]	; (80030a8 <eMBPoll+0x168>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	e01f      	b.n	800300c <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8002fcc:	4a37      	ldr	r2, [pc, #220]	; (80030ac <eMBPoll+0x16c>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d01d      	beq.n	8003014 <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8002fd8:	4a34      	ldr	r2, [pc, #208]	; (80030ac <eMBPoll+0x16c>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8002fe0:	4b30      	ldr	r3, [pc, #192]	; (80030a4 <eMBPoll+0x164>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d10e      	bne.n	8003006 <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8002fe8:	4a30      	ldr	r2, [pc, #192]	; (80030ac <eMBPoll+0x16c>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4a29      	ldr	r2, [pc, #164]	; (8003098 <eMBPoll+0x158>)
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	4927      	ldr	r1, [pc, #156]	; (8003094 <eMBPoll+0x154>)
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4798      	blx	r3
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <eMBPoll+0x168>)
 8003002:	701a      	strb	r2, [r3, #0]
                    break;
 8003004:	e007      	b.n	8003016 <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3301      	adds	r3, #1
 800300a:	607b      	str	r3, [r7, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b0f      	cmp	r3, #15
 8003010:	dddc      	ble.n	8002fcc <eMBPoll+0x8c>
 8003012:	e000      	b.n	8003016 <eMBPoll+0xd6>
                    break;
 8003014:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8003016:	4b21      	ldr	r3, [pc, #132]	; (800309c <eMBPoll+0x15c>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d02f      	beq.n	800307e <eMBPoll+0x13e>
            {
                if( eException != MB_EX_NONE )
 800301e:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <eMBPoll+0x168>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01d      	beq.n	8003062 <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <eMBPoll+0x154>)
 8003028:	2200      	movs	r2, #0
 800302a:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800302c:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <eMBPoll+0x164>)
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <eMBPoll+0x158>)
 8003032:	6819      	ldr	r1, [r3, #0]
 8003034:	4b17      	ldr	r3, [pc, #92]	; (8003094 <eMBPoll+0x154>)
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	1c58      	adds	r0, r3, #1
 800303a:	b284      	uxth	r4, r0
 800303c:	4815      	ldr	r0, [pc, #84]	; (8003094 <eMBPoll+0x154>)
 800303e:	8004      	strh	r4, [r0, #0]
 8003040:	440b      	add	r3, r1
 8003042:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 800304a:	4b13      	ldr	r3, [pc, #76]	; (8003098 <eMBPoll+0x158>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <eMBPoll+0x154>)
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	1c59      	adds	r1, r3, #1
 8003054:	b288      	uxth	r0, r1
 8003056:	490f      	ldr	r1, [pc, #60]	; (8003094 <eMBPoll+0x154>)
 8003058:	8008      	strh	r0, [r1, #0]
 800305a:	4413      	add	r3, r2
 800305c:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <eMBPoll+0x168>)
 800305e:	7812      	ldrb	r2, [r2, #0]
 8003060:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8003062:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <eMBPoll+0x170>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <eMBPoll+0x160>)
 8003068:	7810      	ldrb	r0, [r2, #0]
 800306a:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <eMBPoll+0x158>)
 800306c:	6811      	ldr	r1, [r2, #0]
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <eMBPoll+0x154>)
 8003070:	8812      	ldrh	r2, [r2, #0]
 8003072:	4798      	blx	r3
 8003074:	4603      	mov	r3, r0
 8003076:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8003078:	e001      	b.n	800307e <eMBPoll+0x13e>
            break;
 800307a:	bf00      	nop
 800307c:	e000      	b.n	8003080 <eMBPoll+0x140>
            break;
 800307e:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}
 800308a:	bf00      	nop
 800308c:	200003bc 	.word	0x200003bc
 8003090:	200005dc 	.word	0x200005dc
 8003094:	200005ec 	.word	0x200005ec
 8003098:	200005e8 	.word	0x200005e8
 800309c:	200005e4 	.word	0x200005e4
 80030a0:	200005cc 	.word	0x200005cc
 80030a4:	200005ee 	.word	0x200005ee
 80030a8:	200005ef 	.word	0x200005ef
 80030ac:	200003c0 	.word	0x200003c0
 80030b0:	200005d0 	.word	0x200005d0

080030b4 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80030be:	2300      	movs	r3, #0
 80030c0:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d16c      	bne.n	80031a4 <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3301      	adds	r3, #1
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3302      	adds	r3, #2
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	8abb      	ldrh	r3, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80030e4:	8abb      	ldrh	r3, [r7, #20]
 80030e6:	3301      	adds	r3, #1
 80030e8:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3303      	adds	r3, #3
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3304      	adds	r3, #4
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	8a7b      	ldrh	r3, [r7, #18]
 8003100:	4313      	orrs	r3, r2
 8003102:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8003104:	8a7b      	ldrh	r3, [r7, #18]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d049      	beq.n	800319e <eMBFuncReadCoils+0xea>
 800310a:	8a7b      	ldrh	r3, [r7, #18]
 800310c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003110:	d245      	bcs.n	800319e <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2200      	movs	r2, #0
 800311a:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	60fa      	str	r2, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	3301      	adds	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8003132:	8a7b      	ldrh	r3, [r7, #18]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	2b00      	cmp	r3, #0
 800313a:	d006      	beq.n	800314a <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 800313c:	8a7b      	ldrh	r3, [r7, #18]
 800313e:	08db      	lsrs	r3, r3, #3
 8003140:	b29b      	uxth	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	3301      	adds	r3, #1
 8003146:	75fb      	strb	r3, [r7, #23]
 8003148:	e003      	b.n	8003152 <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 800314a:	8a7b      	ldrh	r3, [r7, #18]
 800314c:	08db      	lsrs	r3, r3, #3
 800314e:	b29b      	uxth	r3, r3
 8003150:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	60fa      	str	r2, [r7, #12]
 8003158:	7dfa      	ldrb	r2, [r7, #23]
 800315a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8003168:	8a7a      	ldrh	r2, [r7, #18]
 800316a:	8ab9      	ldrh	r1, [r7, #20]
 800316c:	2300      	movs	r3, #0
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f7ff fcac 	bl	8002acc <eMBRegCoilsCB>
 8003174:	4603      	mov	r3, r0
 8003176:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003178:	7afb      	ldrb	r3, [r7, #11]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d006      	beq.n	800318c <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800317e:	7afb      	ldrb	r3, [r7, #11]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fb85 	bl	8003890 <prveMBError2Exception>
 8003186:	4603      	mov	r3, r0
 8003188:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 800318a:	e00d      	b.n	80031a8 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	881a      	ldrh	r2, [r3, #0]
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	b29b      	uxth	r3, r3
 8003194:	4413      	add	r3, r2
 8003196:	b29a      	uxth	r2, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800319c:	e004      	b.n	80031a8 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800319e:	2303      	movs	r3, #3
 80031a0:	75bb      	strb	r3, [r7, #22]
 80031a2:	e001      	b.n	80031a8 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80031a4:	2303      	movs	r3, #3
 80031a6:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 80031a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 80031bc:	2300      	movs	r3, #0
 80031be:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	2b05      	cmp	r3, #5
 80031c6:	d140      	bne.n	800324a <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3301      	adds	r3, #1
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3302      	adds	r3, #2
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	b29a      	uxth	r2, r3
 80031dc:	89bb      	ldrh	r3, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80031e2:	89bb      	ldrh	r3, [r7, #12]
 80031e4:	3301      	adds	r3, #1
 80031e6:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d128      	bne.n	8003244 <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3303      	adds	r3, #3
 80031f6:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80031f8:	2bff      	cmp	r3, #255	; 0xff
 80031fa:	d004      	beq.n	8003206 <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3303      	adds	r3, #3
 8003200:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8003202:	2b00      	cmp	r3, #0
 8003204:	d11e      	bne.n	8003244 <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3303      	adds	r3, #3
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2bff      	cmp	r3, #255	; 0xff
 8003212:	d102      	bne.n	800321a <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8003214:	2301      	movs	r3, #1
 8003216:	723b      	strb	r3, [r7, #8]
 8003218:	e001      	b.n	800321e <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 800321e:	89b9      	ldrh	r1, [r7, #12]
 8003220:	f107 0008 	add.w	r0, r7, #8
 8003224:	2301      	movs	r3, #1
 8003226:	2201      	movs	r2, #1
 8003228:	f7ff fc50 	bl	8002acc <eMBRegCoilsCB>
 800322c:	4603      	mov	r3, r0
 800322e:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003230:	7afb      	ldrb	r3, [r7, #11]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003236:	7afb      	ldrb	r3, [r7, #11]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fb29 	bl	8003890 <prveMBError2Exception>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8003242:	e004      	b.n	800324e <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003244:	2303      	movs	r3, #3
 8003246:	73fb      	strb	r3, [r7, #15]
 8003248:	e001      	b.n	800324e <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800324a:	2303      	movs	r3, #3
 800324c:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800324e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8003262:	2300      	movs	r3, #0
 8003264:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	2b05      	cmp	r3, #5
 800326c:	d954      	bls.n	8003318 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3301      	adds	r3, #1
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	b29b      	uxth	r3, r3
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3302      	adds	r3, #2
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	b29a      	uxth	r2, r3
 8003282:	89bb      	ldrh	r3, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8003288:	89bb      	ldrh	r3, [r7, #12]
 800328a:	3301      	adds	r3, #1
 800328c:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3303      	adds	r3, #3
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3304      	adds	r3, #4
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	897b      	ldrh	r3, [r7, #10]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	795b      	ldrb	r3, [r3, #5]
 80032ac:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80032ae:	897b      	ldrh	r3, [r7, #10]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d006      	beq.n	80032c6 <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80032b8:	897b      	ldrh	r3, [r7, #10]
 80032ba:	08db      	lsrs	r3, r3, #3
 80032bc:	b29b      	uxth	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	3301      	adds	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	e003      	b.n	80032ce <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80032c6:	897b      	ldrh	r3, [r7, #10]
 80032c8:	08db      	lsrs	r3, r3, #3
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01e      	beq.n	8003312 <eMBFuncWriteMultipleCoils+0xba>
 80032d4:	897b      	ldrh	r3, [r7, #10]
 80032d6:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 80032da:	d81a      	bhi.n	8003312 <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	7a7b      	ldrb	r3, [r7, #9]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d116      	bne.n	8003312 <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	1d98      	adds	r0, r3, #6
 80032e8:	897a      	ldrh	r2, [r7, #10]
 80032ea:	89b9      	ldrh	r1, [r7, #12]
 80032ec:	2301      	movs	r3, #1
 80032ee:	f7ff fbed 	bl	8002acc <eMBRegCoilsCB>
 80032f2:	4603      	mov	r3, r0
 80032f4:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80032f6:	7a3b      	ldrb	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d006      	beq.n	800330a <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80032fc:	7a3b      	ldrb	r3, [r7, #8]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fac6 	bl	8003890 <prveMBError2Exception>
 8003304:	4603      	mov	r3, r0
 8003306:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8003308:	e008      	b.n	800331c <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2205      	movs	r2, #5
 800330e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003310:	e004      	b.n	800331c <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003312:	2303      	movs	r3, #3
 8003314:	73bb      	strb	r3, [r7, #14]
 8003316:	e001      	b.n	800331c <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003318:	2303      	movs	r3, #3
 800331a:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 800331c:	7bbb      	ldrb	r3, [r7, #14]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b086      	sub	sp, #24
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8003330:	2300      	movs	r3, #0
 8003332:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	2b05      	cmp	r3, #5
 800333a:	d16c      	bne.n	8003416 <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3301      	adds	r3, #1
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3302      	adds	r3, #2
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	b29a      	uxth	r2, r3
 8003350:	8abb      	ldrh	r3, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8003356:	8abb      	ldrh	r3, [r7, #20]
 8003358:	3301      	adds	r3, #1
 800335a:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3303      	adds	r3, #3
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	b29a      	uxth	r2, r3
 8003370:	8a7b      	ldrh	r3, [r7, #18]
 8003372:	4313      	orrs	r3, r2
 8003374:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8003376:	8a7b      	ldrh	r3, [r7, #18]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d049      	beq.n	8003410 <eMBFuncReadDiscreteInputs+0xea>
 800337c:	8a7b      	ldrh	r3, [r7, #18]
 800337e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003382:	d245      	bcs.n	8003410 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2200      	movs	r2, #0
 800338c:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	60fa      	str	r2, [r7, #12]
 8003394:	2202      	movs	r2, #2
 8003396:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	3301      	adds	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80033a4:	8a7b      	ldrh	r3, [r7, #18]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 80033ae:	8a7b      	ldrh	r3, [r7, #18]
 80033b0:	08db      	lsrs	r3, r3, #3
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	75fb      	strb	r3, [r7, #23]
 80033ba:	e003      	b.n	80033c4 <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 80033bc:	8a7b      	ldrh	r3, [r7, #18]
 80033be:	08db      	lsrs	r3, r3, #3
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	60fa      	str	r2, [r7, #12]
 80033ca:	7dfa      	ldrb	r2, [r7, #23]
 80033cc:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 80033da:	8a7a      	ldrh	r2, [r7, #18]
 80033dc:	8abb      	ldrh	r3, [r7, #20]
 80033de:	4619      	mov	r1, r3
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f7ff fbf7 	bl	8002bd4 <eMBRegDiscreteCB>
 80033e6:	4603      	mov	r3, r0
 80033e8:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80033ea:	7afb      	ldrb	r3, [r7, #11]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d006      	beq.n	80033fe <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80033f0:	7afb      	ldrb	r3, [r7, #11]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fa4c 	bl	8003890 <prveMBError2Exception>
 80033f8:	4603      	mov	r3, r0
 80033fa:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 80033fc:	e00d      	b.n	800341a <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	881a      	ldrh	r2, [r3, #0]
 8003402:	7dfb      	ldrb	r3, [r7, #23]
 8003404:	b29b      	uxth	r3, r3
 8003406:	4413      	add	r3, r2
 8003408:	b29a      	uxth	r2, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800340e:	e004      	b.n	800341a <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003410:	2303      	movs	r3, #3
 8003412:	75bb      	strb	r3, [r7, #22]
 8003414:	e001      	b.n	800341a <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003416:	2303      	movs	r3, #3
 8003418:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 800341a:	7dbb      	ldrb	r3, [r7, #22]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	2b05      	cmp	r3, #5
 8003438:	d122      	bne.n	8003480 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3301      	adds	r3, #1
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3302      	adds	r3, #2
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	b29a      	uxth	r2, r3
 800344e:	89bb      	ldrh	r3, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8003454:	89bb      	ldrh	r3, [r7, #12]
 8003456:	3301      	adds	r3, #1
 8003458:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	1cd8      	adds	r0, r3, #3
 800345e:	89b9      	ldrh	r1, [r7, #12]
 8003460:	2301      	movs	r3, #1
 8003462:	2201      	movs	r2, #1
 8003464:	f7ff fc0c 	bl	8002c80 <eMBRegHoldingCB>
 8003468:	4603      	mov	r3, r0
 800346a:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 800346c:	7afb      	ldrb	r3, [r7, #11]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8003472:	7afb      	ldrb	r3, [r7, #11]
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fa0b 	bl	8003890 <prveMBError2Exception>
 800347a:	4603      	mov	r3, r0
 800347c:	73fb      	strb	r3, [r7, #15]
 800347e:	e001      	b.n	8003484 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003480:	2303      	movs	r3, #3
 8003482:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d946      	bls.n	8003532 <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3301      	adds	r3, #1
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3302      	adds	r3, #2
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	89bb      	ldrh	r3, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80034be:	89bb      	ldrh	r3, [r7, #12]
 80034c0:	3301      	adds	r3, #1
 80034c2:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3303      	adds	r3, #3
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	021b      	lsls	r3, r3, #8
 80034ce:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	897b      	ldrh	r3, [r7, #10]
 80034da:	4313      	orrs	r3, r2
 80034dc:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	795b      	ldrb	r3, [r3, #5]
 80034e2:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 80034e4:	897b      	ldrh	r3, [r7, #10]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d020      	beq.n	800352c <eMBFuncWriteMultipleHoldingRegister+0x9e>
 80034ea:	897b      	ldrh	r3, [r7, #10]
 80034ec:	2b78      	cmp	r3, #120	; 0x78
 80034ee:	d81d      	bhi.n	800352c <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80034f0:	897b      	ldrh	r3, [r7, #10]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 80034f8:	7a7a      	ldrb	r2, [r7, #9]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d116      	bne.n	800352c <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	1d98      	adds	r0, r3, #6
 8003502:	897a      	ldrh	r2, [r7, #10]
 8003504:	89b9      	ldrh	r1, [r7, #12]
 8003506:	2301      	movs	r3, #1
 8003508:	f7ff fbba 	bl	8002c80 <eMBRegHoldingCB>
 800350c:	4603      	mov	r3, r0
 800350e:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003510:	7a3b      	ldrb	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d006      	beq.n	8003524 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003516:	7a3b      	ldrb	r3, [r7, #8]
 8003518:	4618      	mov	r0, r3
 800351a:	f000 f9b9 	bl	8003890 <prveMBError2Exception>
 800351e:	4603      	mov	r3, r0
 8003520:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8003522:	e008      	b.n	8003536 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2205      	movs	r2, #5
 8003528:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800352a:	e004      	b.n	8003536 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800352c:	2303      	movs	r3, #3
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	e001      	b.n	8003536 <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003532:	2303      	movs	r3, #3
 8003534:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8003536:	7bfb      	ldrb	r3, [r7, #15]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	2b05      	cmp	r3, #5
 8003554:	d15c      	bne.n	8003610 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3301      	adds	r3, #1
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	b29b      	uxth	r3, r3
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3302      	adds	r3, #2
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	b29a      	uxth	r2, r3
 800356a:	8abb      	ldrh	r3, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8003570:	8abb      	ldrh	r3, [r7, #20]
 8003572:	3301      	adds	r3, #1
 8003574:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3303      	adds	r3, #3
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b29b      	uxth	r3, r3
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3304      	adds	r3, #4
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 800358a:	8a7b      	ldrh	r3, [r7, #18]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d03c      	beq.n	800360a <eMBFuncReadHoldingRegister+0xca>
 8003590:	8a7b      	ldrh	r3, [r7, #18]
 8003592:	2b7d      	cmp	r3, #125	; 0x7d
 8003594:	d839      	bhi.n	800360a <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2200      	movs	r2, #0
 800359e:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	60fa      	str	r2, [r7, #12]
 80035a6:	2203      	movs	r2, #3
 80035a8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	3301      	adds	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80035b6:	8a7b      	ldrh	r3, [r7, #18]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1c59      	adds	r1, r3, #1
 80035be:	60f9      	str	r1, [r7, #12]
 80035c0:	0052      	lsls	r2, r2, #1
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80035d2:	8a7a      	ldrh	r2, [r7, #18]
 80035d4:	8ab9      	ldrh	r1, [r7, #20]
 80035d6:	2300      	movs	r3, #0
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f7ff fb51 	bl	8002c80 <eMBRegHoldingCB>
 80035de:	4603      	mov	r3, r0
 80035e0:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80035e2:	7afb      	ldrb	r3, [r7, #11]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d006      	beq.n	80035f6 <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80035e8:	7afb      	ldrb	r3, [r7, #11]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f950 	bl	8003890 <prveMBError2Exception>
 80035f0:	4603      	mov	r3, r0
 80035f2:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80035f4:	e00e      	b.n	8003614 <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	881a      	ldrh	r2, [r3, #0]
 80035fa:	8a7b      	ldrh	r3, [r7, #18]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	b29b      	uxth	r3, r3
 8003600:	4413      	add	r3, r2
 8003602:	b29a      	uxth	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003608:	e004      	b.n	8003614 <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800360a:	2303      	movs	r3, #3
 800360c:	75fb      	strb	r3, [r7, #23]
 800360e:	e001      	b.n	8003614 <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003610:	2303      	movs	r3, #3
 8003612:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8003628:	2300      	movs	r3, #0
 800362a:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	2b09      	cmp	r3, #9
 8003632:	f240 8099 	bls.w	8003768 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3301      	adds	r3, #1
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b29b      	uxth	r3, r3
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3302      	adds	r3, #2
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	b29a      	uxth	r2, r3
 800364a:	8abb      	ldrh	r3, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8003650:	8abb      	ldrh	r3, [r7, #20]
 8003652:	3301      	adds	r3, #1
 8003654:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3303      	adds	r3, #3
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b29b      	uxth	r3, r3
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	b29a      	uxth	r2, r3
 800366a:	8a7b      	ldrh	r3, [r7, #18]
 800366c:	4313      	orrs	r3, r2
 800366e:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3305      	adds	r3, #5
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3306      	adds	r3, #6
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	b29a      	uxth	r2, r3
 8003684:	8a3b      	ldrh	r3, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 800368a:	8a3b      	ldrh	r3, [r7, #16]
 800368c:	3301      	adds	r3, #1
 800368e:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3307      	adds	r3, #7
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	b29b      	uxth	r3, r3
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3308      	adds	r3, #8
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	89fb      	ldrh	r3, [r7, #14]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	7a5b      	ldrb	r3, [r3, #9]
 80036ae:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 80036b0:	8a7b      	ldrh	r3, [r7, #18]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d056      	beq.n	8003764 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80036b6:	8a7b      	ldrh	r3, [r7, #18]
 80036b8:	2b7d      	cmp	r3, #125	; 0x7d
 80036ba:	d853      	bhi.n	8003764 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80036bc:	89fb      	ldrh	r3, [r7, #14]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d050      	beq.n	8003764 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80036c2:	89fb      	ldrh	r3, [r7, #14]
 80036c4:	2b79      	cmp	r3, #121	; 0x79
 80036c6:	d84d      	bhi.n	8003764 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 80036c8:	89fb      	ldrh	r3, [r7, #14]
 80036ca:	005a      	lsls	r2, r3, #1
 80036cc:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d148      	bne.n	8003764 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f103 000a 	add.w	r0, r3, #10
 80036d8:	89fa      	ldrh	r2, [r7, #14]
 80036da:	8a39      	ldrh	r1, [r7, #16]
 80036dc:	2301      	movs	r3, #1
 80036de:	f7ff facf 	bl	8002c80 <eMBRegHoldingCB>
 80036e2:	4603      	mov	r3, r0
 80036e4:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80036e6:	7dbb      	ldrb	r3, [r7, #22]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d131      	bne.n	8003750 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	60ba      	str	r2, [r7, #8]
 80036fc:	2217      	movs	r2, #23
 80036fe:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	3301      	adds	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 800370c:	8a7b      	ldrh	r3, [r7, #18]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	1c59      	adds	r1, r3, #1
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	0052      	lsls	r2, r2, #1
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8003728:	8a7a      	ldrh	r2, [r7, #18]
 800372a:	8ab9      	ldrh	r1, [r7, #20]
 800372c:	2300      	movs	r3, #0
 800372e:	68b8      	ldr	r0, [r7, #8]
 8003730:	f7ff faa6 	bl	8002c80 <eMBRegHoldingCB>
 8003734:	4603      	mov	r3, r0
 8003736:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8003738:	7dbb      	ldrb	r3, [r7, #22]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d108      	bne.n	8003750 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	881a      	ldrh	r2, [r3, #0]
 8003742:	8a7b      	ldrh	r3, [r7, #18]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	b29b      	uxth	r3, r3
 8003748:	4413      	add	r3, r2
 800374a:	b29a      	uxth	r2, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8003750:	7dbb      	ldrb	r3, [r7, #22]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003756:	7dbb      	ldrb	r3, [r7, #22]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 f899 	bl	8003890 <prveMBError2Exception>
 800375e:	4603      	mov	r3, r0
 8003760:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8003762:	e001      	b.n	8003768 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003764:	2303      	movs	r3, #3
 8003766:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8003768:	7dfb      	ldrb	r3, [r7, #23]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800377c:	2300      	movs	r3, #0
 800377e:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	2b05      	cmp	r3, #5
 8003786:	d15f      	bne.n	8003848 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3301      	adds	r3, #1
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3302      	adds	r3, #2
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	b29a      	uxth	r2, r3
 800379c:	8abb      	ldrh	r3, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80037a2:	8abb      	ldrh	r3, [r7, #20]
 80037a4:	3301      	adds	r3, #1
 80037a6:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3303      	adds	r3, #3
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	8a7b      	ldrh	r3, [r7, #18]
 80037be:	4313      	orrs	r3, r2
 80037c0:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 80037c2:	8a7b      	ldrh	r3, [r7, #18]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d03c      	beq.n	8003842 <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80037c8:	8a7b      	ldrh	r3, [r7, #18]
 80037ca:	2b7c      	cmp	r3, #124	; 0x7c
 80037cc:	d839      	bhi.n	8003842 <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2200      	movs	r2, #0
 80037d6:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	60fa      	str	r2, [r7, #12]
 80037de:	2204      	movs	r2, #4
 80037e0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	3301      	adds	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80037ee:	8a7b      	ldrh	r3, [r7, #18]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1c59      	adds	r1, r3, #1
 80037f6:	60f9      	str	r1, [r7, #12]
 80037f8:	0052      	lsls	r2, r2, #1
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	3301      	adds	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 800380a:	8a7a      	ldrh	r2, [r7, #18]
 800380c:	8abb      	ldrh	r3, [r7, #20]
 800380e:	4619      	mov	r1, r3
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff faa5 	bl	8002d60 <eMBRegInputCB>
 8003816:	4603      	mov	r3, r0
 8003818:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800381a:	7afb      	ldrb	r3, [r7, #11]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d006      	beq.n	800382e <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003820:	7afb      	ldrb	r3, [r7, #11]
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f834 	bl	8003890 <prveMBError2Exception>
 8003828:	4603      	mov	r3, r0
 800382a:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800382c:	e00e      	b.n	800384c <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	881a      	ldrh	r2, [r3, #0]
 8003832:	8a7b      	ldrh	r3, [r7, #18]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	b29b      	uxth	r3, r3
 8003838:	4413      	add	r3, r2
 800383a:	b29a      	uxth	r2, r3
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8003840:	e004      	b.n	800384c <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003842:	2303      	movs	r3, #3
 8003844:	75fb      	strb	r3, [r7, #23]
 8003846:	e001      	b.n	800384c <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003848:	2303      	movs	r3, #3
 800384a:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800384c:	7dfb      	ldrb	r3, [r7, #23]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3301      	adds	r3, #1
 8003866:	4a08      	ldr	r2, [pc, #32]	; (8003888 <eMBFuncReportSlaveID+0x30>)
 8003868:	8812      	ldrh	r2, [r2, #0]
 800386a:	4908      	ldr	r1, [pc, #32]	; (800388c <eMBFuncReportSlaveID+0x34>)
 800386c:	4618      	mov	r0, r3
 800386e:	f012 f8f6 	bl	8015a5e <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <eMBFuncReportSlaveID+0x30>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	3301      	adds	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000610 	.word	0x20000610
 800388c:	200005f0 	.word	0x200005f0

08003890 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	2b07      	cmp	r3, #7
 800389e:	d00c      	beq.n	80038ba <prveMBError2Exception+0x2a>
 80038a0:	2b07      	cmp	r3, #7
 80038a2:	dc0d      	bgt.n	80038c0 <prveMBError2Exception+0x30>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <prveMBError2Exception+0x1e>
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d003      	beq.n	80038b4 <prveMBError2Exception+0x24>
 80038ac:	e008      	b.n	80038c0 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
            break;
 80038b2:	e008      	b.n	80038c6 <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80038b4:	2302      	movs	r3, #2
 80038b6:	73fb      	strb	r3, [r7, #15]
            break;
 80038b8:	e005      	b.n	80038c6 <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80038ba:	2306      	movs	r3, #6
 80038bc:	73fb      	strb	r3, [r7, #15]
            break;
 80038be:	e002      	b.n	80038c6 <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80038c0:	2304      	movs	r3, #4
 80038c2:	73fb      	strb	r3, [r7, #15]
            break;
 80038c4:	bf00      	nop
    }

    return eStatus;
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 80038d8:	4b04      	ldr	r3, [pc, #16]	; (80038ec <xMBPortEventInit+0x18>)
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
    return TRUE;
 80038de:	2301      	movs	r3, #1
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000613 	.word	0x20000613

080038f0 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <xMBPortEventPost+0x24>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8003900:	4a05      	ldr	r2, [pc, #20]	; (8003918 <xMBPortEventPost+0x28>)
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8003906:	2301      	movs	r3, #1
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	20000613 	.word	0x20000613
 8003918:	20000612 	.word	0x20000612

0800391c <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <xMBPortEventGet+0x34>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <xMBPortEventGet+0x38>)
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <xMBPortEventGet+0x34>)
 800393a:	2200      	movs	r2, #0
 800393c:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	20000613 	.word	0x20000613
 8003954:	20000612 	.word	0x20000612

08003958 <prvvMBTCPLogFrame>:
/* ----------------------- Start implementation -----------------------------*/

#ifdef MB_TCP_DEBUG
void
prvvMBTCPLogFrame( UCHAR * pucMsg, UCHAR * pucFrame, USHORT usFrameLen )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	4613      	mov	r3, r2
 8003964:	80fb      	strh	r3, [r7, #6]
    int             i;
    int             res = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
    int             iBufPos = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
    size_t          iBufLeft = MB_FRAME_LOG_BUFSIZE;
 800396e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003972:	613b      	str	r3, [r7, #16]
    static CHAR     arcBuffer[MB_FRAME_LOG_BUFSIZE];

    assert( pucFrame != NULL );
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d105      	bne.n	8003986 <prvvMBTCPLogFrame+0x2e>
 800397a:	4b55      	ldr	r3, [pc, #340]	; (8003ad0 <prvvMBTCPLogFrame+0x178>)
 800397c:	222c      	movs	r2, #44	; 0x2c
 800397e:	4955      	ldr	r1, [pc, #340]	; (8003ad4 <prvvMBTCPLogFrame+0x17c>)
 8003980:	4855      	ldr	r0, [pc, #340]	; (8003ad8 <prvvMBTCPLogFrame+0x180>)
 8003982:	f011 ff39 	bl	80157f8 <iprintf>

    for( i = 0; i < usFrameLen; i++ )
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e07d      	b.n	8003a88 <prvvMBTCPLogFrame+0x130>
    {
        /* Print some additional frame information. */
        switch ( i )
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	2b08      	cmp	r3, #8
 8003990:	d850      	bhi.n	8003a34 <prvvMBTCPLogFrame+0xdc>
 8003992:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <prvvMBTCPLogFrame+0x40>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039bd 	.word	0x080039bd
 800399c:	08003a35 	.word	0x08003a35
 80039a0:	080039d1 	.word	0x080039d1
 80039a4:	08003a35 	.word	0x08003a35
 80039a8:	080039e5 	.word	0x080039e5
 80039ac:	08003a35 	.word	0x08003a35
 80039b0:	080039f9 	.word	0x080039f9
 80039b4:	08003a0d 	.word	0x08003a0d
 80039b8:	08003a21 	.word	0x08003a21
        {
        case 0:
            /* TID = Transaction Identifier. */
            res = snprintf( &arcBuffer[iBufPos], iBufLeft, "| TID = " );
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	4a47      	ldr	r2, [pc, #284]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 80039c0:	4413      	add	r3, r2
 80039c2:	4a47      	ldr	r2, [pc, #284]	; (8003ae0 <prvvMBTCPLogFrame+0x188>)
 80039c4:	6939      	ldr	r1, [r7, #16]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f011 ff28 	bl	801581c <sniprintf>
 80039cc:	61b8      	str	r0, [r7, #24]
            break;
 80039ce:	e034      	b.n	8003a3a <prvvMBTCPLogFrame+0xe2>
        case 2:
            /* PID = Protocol Identifier. */
            res = snprintf( &arcBuffer[iBufPos], iBufLeft, " | PID = " );
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	4a42      	ldr	r2, [pc, #264]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 80039d4:	4413      	add	r3, r2
 80039d6:	4a43      	ldr	r2, [pc, #268]	; (8003ae4 <prvvMBTCPLogFrame+0x18c>)
 80039d8:	6939      	ldr	r1, [r7, #16]
 80039da:	4618      	mov	r0, r3
 80039dc:	f011 ff1e 	bl	801581c <sniprintf>
 80039e0:	61b8      	str	r0, [r7, #24]
            break;
 80039e2:	e02a      	b.n	8003a3a <prvvMBTCPLogFrame+0xe2>
        case 4:
            /* Length */
            res = snprintf( &arcBuffer[iBufPos], iBufLeft, " | LEN = " );
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	4a3d      	ldr	r2, [pc, #244]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 80039e8:	4413      	add	r3, r2
 80039ea:	4a3f      	ldr	r2, [pc, #252]	; (8003ae8 <prvvMBTCPLogFrame+0x190>)
 80039ec:	6939      	ldr	r1, [r7, #16]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f011 ff14 	bl	801581c <sniprintf>
 80039f4:	61b8      	str	r0, [r7, #24]
            break;
 80039f6:	e020      	b.n	8003a3a <prvvMBTCPLogFrame+0xe2>
        case 6:
            /* UID = Unit Identifier. */
            res = snprintf( &arcBuffer[iBufPos], iBufLeft, " | UID = " );
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	4a38      	ldr	r2, [pc, #224]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 80039fc:	4413      	add	r3, r2
 80039fe:	4a3b      	ldr	r2, [pc, #236]	; (8003aec <prvvMBTCPLogFrame+0x194>)
 8003a00:	6939      	ldr	r1, [r7, #16]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f011 ff0a 	bl	801581c <sniprintf>
 8003a08:	61b8      	str	r0, [r7, #24]
            break;
 8003a0a:	e016      	b.n	8003a3a <prvvMBTCPLogFrame+0xe2>
        case 7:
            /* MB Function Code. */
            res = snprintf( &arcBuffer[iBufPos], iBufLeft, "|| FUNC = " );
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	4a33      	ldr	r2, [pc, #204]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 8003a10:	4413      	add	r3, r2
 8003a12:	4a37      	ldr	r2, [pc, #220]	; (8003af0 <prvvMBTCPLogFrame+0x198>)
 8003a14:	6939      	ldr	r1, [r7, #16]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f011 ff00 	bl	801581c <sniprintf>
 8003a1c:	61b8      	str	r0, [r7, #24]
            break;
 8003a1e:	e00c      	b.n	8003a3a <prvvMBTCPLogFrame+0xe2>
        case 8:
            /* MB PDU rest. */
            res = snprintf( &arcBuffer[iBufPos], iBufLeft, " | DATA = " );
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	4a2e      	ldr	r2, [pc, #184]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 8003a24:	4413      	add	r3, r2
 8003a26:	4a33      	ldr	r2, [pc, #204]	; (8003af4 <prvvMBTCPLogFrame+0x19c>)
 8003a28:	6939      	ldr	r1, [r7, #16]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f011 fef6 	bl	801581c <sniprintf>
 8003a30:	61b8      	str	r0, [r7, #24]
            break;
 8003a32:	e002      	b.n	8003a3a <prvvMBTCPLogFrame+0xe2>
        default:
            res = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
            break;
 8003a38:	bf00      	nop
        }
        if( res == -1 )
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a40:	d028      	beq.n	8003a94 <prvvMBTCPLogFrame+0x13c>
        {
            break;
        }
        else
        {
            iBufPos += res;
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	4413      	add	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
            iBufLeft -= res;
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	613b      	str	r3, [r7, #16]
        }

        /* Print the data. */
        res = snprintf( &arcBuffer[iBufPos], iBufLeft, "%02X", pucFrame[i] );
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	4a21      	ldr	r2, [pc, #132]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 8003a56:	1898      	adds	r0, r3, r2
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	4a25      	ldr	r2, [pc, #148]	; (8003af8 <prvvMBTCPLogFrame+0x1a0>)
 8003a62:	6939      	ldr	r1, [r7, #16]
 8003a64:	f011 feda 	bl	801581c <sniprintf>
 8003a68:	61b8      	str	r0, [r7, #24]
        if( res == -1 )
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a70:	d012      	beq.n	8003a98 <prvvMBTCPLogFrame+0x140>
        {
            break;
        }
        else
        {
            iBufPos += res;
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	4413      	add	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
            iBufLeft -= res;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	613b      	str	r3, [r7, #16]
    for( i = 0; i < usFrameLen; i++ )
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3301      	adds	r3, #1
 8003a86:	61fb      	str	r3, [r7, #28]
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	f6ff af7d 	blt.w	800398c <prvvMBTCPLogFrame+0x34>
 8003a92:	e002      	b.n	8003a9a <prvvMBTCPLogFrame+0x142>
            break;
 8003a94:	bf00      	nop
 8003a96:	e000      	b.n	8003a9a <prvvMBTCPLogFrame+0x142>
            break;
 8003a98:	bf00      	nop
        }
    }

    if( res != -1 )
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d012      	beq.n	8003ac8 <prvvMBTCPLogFrame+0x170>
    {
        /* Append an end of frame string. */
        res = snprintf( &arcBuffer[iBufPos], iBufLeft, " |\r\n" );
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 8003aa6:	4413      	add	r3, r2
 8003aa8:	4a14      	ldr	r2, [pc, #80]	; (8003afc <prvvMBTCPLogFrame+0x1a4>)
 8003aaa:	6939      	ldr	r1, [r7, #16]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f011 feb5 	bl	801581c <sniprintf>
 8003ab2:	61b8      	str	r0, [r7, #24]
        if( res != -1 )
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aba:	d005      	beq.n	8003ac8 <prvvMBTCPLogFrame+0x170>
        {
            vMBPortLog( MB_LOG_DEBUG, pucMsg, "%s", arcBuffer );
 8003abc:	4b07      	ldr	r3, [pc, #28]	; (8003adc <prvvMBTCPLogFrame+0x184>)
 8003abe:	4a10      	ldr	r2, [pc, #64]	; (8003b00 <prvvMBTCPLogFrame+0x1a8>)
 8003ac0:	68f9      	ldr	r1, [r7, #12]
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	f000 f81e 	bl	8003b04 <vMBPortLog>
        }
    }
}
 8003ac8:	bf00      	nop
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	08016a00 	.word	0x08016a00
 8003ad4:	08016a2c 	.word	0x08016a2c
 8003ad8:	08016a40 	.word	0x08016a40
 8003adc:	20000614 	.word	0x20000614
 8003ae0:	08016a68 	.word	0x08016a68
 8003ae4:	08016a74 	.word	0x08016a74
 8003ae8:	08016a80 	.word	0x08016a80
 8003aec:	08016a8c 	.word	0x08016a8c
 8003af0:	08016a98 	.word	0x08016a98
 8003af4:	08016aa4 	.word	0x08016aa4
 8003af8:	08016ab0 	.word	0x08016ab0
 8003afc:	08016ab8 	.word	0x08016ab8
 8003b00:	08016ac0 	.word	0x08016ac0

08003b04 <vMBPortLog>:
#endif

void
vMBPortLog( eMBPortLogLevel eLevel, const CHAR * szModule, const CHAR * szFmt, ... )
{
 8003b04:	b40c      	push	{r2, r3}
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	6039      	str	r1, [r7, #0]
 8003b10:	71fb      	strb	r3, [r7, #7]
    va_list         args;
    static const char *arszLevel2Str[] = { "DEBUG", "INFO", "WARN", "ERROR" };

    ( void )printf( "%s: %s: ", arszLevel2Str[eLevel], szModule );
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	4a0a      	ldr	r2, [pc, #40]	; (8003b40 <vMBPortLog+0x3c>)
 8003b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4809      	ldr	r0, [pc, #36]	; (8003b44 <vMBPortLog+0x40>)
 8003b20:	f011 fe6a 	bl	80157f8 <iprintf>
    va_start( args, szFmt );
 8003b24:	f107 031c 	add.w	r3, r7, #28
 8003b28:	60fb      	str	r3, [r7, #12]
    vprintf( szFmt, args );
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	69b8      	ldr	r0, [r7, #24]
 8003b2e:	f011 feed 	bl	801590c <viprintf>
    va_end( args );
}
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b3c:	b002      	add	sp, #8
 8003b3e:	4770      	bx	lr
 8003b40:	20000440 	.word	0x20000440
 8003b44:	08016ac4 	.word	0x08016ac4

08003b48 <xMBTCPPortInit>:
static void     prvvMBTCPPortError( void *pvArg, err_t xErr );

/* ----------------------- Begin implementation -----------------------------*/
BOOL
xMBTCPPortInit( USHORT usTCPPort )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	80fb      	strh	r3, [r7, #6]
    struct tcp_pcb *pxPCBListenNew, *pxPCBListenOld;
    BOOL            bOkay = FALSE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	757b      	strb	r3, [r7, #21]
    USHORT          usPort;

    if( usTCPPort == 0 )
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d103      	bne.n	8003b64 <xMBTCPPortInit+0x1c>
    {
        usPort = MB_TCP_DEFAULT_PORT;
 8003b5c:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 8003b60:	82fb      	strh	r3, [r7, #22]
 8003b62:	e001      	b.n	8003b68 <xMBTCPPortInit+0x20>
    }
    else
    {
        usPort = ( USHORT ) usTCPPort;
 8003b64:	88fb      	ldrh	r3, [r7, #6]
 8003b66:	82fb      	strh	r3, [r7, #22]
    }

    if( ( pxPCBListenNew = pxPCBListenOld = tcp_new(  ) ) == NULL )
 8003b68:	f008 fe0a 	bl	800c780 <tcp_new>
 8003b6c:	6138      	str	r0, [r7, #16]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <xMBTCPPortInit+0x36>
    {
        /* Can't create TCP socket. */
        bOkay = FALSE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	757b      	strb	r3, [r7, #21]
 8003b7c:	e028      	b.n	8003bd0 <xMBTCPPortInit+0x88>
    }
    else if( tcp_bind( pxPCBListenNew, IP_ADDR_ANY, ( u16_t ) usPort ) != ERR_OK )
 8003b7e:	8afb      	ldrh	r3, [r7, #22]
 8003b80:	461a      	mov	r2, r3
 8003b82:	4917      	ldr	r1, [pc, #92]	; (8003be0 <xMBTCPPortInit+0x98>)
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f007 fd75 	bl	800b674 <tcp_bind>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <xMBTCPPortInit+0x54>
    {
        /* Bind failed - Maybe illegal port value or in use. */
        ( void )tcp_close( pxPCBListenOld );
 8003b90:	6938      	ldr	r0, [r7, #16]
 8003b92:	f007 fc79 	bl	800b488 <tcp_close>
        bOkay = FALSE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	757b      	strb	r3, [r7, #21]
 8003b9a:	e019      	b.n	8003bd0 <xMBTCPPortInit+0x88>
    }
    else if( ( pxPCBListenNew = tcp_listen( pxPCBListenNew ) ) == NULL )
 8003b9c:	21ff      	movs	r1, #255	; 0xff
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f007 fe20 	bl	800b7e4 <tcp_listen_with_backlog>
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d105      	bne.n	8003bb8 <xMBTCPPortInit+0x70>
    {
        ( void )tcp_close( pxPCBListenOld );
 8003bac:	6938      	ldr	r0, [r7, #16]
 8003bae:	f007 fc6b 	bl	800b488 <tcp_close>
        bOkay = FALSE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	757b      	strb	r3, [r7, #21]
 8003bb6:	e00b      	b.n	8003bd0 <xMBTCPPortInit+0x88>
    }
    else
    {
        /* Register callback function for new clients. */
        tcp_accept( pxPCBListenNew, prvxMBTCPPortAccept );
 8003bb8:	490a      	ldr	r1, [pc, #40]	; (8003be4 <xMBTCPPortInit+0x9c>)
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f008 fe3e 	bl	800c83c <tcp_accept>

        /* Everything okay. Set global variable. */
        pxPCBListen = pxPCBListenNew;
 8003bc0:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <xMBTCPPortInit+0xa0>)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6013      	str	r3, [r2, #0]

#ifdef MB_TCP_DEBUG
        vMBPortLog( MB_LOG_DEBUG, "MBTCP-ACCEPT", "Protocol stack ready.\r\n" );
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <xMBTCPPortInit+0xa4>)
 8003bc8:	4909      	ldr	r1, [pc, #36]	; (8003bf0 <xMBTCPPortInit+0xa8>)
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f7ff ff9a 	bl	8003b04 <vMBPortLog>
#endif
    }
    bOkay = TRUE;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	757b      	strb	r3, [r7, #21]
    return bOkay;
 8003bd4:	7d7b      	ldrb	r3, [r7, #21]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	080197f0 	.word	0x080197f0
 8003be4:	08003c9d 	.word	0x08003c9d
 8003be8:	20000814 	.word	0x20000814
 8003bec:	08016af0 	.word	0x08016af0
 8003bf0:	08016b08 	.word	0x08016b08

08003bf4 <prvvMBPortReleaseClient>:

void
prvvMBPortReleaseClient( struct tcp_pcb *pxPCB )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af04      	add	r7, sp, #16
 8003bfa:	6078      	str	r0, [r7, #4]
    if( pxPCB != NULL )
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d033      	beq.n	8003c6a <prvvMBPortReleaseClient+0x76>
    {
        if( tcp_close( pxPCB ) != ERR_OK )
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f007 fc40 	bl	800b488 <tcp_close>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <prvvMBPortReleaseClient+0x20>
        {
            tcp_abort( pxPCB );
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f007 fd24 	bl	800b65c <tcp_abort>
        }
        //vPortEnterCritical(  );
        if( pxPCB == pxPCBClient )
 8003c14:	4b17      	ldr	r3, [pc, #92]	; (8003c74 <prvvMBPortReleaseClient+0x80>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d11d      	bne.n	8003c5a <prvvMBPortReleaseClient+0x66>
        {
#ifdef MB_TCP_DEBUG
            vMBPortLog( MB_LOG_DEBUG, "MBTCP-CLOSE", "Closed connection to %d.%d.%d.%d.\r\n",
                        ip4_addr1( &( pxPCB->remote_ip ) ),
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	781b      	ldrb	r3, [r3, #0]
            vMBPortLog( MB_LOG_DEBUG, "MBTCP-CLOSE", "Closed connection to %d.%d.%d.%d.\r\n",
 8003c24:	4618      	mov	r0, r3
                        ip4_addr2( &( pxPCB->remote_ip ) ),
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	781b      	ldrb	r3, [r3, #0]
            vMBPortLog( MB_LOG_DEBUG, "MBTCP-CLOSE", "Closed connection to %d.%d.%d.%d.\r\n",
 8003c2e:	461a      	mov	r2, r3
                        ip4_addr3( &( pxPCB->remote_ip ) ), ip4_addr4( &( pxPCB->remote_ip ) ) );
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	3302      	adds	r3, #2
 8003c36:	781b      	ldrb	r3, [r3, #0]
            vMBPortLog( MB_LOG_DEBUG, "MBTCP-CLOSE", "Closed connection to %d.%d.%d.%d.\r\n",
 8003c38:	4619      	mov	r1, r3
                        ip4_addr3( &( pxPCB->remote_ip ) ), ip4_addr4( &( pxPCB->remote_ip ) ) );
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	3303      	adds	r3, #3
 8003c40:	781b      	ldrb	r3, [r3, #0]
            vMBPortLog( MB_LOG_DEBUG, "MBTCP-CLOSE", "Closed connection to %d.%d.%d.%d.\r\n",
 8003c42:	9302      	str	r3, [sp, #8]
 8003c44:	9101      	str	r1, [sp, #4]
 8003c46:	9200      	str	r2, [sp, #0]
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4a0b      	ldr	r2, [pc, #44]	; (8003c78 <prvvMBPortReleaseClient+0x84>)
 8003c4c:	490b      	ldr	r1, [pc, #44]	; (8003c7c <prvvMBPortReleaseClient+0x88>)
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f7ff ff58 	bl	8003b04 <vMBPortLog>
#endif
            pxPCBClient = NULL;
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <prvvMBPortReleaseClient+0x80>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
        }
        if( pxPCB == pxPCBListen )
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <prvvMBPortReleaseClient+0x8c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d102      	bne.n	8003c6a <prvvMBPortReleaseClient+0x76>
        {
            pxPCBListen = NULL;
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <prvvMBPortReleaseClient+0x8c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
        }
        //vPortExitCritical(  );
    }
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000818 	.word	0x20000818
 8003c78:	08016b18 	.word	0x08016b18
 8003c7c:	08016b3c 	.word	0x08016b3c
 8003c80:	20000814 	.word	0x20000814

08003c84 <vMBTCPPortDisable>:
    //vMBPortEventClose(  );
}

void
vMBTCPPortDisable( void )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
    prvvMBPortReleaseClient( pxPCBClient );
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <vMBTCPPortDisable+0x14>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ffb1 	bl	8003bf4 <prvvMBPortReleaseClient>
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000818 	.word	0x20000818

08003c9c <prvxMBTCPPortAccept>:

err_t
prvxMBTCPPortAccept( void *pvArg, struct tcp_pcb *pxPCB, err_t xErr )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af04      	add	r7, sp, #16
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	71fb      	strb	r3, [r7, #7]
    err_t           error;

    if( xErr != ERR_OK )
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <prvxMBTCPPortAccept+0x1c>
    {
        return xErr;
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	e03a      	b.n	8003d2e <prvxMBTCPPortAccept+0x92>
    }

    /* We can handle only one client. */
    if( pxPCBClient == NULL )
 8003cb8:	4b1f      	ldr	r3, [pc, #124]	; (8003d38 <prvxMBTCPPortAccept+0x9c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d12f      	bne.n	8003d20 <prvxMBTCPPortAccept+0x84>
    {
        /* Register the client. */
        pxPCBClient = pxPCB;
 8003cc0:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <prvxMBTCPPortAccept+0x9c>)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6013      	str	r3, [r2, #0]

        /* Set up the receive function prvxMBTCPPortReceive( ) to be called when data
         * arrives.
         */
        tcp_recv( pxPCB, prvxMBTCPPortReceive );
 8003cc6:	491d      	ldr	r1, [pc, #116]	; (8003d3c <prvxMBTCPPortAccept+0xa0>)
 8003cc8:	68b8      	ldr	r0, [r7, #8]
 8003cca:	f008 fd73 	bl	800c7b4 <tcp_recv>

        /* Register error handler. */
        tcp_err( pxPCB, prvvMBTCPPortError );
 8003cce:	491c      	ldr	r1, [pc, #112]	; (8003d40 <prvxMBTCPPortAccept+0xa4>)
 8003cd0:	68b8      	ldr	r0, [r7, #8]
 8003cd2:	f008 fd91 	bl	800c7f8 <tcp_err>

        /* Set callback argument later used in the error handler. */
        tcp_arg( pxPCB, pxPCB );
 8003cd6:	68b9      	ldr	r1, [r7, #8]
 8003cd8:	68b8      	ldr	r0, [r7, #8]
 8003cda:	f008 fd59 	bl	800c790 <tcp_arg>

        /* Reset the buffers and state variables. */
        usTCPBufPos = 0;
 8003cde:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <prvxMBTCPPortAccept+0xa8>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	801a      	strh	r2, [r3, #0]

#ifdef MB_TCP_DEBUG
        vMBPortLog( MB_LOG_DEBUG, "MBTCP-ACCEPT", "Accepted new client %d.%d.%d.%d\r\n",
                    ip4_addr1( &( pxPCB->remote_ip ) ),
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	781b      	ldrb	r3, [r3, #0]
        vMBPortLog( MB_LOG_DEBUG, "MBTCP-ACCEPT", "Accepted new client %d.%d.%d.%d\r\n",
 8003cea:	4618      	mov	r0, r3
                    ip4_addr2( &( pxPCB->remote_ip ) ),
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	781b      	ldrb	r3, [r3, #0]
        vMBPortLog( MB_LOG_DEBUG, "MBTCP-ACCEPT", "Accepted new client %d.%d.%d.%d\r\n",
 8003cf4:	461a      	mov	r2, r3
                    ip4_addr3( &( pxPCB->remote_ip ) ), ip4_addr4( &( pxPCB->remote_ip ) ) );
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
        vMBPortLog( MB_LOG_DEBUG, "MBTCP-ACCEPT", "Accepted new client %d.%d.%d.%d\r\n",
 8003cfe:	4619      	mov	r1, r3
                    ip4_addr3( &( pxPCB->remote_ip ) ), ip4_addr4( &( pxPCB->remote_ip ) ) );
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	3304      	adds	r3, #4
 8003d04:	3303      	adds	r3, #3
 8003d06:	781b      	ldrb	r3, [r3, #0]
        vMBPortLog( MB_LOG_DEBUG, "MBTCP-ACCEPT", "Accepted new client %d.%d.%d.%d\r\n",
 8003d08:	9302      	str	r3, [sp, #8]
 8003d0a:	9101      	str	r1, [sp, #4]
 8003d0c:	9200      	str	r2, [sp, #0]
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4a0d      	ldr	r2, [pc, #52]	; (8003d48 <prvxMBTCPPortAccept+0xac>)
 8003d12:	490e      	ldr	r1, [pc, #56]	; (8003d4c <prvxMBTCPPortAccept+0xb0>)
 8003d14:	2000      	movs	r0, #0
 8003d16:	f7ff fef5 	bl	8003b04 <vMBPortLog>
#endif

        error = ERR_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	75fb      	strb	r3, [r7, #23]
 8003d1e:	e004      	b.n	8003d2a <prvxMBTCPPortAccept+0x8e>
    }
    else
    {
        prvvMBPortReleaseClient( pxPCB );
 8003d20:	68b8      	ldr	r0, [r7, #8]
 8003d22:	f7ff ff67 	bl	8003bf4 <prvvMBPortReleaseClient>
        error = ERR_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	75fb      	strb	r3, [r7, #23]
    }
    return error;
 8003d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000818 	.word	0x20000818
 8003d3c:	08003d89 	.word	0x08003d89
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	20000924 	.word	0x20000924
 8003d48:	08016b48 	.word	0x08016b48
 8003d4c:	08016b08 	.word	0x08016b08

08003d50 <prvvMBTCPPortError>:

/* Called in case of an unrecoverable error. In any case we drop the client
 * connection. */
void
prvvMBTCPPortError( void *pvArg, err_t xErr )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
    struct tcp_pcb *pxPCB = pvArg;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	60fb      	str	r3, [r7, #12]

    if( pxPCB != NULL )
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <prvvMBTCPPortError+0x26>
    {
#ifdef MB_TCP_DEBUG
        vMBPortLog( MB_LOG_DEBUG, "MBTCP-ERROR", "Error with client connection! Droping it.\r\n" );
 8003d66:	4a06      	ldr	r2, [pc, #24]	; (8003d80 <prvvMBTCPPortError+0x30>)
 8003d68:	4906      	ldr	r1, [pc, #24]	; (8003d84 <prvvMBTCPPortError+0x34>)
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f7ff feca 	bl	8003b04 <vMBPortLog>
#endif
        prvvMBPortReleaseClient( pxPCB );
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7ff ff3f 	bl	8003bf4 <prvvMBPortReleaseClient>
    }
}
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	08016b6c 	.word	0x08016b6c
 8003d84:	08016b98 	.word	0x08016b98

08003d88 <prvxMBTCPPortReceive>:

err_t
prvxMBTCPPortReceive( void *pvArg, struct tcp_pcb *pxPCB, struct pbuf *p, err_t xErr )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	70fb      	strb	r3, [r7, #3]
    USHORT          usLength;

    err_t           error = xErr;
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	75fb      	strb	r3, [r7, #23]

    if( error != ERR_OK )
 8003d9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <prvxMBTCPPortReceive+0x20>
    {
        return error;
 8003da2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003da6:	e064      	b.n	8003e72 <prvxMBTCPPortReceive+0xea>
    }

    /* If pbuf is NULL then remote end has closed connection. */
    if( p == NULL )
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d104      	bne.n	8003db8 <prvxMBTCPPortReceive+0x30>
    {
        prvvMBPortReleaseClient( pxPCB );
 8003dae:	68b8      	ldr	r0, [r7, #8]
 8003db0:	f7ff ff20 	bl	8003bf4 <prvvMBPortReleaseClient>
        return ERR_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	e05c      	b.n	8003e72 <prvxMBTCPPortReceive+0xea>
    }

    /* Acknowledge that we have received the data bytes. */
    tcp_recved( pxPCB, p->len );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	895b      	ldrh	r3, [r3, #10]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	68b8      	ldr	r0, [r7, #8]
 8003dc0:	f007 fe26 	bl	800ba10 <tcp_recved>

    /* Check for internal buffer overflow. In case of an error drop the
     * client. */
    if( ( usTCPBufPos + p->len ) >= MB_TCP_BUF_SIZE )
 8003dc4:	4b2d      	ldr	r3, [pc, #180]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	895b      	ldrh	r3, [r3, #10]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8003dd4:	dd05      	ble.n	8003de2 <prvxMBTCPPortReceive+0x5a>
    {
        prvvMBPortReleaseClient( pxPCB );
 8003dd6:	68b8      	ldr	r0, [r7, #8]
 8003dd8:	f7ff ff0c 	bl	8003bf4 <prvvMBPortReleaseClient>
        error = ERR_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	75fb      	strb	r3, [r7, #23]
 8003de0:	e042      	b.n	8003e68 <prvxMBTCPPortReceive+0xe0>
    }
    else
    {
        memcpy( &aucTCPBuf[usTCPBufPos], p->payload, p->len );
 8003de2:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <prvxMBTCPPortReceive+0xf8>)
 8003dea:	18d0      	adds	r0, r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6859      	ldr	r1, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	895b      	ldrh	r3, [r3, #10]
 8003df4:	461a      	mov	r2, r3
 8003df6:	f011 fe32 	bl	8015a5e <memcpy>
        usTCPBufPos += p->len;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	895a      	ldrh	r2, [r3, #10]
 8003dfe:	4b1f      	ldr	r3, [pc, #124]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	4413      	add	r3, r2
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003e08:	801a      	strh	r2, [r3, #0]

        /* If we have received the MBAP header we can analyze it and calculate
         * the number of bytes left to complete the current request. If complete
         * notify the protocol stack.
         */
        if( usTCPBufPos >= MB_TCP_FUNC )
 8003e0a:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d92a      	bls.n	8003e68 <prvxMBTCPPortReceive+0xe0>
        {
            /* Length is a byte count of Modbus PDU (function code + data) and the
             * unit identifier. */
            usLength = aucTCPBuf[MB_TCP_LEN] << 8U;
 8003e12:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <prvxMBTCPPortReceive+0xf8>)
 8003e14:	791b      	ldrb	r3, [r3, #4]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	82bb      	strh	r3, [r7, #20]
            usLength |= aucTCPBuf[MB_TCP_LEN + 1];
 8003e1c:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <prvxMBTCPPortReceive+0xf8>)
 8003e1e:	795b      	ldrb	r3, [r3, #5]
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	8abb      	ldrh	r3, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	82bb      	strh	r3, [r7, #20]

            /* Is the frame already complete. */
            if( usTCPBufPos < ( MB_TCP_UID + usLength ) )
 8003e28:	8abb      	ldrh	r3, [r7, #20]
 8003e2a:	3305      	adds	r3, #5
 8003e2c:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003e2e:	8812      	ldrh	r2, [r2, #0]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	da19      	bge.n	8003e68 <prvxMBTCPPortReceive+0xe0>
            {
            }
            else if( usTCPBufPos == ( MB_TCP_UID + usLength ) )
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	8abb      	ldrh	r3, [r7, #20]
 8003e3c:	3306      	adds	r3, #6
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d10a      	bne.n	8003e58 <prvxMBTCPPortReceive+0xd0>
            {
#ifdef MB_TCP_DEBUG
                prvvMBTCPLogFrame( "MBTCP-RECV", &aucTCPBuf[0], usTCPBufPos );
 8003e42:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <prvxMBTCPPortReceive+0xf4>)
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	490d      	ldr	r1, [pc, #52]	; (8003e80 <prvxMBTCPPortReceive+0xf8>)
 8003e4a:	480e      	ldr	r0, [pc, #56]	; (8003e84 <prvxMBTCPPortReceive+0xfc>)
 8003e4c:	f7ff fd84 	bl	8003958 <prvvMBTCPLogFrame>
#endif
                ( void )xMBPortEventPost( EV_FRAME_RECEIVED );
 8003e50:	2001      	movs	r0, #1
 8003e52:	f7ff fd4d 	bl	80038f0 <xMBPortEventPost>
 8003e56:	e007      	b.n	8003e68 <prvxMBTCPPortReceive+0xe0>
            }
            else
            {
#ifdef MB_TCP_DEBUG
                vMBPortLog( MB_LOG_DEBUG, "MBTCP-ERROR",
 8003e58:	4a0b      	ldr	r2, [pc, #44]	; (8003e88 <prvxMBTCPPortReceive+0x100>)
 8003e5a:	490c      	ldr	r1, [pc, #48]	; (8003e8c <prvxMBTCPPortReceive+0x104>)
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f7ff fe51 	bl	8003b04 <vMBPortLog>
                            "Received to many bytes! Droping client.\r\n" );
#endif
                /* This should not happen. We can't deal with such a client and
                 * drop the connection for security reasons.
                 */
                prvvMBPortReleaseClient( pxPCB );
 8003e62:	68b8      	ldr	r0, [r7, #8]
 8003e64:	f7ff fec6 	bl	8003bf4 <prvvMBPortReleaseClient>
            }
        }
    }
    pbuf_free( p );
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f006 fe6f 	bl	800ab4c <pbuf_free>
    return error;
 8003e6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000924 	.word	0x20000924
 8003e80:	2000081c 	.word	0x2000081c
 8003e84:	08016ba4 	.word	0x08016ba4
 8003e88:	08016bb0 	.word	0x08016bb0
 8003e8c:	08016b98 	.word	0x08016b98

08003e90 <xMBTCPPortGetRequest>:

BOOL
xMBTCPPortGetRequest( UCHAR ** ppucMBTCPFrame, USHORT * usTCPLength )
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
    *ppucMBTCPFrame = &aucTCPBuf[0];
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <xMBTCPPortGetRequest+0x2c>)
 8003e9e:	601a      	str	r2, [r3, #0]
    *usTCPLength = usTCPBufPos;
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <xMBTCPPortGetRequest+0x30>)
 8003ea2:	881a      	ldrh	r2, [r3, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	801a      	strh	r2, [r3, #0]

    /* Reset the buffer. */
    usTCPBufPos = 0;
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <xMBTCPPortGetRequest+0x30>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	801a      	strh	r2, [r3, #0]
    return TRUE;
 8003eae:	2301      	movs	r3, #1
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	2000081c 	.word	0x2000081c
 8003ec0:	20000924 	.word	0x20000924

08003ec4 <xMBTCPPortSendResponse>:

BOOL
xMBTCPPortSendResponse( const UCHAR * pucMBTCPFrame, USHORT usTCPLength )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	807b      	strh	r3, [r7, #2]
    BOOL            bFrameSent = FALSE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	73fb      	strb	r3, [r7, #15]

    if( pxPCBClient )
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <xMBTCPPortSendResponse+0x78>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d02a      	beq.n	8003f32 <xMBTCPPortSendResponse+0x6e>
    {
        /* Make sure we can send the packet. */
        assert( tcp_sndbuf( pxPCBClient ) >= usTCPLength );
 8003edc:	4b17      	ldr	r3, [pc, #92]	; (8003f3c <xMBTCPPortSendResponse+0x78>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003ee4:	887a      	ldrh	r2, [r7, #2]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d906      	bls.n	8003ef8 <xMBTCPPortSendResponse+0x34>
 8003eea:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <xMBTCPPortSendResponse+0x7c>)
 8003eec:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003ef0:	4914      	ldr	r1, [pc, #80]	; (8003f44 <xMBTCPPortSendResponse+0x80>)
 8003ef2:	4815      	ldr	r0, [pc, #84]	; (8003f48 <xMBTCPPortSendResponse+0x84>)
 8003ef4:	f011 fc80 	bl	80157f8 <iprintf>

        if( tcp_write( pxPCBClient, pucMBTCPFrame, ( u16_t ) usTCPLength, NETCONN_COPY ) == ERR_OK )
 8003ef8:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <xMBTCPPortSendResponse+0x78>)
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	887a      	ldrh	r2, [r7, #2]
 8003efe:	2301      	movs	r3, #1
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	f00b fb35 	bl	800f570 <tcp_write>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10d      	bne.n	8003f28 <xMBTCPPortSendResponse+0x64>
        {
#ifdef MB_TCP_DEBUG
            prvvMBTCPLogFrame( "MBTCP-SENT", &aucTCPBuf[0], usTCPLength );
 8003f0c:	887b      	ldrh	r3, [r7, #2]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	490e      	ldr	r1, [pc, #56]	; (8003f4c <xMBTCPPortSendResponse+0x88>)
 8003f12:	480f      	ldr	r0, [pc, #60]	; (8003f50 <xMBTCPPortSendResponse+0x8c>)
 8003f14:	f7ff fd20 	bl	8003958 <prvvMBTCPLogFrame>
#endif
            /* Make sure data gets sent immediately. */
            ( void )tcp_output( pxPCBClient );
 8003f18:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <xMBTCPPortSendResponse+0x78>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f00c f911 	bl	8010144 <tcp_output>
            bFrameSent = TRUE;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
 8003f26:	e004      	b.n	8003f32 <xMBTCPPortSendResponse+0x6e>
        }
        else
        {
            /* Drop the connection in case of an write error. */
            prvvMBPortReleaseClient( pxPCBClient );
 8003f28:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <xMBTCPPortSendResponse+0x78>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fe61 	bl	8003bf4 <prvvMBPortReleaseClient>
        }
    }
    return bFrameSent;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	20000818 	.word	0x20000818
 8003f40:	08016bdc 	.word	0x08016bdc
 8003f44:	08016c08 	.word	0x08016c08
 8003f48:	08016c34 	.word	0x08016c34
 8003f4c:	2000081c 	.word	0x2000081c
 8003f50:	08016c5c 	.word	0x08016c5c

08003f54 <eMBTCPDoInit>:


/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBTCPDoInit( USHORT ucTCPPort )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	80fb      	strh	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]

    if( xMBTCPPortInit( ucTCPPort ) == FALSE )
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff fdef 	bl	8003b48 <xMBTCPPortInit>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <eMBTCPDoInit+0x20>
    {
        eStatus = MB_EPORTERR;
 8003f70:	2303      	movs	r3, #3
 8003f72:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <eMBTCPStart>:

void
eMBTCPStart( void )
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <eMBTCPStop>:

void
eMBTCPStop( void )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
    /* Make sure that no more clients are connected. */
    vMBTCPPortDisable( );
 8003f90:	f7ff fe78 	bl	8003c84 <vMBTCPPortDisable>
}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <eMBTCPReceive>:

eMBErrorCode
eMBTCPReceive( UCHAR * pucRcvAddress, UCHAR ** ppucFrame, USHORT * pusLength )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_EIO;
 8003fa4:	2305      	movs	r3, #5
 8003fa6:	77fb      	strb	r3, [r7, #31]
    UCHAR          *pucMBTCPFrame;
    USHORT          usLength;
    USHORT          usPID;

    if( xMBTCPPortGetRequest( &pucMBTCPFrame, &usLength ) != FALSE )
 8003fa8:	f107 0216 	add.w	r2, r7, #22
 8003fac:	f107 0318 	add.w	r3, r7, #24
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff ff6c 	bl	8003e90 <xMBTCPPortGetRequest>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01e      	beq.n	8003ffc <eMBTCPReceive+0x64>
    {
        usPID = pucMBTCPFrame[MB_TCP_PID] << 8U;
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	83bb      	strh	r3, [r7, #28]
        usPID |= pucMBTCPFrame[MB_TCP_PID + 1];
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	3303      	adds	r3, #3
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	8bbb      	ldrh	r3, [r7, #28]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	83bb      	strh	r3, [r7, #28]

        if( usPID == MB_TCP_PROTOCOL_ID )
 8003fd8:	8bbb      	ldrh	r3, [r7, #28]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d110      	bne.n	8004000 <eMBTCPReceive+0x68>
        {
            *ppucFrame = &pucMBTCPFrame[MB_TCP_FUNC];
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	1dda      	adds	r2, r3, #7
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	601a      	str	r2, [r3, #0]
            *pusLength = usLength - MB_TCP_FUNC;
 8003fe6:	8afb      	ldrh	r3, [r7, #22]
 8003fe8:	3b07      	subs	r3, #7
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	801a      	strh	r2, [r3, #0]
            eStatus = MB_ENOERR;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	77fb      	strb	r3, [r7, #31]

            /* Modbus TCP does not use any addresses. Fake the source address such
             * that the processing part deals with this frame.
             */
            *pucRcvAddress = MB_TCP_PSEUDO_ADDRESS;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	22ff      	movs	r2, #255	; 0xff
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	e001      	b.n	8004000 <eMBTCPReceive+0x68>
        }
    }
    else
    {
        eStatus = MB_EIO;
 8003ffc:	2305      	movs	r3, #5
 8003ffe:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 8004000:	7ffb      	ldrb	r3, [r7, #31]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <eMBTCPSend>:

eMBErrorCode
eMBTCPSend( UCHAR _unused, const UCHAR * pucFrame, USHORT usLength )
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af00      	add	r7, sp, #0
 8004010:	4603      	mov	r3, r0
 8004012:	6039      	str	r1, [r7, #0]
 8004014:	71fb      	strb	r3, [r7, #7]
 8004016:	4613      	mov	r3, r2
 8004018:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]
    UCHAR          *pucMBTCPFrame = ( UCHAR * ) pucFrame - MB_TCP_FUNC;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	3b07      	subs	r3, #7
 8004022:	613b      	str	r3, [r7, #16]
    USHORT          usTCPLength = usLength + MB_TCP_FUNC;
 8004024:	88bb      	ldrh	r3, [r7, #4]
 8004026:	3307      	adds	r3, #7
 8004028:	81fb      	strh	r3, [r7, #14]
     * function with the buffer returned by the previous call. Therefore we 
     * only have to update the length in the header. Note that the length 
     * header includes the size of the Modbus PDU and the UID Byte. Therefore 
     * the length is usLength plus one.
     */
    pucMBTCPFrame[MB_TCP_LEN] = ( usLength + 1 ) >> 8U;
 800402a:	88bb      	ldrh	r3, [r7, #4]
 800402c:	3301      	adds	r3, #1
 800402e:	121a      	asrs	r2, r3, #8
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	3304      	adds	r3, #4
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]
    pucMBTCPFrame[MB_TCP_LEN + 1] = ( usLength + 1 ) & 0xFF;
 8004038:	88bb      	ldrh	r3, [r7, #4]
 800403a:	b2da      	uxtb	r2, r3
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	3305      	adds	r3, #5
 8004040:	3201      	adds	r2, #1
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]
    if( xMBTCPPortSendResponse( pucMBTCPFrame, usTCPLength ) == FALSE )
 8004046:	89fb      	ldrh	r3, [r7, #14]
 8004048:	4619      	mov	r1, r3
 800404a:	6938      	ldr	r0, [r7, #16]
 800404c:	f7ff ff3a 	bl	8003ec4 <xMBTCPPortSendResponse>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <eMBTCPSend+0x50>
    {
        eStatus = MB_EIO;
 8004056:	2305      	movs	r3, #5
 8004058:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800405a:	7dfb      	ldrb	r3, [r7, #23]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <HAL_Init+0x40>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0d      	ldr	r2, [pc, #52]	; (80040a4 <HAL_Init+0x40>)
 800406e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_Init+0x40>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <HAL_Init+0x40>)
 800407a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800407e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004080:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <HAL_Init+0x40>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a07      	ldr	r2, [pc, #28]	; (80040a4 <HAL_Init+0x40>)
 8004086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800408c:	2003      	movs	r0, #3
 800408e:	f000 fd1b 	bl	8004ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004092:	200f      	movs	r0, #15
 8004094:	f000 f808 	bl	80040a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004098:	f002 fd47 	bl	8006b2a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40023c00 	.word	0x40023c00

080040a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040b0:	4b12      	ldr	r3, [pc, #72]	; (80040fc <HAL_InitTick+0x54>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b12      	ldr	r3, [pc, #72]	; (8004100 <HAL_InitTick+0x58>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040be:	fbb3 f3f1 	udiv	r3, r3, r1
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fd33 	bl	8004b32 <HAL_SYSTICK_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e00e      	b.n	80040f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b0f      	cmp	r3, #15
 80040da:	d80a      	bhi.n	80040f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040dc:	2200      	movs	r2, #0
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	f04f 30ff 	mov.w	r0, #4294967295
 80040e4:	f000 fcfb 	bl	8004ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040e8:	4a06      	ldr	r2, [pc, #24]	; (8004104 <HAL_InitTick+0x5c>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e000      	b.n	80040f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000480 	.word	0x20000480
 8004100:	20000454 	.word	0x20000454
 8004104:	20000450 	.word	0x20000450

08004108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_IncTick+0x20>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_IncTick+0x24>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4413      	add	r3, r2
 8004118:	4a04      	ldr	r2, [pc, #16]	; (800412c <HAL_IncTick+0x24>)
 800411a:	6013      	str	r3, [r2, #0]
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000454 	.word	0x20000454
 800412c:	20000928 	.word	0x20000928

08004130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return uwTick;
 8004134:	4b03      	ldr	r3, [pc, #12]	; (8004144 <HAL_GetTick+0x14>)
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000928 	.word	0x20000928

08004148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004150:	f7ff ffee 	bl	8004130 <HAL_GetTick>
 8004154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004160:	d005      	beq.n	800416e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004162:	4b0a      	ldr	r3, [pc, #40]	; (800418c <HAL_Delay+0x44>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800416e:	bf00      	nop
 8004170:	f7ff ffde 	bl	8004130 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	429a      	cmp	r2, r3
 800417e:	d8f7      	bhi.n	8004170 <HAL_Delay+0x28>
  {
  }
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000454 	.word	0x20000454

08004190 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e033      	b.n	800420e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f00f fbe8 	bl	8013984 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d118      	bne.n	8004200 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041d6:	f023 0302 	bic.w	r3, r3, #2
 80041da:	f043 0202 	orr.w	r2, r3, #2
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 faa4 	bl	8004730 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	f043 0201 	orr.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40
 80041fe:	e001      	b.n	8004204 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_ADC_Start+0x1a>
 800422e:	2302      	movs	r3, #2
 8004230:	e0b2      	b.n	8004398 <HAL_ADC_Start+0x180>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d018      	beq.n	800427a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004258:	4b52      	ldr	r3, [pc, #328]	; (80043a4 <HAL_ADC_Start+0x18c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a52      	ldr	r2, [pc, #328]	; (80043a8 <HAL_ADC_Start+0x190>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	0c9a      	lsrs	r2, r3, #18
 8004264:	4613      	mov	r3, r2
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	4413      	add	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800426c:	e002      	b.n	8004274 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	3b01      	subs	r3, #1
 8004272:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f9      	bne.n	800426e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b01      	cmp	r3, #1
 8004286:	d17a      	bne.n	800437e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80042b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c6:	d106      	bne.n	80042d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042cc:	f023 0206 	bic.w	r2, r3, #6
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	645a      	str	r2, [r3, #68]	; 0x44
 80042d4:	e002      	b.n	80042dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042e4:	4b31      	ldr	r3, [pc, #196]	; (80043ac <HAL_ADC_Start+0x194>)
 80042e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80042f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d12a      	bne.n	8004354 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a2b      	ldr	r2, [pc, #172]	; (80043b0 <HAL_ADC_Start+0x198>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d015      	beq.n	8004334 <HAL_ADC_Start+0x11c>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a29      	ldr	r2, [pc, #164]	; (80043b4 <HAL_ADC_Start+0x19c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d105      	bne.n	800431e <HAL_ADC_Start+0x106>
 8004312:	4b26      	ldr	r3, [pc, #152]	; (80043ac <HAL_ADC_Start+0x194>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a25      	ldr	r2, [pc, #148]	; (80043b8 <HAL_ADC_Start+0x1a0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d136      	bne.n	8004396 <HAL_ADC_Start+0x17e>
 8004328:	4b20      	ldr	r3, [pc, #128]	; (80043ac <HAL_ADC_Start+0x194>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b00      	cmp	r3, #0
 8004332:	d130      	bne.n	8004396 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d129      	bne.n	8004396 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004350:	609a      	str	r2, [r3, #8]
 8004352:	e020      	b.n	8004396 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a15      	ldr	r2, [pc, #84]	; (80043b0 <HAL_ADC_Start+0x198>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d11b      	bne.n	8004396 <HAL_ADC_Start+0x17e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d114      	bne.n	8004396 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	e00b      	b.n	8004396 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f043 0210 	orr.w	r2, r3, #16
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	f043 0201 	orr.w	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	20000480 	.word	0x20000480
 80043a8:	431bde83 	.word	0x431bde83
 80043ac:	40012300 	.word	0x40012300
 80043b0:	40012000 	.word	0x40012000
 80043b4:	40012100 	.word	0x40012100
 80043b8:	40012200 	.word	0x40012200

080043bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d8:	d113      	bne.n	8004402 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80043e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e8:	d10b      	bne.n	8004402 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f043 0220 	orr.w	r2, r3, #32
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e063      	b.n	80044ca <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004402:	f7ff fe95 	bl	8004130 <HAL_GetTick>
 8004406:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004408:	e021      	b.n	800444e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004410:	d01d      	beq.n	800444e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <HAL_ADC_PollForConversion+0x6c>
 8004418:	f7ff fe8a 	bl	8004130 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d212      	bcs.n	800444e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b02      	cmp	r3, #2
 8004434:	d00b      	beq.n	800444e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f043 0204 	orr.w	r2, r3, #4
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e03d      	b.n	80044ca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b02      	cmp	r3, #2
 800445a:	d1d6      	bne.n	800440a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0212 	mvn.w	r2, #18
 8004464:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d123      	bne.n	80044c8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004484:	2b00      	cmp	r3, #0
 8004486:	d11f      	bne.n	80044c8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004492:	2b00      	cmp	r3, #0
 8004494:	d006      	beq.n	80044a4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d111      	bne.n	80044c8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d105      	bne.n	80044c8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	f043 0201 	orr.w	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x1c>
 8004504:	2302      	movs	r3, #2
 8004506:	e105      	b.n	8004714 <HAL_ADC_ConfigChannel+0x228>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b09      	cmp	r3, #9
 8004516:	d925      	bls.n	8004564 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68d9      	ldr	r1, [r3, #12]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	4613      	mov	r3, r2
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4413      	add	r3, r2
 800452c:	3b1e      	subs	r3, #30
 800452e:	2207      	movs	r2, #7
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43da      	mvns	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	400a      	ands	r2, r1
 800453c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68d9      	ldr	r1, [r3, #12]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	4618      	mov	r0, r3
 8004550:	4603      	mov	r3, r0
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	4403      	add	r3, r0
 8004556:	3b1e      	subs	r3, #30
 8004558:	409a      	lsls	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	60da      	str	r2, [r3, #12]
 8004562:	e022      	b.n	80045aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6919      	ldr	r1, [r3, #16]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	b29b      	uxth	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	4613      	mov	r3, r2
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4413      	add	r3, r2
 8004578:	2207      	movs	r2, #7
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43da      	mvns	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	400a      	ands	r2, r1
 8004586:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6919      	ldr	r1, [r3, #16]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	4618      	mov	r0, r3
 800459a:	4603      	mov	r3, r0
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4403      	add	r3, r0
 80045a0:	409a      	lsls	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b06      	cmp	r3, #6
 80045b0:	d824      	bhi.n	80045fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	3b05      	subs	r3, #5
 80045c4:	221f      	movs	r2, #31
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43da      	mvns	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	400a      	ands	r2, r1
 80045d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	4618      	mov	r0, r3
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	3b05      	subs	r3, #5
 80045ee:	fa00 f203 	lsl.w	r2, r0, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	635a      	str	r2, [r3, #52]	; 0x34
 80045fa:	e04c      	b.n	8004696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b0c      	cmp	r3, #12
 8004602:	d824      	bhi.n	800464e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	3b23      	subs	r3, #35	; 0x23
 8004616:	221f      	movs	r2, #31
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43da      	mvns	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	400a      	ands	r2, r1
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	b29b      	uxth	r3, r3
 8004632:	4618      	mov	r0, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	3b23      	subs	r3, #35	; 0x23
 8004640:	fa00 f203 	lsl.w	r2, r0, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
 800464c:	e023      	b.n	8004696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	3b41      	subs	r3, #65	; 0x41
 8004660:	221f      	movs	r2, #31
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43da      	mvns	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	400a      	ands	r2, r1
 800466e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	4618      	mov	r0, r3
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	3b41      	subs	r3, #65	; 0x41
 800468a:	fa00 f203 	lsl.w	r2, r0, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004696:	4b22      	ldr	r3, [pc, #136]	; (8004720 <HAL_ADC_ConfigChannel+0x234>)
 8004698:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a21      	ldr	r2, [pc, #132]	; (8004724 <HAL_ADC_ConfigChannel+0x238>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d109      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x1cc>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b12      	cmp	r3, #18
 80046aa:	d105      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a19      	ldr	r2, [pc, #100]	; (8004724 <HAL_ADC_ConfigChannel+0x238>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d123      	bne.n	800470a <HAL_ADC_ConfigChannel+0x21e>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b10      	cmp	r3, #16
 80046c8:	d003      	beq.n	80046d2 <HAL_ADC_ConfigChannel+0x1e6>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b11      	cmp	r3, #17
 80046d0:	d11b      	bne.n	800470a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b10      	cmp	r3, #16
 80046e4:	d111      	bne.n	800470a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046e6:	4b10      	ldr	r3, [pc, #64]	; (8004728 <HAL_ADC_ConfigChannel+0x23c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a10      	ldr	r2, [pc, #64]	; (800472c <HAL_ADC_ConfigChannel+0x240>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	0c9a      	lsrs	r2, r3, #18
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046fc:	e002      	b.n	8004704 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	3b01      	subs	r3, #1
 8004702:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f9      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	40012300 	.word	0x40012300
 8004724:	40012000 	.word	0x40012000
 8004728:	20000480 	.word	0x20000480
 800472c:	431bde83 	.word	0x431bde83

08004730 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004738:	4b79      	ldr	r3, [pc, #484]	; (8004920 <ADC_Init+0x1f0>)
 800473a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	431a      	orrs	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6859      	ldr	r1, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	021a      	lsls	r2, r3, #8
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6859      	ldr	r1, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6899      	ldr	r1, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	4a58      	ldr	r2, [pc, #352]	; (8004924 <ADC_Init+0x1f4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6899      	ldr	r1, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6899      	ldr	r1, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	609a      	str	r2, [r3, #8]
 800480c:	e00f      	b.n	800482e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800481c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800482c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0202 	bic.w	r2, r2, #2
 800483c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6899      	ldr	r1, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	7e1b      	ldrb	r3, [r3, #24]
 8004848:	005a      	lsls	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01b      	beq.n	8004894 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800486a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800487a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	3b01      	subs	r3, #1
 8004888:	035a      	lsls	r2, r3, #13
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	e007      	b.n	80048a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80048b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	3b01      	subs	r3, #1
 80048c0:	051a      	lsls	r2, r3, #20
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6899      	ldr	r1, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048e6:	025a      	lsls	r2, r3, #9
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6899      	ldr	r1, [r3, #8]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	029a      	lsls	r2, r3, #10
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	609a      	str	r2, [r3, #8]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	40012300 	.word	0x40012300
 8004924:	0f000001 	.word	0x0f000001

08004928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004938:	4b0c      	ldr	r3, [pc, #48]	; (800496c <__NVIC_SetPriorityGrouping+0x44>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004944:	4013      	ands	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800495a:	4a04      	ldr	r2, [pc, #16]	; (800496c <__NVIC_SetPriorityGrouping+0x44>)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	60d3      	str	r3, [r2, #12]
}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	e000ed00 	.word	0xe000ed00

08004970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004974:	4b04      	ldr	r3, [pc, #16]	; (8004988 <__NVIC_GetPriorityGrouping+0x18>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	0a1b      	lsrs	r3, r3, #8
 800497a:	f003 0307 	and.w	r3, r3, #7
}
 800497e:	4618      	mov	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	e000ed00 	.word	0xe000ed00

0800498c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499a:	2b00      	cmp	r3, #0
 800499c:	db0b      	blt.n	80049b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	f003 021f 	and.w	r2, r3, #31
 80049a4:	4907      	ldr	r1, [pc, #28]	; (80049c4 <__NVIC_EnableIRQ+0x38>)
 80049a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	2001      	movs	r0, #1
 80049ae:	fa00 f202 	lsl.w	r2, r0, r2
 80049b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	e000e100 	.word	0xe000e100

080049c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	6039      	str	r1, [r7, #0]
 80049d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	db0a      	blt.n	80049f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	490c      	ldr	r1, [pc, #48]	; (8004a14 <__NVIC_SetPriority+0x4c>)
 80049e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e6:	0112      	lsls	r2, r2, #4
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	440b      	add	r3, r1
 80049ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049f0:	e00a      	b.n	8004a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	4908      	ldr	r1, [pc, #32]	; (8004a18 <__NVIC_SetPriority+0x50>)
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	3b04      	subs	r3, #4
 8004a00:	0112      	lsls	r2, r2, #4
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	440b      	add	r3, r1
 8004a06:	761a      	strb	r2, [r3, #24]
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	e000e100 	.word	0xe000e100
 8004a18:	e000ed00 	.word	0xe000ed00

08004a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b089      	sub	sp, #36	; 0x24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f1c3 0307 	rsb	r3, r3, #7
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	bf28      	it	cs
 8004a3a:	2304      	movcs	r3, #4
 8004a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	3304      	adds	r3, #4
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d902      	bls.n	8004a4c <NVIC_EncodePriority+0x30>
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3b03      	subs	r3, #3
 8004a4a:	e000      	b.n	8004a4e <NVIC_EncodePriority+0x32>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a50:	f04f 32ff 	mov.w	r2, #4294967295
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43da      	mvns	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	401a      	ands	r2, r3
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a64:	f04f 31ff 	mov.w	r1, #4294967295
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6e:	43d9      	mvns	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a74:	4313      	orrs	r3, r2
         );
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3724      	adds	r7, #36	; 0x24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
	...

08004a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a94:	d301      	bcc.n	8004a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a96:	2301      	movs	r3, #1
 8004a98:	e00f      	b.n	8004aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a9a:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <SysTick_Config+0x40>)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004aa2:	210f      	movs	r1, #15
 8004aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa8:	f7ff ff8e 	bl	80049c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <SysTick_Config+0x40>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ab2:	4b04      	ldr	r3, [pc, #16]	; (8004ac4 <SysTick_Config+0x40>)
 8004ab4:	2207      	movs	r2, #7
 8004ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	e000e010 	.word	0xe000e010

08004ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff ff29 	bl	8004928 <__NVIC_SetPriorityGrouping>
}
 8004ad6:	bf00      	nop
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b086      	sub	sp, #24
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004af0:	f7ff ff3e 	bl	8004970 <__NVIC_GetPriorityGrouping>
 8004af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	6978      	ldr	r0, [r7, #20]
 8004afc:	f7ff ff8e 	bl	8004a1c <NVIC_EncodePriority>
 8004b00:	4602      	mov	r2, r0
 8004b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b06:	4611      	mov	r1, r2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff ff5d 	bl	80049c8 <__NVIC_SetPriority>
}
 8004b0e:	bf00      	nop
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff ff31 	bl	800498c <__NVIC_EnableIRQ>
}
 8004b2a:	bf00      	nop
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff ffa2 	bl	8004a84 <SysTick_Config>
 8004b40:	4603      	mov	r3, r0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b58:	f7ff faea 	bl	8004130 <HAL_GetTick>
 8004b5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d008      	beq.n	8004b7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2280      	movs	r2, #128	; 0x80
 8004b6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e052      	b.n	8004c22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0216 	bic.w	r2, r2, #22
 8004b8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695a      	ldr	r2, [r3, #20]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d103      	bne.n	8004bac <HAL_DMA_Abort+0x62>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0208 	bic.w	r2, r2, #8
 8004bba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bcc:	e013      	b.n	8004bf6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bce:	f7ff faaf 	bl	8004130 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b05      	cmp	r3, #5
 8004bda:	d90c      	bls.n	8004bf6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2203      	movs	r2, #3
 8004bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e015      	b.n	8004c22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e4      	bne.n	8004bce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c08:	223f      	movs	r2, #63	; 0x3f
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d004      	beq.n	8004c48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2280      	movs	r2, #128	; 0x80
 8004c42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e00c      	b.n	8004c62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2205      	movs	r2, #5
 8004c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0201 	bic.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
	...

08004c70 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e06c      	b.n	8004d5c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2223      	movs	r2, #35	; 0x23
 8004c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f004 fa11 	bl	80090bc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	4b31      	ldr	r3, [pc, #196]	; (8004d64 <HAL_ETH_Init+0xf4>)
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	4a30      	ldr	r2, [pc, #192]	; (8004d64 <HAL_ETH_Init+0xf4>)
 8004ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8004caa:	4b2e      	ldr	r3, [pc, #184]	; (8004d64 <HAL_ETH_Init+0xf4>)
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cb2:	60bb      	str	r3, [r7, #8]
 8004cb4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004cb6:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <HAL_ETH_Init+0xf8>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	4a2b      	ldr	r2, [pc, #172]	; (8004d68 <HAL_ETH_Init+0xf8>)
 8004cbc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cc0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004cc2:	4b29      	ldr	r3, [pc, #164]	; (8004d68 <HAL_ETH_Init+0xf8>)
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	4927      	ldr	r1, [pc, #156]	; (8004d68 <HAL_ETH_Init+0xf8>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004cd0:	4b25      	ldr	r3, [pc, #148]	; (8004d68 <HAL_ETH_Init+0xf8>)
 8004cd2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004cea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cec:	f7ff fa20 	bl	8004130 <HAL_GetTick>
 8004cf0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004cf2:	e011      	b.n	8004d18 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004cf4:	f7ff fa1c 	bl	8004130 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d02:	d909      	bls.n	8004d18 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2204      	movs	r2, #4
 8004d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	22e0      	movs	r2, #224	; 0xe0
 8004d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e021      	b.n	8004d5c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e4      	bne.n	8004cf4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fdfc 	bl	8005928 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fea3 	bl	8005a7c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fef9 	bl	8005b2e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	461a      	mov	r2, r3
 8004d42:	2100      	movs	r1, #0
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fe61 	bl	8005a0c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2210      	movs	r2, #16
 8004d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40023800 	.word	0x40023800
 8004d68:	40013800 	.word	0x40013800

08004d6c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7a:	2b10      	cmp	r3, #16
 8004d7c:	d150      	bne.n	8004e20 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2223      	movs	r2, #35	; 0x23
 8004d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2204      	movs	r2, #4
 8004d8a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f9fd 	bl	800518c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0208 	orr.w	r2, r2, #8
 8004da0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004daa:	2001      	movs	r0, #1
 8004dac:	f7ff f9cc 	bl	8004148 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0204 	orr.w	r2, r2, #4
 8004dc6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004dd0:	2001      	movs	r0, #1
 8004dd2:	f7ff f9b9 	bl	8004148 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fc42 	bl	8005668 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004df6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dfa:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	f043 0302 	orr.w	r3, r3, #2
 8004e0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e12:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2223      	movs	r2, #35	; 0x23
 8004e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e000      	b.n	8004e22 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
  }
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e38:	2b23      	cmp	r3, #35	; 0x23
 8004e3a:	d14a      	bne.n	8004ed2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2223      	movs	r2, #35	; 0x23
 8004e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6812      	ldr	r2, [r2, #0]
 8004e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e5a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	f023 0302 	bic.w	r3, r3, #2
 8004e6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e72:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0204 	bic.w	r2, r2, #4
 8004e82:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e8c:	2001      	movs	r0, #1
 8004e8e:	f7ff f95b 	bl	8004148 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fbe4 	bl	8005668 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0208 	bic.w	r2, r2, #8
 8004eae:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004eb8:	2001      	movs	r0, #1
 8004eba:	f7ff f945 	bl	8004148 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2210      	movs	r2, #16
 8004eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e000      	b.n	8004ed4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
  }
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d109      	bne.n	8004f02 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef4:	f043 0201 	orr.w	r2, r3, #1
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e07c      	b.n	8004ffc <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f08:	2b23      	cmp	r3, #35	; 0x23
 8004f0a:	d176      	bne.n	8004ffa <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fe79 	bl	8005c08 <ETH_Prepare_Tx_Descriptors>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d009      	beq.n	8004f30 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	f043 0202 	orr.w	r2, r3, #2
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e065      	b.n	8004ffc <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f30:	f3bf 8f4f 	dsb	sy
}
 8004f34:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3206      	adds	r2, #6
 8004f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f42:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	629a      	str	r2, [r3, #40]	; 0x28
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d904      	bls.n	8004f60 <HAL_ETH_Transmit+0x84>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	1f1a      	subs	r2, r3, #4
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3106      	adds	r1, #6
 8004f6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004f70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f74:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8004f76:	f7ff f8db 	bl	8004130 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004f7c:	e037      	b.n	8004fee <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d011      	beq.n	8004fb4 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	f043 0208 	orr.w	r2, r3, #8
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e023      	b.n	8004ffc <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d018      	beq.n	8004fee <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004fbc:	f7ff f8b8 	bl	8004130 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d302      	bcc.n	8004fd2 <HAL_ETH_Transmit+0xf6>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10d      	bne.n	8004fee <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd8:	f043 0204 	orr.w	r2, r3, #4
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8004fe8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e006      	b.n	8004ffc <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	dbc3      	blt.n	8004f7e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e000      	b.n	8004ffc <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
  }
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d109      	bne.n	8005030 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005022:	f043 0201 	orr.w	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0a8      	b.n	8005182 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005036:	2b23      	cmp	r3, #35	; 0x23
 8005038:	d001      	beq.n	800503e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e0a1      	b.n	8005182 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005042:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	69fa      	ldr	r2, [r7, #28]
 8005048:	3212      	adds	r2, #18
 800504a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800504e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005054:	f1c3 0304 	rsb	r3, r3, #4
 8005058:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800505a:	e06a      	b.n	8005132 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d007      	beq.n	8005078 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	699a      	ldr	r2, [r3, #24]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005080:	2b00      	cmp	r3, #0
 8005082:	d103      	bne.n	800508c <HAL_ETH_ReadData+0x88>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005088:	2b00      	cmp	r3, #0
 800508a:	d040      	beq.n	800510e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00c      	beq.n	80050d0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	0c1b      	lsrs	r3, r3, #16
 80050bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80050c0:	3b04      	subs	r3, #4
 80050c2:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80050cc:	2301      	movs	r3, #1
 80050ce:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80050e8:	461a      	mov	r2, r3
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f004 f995 	bl	800941c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	441a      	add	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	2200      	movs	r2, #0
 800510c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	3301      	adds	r3, #1
 8005112:	61fb      	str	r3, [r7, #28]
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	2b03      	cmp	r3, #3
 8005118:	d902      	bls.n	8005120 <HAL_ETH_ReadData+0x11c>
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	3b04      	subs	r3, #4
 800511e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	3212      	adds	r2, #18
 8005126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800512a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	3301      	adds	r3, #1
 8005130:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8005136:	2b00      	cmp	r3, #0
 8005138:	db06      	blt.n	8005148 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	429a      	cmp	r2, r3
 8005140:	d202      	bcs.n	8005148 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d089      	beq.n	800505c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	441a      	add	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f815 	bl	800518c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d108      	bne.n	8005180 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	e000      	b.n	8005182 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
}
 8005182:	4618      	mov	r0, r3
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8005194:	2300      	movs	r3, #0
 8005196:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8005198:	2301      	movs	r3, #1
 800519a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051a0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	3212      	adds	r2, #18
 80051a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ac:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80051b4:	e03d      	b.n	8005232 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d112      	bne.n	80051e4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80051be:	f107 0308 	add.w	r3, r7, #8
 80051c2:	4618      	mov	r0, r3
 80051c4:	f004 f8fa 	bl	80093bc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d102      	bne.n	80051d4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	74fb      	strb	r3, [r7, #19]
 80051d2:	e007      	b.n	80051e4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	461a      	mov	r2, r3
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	461a      	mov	r2, r3
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80051e4:	7cfb      	ldrb	r3, [r7, #19]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d023      	beq.n	8005232 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	4a24      	ldr	r2, [pc, #144]	; (8005288 <ETH_UpdateDescriptor+0xfc>)
 80051f6:	605a      	str	r2, [r3, #4]
 80051f8:	e003      	b.n	8005202 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8005200:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	3301      	adds	r3, #1
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	2b03      	cmp	r3, #3
 8005218:	d902      	bls.n	8005220 <ETH_UpdateDescriptor+0x94>
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	3b04      	subs	r3, #4
 800521e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	3212      	adds	r2, #18
 8005226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800522a:	617b      	str	r3, [r7, #20]
      desccount--;
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	3b01      	subs	r3, #1
 8005230:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <ETH_UpdateDescriptor+0xb2>
 8005238:	7cfb      	ldrb	r3, [r7, #19]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1bb      	bne.n	80051b6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	429a      	cmp	r2, r3
 8005246:	d01a      	beq.n	800527e <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	3301      	adds	r3, #1
 800524c:	f003 0303 	and.w	r3, r3, #3
 8005250:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005252:	f3bf 8f5f 	dmb	sy
}
 8005256:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6919      	ldr	r1, [r3, #16]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	18ca      	adds	r2, r1, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005270:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800527e:	bf00      	nop
 8005280:	3720      	adds	r7, #32
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	800045f8 	.word	0x800045f8

0800528c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f003 031c 	and.w	r3, r3, #28
 80052a8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	02db      	lsls	r3, r3, #11
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	019b      	lsls	r3, r3, #6
 80052ba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f023 0302 	bic.w	r3, r3, #2
 80052ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80052dc:	f7fe ff28 	bl	8004130 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80052e2:	e00d      	b.n	8005300 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80052e4:	f7fe ff24 	bl	8004130 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f2:	d301      	bcc.n	80052f8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e010      	b.n	800531a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1ec      	bne.n	80052e4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	b29b      	uxth	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b086      	sub	sp, #24
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f003 031c 	and.w	r3, r3, #28
 800533e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	02db      	lsls	r3, r3, #11
 8005344:	b29b      	uxth	r3, r3
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	019b      	lsls	r3, r3, #6
 8005350:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f043 0302 	orr.w	r3, r3, #2
 8005360:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800537c:	f7fe fed8 	bl	8004130 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005382:	e00d      	b.n	80053a0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8005384:	f7fe fed4 	bl	8004130 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005392:	d301      	bcc.n	8005398 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e009      	b.n	80053ac <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1ec      	bne.n	8005384 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0d9      	b.n	800557c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bf14      	ite	ne
 80053d6:	2301      	movne	r3, #1
 80053d8:	2300      	moveq	r3, #0
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	bf0c      	ite	eq
 8005400:	2301      	moveq	r3, #1
 8005402:	2300      	movne	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	461a      	mov	r2, r3
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8005418:	2b00      	cmp	r3, #0
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005432:	2b00      	cmp	r3, #0
 8005434:	bf0c      	ite	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	2300      	movne	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	461a      	mov	r2, r3
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800544c:	2b00      	cmp	r3, #0
 800544e:	bf14      	ite	ne
 8005450:	2301      	movne	r3, #1
 8005452:	2300      	moveq	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005482:	2b00      	cmp	r3, #0
 8005484:	bf0c      	ite	eq
 8005486:	2301      	moveq	r3, #1
 8005488:	2300      	movne	r3, #0
 800548a:	b2db      	uxtb	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800549c:	2b00      	cmp	r3, #0
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	461a      	mov	r2, r3
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bf14      	ite	ne
 80054ba:	2301      	movne	r3, #1
 80054bc:	2300      	moveq	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bf14      	ite	ne
 80054e2:	2301      	movne	r3, #1
 80054e4:	2300      	moveq	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bf14      	ite	ne
 80054fc:	2301      	movne	r3, #1
 80054fe:	2300      	moveq	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005514:	2b00      	cmp	r3, #0
 8005516:	bf0c      	ite	eq
 8005518:	2301      	moveq	r3, #1
 800551a:	2300      	movne	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	461a      	mov	r2, r3
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	0c1b      	lsrs	r3, r3, #16
 800553c:	b29a      	uxth	r2, r3
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	bf14      	ite	ne
 8005550:	2301      	movne	r3, #1
 8005552:	2300      	moveq	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8005568:	2b00      	cmp	r3, #0
 800556a:	bf14      	ite	ne
 800556c:	2301      	movne	r3, #1
 800556e:	2300      	moveq	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e00b      	b.n	80055b4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d105      	bne.n	80055b2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80055a6:	6839      	ldr	r1, [r7, #0]
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f883 	bl	80056b4 <ETH_SetMACConfig>

    return HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e000      	b.n	80055b4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
  }
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 031c 	bic.w	r3, r3, #28
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80055d4:	f001 ff14 	bl	8007400 <HAL_RCC_GetHCLKFreq>
 80055d8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4a1d      	ldr	r2, [pc, #116]	; (8005654 <HAL_ETH_SetMDIOClockRange+0x98>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d908      	bls.n	80055f4 <HAL_ETH_SetMDIOClockRange+0x38>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4a1c      	ldr	r2, [pc, #112]	; (8005658 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d804      	bhi.n	80055f4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f043 0308 	orr.w	r3, r3, #8
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	e027      	b.n	8005644 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4a18      	ldr	r2, [pc, #96]	; (8005658 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d908      	bls.n	800560e <HAL_ETH_SetMDIOClockRange+0x52>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4a17      	ldr	r2, [pc, #92]	; (800565c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d204      	bcs.n	800560e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f043 030c 	orr.w	r3, r3, #12
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	e01a      	b.n	8005644 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4a12      	ldr	r2, [pc, #72]	; (800565c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d303      	bcc.n	800561e <HAL_ETH_SetMDIOClockRange+0x62>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4a11      	ldr	r2, [pc, #68]	; (8005660 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d911      	bls.n	8005642 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4a0f      	ldr	r2, [pc, #60]	; (8005660 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d908      	bls.n	8005638 <HAL_ETH_SetMDIOClockRange+0x7c>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4a0e      	ldr	r2, [pc, #56]	; (8005664 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d804      	bhi.n	8005638 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f043 0304 	orr.w	r3, r3, #4
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e005      	b.n	8005644 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f043 0310 	orr.w	r3, r3, #16
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	e000      	b.n	8005644 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8005642:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	611a      	str	r2, [r3, #16]
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	01312cff 	.word	0x01312cff
 8005658:	02160ebf 	.word	0x02160ebf
 800565c:	03938700 	.word	0x03938700
 8005660:	05f5e0ff 	.word	0x05f5e0ff
 8005664:	08f0d17f 	.word	0x08f0d17f

08005668 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005686:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800568a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005698:	2001      	movs	r0, #1
 800569a:	f7fe fd55 	bl	8004148 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056a8:	6193      	str	r3, [r2, #24]
}
 80056aa:	bf00      	nop
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4b51      	ldr	r3, [pc, #324]	; (8005810 <ETH_SetMACConfig+0x15c>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	7c1b      	ldrb	r3, [r3, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d102      	bne.n	80056dc <ETH_SetMACConfig+0x28>
 80056d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80056da:	e000      	b.n	80056de <ETH_SetMACConfig+0x2a>
 80056dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	7c5b      	ldrb	r3, [r3, #17]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d102      	bne.n	80056ec <ETH_SetMACConfig+0x38>
 80056e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056ea:	e000      	b.n	80056ee <ETH_SetMACConfig+0x3a>
 80056ec:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80056ee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80056f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	7fdb      	ldrb	r3, [r3, #31]
 80056fa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80056fc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005702:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	7f92      	ldrb	r2, [r2, #30]
 8005708:	2a00      	cmp	r2, #0
 800570a:	d102      	bne.n	8005712 <ETH_SetMACConfig+0x5e>
 800570c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005710:	e000      	b.n	8005714 <ETH_SetMACConfig+0x60>
 8005712:	2200      	movs	r2, #0
                        macconf->Speed |
 8005714:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	7f1b      	ldrb	r3, [r3, #28]
 800571a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800571c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005722:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	791b      	ldrb	r3, [r3, #4]
 8005728:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800572a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005732:	2a00      	cmp	r2, #0
 8005734:	d102      	bne.n	800573c <ETH_SetMACConfig+0x88>
 8005736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800573a:	e000      	b.n	800573e <ETH_SetMACConfig+0x8a>
 800573c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800573e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	7bdb      	ldrb	r3, [r3, #15]
 8005744:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005746:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800574c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005754:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005756:	4313      	orrs	r3, r2
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800576e:	2001      	movs	r0, #1
 8005770:	f7fe fcea 	bl	8004148 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	f64f 7341 	movw	r3, #65345	; 0xff41
 800578a:	4013      	ands	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005792:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800579a:	2a00      	cmp	r2, #0
 800579c:	d101      	bne.n	80057a2 <ETH_SetMACConfig+0xee>
 800579e:	2280      	movs	r2, #128	; 0x80
 80057a0:	e000      	b.n	80057a4 <ETH_SetMACConfig+0xf0>
 80057a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80057a4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80057aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80057b2:	2a01      	cmp	r2, #1
 80057b4:	d101      	bne.n	80057ba <ETH_SetMACConfig+0x106>
 80057b6:	2208      	movs	r2, #8
 80057b8:	e000      	b.n	80057bc <ETH_SetMACConfig+0x108>
 80057ba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80057bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80057c4:	2a01      	cmp	r2, #1
 80057c6:	d101      	bne.n	80057cc <ETH_SetMACConfig+0x118>
 80057c8:	2204      	movs	r2, #4
 80057ca:	e000      	b.n	80057ce <ETH_SetMACConfig+0x11a>
 80057cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80057ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80057d6:	2a01      	cmp	r2, #1
 80057d8:	d101      	bne.n	80057de <ETH_SetMACConfig+0x12a>
 80057da:	2202      	movs	r2, #2
 80057dc:	e000      	b.n	80057e0 <ETH_SetMACConfig+0x12c>
 80057de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80057e0:	4313      	orrs	r3, r2
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80057f8:	2001      	movs	r0, #1
 80057fa:	f7fe fca5 	bl	8004148 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	619a      	str	r2, [r3, #24]
}
 8005806:	bf00      	nop
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	ff20810f 	.word	0xff20810f

08005814 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4b3d      	ldr	r3, [pc, #244]	; (8005924 <ETH_SetDMAConfig+0x110>)
 800582e:	4013      	ands	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	7b1b      	ldrb	r3, [r3, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d102      	bne.n	8005840 <ETH_SetDMAConfig+0x2c>
 800583a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800583e:	e000      	b.n	8005842 <ETH_SetDMAConfig+0x2e>
 8005840:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	7b5b      	ldrb	r3, [r3, #13]
 8005846:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005848:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	7f52      	ldrb	r2, [r2, #29]
 800584e:	2a00      	cmp	r2, #0
 8005850:	d102      	bne.n	8005858 <ETH_SetDMAConfig+0x44>
 8005852:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005856:	e000      	b.n	800585a <ETH_SetDMAConfig+0x46>
 8005858:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800585a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	7b9b      	ldrb	r3, [r3, #14]
 8005860:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005862:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005868:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	7f1b      	ldrb	r3, [r3, #28]
 800586e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005870:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	7f9b      	ldrb	r3, [r3, #30]
 8005876:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005878:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800587e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005886:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005888:	4313      	orrs	r3, r2
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005898:	461a      	mov	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80058aa:	2001      	movs	r0, #1
 80058ac:	f7fe fc4c 	bl	8004148 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b8:	461a      	mov	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	791b      	ldrb	r3, [r3, #4]
 80058c2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80058c8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80058ce:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80058d4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058dc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80058de:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80058e6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80058ec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6812      	ldr	r2, [r2, #0]
 80058f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058fa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005908:	2001      	movs	r0, #1
 800590a:	f7fe fc1d 	bl	8004148 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005916:	461a      	mov	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6013      	str	r3, [r2, #0]
}
 800591c:	bf00      	nop
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	f8de3f23 	.word	0xf8de3f23

08005928 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b0a6      	sub	sp, #152	; 0x98
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005930:	2301      	movs	r3, #1
 8005932:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800593c:	2300      	movs	r3, #0
 800593e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005940:	2300      	movs	r3, #0
 8005942:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005946:	2301      	movs	r3, #1
 8005948:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800594c:	2300      	movs	r3, #0
 800594e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8005952:	2301      	movs	r3, #1
 8005954:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005958:	2300      	movs	r3, #0
 800595a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800595e:	2300      	movs	r3, #0
 8005960:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005964:	2300      	movs	r3, #0
 8005966:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005968:	2300      	movs	r3, #0
 800596a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800596e:	2300      	movs	r3, #0
 8005970:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005972:	2300      	movs	r3, #0
 8005974:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005978:	2300      	movs	r3, #0
 800597a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800597e:	2300      	movs	r3, #0
 8005980:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005984:	2300      	movs	r3, #0
 8005986:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800598a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800598e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005990:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005994:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005996:	2300      	movs	r3, #0
 8005998:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800599c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80059a0:	4619      	mov	r1, r3
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff fe86 	bl	80056b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80059a8:	2301      	movs	r3, #1
 80059aa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80059ac:	2301      	movs	r3, #1
 80059ae:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80059b0:	2301      	movs	r3, #1
 80059b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80059b6:	2301      	movs	r3, #1
 80059b8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80059be:	2300      	movs	r3, #0
 80059c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80059c4:	2300      	movs	r3, #0
 80059c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80059ca:	2300      	movs	r3, #0
 80059cc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80059ce:	2301      	movs	r3, #1
 80059d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80059d4:	2301      	movs	r3, #1
 80059d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80059d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059dc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80059de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80059e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059e8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80059f8:	f107 0308 	add.w	r3, r7, #8
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff ff08 	bl	8005814 <ETH_SetDMAConfig>
}
 8005a04:	bf00      	nop
 8005a06:	3798      	adds	r7, #152	; 0x98
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3305      	adds	r3, #5
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	3204      	adds	r2, #4
 8005a24:	7812      	ldrb	r2, [r2, #0]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <ETH_MACAddressConfig+0x68>)
 8005a2e:	4413      	add	r3, r2
 8005a30:	461a      	mov	r2, r3
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3303      	adds	r3, #3
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	061a      	lsls	r2, r3, #24
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3302      	adds	r3, #2
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	041b      	lsls	r3, r3, #16
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	4313      	orrs	r3, r2
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	7812      	ldrb	r2, [r2, #0]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <ETH_MACAddressConfig+0x6c>)
 8005a5e:	4413      	add	r3, r2
 8005a60:	461a      	mov	r2, r3
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	6013      	str	r3, [r2, #0]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40028040 	.word	0x40028040
 8005a78:	40028044 	.word	0x40028044

08005a7c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	e03e      	b.n	8005b08 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68d9      	ldr	r1, [r3, #12]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	440b      	add	r3, r1
 8005a9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	3206      	adds	r2, #6
 8005abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d80c      	bhi.n	8005aec <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68d9      	ldr	r1, [r3, #12]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	440b      	add	r3, r1
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	60da      	str	r2, [r3, #12]
 8005aea:	e004      	b.n	8005af6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	461a      	mov	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3301      	adds	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d9bd      	bls.n	8005a8a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b20:	611a      	str	r2, [r3, #16]
}
 8005b22:	bf00      	nop
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	e046      	b.n	8005bca <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6919      	ldr	r1, [r3, #16]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	440b      	add	r3, r1
 8005b4c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2200      	movs	r2, #0
 8005b58:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2200      	movs	r2, #0
 8005b64:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b78:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8005b80:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	3212      	adds	r2, #18
 8005b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d80c      	bhi.n	8005bba <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6919      	ldr	r1, [r3, #16]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	440b      	add	r3, r1
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	60da      	str	r2, [r3, #12]
 8005bb8:	e004      	b.n	8005bc4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d9b5      	bls.n	8005b3c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691a      	ldr	r2, [r3, #16]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bfa:	60da      	str	r2, [r3, #12]
}
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b08d      	sub	sp, #52	; 0x34
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3318      	adds	r3, #24
 8005c18:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c32:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c4a:	d007      	beq.n	8005c5c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	3304      	adds	r3, #4
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e103      	b.n	8005e68 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	3301      	adds	r3, #1
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8005c78:	f023 031f 	bic.w	r3, r3, #31
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	6852      	ldr	r2, [r2, #4]
 8005c80:	431a      	orrs	r2, r3
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d008      	beq.n	8005ca4 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d008      	beq.n	8005cc2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0304 	and.w	r3, r3, #4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8005ce6:	f3bf 8f5f 	dmb	sy
}
 8005cea:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005cf8:	e084      	b.n	8005e04 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d006      	beq.n	8005d1a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	e005      	b.n	8005d26 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	3301      	adds	r3, #1
 8005d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d902      	bls.n	8005d38 <ETH_Prepare_Tx_Descriptors+0x130>
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	3b04      	subs	r3, #4
 8005d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d40:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d5a:	d007      	beq.n	8005d6c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	3304      	adds	r3, #4
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d029      	beq.n	8005dc0 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d78:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d7e:	e019      	b.n	8005db4 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8005d80:	f3bf 8f5f 	dmb	sy
}
 8005d84:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	3301      	adds	r3, #1
 8005d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d902      	bls.n	8005da4 <ETH_Prepare_Tx_Descriptors+0x19c>
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	3b04      	subs	r3, #4
 8005da2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dac:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	3301      	adds	r3, #1
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d3e1      	bcc.n	8005d80 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e053      	b.n	8005e68 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8005dde:	f023 031f 	bic.w	r3, r3, #31
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	6852      	ldr	r2, [r2, #4]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	3301      	adds	r3, #1
 8005df0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005df2:	f3bf 8f5f 	dmb	sy
}
 8005df6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f47f af76 	bne.w	8005cfa <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d006      	beq.n	8005e22 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	e005      	b.n	8005e2e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e3e:	6979      	ldr	r1, [r7, #20]
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	3304      	adds	r3, #4
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	440b      	add	r3, r1
 8005e48:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e4e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e50:	b672      	cpsid	i
}
 8005e52:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005e62:	b662      	cpsie	i
}
 8005e64:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3734      	adds	r7, #52	; 0x34
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b089      	sub	sp, #36	; 0x24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	e16b      	b.n	8006168 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e90:	2201      	movs	r2, #1
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	f040 815a 	bne.w	8006162 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d005      	beq.n	8005ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d130      	bne.n	8005f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	2203      	movs	r2, #3
 8005ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed6:	43db      	mvns	r3, r3
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	4013      	ands	r3, r2
 8005edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005efc:	2201      	movs	r2, #1
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	43db      	mvns	r3, r3
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	091b      	lsrs	r3, r3, #4
 8005f12:	f003 0201 	and.w	r2, r3, #1
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f003 0303 	and.w	r3, r3, #3
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d017      	beq.n	8005f64 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	2203      	movs	r2, #3
 8005f40:	fa02 f303 	lsl.w	r3, r2, r3
 8005f44:	43db      	mvns	r3, r3
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	fa02 f303 	lsl.w	r3, r2, r3
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d123      	bne.n	8005fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	08da      	lsrs	r2, r3, #3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3208      	adds	r2, #8
 8005f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f003 0307 	and.w	r3, r3, #7
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	220f      	movs	r2, #15
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	4013      	ands	r3, r2
 8005f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f003 0307 	and.w	r3, r3, #7
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	08da      	lsrs	r2, r3, #3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3208      	adds	r2, #8
 8005fb2:	69b9      	ldr	r1, [r7, #24]
 8005fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	2203      	movs	r2, #3
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	43db      	mvns	r3, r3
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f003 0203 	and.w	r2, r3, #3
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 80b4 	beq.w	8006162 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	4b60      	ldr	r3, [pc, #384]	; (8006180 <HAL_GPIO_Init+0x30c>)
 8006000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006002:	4a5f      	ldr	r2, [pc, #380]	; (8006180 <HAL_GPIO_Init+0x30c>)
 8006004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006008:	6453      	str	r3, [r2, #68]	; 0x44
 800600a:	4b5d      	ldr	r3, [pc, #372]	; (8006180 <HAL_GPIO_Init+0x30c>)
 800600c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006016:	4a5b      	ldr	r2, [pc, #364]	; (8006184 <HAL_GPIO_Init+0x310>)
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	089b      	lsrs	r3, r3, #2
 800601c:	3302      	adds	r3, #2
 800601e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	220f      	movs	r2, #15
 800602e:	fa02 f303 	lsl.w	r3, r2, r3
 8006032:	43db      	mvns	r3, r3
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	4013      	ands	r3, r2
 8006038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a52      	ldr	r2, [pc, #328]	; (8006188 <HAL_GPIO_Init+0x314>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d02b      	beq.n	800609a <HAL_GPIO_Init+0x226>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a51      	ldr	r2, [pc, #324]	; (800618c <HAL_GPIO_Init+0x318>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d025      	beq.n	8006096 <HAL_GPIO_Init+0x222>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a50      	ldr	r2, [pc, #320]	; (8006190 <HAL_GPIO_Init+0x31c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d01f      	beq.n	8006092 <HAL_GPIO_Init+0x21e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a4f      	ldr	r2, [pc, #316]	; (8006194 <HAL_GPIO_Init+0x320>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d019      	beq.n	800608e <HAL_GPIO_Init+0x21a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a4e      	ldr	r2, [pc, #312]	; (8006198 <HAL_GPIO_Init+0x324>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d013      	beq.n	800608a <HAL_GPIO_Init+0x216>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a4d      	ldr	r2, [pc, #308]	; (800619c <HAL_GPIO_Init+0x328>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00d      	beq.n	8006086 <HAL_GPIO_Init+0x212>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a4c      	ldr	r2, [pc, #304]	; (80061a0 <HAL_GPIO_Init+0x32c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <HAL_GPIO_Init+0x20e>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a4b      	ldr	r2, [pc, #300]	; (80061a4 <HAL_GPIO_Init+0x330>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d101      	bne.n	800607e <HAL_GPIO_Init+0x20a>
 800607a:	2307      	movs	r3, #7
 800607c:	e00e      	b.n	800609c <HAL_GPIO_Init+0x228>
 800607e:	2308      	movs	r3, #8
 8006080:	e00c      	b.n	800609c <HAL_GPIO_Init+0x228>
 8006082:	2306      	movs	r3, #6
 8006084:	e00a      	b.n	800609c <HAL_GPIO_Init+0x228>
 8006086:	2305      	movs	r3, #5
 8006088:	e008      	b.n	800609c <HAL_GPIO_Init+0x228>
 800608a:	2304      	movs	r3, #4
 800608c:	e006      	b.n	800609c <HAL_GPIO_Init+0x228>
 800608e:	2303      	movs	r3, #3
 8006090:	e004      	b.n	800609c <HAL_GPIO_Init+0x228>
 8006092:	2302      	movs	r3, #2
 8006094:	e002      	b.n	800609c <HAL_GPIO_Init+0x228>
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <HAL_GPIO_Init+0x228>
 800609a:	2300      	movs	r3, #0
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	f002 0203 	and.w	r2, r2, #3
 80060a2:	0092      	lsls	r2, r2, #2
 80060a4:	4093      	lsls	r3, r2
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060ac:	4935      	ldr	r1, [pc, #212]	; (8006184 <HAL_GPIO_Init+0x310>)
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	089b      	lsrs	r3, r3, #2
 80060b2:	3302      	adds	r3, #2
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060ba:	4b3b      	ldr	r3, [pc, #236]	; (80061a8 <HAL_GPIO_Init+0x334>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	43db      	mvns	r3, r3
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	4013      	ands	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060de:	4a32      	ldr	r2, [pc, #200]	; (80061a8 <HAL_GPIO_Init+0x334>)
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80060e4:	4b30      	ldr	r3, [pc, #192]	; (80061a8 <HAL_GPIO_Init+0x334>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	43db      	mvns	r3, r3
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	4013      	ands	r3, r2
 80060f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006108:	4a27      	ldr	r2, [pc, #156]	; (80061a8 <HAL_GPIO_Init+0x334>)
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800610e:	4b26      	ldr	r3, [pc, #152]	; (80061a8 <HAL_GPIO_Init+0x334>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	43db      	mvns	r3, r3
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	4013      	ands	r3, r2
 800611c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006132:	4a1d      	ldr	r2, [pc, #116]	; (80061a8 <HAL_GPIO_Init+0x334>)
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006138:	4b1b      	ldr	r3, [pc, #108]	; (80061a8 <HAL_GPIO_Init+0x334>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	43db      	mvns	r3, r3
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	4013      	ands	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800615c:	4a12      	ldr	r2, [pc, #72]	; (80061a8 <HAL_GPIO_Init+0x334>)
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	3301      	adds	r3, #1
 8006166:	61fb      	str	r3, [r7, #28]
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2b0f      	cmp	r3, #15
 800616c:	f67f ae90 	bls.w	8005e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006170:	bf00      	nop
 8006172:	bf00      	nop
 8006174:	3724      	adds	r7, #36	; 0x24
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40023800 	.word	0x40023800
 8006184:	40013800 	.word	0x40013800
 8006188:	40020000 	.word	0x40020000
 800618c:	40020400 	.word	0x40020400
 8006190:	40020800 	.word	0x40020800
 8006194:	40020c00 	.word	0x40020c00
 8006198:	40021000 	.word	0x40021000
 800619c:	40021400 	.word	0x40021400
 80061a0:	40021800 	.word	0x40021800
 80061a4:	40021c00 	.word	0x40021c00
 80061a8:	40013c00 	.word	0x40013c00

080061ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	887b      	ldrh	r3, [r7, #2]
 80061be:	4013      	ands	r3, r2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061c4:	2301      	movs	r3, #1
 80061c6:	73fb      	strb	r3, [r7, #15]
 80061c8:	e001      	b.n	80061ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061ca:	2300      	movs	r3, #0
 80061cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	807b      	strh	r3, [r7, #2]
 80061e8:	4613      	mov	r3, r2
 80061ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061ec:	787b      	ldrb	r3, [r7, #1]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061f2:	887a      	ldrh	r2, [r7, #2]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061f8:	e003      	b.n	8006202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061fa:	887b      	ldrh	r3, [r7, #2]
 80061fc:	041a      	lsls	r2, r3, #16
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	619a      	str	r2, [r3, #24]
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800620e:	b480      	push	{r7}
 8006210:	b085      	sub	sp, #20
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	460b      	mov	r3, r1
 8006218:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006220:	887a      	ldrh	r2, [r7, #2]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4013      	ands	r3, r2
 8006226:	041a      	lsls	r2, r3, #16
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	43d9      	mvns	r1, r3
 800622c:	887b      	ldrh	r3, [r7, #2]
 800622e:	400b      	ands	r3, r1
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	619a      	str	r2, [r3, #24]
}
 8006236:	bf00      	nop
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
	...

08006244 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	4603      	mov	r3, r0
 800624c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800624e:	4b08      	ldr	r3, [pc, #32]	; (8006270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006250:	695a      	ldr	r2, [r3, #20]
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	4013      	ands	r3, r2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d006      	beq.n	8006268 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800625a:	4a05      	ldr	r2, [pc, #20]	; (8006270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800625c:	88fb      	ldrh	r3, [r7, #6]
 800625e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006260:	88fb      	ldrh	r3, [r7, #6]
 8006262:	4618      	mov	r0, r3
 8006264:	f00e feae 	bl	8014fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40013c00 	.word	0x40013c00

08006274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e12b      	b.n	80064de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f00d fc64 	bl	8013b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2224      	movs	r2, #36	; 0x24
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0201 	bic.w	r2, r2, #1
 80062b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062d8:	f001 f89e 	bl	8007418 <HAL_RCC_GetPCLK1Freq>
 80062dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	4a81      	ldr	r2, [pc, #516]	; (80064e8 <HAL_I2C_Init+0x274>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d807      	bhi.n	80062f8 <HAL_I2C_Init+0x84>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4a80      	ldr	r2, [pc, #512]	; (80064ec <HAL_I2C_Init+0x278>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	bf94      	ite	ls
 80062f0:	2301      	movls	r3, #1
 80062f2:	2300      	movhi	r3, #0
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	e006      	b.n	8006306 <HAL_I2C_Init+0x92>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4a7d      	ldr	r2, [pc, #500]	; (80064f0 <HAL_I2C_Init+0x27c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	bf94      	ite	ls
 8006300:	2301      	movls	r3, #1
 8006302:	2300      	movhi	r3, #0
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e0e7      	b.n	80064de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4a78      	ldr	r2, [pc, #480]	; (80064f4 <HAL_I2C_Init+0x280>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	0c9b      	lsrs	r3, r3, #18
 8006318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	4a6a      	ldr	r2, [pc, #424]	; (80064e8 <HAL_I2C_Init+0x274>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d802      	bhi.n	8006348 <HAL_I2C_Init+0xd4>
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	3301      	adds	r3, #1
 8006346:	e009      	b.n	800635c <HAL_I2C_Init+0xe8>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800634e:	fb02 f303 	mul.w	r3, r2, r3
 8006352:	4a69      	ldr	r2, [pc, #420]	; (80064f8 <HAL_I2C_Init+0x284>)
 8006354:	fba2 2303 	umull	r2, r3, r2, r3
 8006358:	099b      	lsrs	r3, r3, #6
 800635a:	3301      	adds	r3, #1
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	430b      	orrs	r3, r1
 8006362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800636e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	495c      	ldr	r1, [pc, #368]	; (80064e8 <HAL_I2C_Init+0x274>)
 8006378:	428b      	cmp	r3, r1
 800637a:	d819      	bhi.n	80063b0 <HAL_I2C_Init+0x13c>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	1e59      	subs	r1, r3, #1
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	fbb1 f3f3 	udiv	r3, r1, r3
 800638a:	1c59      	adds	r1, r3, #1
 800638c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006390:	400b      	ands	r3, r1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <HAL_I2C_Init+0x138>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	1e59      	subs	r1, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80063a4:	3301      	adds	r3, #1
 80063a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063aa:	e051      	b.n	8006450 <HAL_I2C_Init+0x1dc>
 80063ac:	2304      	movs	r3, #4
 80063ae:	e04f      	b.n	8006450 <HAL_I2C_Init+0x1dc>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d111      	bne.n	80063dc <HAL_I2C_Init+0x168>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	1e58      	subs	r0, r3, #1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6859      	ldr	r1, [r3, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	440b      	add	r3, r1
 80063c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80063ca:	3301      	adds	r3, #1
 80063cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	bf0c      	ite	eq
 80063d4:	2301      	moveq	r3, #1
 80063d6:	2300      	movne	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	e012      	b.n	8006402 <HAL_I2C_Init+0x18e>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	1e58      	subs	r0, r3, #1
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6859      	ldr	r1, [r3, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	0099      	lsls	r1, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80063f2:	3301      	adds	r3, #1
 80063f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	bf0c      	ite	eq
 80063fc:	2301      	moveq	r3, #1
 80063fe:	2300      	movne	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <HAL_I2C_Init+0x196>
 8006406:	2301      	movs	r3, #1
 8006408:	e022      	b.n	8006450 <HAL_I2C_Init+0x1dc>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10e      	bne.n	8006430 <HAL_I2C_Init+0x1bc>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1e58      	subs	r0, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6859      	ldr	r1, [r3, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	440b      	add	r3, r1
 8006420:	fbb0 f3f3 	udiv	r3, r0, r3
 8006424:	3301      	adds	r3, #1
 8006426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800642a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642e:	e00f      	b.n	8006450 <HAL_I2C_Init+0x1dc>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	1e58      	subs	r0, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6859      	ldr	r1, [r3, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	0099      	lsls	r1, r3, #2
 8006440:	440b      	add	r3, r1
 8006442:	fbb0 f3f3 	udiv	r3, r0, r3
 8006446:	3301      	adds	r3, #1
 8006448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800644c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	6809      	ldr	r1, [r1, #0]
 8006454:	4313      	orrs	r3, r2
 8006456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69da      	ldr	r2, [r3, #28]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	431a      	orrs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800647e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6911      	ldr	r1, [r2, #16]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	68d2      	ldr	r2, [r2, #12]
 800648a:	4311      	orrs	r1, r2
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6812      	ldr	r2, [r2, #0]
 8006490:	430b      	orrs	r3, r1
 8006492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695a      	ldr	r2, [r3, #20]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0201 	orr.w	r2, r2, #1
 80064be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	000186a0 	.word	0x000186a0
 80064ec:	001e847f 	.word	0x001e847f
 80064f0:	003d08ff 	.word	0x003d08ff
 80064f4:	431bde83 	.word	0x431bde83
 80064f8:	10624dd3 	.word	0x10624dd3

080064fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	4608      	mov	r0, r1
 8006506:	4611      	mov	r1, r2
 8006508:	461a      	mov	r2, r3
 800650a:	4603      	mov	r3, r0
 800650c:	817b      	strh	r3, [r7, #10]
 800650e:	460b      	mov	r3, r1
 8006510:	813b      	strh	r3, [r7, #8]
 8006512:	4613      	mov	r3, r2
 8006514:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006516:	f7fd fe0b 	bl	8004130 <HAL_GetTick>
 800651a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b20      	cmp	r3, #32
 8006526:	f040 80d9 	bne.w	80066dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	2319      	movs	r3, #25
 8006530:	2201      	movs	r2, #1
 8006532:	496d      	ldr	r1, [pc, #436]	; (80066e8 <HAL_I2C_Mem_Write+0x1ec>)
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f971 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006540:	2302      	movs	r3, #2
 8006542:	e0cc      	b.n	80066de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <HAL_I2C_Mem_Write+0x56>
 800654e:	2302      	movs	r3, #2
 8006550:	e0c5      	b.n	80066de <HAL_I2C_Mem_Write+0x1e2>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b01      	cmp	r3, #1
 8006566:	d007      	beq.n	8006578 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0201 	orr.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006586:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2221      	movs	r2, #33	; 0x21
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2240      	movs	r2, #64	; 0x40
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a3a      	ldr	r2, [r7, #32]
 80065a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4a4d      	ldr	r2, [pc, #308]	; (80066ec <HAL_I2C_Mem_Write+0x1f0>)
 80065b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065ba:	88f8      	ldrh	r0, [r7, #6]
 80065bc:	893a      	ldrh	r2, [r7, #8]
 80065be:	8979      	ldrh	r1, [r7, #10]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	4603      	mov	r3, r0
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 f890 	bl	80066f0 <I2C_RequestMemoryWrite>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d052      	beq.n	800667c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e081      	b.n	80066de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 f9f2 	bl	80069c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00d      	beq.n	8006606 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d107      	bne.n	8006602 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006600:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e06b      	b.n	80066de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	781a      	ldrb	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662c:	b29b      	uxth	r3, r3
 800662e:	3b01      	subs	r3, #1
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b04      	cmp	r3, #4
 8006642:	d11b      	bne.n	800667c <HAL_I2C_Mem_Write+0x180>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006648:	2b00      	cmp	r3, #0
 800664a:	d017      	beq.n	800667c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	781a      	ldrb	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006666:	3b01      	subs	r3, #1
 8006668:	b29a      	uxth	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1aa      	bne.n	80065da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 f9de 	bl	8006a4a <I2C_WaitOnBTFFlagUntilTimeout>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00d      	beq.n	80066b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	2b04      	cmp	r3, #4
 800669a:	d107      	bne.n	80066ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e016      	b.n	80066de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	e000      	b.n	80066de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80066dc:	2302      	movs	r3, #2
  }
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	00100002 	.word	0x00100002
 80066ec:	ffff0000 	.word	0xffff0000

080066f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	4608      	mov	r0, r1
 80066fa:	4611      	mov	r1, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	4603      	mov	r3, r0
 8006700:	817b      	strh	r3, [r7, #10]
 8006702:	460b      	mov	r3, r1
 8006704:	813b      	strh	r3, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006718:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	2200      	movs	r2, #0
 8006722:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f878 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00d      	beq.n	800674e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006740:	d103      	bne.n	800674a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006748:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e05f      	b.n	800680e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800674e:	897b      	ldrh	r3, [r7, #10]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800675c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	6a3a      	ldr	r2, [r7, #32]
 8006762:	492d      	ldr	r1, [pc, #180]	; (8006818 <I2C_RequestMemoryWrite+0x128>)
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f8b0 	bl	80068ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e04c      	b.n	800680e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	617b      	str	r3, [r7, #20]
 8006788:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800678a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678c:	6a39      	ldr	r1, [r7, #32]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 f91a 	bl	80069c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00d      	beq.n	80067b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d107      	bne.n	80067b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e02b      	b.n	800680e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067b6:	88fb      	ldrh	r3, [r7, #6]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d105      	bne.n	80067c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067bc:	893b      	ldrh	r3, [r7, #8]
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	611a      	str	r2, [r3, #16]
 80067c6:	e021      	b.n	800680c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80067c8:	893b      	ldrh	r3, [r7, #8]
 80067ca:	0a1b      	lsrs	r3, r3, #8
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d8:	6a39      	ldr	r1, [r7, #32]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 f8f4 	bl	80069c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00d      	beq.n	8006802 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	d107      	bne.n	80067fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e005      	b.n	800680e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006802:	893b      	ldrh	r3, [r7, #8]
 8006804:	b2da      	uxtb	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	00010002 	.word	0x00010002

0800681c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800682c:	e025      	b.n	800687a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d021      	beq.n	800687a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006836:	f7fd fc7b 	bl	8004130 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d302      	bcc.n	800684c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d116      	bne.n	800687a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2220      	movs	r2, #32
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	f043 0220 	orr.w	r2, r3, #32
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e023      	b.n	80068c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	0c1b      	lsrs	r3, r3, #16
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b01      	cmp	r3, #1
 8006882:	d10d      	bne.n	80068a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	43da      	mvns	r2, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4013      	ands	r3, r2
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	bf0c      	ite	eq
 8006896:	2301      	moveq	r3, #1
 8006898:	2300      	movne	r3, #0
 800689a:	b2db      	uxtb	r3, r3
 800689c:	461a      	mov	r2, r3
 800689e:	e00c      	b.n	80068ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	43da      	mvns	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4013      	ands	r3, r2
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bf0c      	ite	eq
 80068b2:	2301      	moveq	r3, #1
 80068b4:	2300      	movne	r3, #0
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	461a      	mov	r2, r3
 80068ba:	79fb      	ldrb	r3, [r7, #7]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d0b6      	beq.n	800682e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	607a      	str	r2, [r7, #4]
 80068d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068d8:	e051      	b.n	800697e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e8:	d123      	bne.n	8006932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006902:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2220      	movs	r2, #32
 800690e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	f043 0204 	orr.w	r2, r3, #4
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e046      	b.n	80069c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006938:	d021      	beq.n	800697e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693a:	f7fd fbf9 	bl	8004130 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	429a      	cmp	r2, r3
 8006948:	d302      	bcc.n	8006950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d116      	bne.n	800697e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2220      	movs	r2, #32
 800695a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f043 0220 	orr.w	r2, r3, #32
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e020      	b.n	80069c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	0c1b      	lsrs	r3, r3, #16
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b01      	cmp	r3, #1
 8006986:	d10c      	bne.n	80069a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	43da      	mvns	r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	4013      	ands	r3, r2
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	bf14      	ite	ne
 800699a:	2301      	movne	r3, #1
 800699c:	2300      	moveq	r3, #0
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	e00b      	b.n	80069ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	43da      	mvns	r2, r3
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4013      	ands	r3, r2
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bf14      	ite	ne
 80069b4:	2301      	movne	r3, #1
 80069b6:	2300      	moveq	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d18d      	bne.n	80068da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069d4:	e02d      	b.n	8006a32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 f878 	bl	8006acc <I2C_IsAcknowledgeFailed>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e02d      	b.n	8006a42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d021      	beq.n	8006a32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ee:	f7fd fb9f 	bl	8004130 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d302      	bcc.n	8006a04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d116      	bne.n	8006a32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	f043 0220 	orr.w	r2, r3, #32
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e007      	b.n	8006a42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3c:	2b80      	cmp	r3, #128	; 0x80
 8006a3e:	d1ca      	bne.n	80069d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a56:	e02d      	b.n	8006ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 f837 	bl	8006acc <I2C_IsAcknowledgeFailed>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e02d      	b.n	8006ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d021      	beq.n	8006ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a70:	f7fd fb5e 	bl	8004130 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d302      	bcc.n	8006a86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d116      	bne.n	8006ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa0:	f043 0220 	orr.w	r2, r3, #32
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e007      	b.n	8006ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	f003 0304 	and.w	r3, r3, #4
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d1ca      	bne.n	8006a58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae2:	d11b      	bne.n	8006b1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006aec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	f043 0204 	orr.w	r2, r3, #4
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	af00      	add	r7, sp, #0

}
 8006b2e:	bf00      	nop
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e267      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d075      	beq.n	8006c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b56:	4b88      	ldr	r3, [pc, #544]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 030c 	and.w	r3, r3, #12
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d00c      	beq.n	8006b7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b62:	4b85      	ldr	r3, [pc, #532]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b6a:	2b08      	cmp	r3, #8
 8006b6c:	d112      	bne.n	8006b94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b6e:	4b82      	ldr	r3, [pc, #520]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b7a:	d10b      	bne.n	8006b94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b7c:	4b7e      	ldr	r3, [pc, #504]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d05b      	beq.n	8006c40 <HAL_RCC_OscConfig+0x108>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d157      	bne.n	8006c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e242      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b9c:	d106      	bne.n	8006bac <HAL_RCC_OscConfig+0x74>
 8006b9e:	4b76      	ldr	r3, [pc, #472]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a75      	ldr	r2, [pc, #468]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	e01d      	b.n	8006be8 <HAL_RCC_OscConfig+0xb0>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bb4:	d10c      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x98>
 8006bb6:	4b70      	ldr	r3, [pc, #448]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a6f      	ldr	r2, [pc, #444]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	4b6d      	ldr	r3, [pc, #436]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a6c      	ldr	r2, [pc, #432]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	e00b      	b.n	8006be8 <HAL_RCC_OscConfig+0xb0>
 8006bd0:	4b69      	ldr	r3, [pc, #420]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a68      	ldr	r2, [pc, #416]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	4b66      	ldr	r3, [pc, #408]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a65      	ldr	r2, [pc, #404]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d013      	beq.n	8006c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf0:	f7fd fa9e 	bl	8004130 <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bf8:	f7fd fa9a 	bl	8004130 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b64      	cmp	r3, #100	; 0x64
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e207      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c0a:	4b5b      	ldr	r3, [pc, #364]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0f0      	beq.n	8006bf8 <HAL_RCC_OscConfig+0xc0>
 8006c16:	e014      	b.n	8006c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c18:	f7fd fa8a 	bl	8004130 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c20:	f7fd fa86 	bl	8004130 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b64      	cmp	r3, #100	; 0x64
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e1f3      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c32:	4b51      	ldr	r3, [pc, #324]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1f0      	bne.n	8006c20 <HAL_RCC_OscConfig+0xe8>
 8006c3e:	e000      	b.n	8006c42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d063      	beq.n	8006d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c4e:	4b4a      	ldr	r3, [pc, #296]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 030c 	and.w	r3, r3, #12
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00b      	beq.n	8006c72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c5a:	4b47      	ldr	r3, [pc, #284]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	d11c      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c66:	4b44      	ldr	r3, [pc, #272]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d116      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c72:	4b41      	ldr	r3, [pc, #260]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d005      	beq.n	8006c8a <HAL_RCC_OscConfig+0x152>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d001      	beq.n	8006c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e1c7      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c8a:	4b3b      	ldr	r3, [pc, #236]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	4937      	ldr	r1, [pc, #220]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c9e:	e03a      	b.n	8006d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d020      	beq.n	8006cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ca8:	4b34      	ldr	r3, [pc, #208]	; (8006d7c <HAL_RCC_OscConfig+0x244>)
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cae:	f7fd fa3f 	bl	8004130 <HAL_GetTick>
 8006cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cb6:	f7fd fa3b 	bl	8004130 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e1a8      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cc8:	4b2b      	ldr	r3, [pc, #172]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f0      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd4:	4b28      	ldr	r3, [pc, #160]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	4925      	ldr	r1, [pc, #148]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	600b      	str	r3, [r1, #0]
 8006ce8:	e015      	b.n	8006d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cea:	4b24      	ldr	r3, [pc, #144]	; (8006d7c <HAL_RCC_OscConfig+0x244>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf0:	f7fd fa1e 	bl	8004130 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cf8:	f7fd fa1a 	bl	8004130 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e187      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d0a:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f0      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d036      	beq.n	8006d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d016      	beq.n	8006d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d2a:	4b15      	ldr	r3, [pc, #84]	; (8006d80 <HAL_RCC_OscConfig+0x248>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d30:	f7fd f9fe 	bl	8004130 <HAL_GetTick>
 8006d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d36:	e008      	b.n	8006d4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d38:	f7fd f9fa 	bl	8004130 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e167      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0f0      	beq.n	8006d38 <HAL_RCC_OscConfig+0x200>
 8006d56:	e01b      	b.n	8006d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d58:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <HAL_RCC_OscConfig+0x248>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d5e:	f7fd f9e7 	bl	8004130 <HAL_GetTick>
 8006d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d64:	e00e      	b.n	8006d84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d66:	f7fd f9e3 	bl	8004130 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d907      	bls.n	8006d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e150      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
 8006d78:	40023800 	.word	0x40023800
 8006d7c:	42470000 	.word	0x42470000
 8006d80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d84:	4b88      	ldr	r3, [pc, #544]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1ea      	bne.n	8006d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 8097 	beq.w	8006ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006da2:	4b81      	ldr	r3, [pc, #516]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10f      	bne.n	8006dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dae:	2300      	movs	r3, #0
 8006db0:	60bb      	str	r3, [r7, #8]
 8006db2:	4b7d      	ldr	r3, [pc, #500]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	4a7c      	ldr	r2, [pc, #496]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006dbe:	4b7a      	ldr	r3, [pc, #488]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc6:	60bb      	str	r3, [r7, #8]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dce:	4b77      	ldr	r3, [pc, #476]	; (8006fac <HAL_RCC_OscConfig+0x474>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d118      	bne.n	8006e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dda:	4b74      	ldr	r3, [pc, #464]	; (8006fac <HAL_RCC_OscConfig+0x474>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a73      	ldr	r2, [pc, #460]	; (8006fac <HAL_RCC_OscConfig+0x474>)
 8006de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006de6:	f7fd f9a3 	bl	8004130 <HAL_GetTick>
 8006dea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dec:	e008      	b.n	8006e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dee:	f7fd f99f 	bl	8004130 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e10c      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e00:	4b6a      	ldr	r3, [pc, #424]	; (8006fac <HAL_RCC_OscConfig+0x474>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0f0      	beq.n	8006dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d106      	bne.n	8006e22 <HAL_RCC_OscConfig+0x2ea>
 8006e14:	4b64      	ldr	r3, [pc, #400]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e18:	4a63      	ldr	r2, [pc, #396]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e1a:	f043 0301 	orr.w	r3, r3, #1
 8006e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e20:	e01c      	b.n	8006e5c <HAL_RCC_OscConfig+0x324>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b05      	cmp	r3, #5
 8006e28:	d10c      	bne.n	8006e44 <HAL_RCC_OscConfig+0x30c>
 8006e2a:	4b5f      	ldr	r3, [pc, #380]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2e:	4a5e      	ldr	r2, [pc, #376]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e30:	f043 0304 	orr.w	r3, r3, #4
 8006e34:	6713      	str	r3, [r2, #112]	; 0x70
 8006e36:	4b5c      	ldr	r3, [pc, #368]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3a:	4a5b      	ldr	r2, [pc, #364]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e3c:	f043 0301 	orr.w	r3, r3, #1
 8006e40:	6713      	str	r3, [r2, #112]	; 0x70
 8006e42:	e00b      	b.n	8006e5c <HAL_RCC_OscConfig+0x324>
 8006e44:	4b58      	ldr	r3, [pc, #352]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e48:	4a57      	ldr	r2, [pc, #348]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e4a:	f023 0301 	bic.w	r3, r3, #1
 8006e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e50:	4b55      	ldr	r3, [pc, #340]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e54:	4a54      	ldr	r2, [pc, #336]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e56:	f023 0304 	bic.w	r3, r3, #4
 8006e5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d015      	beq.n	8006e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e64:	f7fd f964 	bl	8004130 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e6a:	e00a      	b.n	8006e82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e6c:	f7fd f960 	bl	8004130 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e0cb      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e82:	4b49      	ldr	r3, [pc, #292]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0ee      	beq.n	8006e6c <HAL_RCC_OscConfig+0x334>
 8006e8e:	e014      	b.n	8006eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e90:	f7fd f94e 	bl	8004130 <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e96:	e00a      	b.n	8006eae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e98:	f7fd f94a 	bl	8004130 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e0b5      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eae:	4b3e      	ldr	r3, [pc, #248]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1ee      	bne.n	8006e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d105      	bne.n	8006ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ec0:	4b39      	ldr	r3, [pc, #228]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	4a38      	ldr	r2, [pc, #224]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 80a1 	beq.w	8007018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ed6:	4b34      	ldr	r3, [pc, #208]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 030c 	and.w	r3, r3, #12
 8006ede:	2b08      	cmp	r3, #8
 8006ee0:	d05c      	beq.n	8006f9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d141      	bne.n	8006f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eea:	4b31      	ldr	r3, [pc, #196]	; (8006fb0 <HAL_RCC_OscConfig+0x478>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef0:	f7fd f91e 	bl	8004130 <HAL_GetTick>
 8006ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ef6:	e008      	b.n	8006f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ef8:	f7fd f91a 	bl	8004130 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e087      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f0a:	4b27      	ldr	r3, [pc, #156]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1f0      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69da      	ldr	r2, [r3, #28]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	019b      	lsls	r3, r3, #6
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2c:	085b      	lsrs	r3, r3, #1
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	041b      	lsls	r3, r3, #16
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	061b      	lsls	r3, r3, #24
 8006f3a:	491b      	ldr	r1, [pc, #108]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f40:	4b1b      	ldr	r3, [pc, #108]	; (8006fb0 <HAL_RCC_OscConfig+0x478>)
 8006f42:	2201      	movs	r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f46:	f7fd f8f3 	bl	8004130 <HAL_GetTick>
 8006f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f4c:	e008      	b.n	8006f60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f4e:	f7fd f8ef 	bl	8004130 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d901      	bls.n	8006f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e05c      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f60:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0f0      	beq.n	8006f4e <HAL_RCC_OscConfig+0x416>
 8006f6c:	e054      	b.n	8007018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f6e:	4b10      	ldr	r3, [pc, #64]	; (8006fb0 <HAL_RCC_OscConfig+0x478>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f74:	f7fd f8dc 	bl	8004130 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f7c:	f7fd f8d8 	bl	8004130 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e045      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f8e:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <HAL_RCC_OscConfig+0x470>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f0      	bne.n	8006f7c <HAL_RCC_OscConfig+0x444>
 8006f9a:	e03d      	b.n	8007018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d107      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e038      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	40007000 	.word	0x40007000
 8006fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fb4:	4b1b      	ldr	r3, [pc, #108]	; (8007024 <HAL_RCC_OscConfig+0x4ec>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d028      	beq.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d121      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d11a      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d111      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	085b      	lsrs	r3, r3, #1
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007000:	429a      	cmp	r2, r3
 8007002:	d107      	bne.n	8007014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007010:	429a      	cmp	r2, r3
 8007012:	d001      	beq.n	8007018 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e000      	b.n	800701a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40023800 	.word	0x40023800

08007028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e0cc      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800703c:	4b68      	ldr	r3, [pc, #416]	; (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0307 	and.w	r3, r3, #7
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d90c      	bls.n	8007064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800704a:	4b65      	ldr	r3, [pc, #404]	; (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007052:	4b63      	ldr	r3, [pc, #396]	; (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	429a      	cmp	r2, r3
 800705e:	d001      	beq.n	8007064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e0b8      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d020      	beq.n	80070b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800707c:	4b59      	ldr	r3, [pc, #356]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	4a58      	ldr	r2, [pc, #352]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007086:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0308 	and.w	r3, r3, #8
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007094:	4b53      	ldr	r3, [pc, #332]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	4a52      	ldr	r2, [pc, #328]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800709e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070a0:	4b50      	ldr	r3, [pc, #320]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	494d      	ldr	r1, [pc, #308]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d044      	beq.n	8007148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d107      	bne.n	80070d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070c6:	4b47      	ldr	r3, [pc, #284]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d119      	bne.n	8007106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e07f      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d003      	beq.n	80070e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d107      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070e6:	4b3f      	ldr	r3, [pc, #252]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e06f      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f6:	4b3b      	ldr	r3, [pc, #236]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e067      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007106:	4b37      	ldr	r3, [pc, #220]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f023 0203 	bic.w	r2, r3, #3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	4934      	ldr	r1, [pc, #208]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007114:	4313      	orrs	r3, r2
 8007116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007118:	f7fd f80a 	bl	8004130 <HAL_GetTick>
 800711c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800711e:	e00a      	b.n	8007136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007120:	f7fd f806 	bl	8004130 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	f241 3288 	movw	r2, #5000	; 0x1388
 800712e:	4293      	cmp	r3, r2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e04f      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007136:	4b2b      	ldr	r3, [pc, #172]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 020c 	and.w	r2, r3, #12
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	429a      	cmp	r2, r3
 8007146:	d1eb      	bne.n	8007120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007148:	4b25      	ldr	r3, [pc, #148]	; (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d20c      	bcs.n	8007170 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007156:	4b22      	ldr	r3, [pc, #136]	; (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800715e:	4b20      	ldr	r3, [pc, #128]	; (80071e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d001      	beq.n	8007170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e032      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d008      	beq.n	800718e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800717c:	4b19      	ldr	r3, [pc, #100]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	4916      	ldr	r1, [pc, #88]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800718a:	4313      	orrs	r3, r2
 800718c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d009      	beq.n	80071ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800719a:	4b12      	ldr	r3, [pc, #72]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	490e      	ldr	r1, [pc, #56]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071ae:	f000 f821 	bl	80071f4 <HAL_RCC_GetSysClockFreq>
 80071b2:	4602      	mov	r2, r0
 80071b4:	4b0b      	ldr	r3, [pc, #44]	; (80071e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	091b      	lsrs	r3, r3, #4
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	490a      	ldr	r1, [pc, #40]	; (80071e8 <HAL_RCC_ClockConfig+0x1c0>)
 80071c0:	5ccb      	ldrb	r3, [r1, r3]
 80071c2:	fa22 f303 	lsr.w	r3, r2, r3
 80071c6:	4a09      	ldr	r2, [pc, #36]	; (80071ec <HAL_RCC_ClockConfig+0x1c4>)
 80071c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071ca:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <HAL_RCC_ClockConfig+0x1c8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fc ff6a 	bl	80040a8 <HAL_InitTick>

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	40023c00 	.word	0x40023c00
 80071e4:	40023800 	.word	0x40023800
 80071e8:	0801a0d0 	.word	0x0801a0d0
 80071ec:	20000480 	.word	0x20000480
 80071f0:	20000450 	.word	0x20000450

080071f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071f8:	b094      	sub	sp, #80	; 0x50
 80071fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007200:	2300      	movs	r3, #0
 8007202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007204:	2300      	movs	r3, #0
 8007206:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800720c:	4b79      	ldr	r3, [pc, #484]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 030c 	and.w	r3, r3, #12
 8007214:	2b08      	cmp	r3, #8
 8007216:	d00d      	beq.n	8007234 <HAL_RCC_GetSysClockFreq+0x40>
 8007218:	2b08      	cmp	r3, #8
 800721a:	f200 80e1 	bhi.w	80073e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <HAL_RCC_GetSysClockFreq+0x34>
 8007222:	2b04      	cmp	r3, #4
 8007224:	d003      	beq.n	800722e <HAL_RCC_GetSysClockFreq+0x3a>
 8007226:	e0db      	b.n	80073e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007228:	4b73      	ldr	r3, [pc, #460]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800722a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800722c:	e0db      	b.n	80073e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800722e:	4b73      	ldr	r3, [pc, #460]	; (80073fc <HAL_RCC_GetSysClockFreq+0x208>)
 8007230:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007232:	e0d8      	b.n	80073e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007234:	4b6f      	ldr	r3, [pc, #444]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800723c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800723e:	4b6d      	ldr	r3, [pc, #436]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d063      	beq.n	8007312 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800724a:	4b6a      	ldr	r3, [pc, #424]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	099b      	lsrs	r3, r3, #6
 8007250:	2200      	movs	r2, #0
 8007252:	63bb      	str	r3, [r7, #56]	; 0x38
 8007254:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725c:	633b      	str	r3, [r7, #48]	; 0x30
 800725e:	2300      	movs	r3, #0
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
 8007262:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007266:	4622      	mov	r2, r4
 8007268:	462b      	mov	r3, r5
 800726a:	f04f 0000 	mov.w	r0, #0
 800726e:	f04f 0100 	mov.w	r1, #0
 8007272:	0159      	lsls	r1, r3, #5
 8007274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007278:	0150      	lsls	r0, r2, #5
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	4621      	mov	r1, r4
 8007280:	1a51      	subs	r1, r2, r1
 8007282:	6139      	str	r1, [r7, #16]
 8007284:	4629      	mov	r1, r5
 8007286:	eb63 0301 	sbc.w	r3, r3, r1
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	f04f 0200 	mov.w	r2, #0
 8007290:	f04f 0300 	mov.w	r3, #0
 8007294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007298:	4659      	mov	r1, fp
 800729a:	018b      	lsls	r3, r1, #6
 800729c:	4651      	mov	r1, sl
 800729e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072a2:	4651      	mov	r1, sl
 80072a4:	018a      	lsls	r2, r1, #6
 80072a6:	4651      	mov	r1, sl
 80072a8:	ebb2 0801 	subs.w	r8, r2, r1
 80072ac:	4659      	mov	r1, fp
 80072ae:	eb63 0901 	sbc.w	r9, r3, r1
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	f04f 0300 	mov.w	r3, #0
 80072ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072c6:	4690      	mov	r8, r2
 80072c8:	4699      	mov	r9, r3
 80072ca:	4623      	mov	r3, r4
 80072cc:	eb18 0303 	adds.w	r3, r8, r3
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	462b      	mov	r3, r5
 80072d4:	eb49 0303 	adc.w	r3, r9, r3
 80072d8:	60fb      	str	r3, [r7, #12]
 80072da:	f04f 0200 	mov.w	r2, #0
 80072de:	f04f 0300 	mov.w	r3, #0
 80072e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80072e6:	4629      	mov	r1, r5
 80072e8:	024b      	lsls	r3, r1, #9
 80072ea:	4621      	mov	r1, r4
 80072ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80072f0:	4621      	mov	r1, r4
 80072f2:	024a      	lsls	r2, r1, #9
 80072f4:	4610      	mov	r0, r2
 80072f6:	4619      	mov	r1, r3
 80072f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072fa:	2200      	movs	r2, #0
 80072fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80072fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007300:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007304:	f7f8 ffbc 	bl	8000280 <__aeabi_uldivmod>
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	4613      	mov	r3, r2
 800730e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007310:	e058      	b.n	80073c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007312:	4b38      	ldr	r3, [pc, #224]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	099b      	lsrs	r3, r3, #6
 8007318:	2200      	movs	r2, #0
 800731a:	4618      	mov	r0, r3
 800731c:	4611      	mov	r1, r2
 800731e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007322:	623b      	str	r3, [r7, #32]
 8007324:	2300      	movs	r3, #0
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
 8007328:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800732c:	4642      	mov	r2, r8
 800732e:	464b      	mov	r3, r9
 8007330:	f04f 0000 	mov.w	r0, #0
 8007334:	f04f 0100 	mov.w	r1, #0
 8007338:	0159      	lsls	r1, r3, #5
 800733a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800733e:	0150      	lsls	r0, r2, #5
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	4641      	mov	r1, r8
 8007346:	ebb2 0a01 	subs.w	sl, r2, r1
 800734a:	4649      	mov	r1, r9
 800734c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007350:	f04f 0200 	mov.w	r2, #0
 8007354:	f04f 0300 	mov.w	r3, #0
 8007358:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800735c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007360:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007364:	ebb2 040a 	subs.w	r4, r2, sl
 8007368:	eb63 050b 	sbc.w	r5, r3, fp
 800736c:	f04f 0200 	mov.w	r2, #0
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	00eb      	lsls	r3, r5, #3
 8007376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800737a:	00e2      	lsls	r2, r4, #3
 800737c:	4614      	mov	r4, r2
 800737e:	461d      	mov	r5, r3
 8007380:	4643      	mov	r3, r8
 8007382:	18e3      	adds	r3, r4, r3
 8007384:	603b      	str	r3, [r7, #0]
 8007386:	464b      	mov	r3, r9
 8007388:	eb45 0303 	adc.w	r3, r5, r3
 800738c:	607b      	str	r3, [r7, #4]
 800738e:	f04f 0200 	mov.w	r2, #0
 8007392:	f04f 0300 	mov.w	r3, #0
 8007396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800739a:	4629      	mov	r1, r5
 800739c:	028b      	lsls	r3, r1, #10
 800739e:	4621      	mov	r1, r4
 80073a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073a4:	4621      	mov	r1, r4
 80073a6:	028a      	lsls	r2, r1, #10
 80073a8:	4610      	mov	r0, r2
 80073aa:	4619      	mov	r1, r3
 80073ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ae:	2200      	movs	r2, #0
 80073b0:	61bb      	str	r3, [r7, #24]
 80073b2:	61fa      	str	r2, [r7, #28]
 80073b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073b8:	f7f8 ff62 	bl	8000280 <__aeabi_uldivmod>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4613      	mov	r3, r2
 80073c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073c4:	4b0b      	ldr	r3, [pc, #44]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	0c1b      	lsrs	r3, r3, #16
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	3301      	adds	r3, #1
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80073d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073de:	e002      	b.n	80073e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073e0:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80073e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3750      	adds	r7, #80	; 0x50
 80073ec:	46bd      	mov	sp, r7
 80073ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073f2:	bf00      	nop
 80073f4:	40023800 	.word	0x40023800
 80073f8:	00f42400 	.word	0x00f42400
 80073fc:	007a1200 	.word	0x007a1200

08007400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007404:	4b03      	ldr	r3, [pc, #12]	; (8007414 <HAL_RCC_GetHCLKFreq+0x14>)
 8007406:	681b      	ldr	r3, [r3, #0]
}
 8007408:	4618      	mov	r0, r3
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	20000480 	.word	0x20000480

08007418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800741c:	f7ff fff0 	bl	8007400 <HAL_RCC_GetHCLKFreq>
 8007420:	4602      	mov	r2, r0
 8007422:	4b05      	ldr	r3, [pc, #20]	; (8007438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	0a9b      	lsrs	r3, r3, #10
 8007428:	f003 0307 	and.w	r3, r3, #7
 800742c:	4903      	ldr	r1, [pc, #12]	; (800743c <HAL_RCC_GetPCLK1Freq+0x24>)
 800742e:	5ccb      	ldrb	r3, [r1, r3]
 8007430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007434:	4618      	mov	r0, r3
 8007436:	bd80      	pop	{r7, pc}
 8007438:	40023800 	.word	0x40023800
 800743c:	0801a0e0 	.word	0x0801a0e0

08007440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007444:	f7ff ffdc 	bl	8007400 <HAL_RCC_GetHCLKFreq>
 8007448:	4602      	mov	r2, r0
 800744a:	4b05      	ldr	r3, [pc, #20]	; (8007460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	0b5b      	lsrs	r3, r3, #13
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	4903      	ldr	r1, [pc, #12]	; (8007464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007456:	5ccb      	ldrb	r3, [r1, r3]
 8007458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800745c:	4618      	mov	r0, r3
 800745e:	bd80      	pop	{r7, pc}
 8007460:	40023800 	.word	0x40023800
 8007464:	0801a0e0 	.word	0x0801a0e0

08007468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e083      	b.n	8007582 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	2b00      	cmp	r3, #0
 8007480:	d108      	bne.n	8007494 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800748a:	d009      	beq.n	80074a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	61da      	str	r2, [r3, #28]
 8007492:	e005      	b.n	80074a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d106      	bne.n	80074ba <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f00d fcff 	bl	8014eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2202      	movs	r2, #2
 80074be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074e2:	431a      	orrs	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ec:	431a      	orrs	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751e:	ea42 0103 	orr.w	r1, r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007526:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	0c1b      	lsrs	r3, r3, #16
 8007538:	f003 0104 	and.w	r1, r3, #4
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	f003 0210 	and.w	r2, r3, #16
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007554:	d105      	bne.n	8007562 <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	b292      	uxth	r2, r2
 8007560:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69da      	ldr	r2, [r3, #28]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007570:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b08e      	sub	sp, #56	; 0x38
 800758e:	af02      	add	r7, sp, #8
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	60b9      	str	r1, [r7, #8]
 8007594:	607a      	str	r2, [r7, #4]
 8007596:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	617b      	str	r3, [r7, #20]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800759c:	2301      	movs	r3, #1
 800759e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d101      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x2a>
 80075b0:	2302      	movs	r3, #2
 80075b2:	e1f8      	b.n	80079a6 <HAL_SPI_TransmitReceive+0x41c>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075bc:	f7fc fdb8 	bl	8004130 <HAL_GetTick>
 80075c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80075d2:	887b      	ldrh	r3, [r7, #2]
 80075d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d00f      	beq.n	80075fe <HAL_SPI_TransmitReceive+0x74>
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075e4:	d107      	bne.n	80075f6 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d103      	bne.n	80075f6 <HAL_SPI_TransmitReceive+0x6c>
 80075ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d003      	beq.n	80075fe <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80075f6:	2302      	movs	r3, #2
 80075f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80075fc:	e1c9      	b.n	8007992 <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <HAL_SPI_TransmitReceive+0x86>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <HAL_SPI_TransmitReceive+0x86>
 800760a:	887b      	ldrh	r3, [r7, #2]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d103      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007616:	e1bc      	b.n	8007992 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b04      	cmp	r3, #4
 8007622:	d003      	beq.n	800762c <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2205      	movs	r2, #5
 8007628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	887a      	ldrh	r2, [r7, #2]
 800763c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	887a      	ldrh	r2, [r7, #2]
 8007642:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	887a      	ldrh	r2, [r7, #2]
 800764e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	887a      	ldrh	r2, [r7, #2]
 8007654:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800766a:	d10f      	bne.n	800768c <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800768a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007696:	2b40      	cmp	r3, #64	; 0x40
 8007698:	d007      	beq.n	80076aa <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076b2:	f040 808b 	bne.w	80077cc <HAL_SPI_TransmitReceive+0x242>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <HAL_SPI_TransmitReceive+0x13a>
 80076be:	8b7b      	ldrh	r3, [r7, #26]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d178      	bne.n	80077b6 <HAL_SPI_TransmitReceive+0x22c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	881a      	ldrh	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d4:	1c9a      	adds	r2, r3, #2
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076de:	b29b      	uxth	r3, r3
 80076e0:	3b01      	subs	r3, #1
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076e8:	e065      	b.n	80077b6 <HAL_SPI_TransmitReceive+0x22c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d12d      	bne.n	8007754 <HAL_SPI_TransmitReceive+0x1ca>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d028      	beq.n	8007754 <HAL_SPI_TransmitReceive+0x1ca>
 8007702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007704:	2b01      	cmp	r3, #1
 8007706:	d125      	bne.n	8007754 <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770c:	881a      	ldrh	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007718:	1c9a      	adds	r2, r3, #2
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007734:	b29b      	uxth	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10c      	bne.n	8007754 <HAL_SPI_TransmitReceive+0x1ca>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007742:	d107      	bne.n	8007754 <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007752:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b01      	cmp	r3, #1
 8007760:	d119      	bne.n	8007796 <HAL_SPI_TransmitReceive+0x20c>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d014      	beq.n	8007796 <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007776:	b292      	uxth	r2, r2
 8007778:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	1c9a      	adds	r2, r3, #2
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007788:	b29b      	uxth	r3, r3
 800778a:	3b01      	subs	r3, #1
 800778c:	b29a      	uxth	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007792:	2301      	movs	r3, #1
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007796:	f7fc fccb 	bl	8004130 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d807      	bhi.n	80077b6 <HAL_SPI_TransmitReceive+0x22c>
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ac:	d003      	beq.n	80077b6 <HAL_SPI_TransmitReceive+0x22c>
      {
        errorcode = HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80077b4:	e0ed      	b.n	8007992 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d194      	bne.n	80076ea <HAL_SPI_TransmitReceive+0x160>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d18f      	bne.n	80076ea <HAL_SPI_TransmitReceive+0x160>
 80077ca:	e08e      	b.n	80078ea <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <HAL_SPI_TransmitReceive+0x250>
 80077d4:	8b7b      	ldrh	r3, [r7, #26]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d17d      	bne.n	80078d6 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	330c      	adds	r3, #12
 80077e4:	7812      	ldrb	r2, [r2, #0]
 80077e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007800:	e069      	b.n	80078d6 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b02      	cmp	r3, #2
 800780e:	d12e      	bne.n	800786e <HAL_SPI_TransmitReceive+0x2e4>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d029      	beq.n	800786e <HAL_SPI_TransmitReceive+0x2e4>
 800781a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781c:	2b01      	cmp	r3, #1
 800781e:	d126      	bne.n	800786e <HAL_SPI_TransmitReceive+0x2e4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	330c      	adds	r3, #12
 800782a:	7812      	ldrb	r2, [r2, #0]
 800782c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800783c:	b29b      	uxth	r3, r3
 800783e:	3b01      	subs	r3, #1
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10c      	bne.n	800786e <HAL_SPI_TransmitReceive+0x2e4>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800785c:	d107      	bne.n	800786e <HAL_SPI_TransmitReceive+0x2e4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800786c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b01      	cmp	r3, #1
 800787a:	d119      	bne.n	80078b0 <HAL_SPI_TransmitReceive+0x326>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d014      	beq.n	80078b0 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007890:	b2d2      	uxtb	r2, r2
 8007892:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078ac:	2301      	movs	r3, #1
 80078ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80078b0:	f7fc fc3e 	bl	8004130 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078bc:	429a      	cmp	r2, r3
 80078be:	d803      	bhi.n	80078c8 <HAL_SPI_TransmitReceive+0x33e>
 80078c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c6:	d102      	bne.n	80078ce <HAL_SPI_TransmitReceive+0x344>
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d103      	bne.n	80078d6 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80078d4:	e05d      	b.n	8007992 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d190      	bne.n	8007802 <HAL_SPI_TransmitReceive+0x278>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d18b      	bne.n	8007802 <HAL_SPI_TransmitReceive+0x278>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078f2:	d119      	bne.n	8007928 <HAL_SPI_TransmitReceive+0x39e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	2201      	movs	r2, #1
 80078fc:	2101      	movs	r1, #1
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 f856 	bl	80079b0 <SPI_WaitFlagStateUntilTimeout>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d009      	beq.n	800791e <HAL_SPI_TransmitReceive+0x394>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790e:	f043 0202 	orr.w	r2, r3, #2
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 800791c:	e039      	b.n	8007992 <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8007926:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f003 0310 	and.w	r3, r3, #16
 8007932:	2b10      	cmp	r3, #16
 8007934:	d10d      	bne.n	8007952 <HAL_SPI_TransmitReceive+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793a:	f043 0202 	orr.w	r2, r3, #2
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800794a:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007954:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f8b2 	bl	8007ac0 <SPI_EndRxTxTransaction>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d006      	beq.n	8007970 <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2220      	movs	r2, #32
 800796c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800796e:	e010      	b.n	8007992 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10b      	bne.n	8007990 <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007978:	2300      	movs	r3, #0
 800797a:	613b      	str	r3, [r7, #16]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	613b      	str	r3, [r7, #16]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	e000      	b.n	8007992 <HAL_SPI_TransmitReceive+0x408>
  }

error :
 8007990:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3730      	adds	r7, #48	; 0x30
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b088      	sub	sp, #32
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	4613      	mov	r3, r2
 80079be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079c0:	f7fc fbb6 	bl	8004130 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	1a9b      	subs	r3, r3, r2
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	4413      	add	r3, r2
 80079ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079d0:	f7fc fbae 	bl	8004130 <HAL_GetTick>
 80079d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079d6:	4b39      	ldr	r3, [pc, #228]	; (8007abc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	015b      	lsls	r3, r3, #5
 80079dc:	0d1b      	lsrs	r3, r3, #20
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	fb02 f303 	mul.w	r3, r2, r3
 80079e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079e6:	e054      	b.n	8007a92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ee:	d050      	beq.n	8007a92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079f0:	f7fc fb9e 	bl	8004130 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	69fa      	ldr	r2, [r7, #28]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d902      	bls.n	8007a06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d13d      	bne.n	8007a82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a1e:	d111      	bne.n	8007a44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a28:	d004      	beq.n	8007a34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a32:	d107      	bne.n	8007a44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a4c:	d10f      	bne.n	8007a6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e017      	b.n	8007ab2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	bf0c      	ite	eq
 8007aa2:	2301      	moveq	r3, #1
 8007aa4:	2300      	movne	r3, #0
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d19b      	bne.n	80079e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3720      	adds	r7, #32
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20000480 	.word	0x20000480

08007ac0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007acc:	4b1b      	ldr	r3, [pc, #108]	; (8007b3c <SPI_EndRxTxTransaction+0x7c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a1b      	ldr	r2, [pc, #108]	; (8007b40 <SPI_EndRxTxTransaction+0x80>)
 8007ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad6:	0d5b      	lsrs	r3, r3, #21
 8007ad8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007adc:	fb02 f303 	mul.w	r3, r2, r3
 8007ae0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aea:	d112      	bne.n	8007b12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2200      	movs	r2, #0
 8007af4:	2180      	movs	r1, #128	; 0x80
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f7ff ff5a 	bl	80079b0 <SPI_WaitFlagStateUntilTimeout>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d016      	beq.n	8007b30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b06:	f043 0220 	orr.w	r2, r3, #32
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e00f      	b.n	8007b32 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00a      	beq.n	8007b2e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b28:	2b80      	cmp	r3, #128	; 0x80
 8007b2a:	d0f2      	beq.n	8007b12 <SPI_EndRxTxTransaction+0x52>
 8007b2c:	e000      	b.n	8007b30 <SPI_EndRxTxTransaction+0x70>
        break;
 8007b2e:	bf00      	nop
  }

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3718      	adds	r7, #24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000480 	.word	0x20000480
 8007b40:	165e9f81 	.word	0x165e9f81

08007b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d122      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d11b      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f06f 0202 	mvn.w	r2, #2
 8007b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	f003 0303 	and.w	r3, r3, #3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f00c fc8c 	bl	80144a4 <HAL_TIM_IC_CaptureCallback>
 8007b8c:	e005      	b.n	8007b9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f8ea 	bl	8007d68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f8f1 	bl	8007d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d122      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b04      	cmp	r3, #4
 8007bba:	d11b      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f06f 0204 	mvn.w	r2, #4
 8007bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f00c fc62 	bl	80144a4 <HAL_TIM_IC_CaptureCallback>
 8007be0:	e005      	b.n	8007bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f8c0 	bl	8007d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f8c7 	bl	8007d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	f003 0308 	and.w	r3, r3, #8
 8007bfe:	2b08      	cmp	r3, #8
 8007c00:	d122      	bne.n	8007c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f003 0308 	and.w	r3, r3, #8
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	d11b      	bne.n	8007c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f06f 0208 	mvn.w	r2, #8
 8007c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2204      	movs	r2, #4
 8007c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f00c fc38 	bl	80144a4 <HAL_TIM_IC_CaptureCallback>
 8007c34:	e005      	b.n	8007c42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f896 	bl	8007d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f89d 	bl	8007d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	f003 0310 	and.w	r3, r3, #16
 8007c52:	2b10      	cmp	r3, #16
 8007c54:	d122      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f003 0310 	and.w	r3, r3, #16
 8007c60:	2b10      	cmp	r3, #16
 8007c62:	d11b      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f06f 0210 	mvn.w	r2, #16
 8007c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2208      	movs	r2, #8
 8007c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f00c fc0e 	bl	80144a4 <HAL_TIM_IC_CaptureCallback>
 8007c88:	e005      	b.n	8007c96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f86c 	bl	8007d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f873 	bl	8007d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d10e      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d107      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f06f 0201 	mvn.w	r2, #1
 8007cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f846 	bl	8007d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd2:	2b80      	cmp	r3, #128	; 0x80
 8007cd4:	d10e      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce0:	2b80      	cmp	r3, #128	; 0x80
 8007ce2:	d107      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f862 	bl	8007db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfe:	2b40      	cmp	r3, #64	; 0x40
 8007d00:	d10e      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0c:	2b40      	cmp	r3, #64	; 0x40
 8007d0e:	d107      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f838 	bl	8007d90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	f003 0320 	and.w	r3, r3, #32
 8007d2a:	2b20      	cmp	r3, #32
 8007d2c:	d10e      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f003 0320 	and.w	r3, r3, #32
 8007d38:	2b20      	cmp	r3, #32
 8007d3a:	d107      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f06f 0220 	mvn.w	r2, #32
 8007d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f82c 	bl	8007da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e03f      	b.n	8007e5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d106      	bne.n	8007df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f00d fa90 	bl	8015318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2224      	movs	r2, #36	; 0x24
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fbe3 	bl	80085dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	691a      	ldr	r2, [r3, #16]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	695a      	ldr	r2, [r3, #20]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68da      	ldr	r2, [r3, #12]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b085      	sub	sp, #20
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	60f8      	str	r0, [r7, #12]
 8007e6e:	60b9      	str	r1, [r7, #8]
 8007e70:	4613      	mov	r3, r2
 8007e72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	d130      	bne.n	8007ee2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <HAL_UART_Transmit_IT+0x26>
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e029      	b.n	8007ee4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d101      	bne.n	8007e9e <HAL_UART_Transmit_IT+0x38>
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	e022      	b.n	8007ee4 <HAL_UART_Transmit_IT+0x7e>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	88fa      	ldrh	r2, [r7, #6]
 8007eb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	88fa      	ldrh	r2, [r7, #6]
 8007eb6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2221      	movs	r2, #33	; 0x21
 8007ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007edc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e000      	b.n	8007ee4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007ee2:	2302      	movs	r3, #2
  }
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	4613      	mov	r3, r2
 8007efc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b20      	cmp	r3, #32
 8007f08:	d11d      	bne.n	8007f46 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <HAL_UART_Receive_IT+0x26>
 8007f10:	88fb      	ldrh	r3, [r7, #6]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e016      	b.n	8007f48 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d101      	bne.n	8007f28 <HAL_UART_Receive_IT+0x38>
 8007f24:	2302      	movs	r3, #2
 8007f26:	e00f      	b.n	8007f48 <HAL_UART_Receive_IT+0x58>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007f36:	88fb      	ldrh	r3, [r7, #6]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f9d3 	bl	80082e8 <UART_Start_Receive_IT>
 8007f42:	4603      	mov	r3, r0
 8007f44:	e000      	b.n	8007f48 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007f46:	2302      	movs	r3, #2
  }
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08a      	sub	sp, #40	; 0x28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007f74:	2300      	movs	r3, #0
 8007f76:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10d      	bne.n	8007fa2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	f003 0320 	and.w	r3, r3, #32
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d008      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x52>
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fa87 	bl	80084ae <UART_Receive_IT>
      return;
 8007fa0:	e17c      	b.n	800829c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 80b1 	beq.w	800810c <HAL_UART_IRQHandler+0x1bc>
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d105      	bne.n	8007fc0 <HAL_UART_IRQHandler+0x70>
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 80a6 	beq.w	800810c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <HAL_UART_IRQHandler+0x90>
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d005      	beq.n	8007fe0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd8:	f043 0201 	orr.w	r2, r3, #1
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	f003 0304 	and.w	r3, r3, #4
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <HAL_UART_IRQHandler+0xb0>
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d005      	beq.n	8008000 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff8:	f043 0202 	orr.w	r2, r3, #2
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <HAL_UART_IRQHandler+0xd0>
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d005      	beq.n	8008020 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008018:	f043 0204 	orr.w	r2, r3, #4
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	f003 0308 	and.w	r3, r3, #8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00f      	beq.n	800804a <HAL_UART_IRQHandler+0xfa>
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	f003 0320 	and.w	r3, r3, #32
 8008030:	2b00      	cmp	r3, #0
 8008032:	d104      	bne.n	800803e <HAL_UART_IRQHandler+0xee>
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	2b00      	cmp	r3, #0
 800803c:	d005      	beq.n	800804a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	f043 0208 	orr.w	r2, r3, #8
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 811f 	beq.w	8008292 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	d007      	beq.n	800806e <HAL_UART_IRQHandler+0x11e>
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	f003 0320 	and.w	r3, r3, #32
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fa20 	bl	80084ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b40      	cmp	r3, #64	; 0x40
 800807a:	bf0c      	ite	eq
 800807c:	2301      	moveq	r3, #1
 800807e:	2300      	movne	r3, #0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008088:	f003 0308 	and.w	r3, r3, #8
 800808c:	2b00      	cmp	r3, #0
 800808e:	d102      	bne.n	8008096 <HAL_UART_IRQHandler+0x146>
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d031      	beq.n	80080fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f960 	bl	800835c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a6:	2b40      	cmp	r3, #64	; 0x40
 80080a8:	d123      	bne.n	80080f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	695a      	ldr	r2, [r3, #20]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d013      	beq.n	80080ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	4a77      	ldr	r2, [pc, #476]	; (80082a4 <HAL_UART_IRQHandler+0x354>)
 80080c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fc fdab 	bl	8004c2a <HAL_DMA_Abort_IT>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d016      	beq.n	8008108 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080e4:	4610      	mov	r0, r2
 80080e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e8:	e00e      	b.n	8008108 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f8e6 	bl	80082bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f0:	e00a      	b.n	8008108 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f8e2 	bl	80082bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f8:	e006      	b.n	8008108 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f8de 	bl	80082bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008106:	e0c4      	b.n	8008292 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008108:	bf00      	nop
    return;
 800810a:	e0c2      	b.n	8008292 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008110:	2b01      	cmp	r3, #1
 8008112:	f040 80a2 	bne.w	800825a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	f003 0310 	and.w	r3, r3, #16
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 809c 	beq.w	800825a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	f003 0310 	and.w	r3, r3, #16
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 8096 	beq.w	800825a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800812e:	2300      	movs	r3, #0
 8008130:	60fb      	str	r3, [r7, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	60fb      	str	r3, [r7, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814e:	2b40      	cmp	r3, #64	; 0x40
 8008150:	d14f      	bne.n	80081f2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800815c:	8a3b      	ldrh	r3, [r7, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 8099 	beq.w	8008296 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008168:	8a3a      	ldrh	r2, [r7, #16]
 800816a:	429a      	cmp	r2, r3
 800816c:	f080 8093 	bcs.w	8008296 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	8a3a      	ldrh	r2, [r7, #16]
 8008174:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008180:	d02b      	beq.n	80081da <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68da      	ldr	r2, [r3, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008190:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	695a      	ldr	r2, [r3, #20]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0201 	bic.w	r2, r2, #1
 80081a0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	695a      	ldr	r2, [r3, #20]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081b0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 0210 	bic.w	r2, r2, #16
 80081ce:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fc fcb8 	bl	8004b4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f870 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80081f0:	e051      	b.n	8008296 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008204:	b29b      	uxth	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d047      	beq.n	800829a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800820a:	8a7b      	ldrh	r3, [r7, #18]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d044      	beq.n	800829a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800821e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	695a      	ldr	r2, [r3, #20]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0201 	bic.w	r2, r2, #1
 800822e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68da      	ldr	r2, [r3, #12]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f022 0210 	bic.w	r2, r2, #16
 800824c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800824e:	8a7b      	ldrh	r3, [r7, #18]
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f83c 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008258:	e01f      	b.n	800829a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008260:	2b00      	cmp	r3, #0
 8008262:	d008      	beq.n	8008276 <HAL_UART_IRQHandler+0x326>
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f8b5 	bl	80083de <UART_Transmit_IT>
    return;
 8008274:	e012      	b.n	800829c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00d      	beq.n	800829c <HAL_UART_IRQHandler+0x34c>
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008286:	2b00      	cmp	r3, #0
 8008288:	d008      	beq.n	800829c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f8f7 	bl	800847e <UART_EndTransmit_IT>
    return;
 8008290:	e004      	b.n	800829c <HAL_UART_IRQHandler+0x34c>
    return;
 8008292:	bf00      	nop
 8008294:	e002      	b.n	800829c <HAL_UART_IRQHandler+0x34c>
      return;
 8008296:	bf00      	nop
 8008298:	e000      	b.n	800829c <HAL_UART_IRQHandler+0x34c>
      return;
 800829a:	bf00      	nop
  }
}
 800829c:	3728      	adds	r7, #40	; 0x28
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	080083b7 	.word	0x080083b7

080082a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	4613      	mov	r3, r2
 80082f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	88fa      	ldrh	r2, [r7, #6]
 8008300:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	88fa      	ldrh	r2, [r7, #6]
 8008306:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2222      	movs	r2, #34	; 0x22
 8008312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68da      	ldr	r2, [r3, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800832c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	695a      	ldr	r2, [r3, #20]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f042 0201 	orr.w	r2, r2, #1
 800833c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68da      	ldr	r2, [r3, #12]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f042 0220 	orr.w	r2, r2, #32
 800834c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68da      	ldr	r2, [r3, #12]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008372:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	695a      	ldr	r2, [r3, #20]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f022 0201 	bic.w	r2, r2, #1
 8008382:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008388:	2b01      	cmp	r3, #1
 800838a:	d107      	bne.n	800839c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68da      	ldr	r2, [r3, #12]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0210 	bic.w	r2, r2, #16
 800839a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2220      	movs	r2, #32
 80083a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80083aa:	bf00      	nop
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f7ff ff73 	bl	80082bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083d6:	bf00      	nop
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083de:	b480      	push	{r7}
 80083e0:	b085      	sub	sp, #20
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b21      	cmp	r3, #33	; 0x21
 80083f0:	d13e      	bne.n	8008470 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083fa:	d114      	bne.n	8008426 <UART_Transmit_IT+0x48>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d110      	bne.n	8008426 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	461a      	mov	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008418:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	1c9a      	adds	r2, r3, #2
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	621a      	str	r2, [r3, #32]
 8008424:	e008      	b.n	8008438 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	1c59      	adds	r1, r3, #1
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	6211      	str	r1, [r2, #32]
 8008430:	781a      	ldrb	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800843c:	b29b      	uxth	r3, r3
 800843e:	3b01      	subs	r3, #1
 8008440:	b29b      	uxth	r3, r3
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	4619      	mov	r1, r3
 8008446:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10f      	bne.n	800846c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800845a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68da      	ldr	r2, [r3, #12]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800846a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	e000      	b.n	8008472 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008470:	2302      	movs	r3, #2
  }
}
 8008472:	4618      	mov	r0, r3
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b082      	sub	sp, #8
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008494:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2220      	movs	r2, #32
 800849a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff ff02 	bl	80082a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b084      	sub	sp, #16
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b22      	cmp	r3, #34	; 0x22
 80084c0:	f040 8087 	bne.w	80085d2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084cc:	d117      	bne.n	80084fe <UART_Receive_IT+0x50>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d113      	bne.n	80084fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80084d6:	2300      	movs	r3, #0
 80084d8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084de:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f6:	1c9a      	adds	r2, r3, #2
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	629a      	str	r2, [r3, #40]	; 0x28
 80084fc:	e026      	b.n	800854c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008502:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008504:	2300      	movs	r3, #0
 8008506:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008510:	d007      	beq.n	8008522 <UART_Receive_IT+0x74>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10a      	bne.n	8008530 <UART_Receive_IT+0x82>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d106      	bne.n	8008530 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	b2da      	uxtb	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	701a      	strb	r2, [r3, #0]
 800852e:	e008      	b.n	8008542 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800853c:	b2da      	uxtb	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008546:	1c5a      	adds	r2, r3, #1
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008550:	b29b      	uxth	r3, r3
 8008552:	3b01      	subs	r3, #1
 8008554:	b29b      	uxth	r3, r3
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	4619      	mov	r1, r3
 800855a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800855c:	2b00      	cmp	r3, #0
 800855e:	d136      	bne.n	80085ce <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 0220 	bic.w	r2, r2, #32
 800856e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800857e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	695a      	ldr	r2, [r3, #20]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0201 	bic.w	r2, r2, #1
 800858e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2220      	movs	r2, #32
 8008594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859c:	2b01      	cmp	r3, #1
 800859e:	d10e      	bne.n	80085be <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f022 0210 	bic.w	r2, r2, #16
 80085ae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7ff fe8a 	bl	80082d0 <HAL_UARTEx_RxEventCallback>
 80085bc:	e002      	b.n	80085c4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f00b fcf8 	bl	8013fb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	e002      	b.n	80085d4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	e000      	b.n	80085d4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80085d2:	2302      	movs	r3, #2
  }
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085e0:	b0c0      	sub	sp, #256	; 0x100
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80085f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085f8:	68d9      	ldr	r1, [r3, #12]
 80085fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	ea40 0301 	orr.w	r3, r0, r1
 8008604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800860a:	689a      	ldr	r2, [r3, #8]
 800860c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	431a      	orrs	r2, r3
 8008614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	431a      	orrs	r2, r3
 800861c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	4313      	orrs	r3, r2
 8008624:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008634:	f021 010c 	bic.w	r1, r1, #12
 8008638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008642:	430b      	orrs	r3, r1
 8008644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008656:	6999      	ldr	r1, [r3, #24]
 8008658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	ea40 0301 	orr.w	r3, r0, r1
 8008662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	4b8f      	ldr	r3, [pc, #572]	; (80088a8 <UART_SetConfig+0x2cc>)
 800866c:	429a      	cmp	r2, r3
 800866e:	d005      	beq.n	800867c <UART_SetConfig+0xa0>
 8008670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	4b8d      	ldr	r3, [pc, #564]	; (80088ac <UART_SetConfig+0x2d0>)
 8008678:	429a      	cmp	r2, r3
 800867a:	d104      	bne.n	8008686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800867c:	f7fe fee0 	bl	8007440 <HAL_RCC_GetPCLK2Freq>
 8008680:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008684:	e003      	b.n	800868e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008686:	f7fe fec7 	bl	8007418 <HAL_RCC_GetPCLK1Freq>
 800868a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800868e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008698:	f040 810c 	bne.w	80088b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800869c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086a0:	2200      	movs	r2, #0
 80086a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80086aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80086ae:	4622      	mov	r2, r4
 80086b0:	462b      	mov	r3, r5
 80086b2:	1891      	adds	r1, r2, r2
 80086b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80086b6:	415b      	adcs	r3, r3
 80086b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80086be:	4621      	mov	r1, r4
 80086c0:	eb12 0801 	adds.w	r8, r2, r1
 80086c4:	4629      	mov	r1, r5
 80086c6:	eb43 0901 	adc.w	r9, r3, r1
 80086ca:	f04f 0200 	mov.w	r2, #0
 80086ce:	f04f 0300 	mov.w	r3, #0
 80086d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80086de:	4690      	mov	r8, r2
 80086e0:	4699      	mov	r9, r3
 80086e2:	4623      	mov	r3, r4
 80086e4:	eb18 0303 	adds.w	r3, r8, r3
 80086e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086ec:	462b      	mov	r3, r5
 80086ee:	eb49 0303 	adc.w	r3, r9, r3
 80086f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80086f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008702:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800870a:	460b      	mov	r3, r1
 800870c:	18db      	adds	r3, r3, r3
 800870e:	653b      	str	r3, [r7, #80]	; 0x50
 8008710:	4613      	mov	r3, r2
 8008712:	eb42 0303 	adc.w	r3, r2, r3
 8008716:	657b      	str	r3, [r7, #84]	; 0x54
 8008718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800871c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008720:	f7f7 fdae 	bl	8000280 <__aeabi_uldivmod>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4b61      	ldr	r3, [pc, #388]	; (80088b0 <UART_SetConfig+0x2d4>)
 800872a:	fba3 2302 	umull	r2, r3, r3, r2
 800872e:	095b      	lsrs	r3, r3, #5
 8008730:	011c      	lsls	r4, r3, #4
 8008732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008736:	2200      	movs	r2, #0
 8008738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800873c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008744:	4642      	mov	r2, r8
 8008746:	464b      	mov	r3, r9
 8008748:	1891      	adds	r1, r2, r2
 800874a:	64b9      	str	r1, [r7, #72]	; 0x48
 800874c:	415b      	adcs	r3, r3
 800874e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008754:	4641      	mov	r1, r8
 8008756:	eb12 0a01 	adds.w	sl, r2, r1
 800875a:	4649      	mov	r1, r9
 800875c:	eb43 0b01 	adc.w	fp, r3, r1
 8008760:	f04f 0200 	mov.w	r2, #0
 8008764:	f04f 0300 	mov.w	r3, #0
 8008768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800876c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008774:	4692      	mov	sl, r2
 8008776:	469b      	mov	fp, r3
 8008778:	4643      	mov	r3, r8
 800877a:	eb1a 0303 	adds.w	r3, sl, r3
 800877e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008782:	464b      	mov	r3, r9
 8008784:	eb4b 0303 	adc.w	r3, fp, r3
 8008788:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800878c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008798:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800879c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80087a0:	460b      	mov	r3, r1
 80087a2:	18db      	adds	r3, r3, r3
 80087a4:	643b      	str	r3, [r7, #64]	; 0x40
 80087a6:	4613      	mov	r3, r2
 80087a8:	eb42 0303 	adc.w	r3, r2, r3
 80087ac:	647b      	str	r3, [r7, #68]	; 0x44
 80087ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80087b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80087b6:	f7f7 fd63 	bl	8000280 <__aeabi_uldivmod>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	4611      	mov	r1, r2
 80087c0:	4b3b      	ldr	r3, [pc, #236]	; (80088b0 <UART_SetConfig+0x2d4>)
 80087c2:	fba3 2301 	umull	r2, r3, r3, r1
 80087c6:	095b      	lsrs	r3, r3, #5
 80087c8:	2264      	movs	r2, #100	; 0x64
 80087ca:	fb02 f303 	mul.w	r3, r2, r3
 80087ce:	1acb      	subs	r3, r1, r3
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80087d6:	4b36      	ldr	r3, [pc, #216]	; (80088b0 <UART_SetConfig+0x2d4>)
 80087d8:	fba3 2302 	umull	r2, r3, r3, r2
 80087dc:	095b      	lsrs	r3, r3, #5
 80087de:	005b      	lsls	r3, r3, #1
 80087e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80087e4:	441c      	add	r4, r3
 80087e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80087f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80087f8:	4642      	mov	r2, r8
 80087fa:	464b      	mov	r3, r9
 80087fc:	1891      	adds	r1, r2, r2
 80087fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8008800:	415b      	adcs	r3, r3
 8008802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008808:	4641      	mov	r1, r8
 800880a:	1851      	adds	r1, r2, r1
 800880c:	6339      	str	r1, [r7, #48]	; 0x30
 800880e:	4649      	mov	r1, r9
 8008810:	414b      	adcs	r3, r1
 8008812:	637b      	str	r3, [r7, #52]	; 0x34
 8008814:	f04f 0200 	mov.w	r2, #0
 8008818:	f04f 0300 	mov.w	r3, #0
 800881c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008820:	4659      	mov	r1, fp
 8008822:	00cb      	lsls	r3, r1, #3
 8008824:	4651      	mov	r1, sl
 8008826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800882a:	4651      	mov	r1, sl
 800882c:	00ca      	lsls	r2, r1, #3
 800882e:	4610      	mov	r0, r2
 8008830:	4619      	mov	r1, r3
 8008832:	4603      	mov	r3, r0
 8008834:	4642      	mov	r2, r8
 8008836:	189b      	adds	r3, r3, r2
 8008838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800883c:	464b      	mov	r3, r9
 800883e:	460a      	mov	r2, r1
 8008840:	eb42 0303 	adc.w	r3, r2, r3
 8008844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008854:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800885c:	460b      	mov	r3, r1
 800885e:	18db      	adds	r3, r3, r3
 8008860:	62bb      	str	r3, [r7, #40]	; 0x28
 8008862:	4613      	mov	r3, r2
 8008864:	eb42 0303 	adc.w	r3, r2, r3
 8008868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800886a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800886e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008872:	f7f7 fd05 	bl	8000280 <__aeabi_uldivmod>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4b0d      	ldr	r3, [pc, #52]	; (80088b0 <UART_SetConfig+0x2d4>)
 800887c:	fba3 1302 	umull	r1, r3, r3, r2
 8008880:	095b      	lsrs	r3, r3, #5
 8008882:	2164      	movs	r1, #100	; 0x64
 8008884:	fb01 f303 	mul.w	r3, r1, r3
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	3332      	adds	r3, #50	; 0x32
 800888e:	4a08      	ldr	r2, [pc, #32]	; (80088b0 <UART_SetConfig+0x2d4>)
 8008890:	fba2 2303 	umull	r2, r3, r2, r3
 8008894:	095b      	lsrs	r3, r3, #5
 8008896:	f003 0207 	and.w	r2, r3, #7
 800889a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4422      	add	r2, r4
 80088a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80088a4:	e106      	b.n	8008ab4 <UART_SetConfig+0x4d8>
 80088a6:	bf00      	nop
 80088a8:	40011000 	.word	0x40011000
 80088ac:	40011400 	.word	0x40011400
 80088b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088b8:	2200      	movs	r2, #0
 80088ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80088c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80088c6:	4642      	mov	r2, r8
 80088c8:	464b      	mov	r3, r9
 80088ca:	1891      	adds	r1, r2, r2
 80088cc:	6239      	str	r1, [r7, #32]
 80088ce:	415b      	adcs	r3, r3
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
 80088d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088d6:	4641      	mov	r1, r8
 80088d8:	1854      	adds	r4, r2, r1
 80088da:	4649      	mov	r1, r9
 80088dc:	eb43 0501 	adc.w	r5, r3, r1
 80088e0:	f04f 0200 	mov.w	r2, #0
 80088e4:	f04f 0300 	mov.w	r3, #0
 80088e8:	00eb      	lsls	r3, r5, #3
 80088ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088ee:	00e2      	lsls	r2, r4, #3
 80088f0:	4614      	mov	r4, r2
 80088f2:	461d      	mov	r5, r3
 80088f4:	4643      	mov	r3, r8
 80088f6:	18e3      	adds	r3, r4, r3
 80088f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088fc:	464b      	mov	r3, r9
 80088fe:	eb45 0303 	adc.w	r3, r5, r3
 8008902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008912:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008916:	f04f 0200 	mov.w	r2, #0
 800891a:	f04f 0300 	mov.w	r3, #0
 800891e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008922:	4629      	mov	r1, r5
 8008924:	008b      	lsls	r3, r1, #2
 8008926:	4621      	mov	r1, r4
 8008928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800892c:	4621      	mov	r1, r4
 800892e:	008a      	lsls	r2, r1, #2
 8008930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008934:	f7f7 fca4 	bl	8000280 <__aeabi_uldivmod>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4b60      	ldr	r3, [pc, #384]	; (8008ac0 <UART_SetConfig+0x4e4>)
 800893e:	fba3 2302 	umull	r2, r3, r3, r2
 8008942:	095b      	lsrs	r3, r3, #5
 8008944:	011c      	lsls	r4, r3, #4
 8008946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800894a:	2200      	movs	r2, #0
 800894c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008950:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008958:	4642      	mov	r2, r8
 800895a:	464b      	mov	r3, r9
 800895c:	1891      	adds	r1, r2, r2
 800895e:	61b9      	str	r1, [r7, #24]
 8008960:	415b      	adcs	r3, r3
 8008962:	61fb      	str	r3, [r7, #28]
 8008964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008968:	4641      	mov	r1, r8
 800896a:	1851      	adds	r1, r2, r1
 800896c:	6139      	str	r1, [r7, #16]
 800896e:	4649      	mov	r1, r9
 8008970:	414b      	adcs	r3, r1
 8008972:	617b      	str	r3, [r7, #20]
 8008974:	f04f 0200 	mov.w	r2, #0
 8008978:	f04f 0300 	mov.w	r3, #0
 800897c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008980:	4659      	mov	r1, fp
 8008982:	00cb      	lsls	r3, r1, #3
 8008984:	4651      	mov	r1, sl
 8008986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800898a:	4651      	mov	r1, sl
 800898c:	00ca      	lsls	r2, r1, #3
 800898e:	4610      	mov	r0, r2
 8008990:	4619      	mov	r1, r3
 8008992:	4603      	mov	r3, r0
 8008994:	4642      	mov	r2, r8
 8008996:	189b      	adds	r3, r3, r2
 8008998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800899c:	464b      	mov	r3, r9
 800899e:	460a      	mov	r2, r1
 80089a0:	eb42 0303 	adc.w	r3, r2, r3
 80089a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80089b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80089b4:	f04f 0200 	mov.w	r2, #0
 80089b8:	f04f 0300 	mov.w	r3, #0
 80089bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80089c0:	4649      	mov	r1, r9
 80089c2:	008b      	lsls	r3, r1, #2
 80089c4:	4641      	mov	r1, r8
 80089c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089ca:	4641      	mov	r1, r8
 80089cc:	008a      	lsls	r2, r1, #2
 80089ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80089d2:	f7f7 fc55 	bl	8000280 <__aeabi_uldivmod>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4611      	mov	r1, r2
 80089dc:	4b38      	ldr	r3, [pc, #224]	; (8008ac0 <UART_SetConfig+0x4e4>)
 80089de:	fba3 2301 	umull	r2, r3, r3, r1
 80089e2:	095b      	lsrs	r3, r3, #5
 80089e4:	2264      	movs	r2, #100	; 0x64
 80089e6:	fb02 f303 	mul.w	r3, r2, r3
 80089ea:	1acb      	subs	r3, r1, r3
 80089ec:	011b      	lsls	r3, r3, #4
 80089ee:	3332      	adds	r3, #50	; 0x32
 80089f0:	4a33      	ldr	r2, [pc, #204]	; (8008ac0 <UART_SetConfig+0x4e4>)
 80089f2:	fba2 2303 	umull	r2, r3, r2, r3
 80089f6:	095b      	lsrs	r3, r3, #5
 80089f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089fc:	441c      	add	r4, r3
 80089fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a02:	2200      	movs	r2, #0
 8008a04:	673b      	str	r3, [r7, #112]	; 0x70
 8008a06:	677a      	str	r2, [r7, #116]	; 0x74
 8008a08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008a0c:	4642      	mov	r2, r8
 8008a0e:	464b      	mov	r3, r9
 8008a10:	1891      	adds	r1, r2, r2
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	415b      	adcs	r3, r3
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a1c:	4641      	mov	r1, r8
 8008a1e:	1851      	adds	r1, r2, r1
 8008a20:	6039      	str	r1, [r7, #0]
 8008a22:	4649      	mov	r1, r9
 8008a24:	414b      	adcs	r3, r1
 8008a26:	607b      	str	r3, [r7, #4]
 8008a28:	f04f 0200 	mov.w	r2, #0
 8008a2c:	f04f 0300 	mov.w	r3, #0
 8008a30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a34:	4659      	mov	r1, fp
 8008a36:	00cb      	lsls	r3, r1, #3
 8008a38:	4651      	mov	r1, sl
 8008a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a3e:	4651      	mov	r1, sl
 8008a40:	00ca      	lsls	r2, r1, #3
 8008a42:	4610      	mov	r0, r2
 8008a44:	4619      	mov	r1, r3
 8008a46:	4603      	mov	r3, r0
 8008a48:	4642      	mov	r2, r8
 8008a4a:	189b      	adds	r3, r3, r2
 8008a4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a4e:	464b      	mov	r3, r9
 8008a50:	460a      	mov	r2, r1
 8008a52:	eb42 0303 	adc.w	r3, r2, r3
 8008a56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	663b      	str	r3, [r7, #96]	; 0x60
 8008a62:	667a      	str	r2, [r7, #100]	; 0x64
 8008a64:	f04f 0200 	mov.w	r2, #0
 8008a68:	f04f 0300 	mov.w	r3, #0
 8008a6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008a70:	4649      	mov	r1, r9
 8008a72:	008b      	lsls	r3, r1, #2
 8008a74:	4641      	mov	r1, r8
 8008a76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a7a:	4641      	mov	r1, r8
 8008a7c:	008a      	lsls	r2, r1, #2
 8008a7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008a82:	f7f7 fbfd 	bl	8000280 <__aeabi_uldivmod>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4b0d      	ldr	r3, [pc, #52]	; (8008ac0 <UART_SetConfig+0x4e4>)
 8008a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a90:	095b      	lsrs	r3, r3, #5
 8008a92:	2164      	movs	r1, #100	; 0x64
 8008a94:	fb01 f303 	mul.w	r3, r1, r3
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	011b      	lsls	r3, r3, #4
 8008a9c:	3332      	adds	r3, #50	; 0x32
 8008a9e:	4a08      	ldr	r2, [pc, #32]	; (8008ac0 <UART_SetConfig+0x4e4>)
 8008aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa4:	095b      	lsrs	r3, r3, #5
 8008aa6:	f003 020f 	and.w	r2, r3, #15
 8008aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4422      	add	r2, r4
 8008ab2:	609a      	str	r2, [r3, #8]
}
 8008ab4:	bf00      	nop
 8008ab6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008aba:	46bd      	mov	sp, r7
 8008abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ac0:	51eb851f 	.word	0x51eb851f

08008ac4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8008aca:	4b87      	ldr	r3, [pc, #540]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008acc:	22c0      	movs	r2, #192	; 0xc0
 8008ace:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008ad0:	4b85      	ldr	r3, [pc, #532]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008ad2:	22a8      	movs	r2, #168	; 0xa8
 8008ad4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 56;
 8008ad6:	4b84      	ldr	r3, [pc, #528]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008ad8:	2238      	movs	r2, #56	; 0x38
 8008ada:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 8;
 8008adc:	4b82      	ldr	r3, [pc, #520]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008ade:	2208      	movs	r2, #8
 8008ae0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008ae2:	4b82      	ldr	r3, [pc, #520]	; (8008cec <MX_LWIP_Init+0x228>)
 8008ae4:	22ff      	movs	r2, #255	; 0xff
 8008ae6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008ae8:	4b80      	ldr	r3, [pc, #512]	; (8008cec <MX_LWIP_Init+0x228>)
 8008aea:	22ff      	movs	r2, #255	; 0xff
 8008aec:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008aee:	4b7f      	ldr	r3, [pc, #508]	; (8008cec <MX_LWIP_Init+0x228>)
 8008af0:	22ff      	movs	r2, #255	; 0xff
 8008af2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008af4:	4b7d      	ldr	r3, [pc, #500]	; (8008cec <MX_LWIP_Init+0x228>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8008afa:	4b7d      	ldr	r3, [pc, #500]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008afc:	22c0      	movs	r2, #192	; 0xc0
 8008afe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008b00:	4b7b      	ldr	r3, [pc, #492]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008b02:	22a8      	movs	r2, #168	; 0xa8
 8008b04:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 56;
 8008b06:	4b7a      	ldr	r3, [pc, #488]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008b08:	2238      	movs	r2, #56	; 0x38
 8008b0a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 132;
 8008b0c:	4b78      	ldr	r3, [pc, #480]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008b0e:	2284      	movs	r2, #132	; 0x84
 8008b10:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8008b12:	f000 fcf1 	bl	80094f8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008b16:	4b74      	ldr	r3, [pc, #464]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	061a      	lsls	r2, r3, #24
 8008b1c:	4b72      	ldr	r3, [pc, #456]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b1e:	785b      	ldrb	r3, [r3, #1]
 8008b20:	041b      	lsls	r3, r3, #16
 8008b22:	431a      	orrs	r2, r3
 8008b24:	4b70      	ldr	r3, [pc, #448]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b26:	789b      	ldrb	r3, [r3, #2]
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	4a6e      	ldr	r2, [pc, #440]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b2e:	78d2      	ldrb	r2, [r2, #3]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	061a      	lsls	r2, r3, #24
 8008b34:	4b6c      	ldr	r3, [pc, #432]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	0619      	lsls	r1, r3, #24
 8008b3a:	4b6b      	ldr	r3, [pc, #428]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b3c:	785b      	ldrb	r3, [r3, #1]
 8008b3e:	041b      	lsls	r3, r3, #16
 8008b40:	4319      	orrs	r1, r3
 8008b42:	4b69      	ldr	r3, [pc, #420]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b44:	789b      	ldrb	r3, [r3, #2]
 8008b46:	021b      	lsls	r3, r3, #8
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	4967      	ldr	r1, [pc, #412]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b4c:	78c9      	ldrb	r1, [r1, #3]
 8008b4e:	430b      	orrs	r3, r1
 8008b50:	021b      	lsls	r3, r3, #8
 8008b52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b56:	431a      	orrs	r2, r3
 8008b58:	4b63      	ldr	r3, [pc, #396]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	0619      	lsls	r1, r3, #24
 8008b5e:	4b62      	ldr	r3, [pc, #392]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b60:	785b      	ldrb	r3, [r3, #1]
 8008b62:	041b      	lsls	r3, r3, #16
 8008b64:	4319      	orrs	r1, r3
 8008b66:	4b60      	ldr	r3, [pc, #384]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b68:	789b      	ldrb	r3, [r3, #2]
 8008b6a:	021b      	lsls	r3, r3, #8
 8008b6c:	430b      	orrs	r3, r1
 8008b6e:	495e      	ldr	r1, [pc, #376]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b70:	78c9      	ldrb	r1, [r1, #3]
 8008b72:	430b      	orrs	r3, r1
 8008b74:	0a1b      	lsrs	r3, r3, #8
 8008b76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b7a:	431a      	orrs	r2, r3
 8008b7c:	4b5a      	ldr	r3, [pc, #360]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	0619      	lsls	r1, r3, #24
 8008b82:	4b59      	ldr	r3, [pc, #356]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b84:	785b      	ldrb	r3, [r3, #1]
 8008b86:	041b      	lsls	r3, r3, #16
 8008b88:	4319      	orrs	r1, r3
 8008b8a:	4b57      	ldr	r3, [pc, #348]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b8c:	789b      	ldrb	r3, [r3, #2]
 8008b8e:	021b      	lsls	r3, r3, #8
 8008b90:	430b      	orrs	r3, r1
 8008b92:	4955      	ldr	r1, [pc, #340]	; (8008ce8 <MX_LWIP_Init+0x224>)
 8008b94:	78c9      	ldrb	r1, [r1, #3]
 8008b96:	430b      	orrs	r3, r1
 8008b98:	0e1b      	lsrs	r3, r3, #24
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	4a55      	ldr	r2, [pc, #340]	; (8008cf4 <MX_LWIP_Init+0x230>)
 8008b9e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008ba0:	4b52      	ldr	r3, [pc, #328]	; (8008cec <MX_LWIP_Init+0x228>)
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	061a      	lsls	r2, r3, #24
 8008ba6:	4b51      	ldr	r3, [pc, #324]	; (8008cec <MX_LWIP_Init+0x228>)
 8008ba8:	785b      	ldrb	r3, [r3, #1]
 8008baa:	041b      	lsls	r3, r3, #16
 8008bac:	431a      	orrs	r2, r3
 8008bae:	4b4f      	ldr	r3, [pc, #316]	; (8008cec <MX_LWIP_Init+0x228>)
 8008bb0:	789b      	ldrb	r3, [r3, #2]
 8008bb2:	021b      	lsls	r3, r3, #8
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	4a4d      	ldr	r2, [pc, #308]	; (8008cec <MX_LWIP_Init+0x228>)
 8008bb8:	78d2      	ldrb	r2, [r2, #3]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	061a      	lsls	r2, r3, #24
 8008bbe:	4b4b      	ldr	r3, [pc, #300]	; (8008cec <MX_LWIP_Init+0x228>)
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	0619      	lsls	r1, r3, #24
 8008bc4:	4b49      	ldr	r3, [pc, #292]	; (8008cec <MX_LWIP_Init+0x228>)
 8008bc6:	785b      	ldrb	r3, [r3, #1]
 8008bc8:	041b      	lsls	r3, r3, #16
 8008bca:	4319      	orrs	r1, r3
 8008bcc:	4b47      	ldr	r3, [pc, #284]	; (8008cec <MX_LWIP_Init+0x228>)
 8008bce:	789b      	ldrb	r3, [r3, #2]
 8008bd0:	021b      	lsls	r3, r3, #8
 8008bd2:	430b      	orrs	r3, r1
 8008bd4:	4945      	ldr	r1, [pc, #276]	; (8008cec <MX_LWIP_Init+0x228>)
 8008bd6:	78c9      	ldrb	r1, [r1, #3]
 8008bd8:	430b      	orrs	r3, r1
 8008bda:	021b      	lsls	r3, r3, #8
 8008bdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008be0:	431a      	orrs	r2, r3
 8008be2:	4b42      	ldr	r3, [pc, #264]	; (8008cec <MX_LWIP_Init+0x228>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	0619      	lsls	r1, r3, #24
 8008be8:	4b40      	ldr	r3, [pc, #256]	; (8008cec <MX_LWIP_Init+0x228>)
 8008bea:	785b      	ldrb	r3, [r3, #1]
 8008bec:	041b      	lsls	r3, r3, #16
 8008bee:	4319      	orrs	r1, r3
 8008bf0:	4b3e      	ldr	r3, [pc, #248]	; (8008cec <MX_LWIP_Init+0x228>)
 8008bf2:	789b      	ldrb	r3, [r3, #2]
 8008bf4:	021b      	lsls	r3, r3, #8
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	493c      	ldr	r1, [pc, #240]	; (8008cec <MX_LWIP_Init+0x228>)
 8008bfa:	78c9      	ldrb	r1, [r1, #3]
 8008bfc:	430b      	orrs	r3, r1
 8008bfe:	0a1b      	lsrs	r3, r3, #8
 8008c00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c04:	431a      	orrs	r2, r3
 8008c06:	4b39      	ldr	r3, [pc, #228]	; (8008cec <MX_LWIP_Init+0x228>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	0619      	lsls	r1, r3, #24
 8008c0c:	4b37      	ldr	r3, [pc, #220]	; (8008cec <MX_LWIP_Init+0x228>)
 8008c0e:	785b      	ldrb	r3, [r3, #1]
 8008c10:	041b      	lsls	r3, r3, #16
 8008c12:	4319      	orrs	r1, r3
 8008c14:	4b35      	ldr	r3, [pc, #212]	; (8008cec <MX_LWIP_Init+0x228>)
 8008c16:	789b      	ldrb	r3, [r3, #2]
 8008c18:	021b      	lsls	r3, r3, #8
 8008c1a:	430b      	orrs	r3, r1
 8008c1c:	4933      	ldr	r1, [pc, #204]	; (8008cec <MX_LWIP_Init+0x228>)
 8008c1e:	78c9      	ldrb	r1, [r1, #3]
 8008c20:	430b      	orrs	r3, r1
 8008c22:	0e1b      	lsrs	r3, r3, #24
 8008c24:	4313      	orrs	r3, r2
 8008c26:	4a34      	ldr	r2, [pc, #208]	; (8008cf8 <MX_LWIP_Init+0x234>)
 8008c28:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008c2a:	4b31      	ldr	r3, [pc, #196]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	061a      	lsls	r2, r3, #24
 8008c30:	4b2f      	ldr	r3, [pc, #188]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008c32:	785b      	ldrb	r3, [r3, #1]
 8008c34:	041b      	lsls	r3, r3, #16
 8008c36:	431a      	orrs	r2, r3
 8008c38:	4b2d      	ldr	r3, [pc, #180]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008c3a:	789b      	ldrb	r3, [r3, #2]
 8008c3c:	021b      	lsls	r3, r3, #8
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	4a2b      	ldr	r2, [pc, #172]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008c42:	78d2      	ldrb	r2, [r2, #3]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	061a      	lsls	r2, r3, #24
 8008c48:	4b29      	ldr	r3, [pc, #164]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	0619      	lsls	r1, r3, #24
 8008c4e:	4b28      	ldr	r3, [pc, #160]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008c50:	785b      	ldrb	r3, [r3, #1]
 8008c52:	041b      	lsls	r3, r3, #16
 8008c54:	4319      	orrs	r1, r3
 8008c56:	4b26      	ldr	r3, [pc, #152]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008c58:	789b      	ldrb	r3, [r3, #2]
 8008c5a:	021b      	lsls	r3, r3, #8
 8008c5c:	430b      	orrs	r3, r1
 8008c5e:	4924      	ldr	r1, [pc, #144]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008c60:	78c9      	ldrb	r1, [r1, #3]
 8008c62:	430b      	orrs	r3, r1
 8008c64:	021b      	lsls	r3, r3, #8
 8008c66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	4b20      	ldr	r3, [pc, #128]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	0619      	lsls	r1, r3, #24
 8008c72:	4b1f      	ldr	r3, [pc, #124]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008c74:	785b      	ldrb	r3, [r3, #1]
 8008c76:	041b      	lsls	r3, r3, #16
 8008c78:	4319      	orrs	r1, r3
 8008c7a:	4b1d      	ldr	r3, [pc, #116]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008c7c:	789b      	ldrb	r3, [r3, #2]
 8008c7e:	021b      	lsls	r3, r3, #8
 8008c80:	430b      	orrs	r3, r1
 8008c82:	491b      	ldr	r1, [pc, #108]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008c84:	78c9      	ldrb	r1, [r1, #3]
 8008c86:	430b      	orrs	r3, r1
 8008c88:	0a1b      	lsrs	r3, r3, #8
 8008c8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	4b17      	ldr	r3, [pc, #92]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	0619      	lsls	r1, r3, #24
 8008c96:	4b16      	ldr	r3, [pc, #88]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008c98:	785b      	ldrb	r3, [r3, #1]
 8008c9a:	041b      	lsls	r3, r3, #16
 8008c9c:	4319      	orrs	r1, r3
 8008c9e:	4b14      	ldr	r3, [pc, #80]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008ca0:	789b      	ldrb	r3, [r3, #2]
 8008ca2:	021b      	lsls	r3, r3, #8
 8008ca4:	430b      	orrs	r3, r1
 8008ca6:	4912      	ldr	r1, [pc, #72]	; (8008cf0 <MX_LWIP_Init+0x22c>)
 8008ca8:	78c9      	ldrb	r1, [r1, #3]
 8008caa:	430b      	orrs	r3, r1
 8008cac:	0e1b      	lsrs	r3, r3, #24
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	4a12      	ldr	r2, [pc, #72]	; (8008cfc <MX_LWIP_Init+0x238>)
 8008cb2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008cb4:	4b12      	ldr	r3, [pc, #72]	; (8008d00 <MX_LWIP_Init+0x23c>)
 8008cb6:	9302      	str	r3, [sp, #8]
 8008cb8:	4b12      	ldr	r3, [pc, #72]	; (8008d04 <MX_LWIP_Init+0x240>)
 8008cba:	9301      	str	r3, [sp, #4]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	4b0e      	ldr	r3, [pc, #56]	; (8008cfc <MX_LWIP_Init+0x238>)
 8008cc2:	4a0d      	ldr	r2, [pc, #52]	; (8008cf8 <MX_LWIP_Init+0x234>)
 8008cc4:	490b      	ldr	r1, [pc, #44]	; (8008cf4 <MX_LWIP_Init+0x230>)
 8008cc6:	4810      	ldr	r0, [pc, #64]	; (8008d08 <MX_LWIP_Init+0x244>)
 8008cc8:	f001 f900 	bl	8009ecc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008ccc:	480e      	ldr	r0, [pc, #56]	; (8008d08 <MX_LWIP_Init+0x244>)
 8008cce:	f001 faab 	bl	800a228 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8008cd2:	480d      	ldr	r0, [pc, #52]	; (8008d08 <MX_LWIP_Init+0x244>)
 8008cd4:	f001 fab8 	bl	800a248 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008cd8:	490c      	ldr	r1, [pc, #48]	; (8008d0c <MX_LWIP_Init+0x248>)
 8008cda:	480b      	ldr	r0, [pc, #44]	; (8008d08 <MX_LWIP_Init+0x244>)
 8008cdc:	f001 fbb6 	bl	800a44c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008ce0:	bf00      	nop
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20000970 	.word	0x20000970
 8008cec:	20000974 	.word	0x20000974
 8008cf0:	20000978 	.word	0x20000978
 8008cf4:	20000964 	.word	0x20000964
 8008cf8:	20000968 	.word	0x20000968
 8008cfc:	2000096c 	.word	0x2000096c
 8008d00:	08013691 	.word	0x08013691
 8008d04:	0800901d 	.word	0x0800901d
 8008d08:	20000930 	.word	0x20000930
 8008d0c:	08008d61 	.word	0x08008d61

08008d10 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8008d18:	f7fb fa0a 	bl	8004130 <HAL_GetTick>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	4b08      	ldr	r3, [pc, #32]	; (8008d40 <Ethernet_Link_Periodic_Handle+0x30>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	2b63      	cmp	r3, #99	; 0x63
 8008d26:	d907      	bls.n	8008d38 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8008d28:	f7fb fa02 	bl	8004130 <HAL_GetTick>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	4a04      	ldr	r2, [pc, #16]	; (8008d40 <Ethernet_Link_Periodic_Handle+0x30>)
 8008d30:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fab6 	bl	80092a4 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8008d38:	bf00      	nop
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	2000092c 	.word	0x2000092c

08008d44 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8008d48:	4804      	ldr	r0, [pc, #16]	; (8008d5c <MX_LWIP_Process+0x18>)
 8008d4a:	f000 f947 	bl	8008fdc <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8008d4e:	f008 fa77 	bl	8011240 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8008d52:	4802      	ldr	r0, [pc, #8]	; (8008d5c <MX_LWIP_Process+0x18>)
 8008d54:	f7ff ffdc 	bl	8008d10 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8008d58:	bf00      	nop
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20000930 	.word	0x20000930

08008d60 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008d80:	4b40      	ldr	r3, [pc, #256]	; (8008e84 <low_level_init+0x110>)
 8008d82:	4a41      	ldr	r2, [pc, #260]	; (8008e88 <low_level_init+0x114>)
 8008d84:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008d86:	2300      	movs	r3, #0
 8008d88:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008d8a:	2380      	movs	r3, #128	; 0x80
 8008d8c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008d8e:	23e1      	movs	r3, #225	; 0xe1
 8008d90:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008d92:	2300      	movs	r3, #0
 8008d94:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008d96:	2300      	movs	r3, #0
 8008d98:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008d9e:	4a39      	ldr	r2, [pc, #228]	; (8008e84 <low_level_init+0x110>)
 8008da0:	f107 0308 	add.w	r3, r7, #8
 8008da4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008da6:	4b37      	ldr	r3, [pc, #220]	; (8008e84 <low_level_init+0x110>)
 8008da8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008dac:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008dae:	4b35      	ldr	r3, [pc, #212]	; (8008e84 <low_level_init+0x110>)
 8008db0:	4a36      	ldr	r2, [pc, #216]	; (8008e8c <low_level_init+0x118>)
 8008db2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008db4:	4b33      	ldr	r3, [pc, #204]	; (8008e84 <low_level_init+0x110>)
 8008db6:	4a36      	ldr	r2, [pc, #216]	; (8008e90 <low_level_init+0x11c>)
 8008db8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008dba:	4b32      	ldr	r3, [pc, #200]	; (8008e84 <low_level_init+0x110>)
 8008dbc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008dc0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008dc2:	4830      	ldr	r0, [pc, #192]	; (8008e84 <low_level_init+0x110>)
 8008dc4:	f7fb ff54 	bl	8004c70 <HAL_ETH_Init>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008dcc:	2238      	movs	r2, #56	; 0x38
 8008dce:	2100      	movs	r1, #0
 8008dd0:	4830      	ldr	r0, [pc, #192]	; (8008e94 <low_level_init+0x120>)
 8008dd2:	f00c fdcf 	bl	8015974 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008dd6:	4b2f      	ldr	r3, [pc, #188]	; (8008e94 <low_level_init+0x120>)
 8008dd8:	2221      	movs	r2, #33	; 0x21
 8008dda:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008ddc:	4b2d      	ldr	r3, [pc, #180]	; (8008e94 <low_level_init+0x120>)
 8008dde:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8008de2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008de4:	4b2b      	ldr	r3, [pc, #172]	; (8008e94 <low_level_init+0x120>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008dea:	482b      	ldr	r0, [pc, #172]	; (8008e98 <low_level_init+0x124>)
 8008dec:	f000 ff36 	bl	8009c5c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2206      	movs	r2, #6
 8008df4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008df8:	4b22      	ldr	r3, [pc, #136]	; (8008e84 <low_level_init+0x110>)
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	781a      	ldrb	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008e04:	4b1f      	ldr	r3, [pc, #124]	; (8008e84 <low_level_init+0x110>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	785a      	ldrb	r2, [r3, #1]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008e10:	4b1c      	ldr	r3, [pc, #112]	; (8008e84 <low_level_init+0x110>)
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	789a      	ldrb	r2, [r3, #2]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008e1c:	4b19      	ldr	r3, [pc, #100]	; (8008e84 <low_level_init+0x110>)
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	78da      	ldrb	r2, [r3, #3]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008e28:	4b16      	ldr	r3, [pc, #88]	; (8008e84 <low_level_init+0x110>)
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	791a      	ldrb	r2, [r3, #4]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008e34:	4b13      	ldr	r3, [pc, #76]	; (8008e84 <low_level_init+0x110>)
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	795a      	ldrb	r2, [r3, #5]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008e46:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e4e:	f043 030a 	orr.w	r3, r3, #10
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d



/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008e5a:	4910      	ldr	r1, [pc, #64]	; (8008e9c <low_level_init+0x128>)
 8008e5c:	4810      	ldr	r0, [pc, #64]	; (8008ea0 <low_level_init+0x12c>)
 8008e5e:	f7f8 ff9f 	bl	8001da0 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008e62:	480f      	ldr	r0, [pc, #60]	; (8008ea0 <low_level_init+0x12c>)
 8008e64:	f7f8 ffce 	bl	8001e04 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d103      	bne.n	8008e76 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fa18 	bl	80092a4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008e74:	e001      	b.n	8008e7a <low_level_init+0x106>
    Error_Handler();
 8008e76:	f00b fc01 	bl	801467c <Error_Handler>
}
 8008e7a:	bf00      	nop
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20005448 	.word	0x20005448
 8008e88:	40028000 	.word	0x40028000
 8008e8c:	200053a8 	.word	0x200053a8
 8008e90:	20005308 	.word	0x20005308
 8008e94:	200054f8 	.word	0x200054f8
 8008e98:	08019724 	.word	0x08019724
 8008e9c:	20000458 	.word	0x20000458
 8008ea0:	20005530 	.word	0x20005530

08008ea4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b092      	sub	sp, #72	; 0x48
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008ebc:	f107 030c 	add.w	r3, r7, #12
 8008ec0:	2230      	movs	r2, #48	; 0x30
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f00c fd55 	bl	8015974 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008eca:	f107 030c 	add.w	r3, r7, #12
 8008ece:	2230      	movs	r2, #48	; 0x30
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f00c fd4e 	bl	8015974 <memset>

  for(q = p; q != NULL; q = q->next)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	643b      	str	r3, [r7, #64]	; 0x40
 8008edc:	e045      	b.n	8008f6a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee0:	2b03      	cmp	r3, #3
 8008ee2:	d902      	bls.n	8008eea <low_level_output+0x46>
      return ERR_IF;
 8008ee4:	f06f 030b 	mvn.w	r3, #11
 8008ee8:	e055      	b.n	8008f96 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8008eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eec:	6859      	ldr	r1, [r3, #4]
 8008eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	4413      	add	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	3348      	adds	r3, #72	; 0x48
 8008efa:	443b      	add	r3, r7
 8008efc:	3b3c      	subs	r3, #60	; 0x3c
 8008efe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f02:	895b      	ldrh	r3, [r3, #10]
 8008f04:	4619      	mov	r1, r3
 8008f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f08:	4613      	mov	r3, r2
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	4413      	add	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	3348      	adds	r3, #72	; 0x48
 8008f12:	443b      	add	r3, r7
 8008f14:	3b38      	subs	r3, #56	; 0x38
 8008f16:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d011      	beq.n	8008f42 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f20:	1e5a      	subs	r2, r3, #1
 8008f22:	f107 000c 	add.w	r0, r7, #12
 8008f26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f28:	460b      	mov	r3, r1
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	440b      	add	r3, r1
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	18c1      	adds	r1, r0, r3
 8008f32:	4613      	mov	r3, r2
 8008f34:	005b      	lsls	r3, r3, #1
 8008f36:	4413      	add	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	3348      	adds	r3, #72	; 0x48
 8008f3c:	443b      	add	r3, r7
 8008f3e:	3b34      	subs	r3, #52	; 0x34
 8008f40:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d109      	bne.n	8008f5e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008f4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	005b      	lsls	r3, r3, #1
 8008f50:	4413      	add	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	3348      	adds	r3, #72	; 0x48
 8008f56:	443b      	add	r3, r7
 8008f58:	3b34      	subs	r3, #52	; 0x34
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f60:	3301      	adds	r3, #1
 8008f62:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	643b      	str	r3, [r7, #64]	; 0x40
 8008f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1b6      	bne.n	8008ede <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	891b      	ldrh	r3, [r3, #8]
 8008f74:	461a      	mov	r2, r3
 8008f76:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <low_level_output+0xfc>)
 8008f78:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008f7a:	4a09      	ldr	r2, [pc, #36]	; (8008fa0 <low_level_output+0xfc>)
 8008f7c:	f107 030c 	add.w	r3, r7, #12
 8008f80:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008f82:	4a07      	ldr	r2, [pc, #28]	; (8008fa0 <low_level_output+0xfc>)
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8008f88:	2214      	movs	r2, #20
 8008f8a:	4905      	ldr	r1, [pc, #20]	; (8008fa0 <low_level_output+0xfc>)
 8008f8c:	4805      	ldr	r0, [pc, #20]	; (8008fa4 <low_level_output+0x100>)
 8008f8e:	f7fb ffa5 	bl	8004edc <HAL_ETH_Transmit>

  return errval;
 8008f92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3748      	adds	r7, #72	; 0x48
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	200054f8 	.word	0x200054f8
 8008fa4:	20005448 	.word	0x20005448

08008fa8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008fb4:	4b07      	ldr	r3, [pc, #28]	; (8008fd4 <low_level_input+0x2c>)
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d105      	bne.n	8008fc8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008fbc:	f107 030c 	add.w	r3, r7, #12
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4805      	ldr	r0, [pc, #20]	; (8008fd8 <low_level_input+0x30>)
 8008fc4:	f7fc f81e 	bl	8005004 <HAL_ETH_ReadData>
  }

  return p;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20005304 	.word	0x20005304
 8008fd8:	20005448 	.word	0x20005448

08008fdc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7ff ffdd 	bl	8008fa8 <low_level_input>
 8008fee:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00a      	beq.n	800900c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	6879      	ldr	r1, [r7, #4]
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	4798      	blx	r3
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f001 fda0 	bl	800ab4c <pbuf_free>
      }
    }
  } while(p!=NULL);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1ea      	bne.n	8008fe8 <ethernetif_input+0xc>
}
 8009012:	bf00      	nop
 8009014:	bf00      	nop
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d106      	bne.n	8009038 <ethernetif_init+0x1c>
 800902a:	4b0e      	ldr	r3, [pc, #56]	; (8009064 <ethernetif_init+0x48>)
 800902c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009030:	490d      	ldr	r1, [pc, #52]	; (8009068 <ethernetif_init+0x4c>)
 8009032:	480e      	ldr	r0, [pc, #56]	; (800906c <ethernetif_init+0x50>)
 8009034:	f00c fbe0 	bl	80157f8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2273      	movs	r2, #115	; 0x73
 800903c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2274      	movs	r2, #116	; 0x74
 8009044:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a09      	ldr	r2, [pc, #36]	; (8009070 <ethernetif_init+0x54>)
 800904c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a08      	ldr	r2, [pc, #32]	; (8009074 <ethernetif_init+0x58>)
 8009052:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7ff fe8d 	bl	8008d74 <low_level_init>

  return ERR_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	08016c68 	.word	0x08016c68
 8009068:	08016c84 	.word	0x08016c84
 800906c:	08016c94 	.word	0x08016c94
 8009070:	08011b5d 	.word	0x08011b5d
 8009074:	08008ea5 	.word	0x08008ea5

08009078 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009084:	68f9      	ldr	r1, [r7, #12]
 8009086:	4807      	ldr	r0, [pc, #28]	; (80090a4 <pbuf_free_custom+0x2c>)
 8009088:	f000 feca 	bl	8009e20 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800908c:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <pbuf_free_custom+0x30>)
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d102      	bne.n	800909a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009094:	4b04      	ldr	r3, [pc, #16]	; (80090a8 <pbuf_free_custom+0x30>)
 8009096:	2200      	movs	r2, #0
 8009098:	701a      	strb	r2, [r3, #0]
  }
}
 800909a:	bf00      	nop
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	08019724 	.word	0x08019724
 80090a8:	20005304 	.word	0x20005304

080090ac <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80090b0:	f7fb f83e 	bl	8004130 <HAL_GetTick>
 80090b4:	4603      	mov	r3, r0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08e      	sub	sp, #56	; 0x38
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090c8:	2200      	movs	r2, #0
 80090ca:	601a      	str	r2, [r3, #0]
 80090cc:	605a      	str	r2, [r3, #4]
 80090ce:	609a      	str	r2, [r3, #8]
 80090d0:	60da      	str	r2, [r3, #12]
 80090d2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a46      	ldr	r2, [pc, #280]	; (80091f4 <HAL_ETH_MspInit+0x138>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	f040 8085 	bne.w	80091ea <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80090e0:	2300      	movs	r3, #0
 80090e2:	623b      	str	r3, [r7, #32]
 80090e4:	4b44      	ldr	r3, [pc, #272]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 80090e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e8:	4a43      	ldr	r2, [pc, #268]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 80090ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80090ee:	6313      	str	r3, [r2, #48]	; 0x30
 80090f0:	4b41      	ldr	r3, [pc, #260]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 80090f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090f8:	623b      	str	r3, [r7, #32]
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	2300      	movs	r3, #0
 80090fe:	61fb      	str	r3, [r7, #28]
 8009100:	4b3d      	ldr	r3, [pc, #244]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 8009102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009104:	4a3c      	ldr	r2, [pc, #240]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 8009106:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800910a:	6313      	str	r3, [r2, #48]	; 0x30
 800910c:	4b3a      	ldr	r3, [pc, #232]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 800910e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009110:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009114:	61fb      	str	r3, [r7, #28]
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	2300      	movs	r3, #0
 800911a:	61bb      	str	r3, [r7, #24]
 800911c:	4b36      	ldr	r3, [pc, #216]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 800911e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009120:	4a35      	ldr	r2, [pc, #212]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 8009122:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009126:	6313      	str	r3, [r2, #48]	; 0x30
 8009128:	4b33      	ldr	r3, [pc, #204]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 800912a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009130:	61bb      	str	r3, [r7, #24]
 8009132:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009134:	2300      	movs	r3, #0
 8009136:	617b      	str	r3, [r7, #20]
 8009138:	4b2f      	ldr	r3, [pc, #188]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 800913a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913c:	4a2e      	ldr	r2, [pc, #184]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 800913e:	f043 0304 	orr.w	r3, r3, #4
 8009142:	6313      	str	r3, [r2, #48]	; 0x30
 8009144:	4b2c      	ldr	r3, [pc, #176]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 8009146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009148:	f003 0304 	and.w	r3, r3, #4
 800914c:	617b      	str	r3, [r7, #20]
 800914e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009150:	2300      	movs	r3, #0
 8009152:	613b      	str	r3, [r7, #16]
 8009154:	4b28      	ldr	r3, [pc, #160]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 8009156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009158:	4a27      	ldr	r2, [pc, #156]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 800915a:	f043 0301 	orr.w	r3, r3, #1
 800915e:	6313      	str	r3, [r2, #48]	; 0x30
 8009160:	4b25      	ldr	r3, [pc, #148]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 8009162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	613b      	str	r3, [r7, #16]
 800916a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800916c:	2300      	movs	r3, #0
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	4b21      	ldr	r3, [pc, #132]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 8009172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009174:	4a20      	ldr	r2, [pc, #128]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 8009176:	f043 0302 	orr.w	r3, r3, #2
 800917a:	6313      	str	r3, [r2, #48]	; 0x30
 800917c:	4b1e      	ldr	r3, [pc, #120]	; (80091f8 <HAL_ETH_MspInit+0x13c>)
 800917e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009180:	f003 0302 	and.w	r3, r3, #2
 8009184:	60fb      	str	r3, [r7, #12]
 8009186:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009188:	2332      	movs	r3, #50	; 0x32
 800918a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800918c:	2302      	movs	r3, #2
 800918e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009190:	2300      	movs	r3, #0
 8009192:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009194:	2303      	movs	r3, #3
 8009196:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009198:	230b      	movs	r3, #11
 800919a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800919c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091a0:	4619      	mov	r1, r3
 80091a2:	4816      	ldr	r0, [pc, #88]	; (80091fc <HAL_ETH_MspInit+0x140>)
 80091a4:	f7fc fe66 	bl	8005e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80091a8:	2386      	movs	r3, #134	; 0x86
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ac:	2302      	movs	r3, #2
 80091ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091b0:	2300      	movs	r3, #0
 80091b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091b4:	2303      	movs	r3, #3
 80091b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80091b8:	230b      	movs	r3, #11
 80091ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091c0:	4619      	mov	r1, r3
 80091c2:	480f      	ldr	r0, [pc, #60]	; (8009200 <HAL_ETH_MspInit+0x144>)
 80091c4:	f7fc fe56 	bl	8005e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80091c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ce:	2302      	movs	r3, #2
 80091d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091d6:	2303      	movs	r3, #3
 80091d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80091da:	230b      	movs	r3, #11
 80091dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80091de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091e2:	4619      	mov	r1, r3
 80091e4:	4807      	ldr	r0, [pc, #28]	; (8009204 <HAL_ETH_MspInit+0x148>)
 80091e6:	f7fc fe45 	bl	8005e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80091ea:	bf00      	nop
 80091ec:	3738      	adds	r7, #56	; 0x38
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	40028000 	.word	0x40028000
 80091f8:	40023800 	.word	0x40023800
 80091fc:	40020800 	.word	0x40020800
 8009200:	40020000 	.word	0x40020000
 8009204:	40020400 	.word	0x40020400

08009208 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800920c:	4802      	ldr	r0, [pc, #8]	; (8009218 <ETH_PHY_IO_Init+0x10>)
 800920e:	f7fc f9d5 	bl	80055bc <HAL_ETH_SetMDIOClockRange>

  return 0;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	bd80      	pop	{r7, pc}
 8009218:	20005448 	.word	0x20005448

0800921c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800921c:	b480      	push	{r7}
 800921e:	af00      	add	r7, sp, #0
  return 0;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	68f9      	ldr	r1, [r7, #12]
 800923e:	4807      	ldr	r0, [pc, #28]	; (800925c <ETH_PHY_IO_ReadReg+0x30>)
 8009240:	f7fc f824 	bl	800528c <HAL_ETH_ReadPHYRegister>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d002      	beq.n	8009250 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800924a:	f04f 33ff 	mov.w	r3, #4294967295
 800924e:	e000      	b.n	8009252 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20005448 	.word	0x20005448

08009260 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	68f9      	ldr	r1, [r7, #12]
 8009272:	4807      	ldr	r0, [pc, #28]	; (8009290 <ETH_PHY_IO_WriteReg+0x30>)
 8009274:	f7fc f855 	bl	8005322 <HAL_ETH_WritePHYRegister>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d002      	beq.n	8009284 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800927e:	f04f 33ff 	mov.w	r3, #4294967295
 8009282:	e000      	b.n	8009286 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20005448 	.word	0x20005448

08009294 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009298:	f7fa ff4a 	bl	8004130 <HAL_GetTick>
 800929c:	4603      	mov	r3, r0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	bd80      	pop	{r7, pc}
	...

080092a4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b0a0      	sub	sp, #128	; 0x80
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80092ac:	f107 030c 	add.w	r3, r7, #12
 80092b0:	2264      	movs	r2, #100	; 0x64
 80092b2:	2100      	movs	r1, #0
 80092b4:	4618      	mov	r0, r3
 80092b6:	f00c fb5d 	bl	8015974 <memset>
  int32_t PHYLinkState = 0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80092be:	2300      	movs	r3, #0
 80092c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092c2:	2300      	movs	r3, #0
 80092c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80092c6:	2300      	movs	r3, #0
 80092c8:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80092ca:	483a      	ldr	r0, [pc, #232]	; (80093b4 <ethernet_link_check_state+0x110>)
 80092cc:	f7f8 fe42 	bl	8001f54 <LAN8742_GetLinkState>
 80092d0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80092d8:	089b      	lsrs	r3, r3, #2
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00c      	beq.n	80092fe <ethernet_link_check_state+0x5a>
 80092e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	dc09      	bgt.n	80092fe <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80092ea:	4833      	ldr	r0, [pc, #204]	; (80093b8 <ethernet_link_check_state+0x114>)
 80092ec:	f7fb fd9d 	bl	8004e2a <HAL_ETH_Stop>
    netif_set_down(netif);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f001 f815 	bl	800a320 <netif_set_down>
    netif_set_link_down(netif);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f001 f878 	bl	800a3ec <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80092fc:	e055      	b.n	80093aa <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009304:	f003 0304 	and.w	r3, r3, #4
 8009308:	2b00      	cmp	r3, #0
 800930a:	d14e      	bne.n	80093aa <ethernet_link_check_state+0x106>
 800930c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800930e:	2b01      	cmp	r3, #1
 8009310:	dd4b      	ble.n	80093aa <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8009312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009314:	3b02      	subs	r3, #2
 8009316:	2b03      	cmp	r3, #3
 8009318:	d82a      	bhi.n	8009370 <ethernet_link_check_state+0xcc>
 800931a:	a201      	add	r2, pc, #4	; (adr r2, 8009320 <ethernet_link_check_state+0x7c>)
 800931c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009320:	08009331 	.word	0x08009331
 8009324:	08009343 	.word	0x08009343
 8009328:	08009353 	.word	0x08009353
 800932c:	08009363 	.word	0x08009363
      duplex = ETH_FULLDUPLEX_MODE;
 8009330:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009334:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009336:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800933a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800933c:	2301      	movs	r3, #1
 800933e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009340:	e017      	b.n	8009372 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009342:	2300      	movs	r3, #0
 8009344:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009346:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800934a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800934c:	2301      	movs	r3, #1
 800934e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009350:	e00f      	b.n	8009372 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8009352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009356:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009358:	2300      	movs	r3, #0
 800935a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800935c:	2301      	movs	r3, #1
 800935e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009360:	e007      	b.n	8009372 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009362:	2300      	movs	r3, #0
 8009364:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009366:	2300      	movs	r3, #0
 8009368:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800936a:	2301      	movs	r3, #1
 800936c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800936e:	e000      	b.n	8009372 <ethernet_link_check_state+0xce>
      break;
 8009370:	bf00      	nop
    if(linkchanged)
 8009372:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009374:	2b00      	cmp	r3, #0
 8009376:	d018      	beq.n	80093aa <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009378:	f107 030c 	add.w	r3, r7, #12
 800937c:	4619      	mov	r1, r3
 800937e:	480e      	ldr	r0, [pc, #56]	; (80093b8 <ethernet_link_check_state+0x114>)
 8009380:	f7fc f818 	bl	80053b4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009386:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8009388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800938a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800938c:	f107 030c 	add.w	r3, r7, #12
 8009390:	4619      	mov	r1, r3
 8009392:	4809      	ldr	r0, [pc, #36]	; (80093b8 <ethernet_link_check_state+0x114>)
 8009394:	f7fc f8f8 	bl	8005588 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8009398:	4807      	ldr	r0, [pc, #28]	; (80093b8 <ethernet_link_check_state+0x114>)
 800939a:	f7fb fce7 	bl	8004d6c <HAL_ETH_Start>
      netif_set_up(netif);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 ff52 	bl	800a248 <netif_set_up>
      netif_set_link_up(netif);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 ffed 	bl	800a384 <netif_set_link_up>
}
 80093aa:	bf00      	nop
 80093ac:	3780      	adds	r7, #128	; 0x80
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20005530 	.word	0x20005530
 80093b8:	20005448 	.word	0x20005448

080093bc <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b086      	sub	sp, #24
 80093c0:	af02      	add	r7, sp, #8
 80093c2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80093c4:	4812      	ldr	r0, [pc, #72]	; (8009410 <HAL_ETH_RxAllocateCallback+0x54>)
 80093c6:	f000 fcbd 	bl	8009d44 <memp_malloc_pool>
 80093ca:	60f8      	str	r0, [r7, #12]
  if (p)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d014      	beq.n	80093fc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f103 0220 	add.w	r2, r3, #32
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	4a0d      	ldr	r2, [pc, #52]	; (8009414 <HAL_ETH_RxAllocateCallback+0x58>)
 80093e0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
 80093ea:	9201      	str	r2, [sp, #4]
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2241      	movs	r2, #65	; 0x41
 80093f2:	2100      	movs	r1, #0
 80093f4:	2000      	movs	r0, #0
 80093f6:	f001 f9ef 	bl	800a7d8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80093fa:	e005      	b.n	8009408 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80093fc:	4b06      	ldr	r3, [pc, #24]	; (8009418 <HAL_ETH_RxAllocateCallback+0x5c>)
 80093fe:	2201      	movs	r2, #1
 8009400:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	601a      	str	r2, [r3, #0]
}
 8009408:	bf00      	nop
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	08019724 	.word	0x08019724
 8009414:	08009079 	.word	0x08009079
 8009418:	20005304 	.word	0x20005304

0800941c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800941c:	b480      	push	{r7}
 800941e:	b089      	sub	sp, #36	; 0x24
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
 8009428:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009432:	2300      	movs	r3, #0
 8009434:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3b20      	subs	r3, #32
 800943a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	2200      	movs	r2, #0
 8009440:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	2200      	movs	r2, #0
 8009446:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	887a      	ldrh	r2, [r7, #2]
 800944c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d103      	bne.n	800945e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	69fa      	ldr	r2, [r7, #28]
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	e003      	b.n	8009466 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69fa      	ldr	r2, [r7, #28]
 8009464:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	69fa      	ldr	r2, [r7, #28]
 800946a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	61fb      	str	r3, [r7, #28]
 8009472:	e009      	b.n	8009488 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	891a      	ldrh	r2, [r3, #8]
 8009478:	887b      	ldrh	r3, [r7, #2]
 800947a:	4413      	add	r3, r2
 800947c:	b29a      	uxth	r2, r3
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	61fb      	str	r3, [r7, #28]
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1f2      	bne.n	8009474 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800948e:	bf00      	nop
 8009490:	bf00      	nop
 8009492:	3724      	adds	r7, #36	; 0x24
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	4603      	mov	r3, r0
 80094a4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80094a6:	88fb      	ldrh	r3, [r7, #6]
 80094a8:	021b      	lsls	r3, r3, #8
 80094aa:	b21a      	sxth	r2, r3
 80094ac:	88fb      	ldrh	r3, [r7, #6]
 80094ae:	0a1b      	lsrs	r3, r3, #8
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	b21b      	sxth	r3, r3
 80094b4:	4313      	orrs	r3, r2
 80094b6:	b21b      	sxth	r3, r3
 80094b8:	b29b      	uxth	r3, r3
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80094c6:	b480      	push	{r7}
 80094c8:	b083      	sub	sp, #12
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	061a      	lsls	r2, r3, #24
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	021b      	lsls	r3, r3, #8
 80094d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094da:	431a      	orrs	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	0a1b      	lsrs	r3, r3, #8
 80094e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80094e4:	431a      	orrs	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	0e1b      	lsrs	r3, r3, #24
 80094ea:	4313      	orrs	r3, r2
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80094fe:	2300      	movs	r3, #0
 8009500:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009502:	f000 f8d3 	bl	80096ac <mem_init>
  memp_init();
 8009506:	f000 fbd9 	bl	8009cbc <memp_init>
  pbuf_init();
  netif_init();
 800950a:	f000 fcd7 	bl	8009ebc <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800950e:	f001 fdab 	bl	800b068 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009512:	f007 fe4d 	bl	80111b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009516:	bf00      	nop
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	4603      	mov	r3, r0
 8009528:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800952a:	4b05      	ldr	r3, [pc, #20]	; (8009540 <ptr_to_mem+0x20>)
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	88fb      	ldrh	r3, [r7, #6]
 8009530:	4413      	add	r3, r2
}
 8009532:	4618      	mov	r0, r3
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	20005bbc 	.word	0x20005bbc

08009544 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800954c:	4b05      	ldr	r3, [pc, #20]	; (8009564 <mem_to_ptr+0x20>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	b29b      	uxth	r3, r3
}
 8009556:	4618      	mov	r0, r3
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	20005bbc 	.word	0x20005bbc

08009568 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009568:	b590      	push	{r4, r7, lr}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009570:	4b45      	ldr	r3, [pc, #276]	; (8009688 <plug_holes+0x120>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	429a      	cmp	r2, r3
 8009578:	d206      	bcs.n	8009588 <plug_holes+0x20>
 800957a:	4b44      	ldr	r3, [pc, #272]	; (800968c <plug_holes+0x124>)
 800957c:	f240 12df 	movw	r2, #479	; 0x1df
 8009580:	4943      	ldr	r1, [pc, #268]	; (8009690 <plug_holes+0x128>)
 8009582:	4844      	ldr	r0, [pc, #272]	; (8009694 <plug_holes+0x12c>)
 8009584:	f00c f938 	bl	80157f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009588:	4b43      	ldr	r3, [pc, #268]	; (8009698 <plug_holes+0x130>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	429a      	cmp	r2, r3
 8009590:	d306      	bcc.n	80095a0 <plug_holes+0x38>
 8009592:	4b3e      	ldr	r3, [pc, #248]	; (800968c <plug_holes+0x124>)
 8009594:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009598:	4940      	ldr	r1, [pc, #256]	; (800969c <plug_holes+0x134>)
 800959a:	483e      	ldr	r0, [pc, #248]	; (8009694 <plug_holes+0x12c>)
 800959c:	f00c f92c 	bl	80157f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	791b      	ldrb	r3, [r3, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d006      	beq.n	80095b6 <plug_holes+0x4e>
 80095a8:	4b38      	ldr	r3, [pc, #224]	; (800968c <plug_holes+0x124>)
 80095aa:	f240 12e1 	movw	r2, #481	; 0x1e1
 80095ae:	493c      	ldr	r1, [pc, #240]	; (80096a0 <plug_holes+0x138>)
 80095b0:	4838      	ldr	r0, [pc, #224]	; (8009694 <plug_holes+0x12c>)
 80095b2:	f00c f921 	bl	80157f8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80095be:	d906      	bls.n	80095ce <plug_holes+0x66>
 80095c0:	4b32      	ldr	r3, [pc, #200]	; (800968c <plug_holes+0x124>)
 80095c2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80095c6:	4937      	ldr	r1, [pc, #220]	; (80096a4 <plug_holes+0x13c>)
 80095c8:	4832      	ldr	r0, [pc, #200]	; (8009694 <plug_holes+0x12c>)
 80095ca:	f00c f915 	bl	80157f8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7ff ffa4 	bl	8009520 <ptr_to_mem>
 80095d8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d024      	beq.n	800962c <plug_holes+0xc4>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	791b      	ldrb	r3, [r3, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d120      	bne.n	800962c <plug_holes+0xc4>
 80095ea:	4b2b      	ldr	r3, [pc, #172]	; (8009698 <plug_holes+0x130>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d01b      	beq.n	800962c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80095f4:	4b2c      	ldr	r3, [pc, #176]	; (80096a8 <plug_holes+0x140>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d102      	bne.n	8009604 <plug_holes+0x9c>
      lfree = mem;
 80095fe:	4a2a      	ldr	r2, [pc, #168]	; (80096a8 <plug_holes+0x140>)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	881a      	ldrh	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009614:	d00a      	beq.n	800962c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f7ff ff80 	bl	8009520 <ptr_to_mem>
 8009620:	4604      	mov	r4, r0
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7ff ff8e 	bl	8009544 <mem_to_ptr>
 8009628:	4603      	mov	r3, r0
 800962a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	885b      	ldrh	r3, [r3, #2]
 8009630:	4618      	mov	r0, r3
 8009632:	f7ff ff75 	bl	8009520 <ptr_to_mem>
 8009636:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	429a      	cmp	r2, r3
 800963e:	d01f      	beq.n	8009680 <plug_holes+0x118>
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	791b      	ldrb	r3, [r3, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d11b      	bne.n	8009680 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009648:	4b17      	ldr	r3, [pc, #92]	; (80096a8 <plug_holes+0x140>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	429a      	cmp	r2, r3
 8009650:	d102      	bne.n	8009658 <plug_holes+0xf0>
      lfree = pmem;
 8009652:	4a15      	ldr	r2, [pc, #84]	; (80096a8 <plug_holes+0x140>)
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	881a      	ldrh	r2, [r3, #0]
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	881b      	ldrh	r3, [r3, #0]
 8009664:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009668:	d00a      	beq.n	8009680 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	4618      	mov	r0, r3
 8009670:	f7ff ff56 	bl	8009520 <ptr_to_mem>
 8009674:	4604      	mov	r4, r0
 8009676:	68b8      	ldr	r0, [r7, #8]
 8009678:	f7ff ff64 	bl	8009544 <mem_to_ptr>
 800967c:	4603      	mov	r3, r0
 800967e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009680:	bf00      	nop
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	bd90      	pop	{r4, r7, pc}
 8009688:	20005bbc 	.word	0x20005bbc
 800968c:	08016cbc 	.word	0x08016cbc
 8009690:	08016cec 	.word	0x08016cec
 8009694:	08016d04 	.word	0x08016d04
 8009698:	20005bc0 	.word	0x20005bc0
 800969c:	08016d2c 	.word	0x08016d2c
 80096a0:	08016d48 	.word	0x08016d48
 80096a4:	08016d64 	.word	0x08016d64
 80096a8:	20005bc4 	.word	0x20005bc4

080096ac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80096b2:	4b18      	ldr	r3, [pc, #96]	; (8009714 <mem_init+0x68>)
 80096b4:	3303      	adds	r3, #3
 80096b6:	f023 0303 	bic.w	r3, r3, #3
 80096ba:	461a      	mov	r2, r3
 80096bc:	4b16      	ldr	r3, [pc, #88]	; (8009718 <mem_init+0x6c>)
 80096be:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80096c0:	4b15      	ldr	r3, [pc, #84]	; (8009718 <mem_init+0x6c>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80096cc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80096da:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80096de:	f7ff ff1f 	bl	8009520 <ptr_to_mem>
 80096e2:	4603      	mov	r3, r0
 80096e4:	4a0d      	ldr	r2, [pc, #52]	; (800971c <mem_init+0x70>)
 80096e6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80096e8:	4b0c      	ldr	r3, [pc, #48]	; (800971c <mem_init+0x70>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2201      	movs	r2, #1
 80096ee:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80096f0:	4b0a      	ldr	r3, [pc, #40]	; (800971c <mem_init+0x70>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80096f8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80096fa:	4b08      	ldr	r3, [pc, #32]	; (800971c <mem_init+0x70>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009702:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009704:	4b04      	ldr	r3, [pc, #16]	; (8009718 <mem_init+0x6c>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a05      	ldr	r2, [pc, #20]	; (8009720 <mem_init+0x74>)
 800970a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	20005568 	.word	0x20005568
 8009718:	20005bbc 	.word	0x20005bbc
 800971c:	20005bc0 	.word	0x20005bc0
 8009720:	20005bc4 	.word	0x20005bc4

08009724 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff ff09 	bl	8009544 <mem_to_ptr>
 8009732:	4603      	mov	r3, r0
 8009734:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	4618      	mov	r0, r3
 800973c:	f7ff fef0 	bl	8009520 <ptr_to_mem>
 8009740:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	885b      	ldrh	r3, [r3, #2]
 8009746:	4618      	mov	r0, r3
 8009748:	f7ff feea 	bl	8009520 <ptr_to_mem>
 800974c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009756:	d818      	bhi.n	800978a <mem_link_valid+0x66>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	885b      	ldrh	r3, [r3, #2]
 800975c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009760:	d813      	bhi.n	800978a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009766:	8afa      	ldrh	r2, [r7, #22]
 8009768:	429a      	cmp	r2, r3
 800976a:	d004      	beq.n	8009776 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	881b      	ldrh	r3, [r3, #0]
 8009770:	8afa      	ldrh	r2, [r7, #22]
 8009772:	429a      	cmp	r2, r3
 8009774:	d109      	bne.n	800978a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009776:	4b08      	ldr	r3, [pc, #32]	; (8009798 <mem_link_valid+0x74>)
 8009778:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	429a      	cmp	r2, r3
 800977e:	d006      	beq.n	800978e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	885b      	ldrh	r3, [r3, #2]
 8009784:	8afa      	ldrh	r2, [r7, #22]
 8009786:	429a      	cmp	r2, r3
 8009788:	d001      	beq.n	800978e <mem_link_valid+0x6a>
    return 0;
 800978a:	2300      	movs	r3, #0
 800978c:	e000      	b.n	8009790 <mem_link_valid+0x6c>
  }
  return 1;
 800978e:	2301      	movs	r3, #1
}
 8009790:	4618      	mov	r0, r3
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	20005bc0 	.word	0x20005bc0

0800979c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d04c      	beq.n	8009844 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f003 0303 	and.w	r3, r3, #3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d007      	beq.n	80097c4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80097b4:	4b25      	ldr	r3, [pc, #148]	; (800984c <mem_free+0xb0>)
 80097b6:	f240 2273 	movw	r2, #627	; 0x273
 80097ba:	4925      	ldr	r1, [pc, #148]	; (8009850 <mem_free+0xb4>)
 80097bc:	4825      	ldr	r0, [pc, #148]	; (8009854 <mem_free+0xb8>)
 80097be:	f00c f81b 	bl	80157f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80097c2:	e040      	b.n	8009846 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3b08      	subs	r3, #8
 80097c8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80097ca:	4b23      	ldr	r3, [pc, #140]	; (8009858 <mem_free+0xbc>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d306      	bcc.n	80097e2 <mem_free+0x46>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f103 020c 	add.w	r2, r3, #12
 80097da:	4b20      	ldr	r3, [pc, #128]	; (800985c <mem_free+0xc0>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d907      	bls.n	80097f2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80097e2:	4b1a      	ldr	r3, [pc, #104]	; (800984c <mem_free+0xb0>)
 80097e4:	f240 227f 	movw	r2, #639	; 0x27f
 80097e8:	491d      	ldr	r1, [pc, #116]	; (8009860 <mem_free+0xc4>)
 80097ea:	481a      	ldr	r0, [pc, #104]	; (8009854 <mem_free+0xb8>)
 80097ec:	f00c f804 	bl	80157f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80097f0:	e029      	b.n	8009846 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	791b      	ldrb	r3, [r3, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d107      	bne.n	800980a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80097fa:	4b14      	ldr	r3, [pc, #80]	; (800984c <mem_free+0xb0>)
 80097fc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009800:	4918      	ldr	r1, [pc, #96]	; (8009864 <mem_free+0xc8>)
 8009802:	4814      	ldr	r0, [pc, #80]	; (8009854 <mem_free+0xb8>)
 8009804:	f00b fff8 	bl	80157f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009808:	e01d      	b.n	8009846 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f7ff ff8a 	bl	8009724 <mem_link_valid>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d107      	bne.n	8009826 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009816:	4b0d      	ldr	r3, [pc, #52]	; (800984c <mem_free+0xb0>)
 8009818:	f240 2295 	movw	r2, #661	; 0x295
 800981c:	4912      	ldr	r1, [pc, #72]	; (8009868 <mem_free+0xcc>)
 800981e:	480d      	ldr	r0, [pc, #52]	; (8009854 <mem_free+0xb8>)
 8009820:	f00b ffea 	bl	80157f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009824:	e00f      	b.n	8009846 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800982c:	4b0f      	ldr	r3, [pc, #60]	; (800986c <mem_free+0xd0>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	429a      	cmp	r2, r3
 8009834:	d202      	bcs.n	800983c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009836:	4a0d      	ldr	r2, [pc, #52]	; (800986c <mem_free+0xd0>)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f7ff fe93 	bl	8009568 <plug_holes>
 8009842:	e000      	b.n	8009846 <mem_free+0xaa>
    return;
 8009844:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	08016cbc 	.word	0x08016cbc
 8009850:	08016d90 	.word	0x08016d90
 8009854:	08016d04 	.word	0x08016d04
 8009858:	20005bbc 	.word	0x20005bbc
 800985c:	20005bc0 	.word	0x20005bc0
 8009860:	08016db4 	.word	0x08016db4
 8009864:	08016dd0 	.word	0x08016dd0
 8009868:	08016df8 	.word	0x08016df8
 800986c:	20005bc4 	.word	0x20005bc4

08009870 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b088      	sub	sp, #32
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800987c:	887b      	ldrh	r3, [r7, #2]
 800987e:	3303      	adds	r3, #3
 8009880:	b29b      	uxth	r3, r3
 8009882:	f023 0303 	bic.w	r3, r3, #3
 8009886:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009888:	8bfb      	ldrh	r3, [r7, #30]
 800988a:	2b0b      	cmp	r3, #11
 800988c:	d801      	bhi.n	8009892 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800988e:	230c      	movs	r3, #12
 8009890:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009892:	8bfb      	ldrh	r3, [r7, #30]
 8009894:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009898:	d803      	bhi.n	80098a2 <mem_trim+0x32>
 800989a:	8bfa      	ldrh	r2, [r7, #30]
 800989c:	887b      	ldrh	r3, [r7, #2]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d201      	bcs.n	80098a6 <mem_trim+0x36>
    return NULL;
 80098a2:	2300      	movs	r3, #0
 80098a4:	e0cc      	b.n	8009a40 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80098a6:	4b68      	ldr	r3, [pc, #416]	; (8009a48 <mem_trim+0x1d8>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d304      	bcc.n	80098ba <mem_trim+0x4a>
 80098b0:	4b66      	ldr	r3, [pc, #408]	; (8009a4c <mem_trim+0x1dc>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d306      	bcc.n	80098c8 <mem_trim+0x58>
 80098ba:	4b65      	ldr	r3, [pc, #404]	; (8009a50 <mem_trim+0x1e0>)
 80098bc:	f240 22d1 	movw	r2, #721	; 0x2d1
 80098c0:	4964      	ldr	r1, [pc, #400]	; (8009a54 <mem_trim+0x1e4>)
 80098c2:	4865      	ldr	r0, [pc, #404]	; (8009a58 <mem_trim+0x1e8>)
 80098c4:	f00b ff98 	bl	80157f8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80098c8:	4b5f      	ldr	r3, [pc, #380]	; (8009a48 <mem_trim+0x1d8>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d304      	bcc.n	80098dc <mem_trim+0x6c>
 80098d2:	4b5e      	ldr	r3, [pc, #376]	; (8009a4c <mem_trim+0x1dc>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d301      	bcc.n	80098e0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	e0af      	b.n	8009a40 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3b08      	subs	r3, #8
 80098e4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80098e6:	69b8      	ldr	r0, [r7, #24]
 80098e8:	f7ff fe2c 	bl	8009544 <mem_to_ptr>
 80098ec:	4603      	mov	r3, r0
 80098ee:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	881a      	ldrh	r2, [r3, #0]
 80098f4:	8afb      	ldrh	r3, [r7, #22]
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	3b08      	subs	r3, #8
 80098fc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80098fe:	8bfa      	ldrh	r2, [r7, #30]
 8009900:	8abb      	ldrh	r3, [r7, #20]
 8009902:	429a      	cmp	r2, r3
 8009904:	d906      	bls.n	8009914 <mem_trim+0xa4>
 8009906:	4b52      	ldr	r3, [pc, #328]	; (8009a50 <mem_trim+0x1e0>)
 8009908:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800990c:	4953      	ldr	r1, [pc, #332]	; (8009a5c <mem_trim+0x1ec>)
 800990e:	4852      	ldr	r0, [pc, #328]	; (8009a58 <mem_trim+0x1e8>)
 8009910:	f00b ff72 	bl	80157f8 <iprintf>
  if (newsize > size) {
 8009914:	8bfa      	ldrh	r2, [r7, #30]
 8009916:	8abb      	ldrh	r3, [r7, #20]
 8009918:	429a      	cmp	r2, r3
 800991a:	d901      	bls.n	8009920 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800991c:	2300      	movs	r3, #0
 800991e:	e08f      	b.n	8009a40 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8009920:	8bfa      	ldrh	r2, [r7, #30]
 8009922:	8abb      	ldrh	r3, [r7, #20]
 8009924:	429a      	cmp	r2, r3
 8009926:	d101      	bne.n	800992c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	e089      	b.n	8009a40 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff fdf5 	bl	8009520 <ptr_to_mem>
 8009936:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	791b      	ldrb	r3, [r3, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d13f      	bne.n	80099c0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009948:	d106      	bne.n	8009958 <mem_trim+0xe8>
 800994a:	4b41      	ldr	r3, [pc, #260]	; (8009a50 <mem_trim+0x1e0>)
 800994c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009950:	4943      	ldr	r1, [pc, #268]	; (8009a60 <mem_trim+0x1f0>)
 8009952:	4841      	ldr	r0, [pc, #260]	; (8009a58 <mem_trim+0x1e8>)
 8009954:	f00b ff50 	bl	80157f8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	881b      	ldrh	r3, [r3, #0]
 800995c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800995e:	8afa      	ldrh	r2, [r7, #22]
 8009960:	8bfb      	ldrh	r3, [r7, #30]
 8009962:	4413      	add	r3, r2
 8009964:	b29b      	uxth	r3, r3
 8009966:	3308      	adds	r3, #8
 8009968:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800996a:	4b3e      	ldr	r3, [pc, #248]	; (8009a64 <mem_trim+0x1f4>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	429a      	cmp	r2, r3
 8009972:	d106      	bne.n	8009982 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8009974:	89fb      	ldrh	r3, [r7, #14]
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff fdd2 	bl	8009520 <ptr_to_mem>
 800997c:	4603      	mov	r3, r0
 800997e:	4a39      	ldr	r2, [pc, #228]	; (8009a64 <mem_trim+0x1f4>)
 8009980:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009982:	89fb      	ldrh	r3, [r7, #14]
 8009984:	4618      	mov	r0, r3
 8009986:	f7ff fdcb 	bl	8009520 <ptr_to_mem>
 800998a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	2200      	movs	r2, #0
 8009990:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	89ba      	ldrh	r2, [r7, #12]
 8009996:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	8afa      	ldrh	r2, [r7, #22]
 800999c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	89fa      	ldrh	r2, [r7, #14]
 80099a2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80099ac:	d047      	beq.n	8009a3e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7ff fdb4 	bl	8009520 <ptr_to_mem>
 80099b8:	4602      	mov	r2, r0
 80099ba:	89fb      	ldrh	r3, [r7, #14]
 80099bc:	8053      	strh	r3, [r2, #2]
 80099be:	e03e      	b.n	8009a3e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80099c0:	8bfb      	ldrh	r3, [r7, #30]
 80099c2:	f103 0214 	add.w	r2, r3, #20
 80099c6:	8abb      	ldrh	r3, [r7, #20]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d838      	bhi.n	8009a3e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80099cc:	8afa      	ldrh	r2, [r7, #22]
 80099ce:	8bfb      	ldrh	r3, [r7, #30]
 80099d0:	4413      	add	r3, r2
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	3308      	adds	r3, #8
 80099d6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	881b      	ldrh	r3, [r3, #0]
 80099dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80099e0:	d106      	bne.n	80099f0 <mem_trim+0x180>
 80099e2:	4b1b      	ldr	r3, [pc, #108]	; (8009a50 <mem_trim+0x1e0>)
 80099e4:	f240 3216 	movw	r2, #790	; 0x316
 80099e8:	491d      	ldr	r1, [pc, #116]	; (8009a60 <mem_trim+0x1f0>)
 80099ea:	481b      	ldr	r0, [pc, #108]	; (8009a58 <mem_trim+0x1e8>)
 80099ec:	f00b ff04 	bl	80157f8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80099f0:	89fb      	ldrh	r3, [r7, #14]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7ff fd94 	bl	8009520 <ptr_to_mem>
 80099f8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80099fa:	4b1a      	ldr	r3, [pc, #104]	; (8009a64 <mem_trim+0x1f4>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d202      	bcs.n	8009a0a <mem_trim+0x19a>
      lfree = mem2;
 8009a04:	4a17      	ldr	r2, [pc, #92]	; (8009a64 <mem_trim+0x1f4>)
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	881a      	ldrh	r2, [r3, #0]
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	8afa      	ldrh	r2, [r7, #22]
 8009a1c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	89fa      	ldrh	r2, [r7, #14]
 8009a22:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a2c:	d007      	beq.n	8009a3e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7ff fd74 	bl	8009520 <ptr_to_mem>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	89fb      	ldrh	r3, [r7, #14]
 8009a3c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8009a3e:	687b      	ldr	r3, [r7, #4]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3720      	adds	r7, #32
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	20005bbc 	.word	0x20005bbc
 8009a4c:	20005bc0 	.word	0x20005bc0
 8009a50:	08016cbc 	.word	0x08016cbc
 8009a54:	08016e2c 	.word	0x08016e2c
 8009a58:	08016d04 	.word	0x08016d04
 8009a5c:	08016e44 	.word	0x08016e44
 8009a60:	08016e64 	.word	0x08016e64
 8009a64:	20005bc4 	.word	0x20005bc4

08009a68 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b088      	sub	sp, #32
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009a72:	88fb      	ldrh	r3, [r7, #6]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <mem_malloc+0x14>
    return NULL;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	e0d9      	b.n	8009c30 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009a7c:	88fb      	ldrh	r3, [r7, #6]
 8009a7e:	3303      	adds	r3, #3
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	f023 0303 	bic.w	r3, r3, #3
 8009a86:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009a88:	8bbb      	ldrh	r3, [r7, #28]
 8009a8a:	2b0b      	cmp	r3, #11
 8009a8c:	d801      	bhi.n	8009a92 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009a8e:	230c      	movs	r3, #12
 8009a90:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009a92:	8bbb      	ldrh	r3, [r7, #28]
 8009a94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a98:	d803      	bhi.n	8009aa2 <mem_malloc+0x3a>
 8009a9a:	8bba      	ldrh	r2, [r7, #28]
 8009a9c:	88fb      	ldrh	r3, [r7, #6]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d201      	bcs.n	8009aa6 <mem_malloc+0x3e>
    return NULL;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e0c4      	b.n	8009c30 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009aa6:	4b64      	ldr	r3, [pc, #400]	; (8009c38 <mem_malloc+0x1d0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7ff fd4a 	bl	8009544 <mem_to_ptr>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	83fb      	strh	r3, [r7, #30]
 8009ab4:	e0b4      	b.n	8009c20 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009ab6:	8bfb      	ldrh	r3, [r7, #30]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7ff fd31 	bl	8009520 <ptr_to_mem>
 8009abe:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	791b      	ldrb	r3, [r3, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f040 80a4 	bne.w	8009c12 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	881b      	ldrh	r3, [r3, #0]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	8bfb      	ldrh	r3, [r7, #30]
 8009ad2:	1ad3      	subs	r3, r2, r3
 8009ad4:	f1a3 0208 	sub.w	r2, r3, #8
 8009ad8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009ada:	429a      	cmp	r2, r3
 8009adc:	f0c0 8099 	bcc.w	8009c12 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	8bfb      	ldrh	r3, [r7, #30]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	f1a3 0208 	sub.w	r2, r3, #8
 8009aee:	8bbb      	ldrh	r3, [r7, #28]
 8009af0:	3314      	adds	r3, #20
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d333      	bcc.n	8009b5e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009af6:	8bfa      	ldrh	r2, [r7, #30]
 8009af8:	8bbb      	ldrh	r3, [r7, #28]
 8009afa:	4413      	add	r3, r2
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	3308      	adds	r3, #8
 8009b00:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009b02:	8a7b      	ldrh	r3, [r7, #18]
 8009b04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b08:	d106      	bne.n	8009b18 <mem_malloc+0xb0>
 8009b0a:	4b4c      	ldr	r3, [pc, #304]	; (8009c3c <mem_malloc+0x1d4>)
 8009b0c:	f240 3287 	movw	r2, #903	; 0x387
 8009b10:	494b      	ldr	r1, [pc, #300]	; (8009c40 <mem_malloc+0x1d8>)
 8009b12:	484c      	ldr	r0, [pc, #304]	; (8009c44 <mem_malloc+0x1dc>)
 8009b14:	f00b fe70 	bl	80157f8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009b18:	8a7b      	ldrh	r3, [r7, #18]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7ff fd00 	bl	8009520 <ptr_to_mem>
 8009b20:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	881a      	ldrh	r2, [r3, #0]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	8bfa      	ldrh	r2, [r7, #30]
 8009b34:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	8a7a      	ldrh	r2, [r7, #18]
 8009b3a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	881b      	ldrh	r3, [r3, #0]
 8009b46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b4a:	d00b      	beq.n	8009b64 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	881b      	ldrh	r3, [r3, #0]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7ff fce5 	bl	8009520 <ptr_to_mem>
 8009b56:	4602      	mov	r2, r0
 8009b58:	8a7b      	ldrh	r3, [r7, #18]
 8009b5a:	8053      	strh	r3, [r2, #2]
 8009b5c:	e002      	b.n	8009b64 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2201      	movs	r2, #1
 8009b62:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009b64:	4b34      	ldr	r3, [pc, #208]	; (8009c38 <mem_malloc+0x1d0>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d127      	bne.n	8009bbe <mem_malloc+0x156>
          struct mem *cur = lfree;
 8009b6e:	4b32      	ldr	r3, [pc, #200]	; (8009c38 <mem_malloc+0x1d0>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009b74:	e005      	b.n	8009b82 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	881b      	ldrh	r3, [r3, #0]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7ff fcd0 	bl	8009520 <ptr_to_mem>
 8009b80:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	791b      	ldrb	r3, [r3, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d004      	beq.n	8009b94 <mem_malloc+0x12c>
 8009b8a:	4b2f      	ldr	r3, [pc, #188]	; (8009c48 <mem_malloc+0x1e0>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	69ba      	ldr	r2, [r7, #24]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d1f0      	bne.n	8009b76 <mem_malloc+0x10e>
          }
          lfree = cur;
 8009b94:	4a28      	ldr	r2, [pc, #160]	; (8009c38 <mem_malloc+0x1d0>)
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009b9a:	4b27      	ldr	r3, [pc, #156]	; (8009c38 <mem_malloc+0x1d0>)
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	4b2a      	ldr	r3, [pc, #168]	; (8009c48 <mem_malloc+0x1e0>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d00b      	beq.n	8009bbe <mem_malloc+0x156>
 8009ba6:	4b24      	ldr	r3, [pc, #144]	; (8009c38 <mem_malloc+0x1d0>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	791b      	ldrb	r3, [r3, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d006      	beq.n	8009bbe <mem_malloc+0x156>
 8009bb0:	4b22      	ldr	r3, [pc, #136]	; (8009c3c <mem_malloc+0x1d4>)
 8009bb2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009bb6:	4925      	ldr	r1, [pc, #148]	; (8009c4c <mem_malloc+0x1e4>)
 8009bb8:	4822      	ldr	r0, [pc, #136]	; (8009c44 <mem_malloc+0x1dc>)
 8009bba:	f00b fe1d 	bl	80157f8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009bbe:	8bba      	ldrh	r2, [r7, #28]
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	4a20      	ldr	r2, [pc, #128]	; (8009c48 <mem_malloc+0x1e0>)
 8009bc8:	6812      	ldr	r2, [r2, #0]
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d906      	bls.n	8009bdc <mem_malloc+0x174>
 8009bce:	4b1b      	ldr	r3, [pc, #108]	; (8009c3c <mem_malloc+0x1d4>)
 8009bd0:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009bd4:	491e      	ldr	r1, [pc, #120]	; (8009c50 <mem_malloc+0x1e8>)
 8009bd6:	481b      	ldr	r0, [pc, #108]	; (8009c44 <mem_malloc+0x1dc>)
 8009bd8:	f00b fe0e 	bl	80157f8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	f003 0303 	and.w	r3, r3, #3
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d006      	beq.n	8009bf4 <mem_malloc+0x18c>
 8009be6:	4b15      	ldr	r3, [pc, #84]	; (8009c3c <mem_malloc+0x1d4>)
 8009be8:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009bec:	4919      	ldr	r1, [pc, #100]	; (8009c54 <mem_malloc+0x1ec>)
 8009bee:	4815      	ldr	r0, [pc, #84]	; (8009c44 <mem_malloc+0x1dc>)
 8009bf0:	f00b fe02 	bl	80157f8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f003 0303 	and.w	r3, r3, #3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d006      	beq.n	8009c0c <mem_malloc+0x1a4>
 8009bfe:	4b0f      	ldr	r3, [pc, #60]	; (8009c3c <mem_malloc+0x1d4>)
 8009c00:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009c04:	4914      	ldr	r1, [pc, #80]	; (8009c58 <mem_malloc+0x1f0>)
 8009c06:	480f      	ldr	r0, [pc, #60]	; (8009c44 <mem_malloc+0x1dc>)
 8009c08:	f00b fdf6 	bl	80157f8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	3308      	adds	r3, #8
 8009c10:	e00e      	b.n	8009c30 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8009c12:	8bfb      	ldrh	r3, [r7, #30]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff fc83 	bl	8009520 <ptr_to_mem>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	881b      	ldrh	r3, [r3, #0]
 8009c1e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009c20:	8bfa      	ldrh	r2, [r7, #30]
 8009c22:	8bbb      	ldrh	r3, [r7, #28]
 8009c24:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	f4ff af44 	bcc.w	8009ab6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3720      	adds	r7, #32
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	20005bc4 	.word	0x20005bc4
 8009c3c:	08016cbc 	.word	0x08016cbc
 8009c40:	08016e64 	.word	0x08016e64
 8009c44:	08016d04 	.word	0x08016d04
 8009c48:	20005bc0 	.word	0x20005bc0
 8009c4c:	08016e78 	.word	0x08016e78
 8009c50:	08016e94 	.word	0x08016e94
 8009c54:	08016ec4 	.word	0x08016ec4
 8009c58:	08016ef4 	.word	0x08016ef4

08009c5c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b085      	sub	sp, #20
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	3303      	adds	r3, #3
 8009c72:	f023 0303 	bic.w	r3, r3, #3
 8009c76:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009c78:	2300      	movs	r3, #0
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	e011      	b.n	8009ca2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	881b      	ldrh	r3, [r3, #0]
 8009c94:	461a      	mov	r2, r3
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	4413      	add	r3, r2
 8009c9a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	60fb      	str	r3, [r7, #12]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	885b      	ldrh	r3, [r3, #2]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	4293      	cmp	r3, r2
 8009cac:	dbe7      	blt.n	8009c7e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009cae:	bf00      	nop
 8009cb0:	bf00      	nop
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	80fb      	strh	r3, [r7, #6]
 8009cc6:	e009      	b.n	8009cdc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009cc8:	88fb      	ldrh	r3, [r7, #6]
 8009cca:	4a08      	ldr	r2, [pc, #32]	; (8009cec <memp_init+0x30>)
 8009ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7ff ffc3 	bl	8009c5c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009cd6:	88fb      	ldrh	r3, [r7, #6]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	80fb      	strh	r3, [r7, #6]
 8009cdc:	88fb      	ldrh	r3, [r7, #6]
 8009cde:	2b07      	cmp	r3, #7
 8009ce0:	d9f2      	bls.n	8009cc8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009ce2:	bf00      	nop
 8009ce4:	bf00      	nop
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	08019790 	.word	0x08019790

08009cf0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d012      	beq.n	8009d2c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	6812      	ldr	r2, [r2, #0]
 8009d0e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f003 0303 	and.w	r3, r3, #3
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d006      	beq.n	8009d28 <do_memp_malloc_pool+0x38>
 8009d1a:	4b07      	ldr	r3, [pc, #28]	; (8009d38 <do_memp_malloc_pool+0x48>)
 8009d1c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009d20:	4906      	ldr	r1, [pc, #24]	; (8009d3c <do_memp_malloc_pool+0x4c>)
 8009d22:	4807      	ldr	r0, [pc, #28]	; (8009d40 <do_memp_malloc_pool+0x50>)
 8009d24:	f00b fd68 	bl	80157f8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	e000      	b.n	8009d2e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	08016f18 	.word	0x08016f18
 8009d3c:	08016f48 	.word	0x08016f48
 8009d40:	08016f6c 	.word	0x08016f6c

08009d44 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d106      	bne.n	8009d60 <memp_malloc_pool+0x1c>
 8009d52:	4b0a      	ldr	r3, [pc, #40]	; (8009d7c <memp_malloc_pool+0x38>)
 8009d54:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009d58:	4909      	ldr	r1, [pc, #36]	; (8009d80 <memp_malloc_pool+0x3c>)
 8009d5a:	480a      	ldr	r0, [pc, #40]	; (8009d84 <memp_malloc_pool+0x40>)
 8009d5c:	f00b fd4c 	bl	80157f8 <iprintf>
  if (desc == NULL) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d101      	bne.n	8009d6a <memp_malloc_pool+0x26>
    return NULL;
 8009d66:	2300      	movs	r3, #0
 8009d68:	e003      	b.n	8009d72 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7ff ffc0 	bl	8009cf0 <do_memp_malloc_pool>
 8009d70:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	08016f18 	.word	0x08016f18
 8009d80:	08016f94 	.word	0x08016f94
 8009d84:	08016f6c 	.word	0x08016f6c

08009d88 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009d92:	79fb      	ldrb	r3, [r7, #7]
 8009d94:	2b07      	cmp	r3, #7
 8009d96:	d908      	bls.n	8009daa <memp_malloc+0x22>
 8009d98:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <memp_malloc+0x3c>)
 8009d9a:	f240 1257 	movw	r2, #343	; 0x157
 8009d9e:	490a      	ldr	r1, [pc, #40]	; (8009dc8 <memp_malloc+0x40>)
 8009da0:	480a      	ldr	r0, [pc, #40]	; (8009dcc <memp_malloc+0x44>)
 8009da2:	f00b fd29 	bl	80157f8 <iprintf>
 8009da6:	2300      	movs	r3, #0
 8009da8:	e008      	b.n	8009dbc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009daa:	79fb      	ldrb	r3, [r7, #7]
 8009dac:	4a08      	ldr	r2, [pc, #32]	; (8009dd0 <memp_malloc+0x48>)
 8009dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7ff ff9c 	bl	8009cf0 <do_memp_malloc_pool>
 8009db8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009dba:	68fb      	ldr	r3, [r7, #12]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	08016f18 	.word	0x08016f18
 8009dc8:	08016fa8 	.word	0x08016fa8
 8009dcc:	08016f6c 	.word	0x08016f6c
 8009dd0:	08019790 	.word	0x08019790

08009dd4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	f003 0303 	and.w	r3, r3, #3
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d006      	beq.n	8009df6 <do_memp_free_pool+0x22>
 8009de8:	4b0a      	ldr	r3, [pc, #40]	; (8009e14 <do_memp_free_pool+0x40>)
 8009dea:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009dee:	490a      	ldr	r1, [pc, #40]	; (8009e18 <do_memp_free_pool+0x44>)
 8009df0:	480a      	ldr	r0, [pc, #40]	; (8009e1c <do_memp_free_pool+0x48>)
 8009df2:	f00b fd01 	bl	80157f8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009e0c:	bf00      	nop
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	08016f18 	.word	0x08016f18
 8009e18:	08016fc8 	.word	0x08016fc8
 8009e1c:	08016f6c 	.word	0x08016f6c

08009e20 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d106      	bne.n	8009e3e <memp_free_pool+0x1e>
 8009e30:	4b0a      	ldr	r3, [pc, #40]	; (8009e5c <memp_free_pool+0x3c>)
 8009e32:	f240 1295 	movw	r2, #405	; 0x195
 8009e36:	490a      	ldr	r1, [pc, #40]	; (8009e60 <memp_free_pool+0x40>)
 8009e38:	480a      	ldr	r0, [pc, #40]	; (8009e64 <memp_free_pool+0x44>)
 8009e3a:	f00b fcdd 	bl	80157f8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d007      	beq.n	8009e54 <memp_free_pool+0x34>
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d004      	beq.n	8009e54 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f7ff ffc1 	bl	8009dd4 <do_memp_free_pool>
 8009e52:	e000      	b.n	8009e56 <memp_free_pool+0x36>
    return;
 8009e54:	bf00      	nop
}
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	08016f18 	.word	0x08016f18
 8009e60:	08016f94 	.word	0x08016f94
 8009e64:	08016f6c 	.word	0x08016f6c

08009e68 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	4603      	mov	r3, r0
 8009e70:	6039      	str	r1, [r7, #0]
 8009e72:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009e74:	79fb      	ldrb	r3, [r7, #7]
 8009e76:	2b07      	cmp	r3, #7
 8009e78:	d907      	bls.n	8009e8a <memp_free+0x22>
 8009e7a:	4b0c      	ldr	r3, [pc, #48]	; (8009eac <memp_free+0x44>)
 8009e7c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009e80:	490b      	ldr	r1, [pc, #44]	; (8009eb0 <memp_free+0x48>)
 8009e82:	480c      	ldr	r0, [pc, #48]	; (8009eb4 <memp_free+0x4c>)
 8009e84:	f00b fcb8 	bl	80157f8 <iprintf>
 8009e88:	e00c      	b.n	8009ea4 <memp_free+0x3c>

  if (mem == NULL) {
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d008      	beq.n	8009ea2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009e90:	79fb      	ldrb	r3, [r7, #7]
 8009e92:	4a09      	ldr	r2, [pc, #36]	; (8009eb8 <memp_free+0x50>)
 8009e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7ff ff9a 	bl	8009dd4 <do_memp_free_pool>
 8009ea0:	e000      	b.n	8009ea4 <memp_free+0x3c>
    return;
 8009ea2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	08016f18 	.word	0x08016f18
 8009eb0:	08016fe8 	.word	0x08016fe8
 8009eb4:	08016f6c 	.word	0x08016f6c
 8009eb8:	08019790 	.word	0x08019790

08009ebc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009ec0:	bf00      	nop
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
	...

08009ecc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
 8009ed8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d108      	bne.n	8009ef2 <netif_add+0x26>
 8009ee0:	4b57      	ldr	r3, [pc, #348]	; (800a040 <netif_add+0x174>)
 8009ee2:	f240 1227 	movw	r2, #295	; 0x127
 8009ee6:	4957      	ldr	r1, [pc, #348]	; (800a044 <netif_add+0x178>)
 8009ee8:	4857      	ldr	r0, [pc, #348]	; (800a048 <netif_add+0x17c>)
 8009eea:	f00b fc85 	bl	80157f8 <iprintf>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	e0a2      	b.n	800a038 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d108      	bne.n	8009f0a <netif_add+0x3e>
 8009ef8:	4b51      	ldr	r3, [pc, #324]	; (800a040 <netif_add+0x174>)
 8009efa:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009efe:	4953      	ldr	r1, [pc, #332]	; (800a04c <netif_add+0x180>)
 8009f00:	4851      	ldr	r0, [pc, #324]	; (800a048 <netif_add+0x17c>)
 8009f02:	f00b fc79 	bl	80157f8 <iprintf>
 8009f06:	2300      	movs	r3, #0
 8009f08:	e096      	b.n	800a038 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d101      	bne.n	8009f14 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009f10:	4b4f      	ldr	r3, [pc, #316]	; (800a050 <netif_add+0x184>)
 8009f12:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009f1a:	4b4d      	ldr	r3, [pc, #308]	; (800a050 <netif_add+0x184>)
 8009f1c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d101      	bne.n	8009f28 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009f24:	4b4a      	ldr	r3, [pc, #296]	; (800a050 <netif_add+0x184>)
 8009f26:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	4a45      	ldr	r2, [pc, #276]	; (800a054 <netif_add+0x188>)
 8009f3e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6a3a      	ldr	r2, [r7, #32]
 8009f58:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009f5a:	4b3f      	ldr	r3, [pc, #252]	; (800a058 <netif_add+0x18c>)
 8009f5c:	781a      	ldrb	r2, [r3, #0]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f68:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	68b9      	ldr	r1, [r7, #8]
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f000 f90f 	bl	800a194 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	4798      	blx	r3
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d001      	beq.n	8009f86 <netif_add+0xba>
    return NULL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	e058      	b.n	800a038 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f8c:	2bff      	cmp	r3, #255	; 0xff
 8009f8e:	d103      	bne.n	8009f98 <netif_add+0xcc>
        netif->num = 0;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009f9c:	4b2f      	ldr	r3, [pc, #188]	; (800a05c <netif_add+0x190>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	617b      	str	r3, [r7, #20]
 8009fa2:	e02b      	b.n	8009ffc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009fa4:	697a      	ldr	r2, [r7, #20]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d106      	bne.n	8009fba <netif_add+0xee>
 8009fac:	4b24      	ldr	r3, [pc, #144]	; (800a040 <netif_add+0x174>)
 8009fae:	f240 128b 	movw	r2, #395	; 0x18b
 8009fb2:	492b      	ldr	r1, [pc, #172]	; (800a060 <netif_add+0x194>)
 8009fb4:	4824      	ldr	r0, [pc, #144]	; (800a048 <netif_add+0x17c>)
 8009fb6:	f00b fc1f 	bl	80157f8 <iprintf>
        num_netifs++;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	2bff      	cmp	r3, #255	; 0xff
 8009fc4:	dd06      	ble.n	8009fd4 <netif_add+0x108>
 8009fc6:	4b1e      	ldr	r3, [pc, #120]	; (800a040 <netif_add+0x174>)
 8009fc8:	f240 128d 	movw	r2, #397	; 0x18d
 8009fcc:	4925      	ldr	r1, [pc, #148]	; (800a064 <netif_add+0x198>)
 8009fce:	481e      	ldr	r0, [pc, #120]	; (800a048 <netif_add+0x17c>)
 8009fd0:	f00b fc12 	bl	80157f8 <iprintf>
        if (netif2->num == netif->num) {
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d108      	bne.n	8009ff6 <netif_add+0x12a>
          netif->num++;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fea:	3301      	adds	r3, #1
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009ff4:	e005      	b.n	800a002 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	617b      	str	r3, [r7, #20]
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1d0      	bne.n	8009fa4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1be      	bne.n	8009f86 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a00e:	2bfe      	cmp	r3, #254	; 0xfe
 800a010:	d103      	bne.n	800a01a <netif_add+0x14e>
    netif_num = 0;
 800a012:	4b11      	ldr	r3, [pc, #68]	; (800a058 <netif_add+0x18c>)
 800a014:	2200      	movs	r2, #0
 800a016:	701a      	strb	r2, [r3, #0]
 800a018:	e006      	b.n	800a028 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a020:	3301      	adds	r3, #1
 800a022:	b2da      	uxtb	r2, r3
 800a024:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <netif_add+0x18c>)
 800a026:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a028:	4b0c      	ldr	r3, [pc, #48]	; (800a05c <netif_add+0x190>)
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a030:	4a0a      	ldr	r2, [pc, #40]	; (800a05c <netif_add+0x190>)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a036:	68fb      	ldr	r3, [r7, #12]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3718      	adds	r7, #24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	08017004 	.word	0x08017004
 800a044:	08017098 	.word	0x08017098
 800a048:	08017054 	.word	0x08017054
 800a04c:	080170b4 	.word	0x080170b4
 800a050:	080197f0 	.word	0x080197f0
 800a054:	0800a46f 	.word	0x0800a46f
 800a058:	2000e498 	.word	0x2000e498
 800a05c:	2000e490 	.word	0x2000e490
 800a060:	080170d8 	.word	0x080170d8
 800a064:	080170ec 	.word	0x080170ec

0800a068 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f002 fd6f 	bl	800cb58 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a07a:	bf00      	nop
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
	...

0800a084 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d106      	bne.n	800a0a4 <netif_do_set_ipaddr+0x20>
 800a096:	4b1d      	ldr	r3, [pc, #116]	; (800a10c <netif_do_set_ipaddr+0x88>)
 800a098:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a09c:	491c      	ldr	r1, [pc, #112]	; (800a110 <netif_do_set_ipaddr+0x8c>)
 800a09e:	481d      	ldr	r0, [pc, #116]	; (800a114 <netif_do_set_ipaddr+0x90>)
 800a0a0:	f00b fbaa 	bl	80157f8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d106      	bne.n	800a0b8 <netif_do_set_ipaddr+0x34>
 800a0aa:	4b18      	ldr	r3, [pc, #96]	; (800a10c <netif_do_set_ipaddr+0x88>)
 800a0ac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a0b0:	4917      	ldr	r1, [pc, #92]	; (800a110 <netif_do_set_ipaddr+0x8c>)
 800a0b2:	4818      	ldr	r0, [pc, #96]	; (800a114 <netif_do_set_ipaddr+0x90>)
 800a0b4:	f00b fba0 	bl	80157f8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	3304      	adds	r3, #4
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d01c      	beq.n	800a100 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a0d6:	f107 0314 	add.w	r3, r7, #20
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7ff ffc3 	bl	800a068 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <netif_do_set_ipaddr+0x6a>
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	e000      	b.n	800a0f0 <netif_do_set_ipaddr+0x6c>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 f8d2 	bl	800a2a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e000      	b.n	800a102 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	08017004 	.word	0x08017004
 800a110:	0801711c 	.word	0x0801711c
 800a114:	08017054 	.word	0x08017054

0800a118 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3308      	adds	r3, #8
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d00a      	beq.n	800a148 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <netif_do_set_netmask+0x26>
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	e000      	b.n	800a140 <netif_do_set_netmask+0x28>
 800a13e:	2300      	movs	r3, #0
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a144:	2301      	movs	r3, #1
 800a146:	e000      	b.n	800a14a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a156:	b480      	push	{r7}
 800a158:	b085      	sub	sp, #20
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	60f8      	str	r0, [r7, #12]
 800a15e:	60b9      	str	r1, [r7, #8]
 800a160:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	330c      	adds	r3, #12
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d00a      	beq.n	800a186 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d002      	beq.n	800a17c <netif_do_set_gw+0x26>
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	e000      	b.n	800a17e <netif_do_set_gw+0x28>
 800a17c:	2300      	movs	r3, #0
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a182:	2301      	movs	r3, #1
 800a184:	e000      	b.n	800a188 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3714      	adds	r7, #20
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b088      	sub	sp, #32
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d101      	bne.n	800a1b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a1b0:	4b1c      	ldr	r3, [pc, #112]	; (800a224 <netif_set_addr+0x90>)
 800a1b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a1ba:	4b1a      	ldr	r3, [pc, #104]	; (800a224 <netif_set_addr+0x90>)
 800a1bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d101      	bne.n	800a1c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a1c4:	4b17      	ldr	r3, [pc, #92]	; (800a224 <netif_set_addr+0x90>)
 800a1c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d003      	beq.n	800a1d6 <netif_set_addr+0x42>
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <netif_set_addr+0x46>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e000      	b.n	800a1dc <netif_set_addr+0x48>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d006      	beq.n	800a1f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a1e4:	f107 0310 	add.w	r3, r7, #16
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	68b9      	ldr	r1, [r7, #8]
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f7ff ff49 	bl	800a084 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a1f2:	69fa      	ldr	r2, [r7, #28]
 800a1f4:	6879      	ldr	r1, [r7, #4]
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff ff8e 	bl	800a118 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a1fc:	69ba      	ldr	r2, [r7, #24]
 800a1fe:	6839      	ldr	r1, [r7, #0]
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f7ff ffa8 	bl	800a156 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d106      	bne.n	800a21a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a20c:	f107 0310 	add.w	r3, r7, #16
 800a210:	461a      	mov	r2, r3
 800a212:	68b9      	ldr	r1, [r7, #8]
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f7ff ff35 	bl	800a084 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a21a:	bf00      	nop
 800a21c:	3720      	adds	r7, #32
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	080197f0 	.word	0x080197f0

0800a228 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a230:	4a04      	ldr	r2, [pc, #16]	; (800a244 <netif_set_default+0x1c>)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a236:	bf00      	nop
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	2000e494 	.word	0x2000e494

0800a248 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d107      	bne.n	800a266 <netif_set_up+0x1e>
 800a256:	4b0f      	ldr	r3, [pc, #60]	; (800a294 <netif_set_up+0x4c>)
 800a258:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a25c:	490e      	ldr	r1, [pc, #56]	; (800a298 <netif_set_up+0x50>)
 800a25e:	480f      	ldr	r0, [pc, #60]	; (800a29c <netif_set_up+0x54>)
 800a260:	f00b faca 	bl	80157f8 <iprintf>
 800a264:	e013      	b.n	800a28e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a26c:	f003 0301 	and.w	r3, r3, #1
 800a270:	2b00      	cmp	r3, #0
 800a272:	d10c      	bne.n	800a28e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a27a:	f043 0301 	orr.w	r3, r3, #1
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a286:	2103      	movs	r1, #3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 f809 	bl	800a2a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	08017004 	.word	0x08017004
 800a298:	0801718c 	.word	0x0801718c
 800a29c:	08017054 	.word	0x08017054

0800a2a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d106      	bne.n	800a2c0 <netif_issue_reports+0x20>
 800a2b2:	4b18      	ldr	r3, [pc, #96]	; (800a314 <netif_issue_reports+0x74>)
 800a2b4:	f240 326d 	movw	r2, #877	; 0x36d
 800a2b8:	4917      	ldr	r1, [pc, #92]	; (800a318 <netif_issue_reports+0x78>)
 800a2ba:	4818      	ldr	r0, [pc, #96]	; (800a31c <netif_issue_reports+0x7c>)
 800a2bc:	f00b fa9c 	bl	80157f8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a2c6:	f003 0304 	and.w	r3, r3, #4
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d01e      	beq.n	800a30c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a2d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d017      	beq.n	800a30c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a2dc:	78fb      	ldrb	r3, [r7, #3]
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d013      	beq.n	800a30e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00e      	beq.n	800a30e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a2f6:	f003 0308 	and.w	r3, r3, #8
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d007      	beq.n	800a30e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3304      	adds	r3, #4
 800a302:	4619      	mov	r1, r3
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f007 ff17 	bl	8012138 <etharp_request>
 800a30a:	e000      	b.n	800a30e <netif_issue_reports+0x6e>
    return;
 800a30c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	08017004 	.word	0x08017004
 800a318:	080171a8 	.word	0x080171a8
 800a31c:	08017054 	.word	0x08017054

0800a320 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d107      	bne.n	800a33e <netif_set_down+0x1e>
 800a32e:	4b12      	ldr	r3, [pc, #72]	; (800a378 <netif_set_down+0x58>)
 800a330:	f240 329b 	movw	r2, #923	; 0x39b
 800a334:	4911      	ldr	r1, [pc, #68]	; (800a37c <netif_set_down+0x5c>)
 800a336:	4812      	ldr	r0, [pc, #72]	; (800a380 <netif_set_down+0x60>)
 800a338:	f00b fa5e 	bl	80157f8 <iprintf>
 800a33c:	e019      	b.n	800a372 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a344:	f003 0301 	and.w	r3, r3, #1
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d012      	beq.n	800a372 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a352:	f023 0301 	bic.w	r3, r3, #1
 800a356:	b2da      	uxtb	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a364:	f003 0308 	and.w	r3, r3, #8
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d002      	beq.n	800a372 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f007 faa1 	bl	80118b4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	08017004 	.word	0x08017004
 800a37c:	080171cc 	.word	0x080171cc
 800a380:	08017054 	.word	0x08017054

0800a384 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d107      	bne.n	800a3a2 <netif_set_link_up+0x1e>
 800a392:	4b13      	ldr	r3, [pc, #76]	; (800a3e0 <netif_set_link_up+0x5c>)
 800a394:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a398:	4912      	ldr	r1, [pc, #72]	; (800a3e4 <netif_set_link_up+0x60>)
 800a39a:	4813      	ldr	r0, [pc, #76]	; (800a3e8 <netif_set_link_up+0x64>)
 800a39c:	f00b fa2c 	bl	80157f8 <iprintf>
 800a3a0:	e01b      	b.n	800a3da <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3a8:	f003 0304 	and.w	r3, r3, #4
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d114      	bne.n	800a3da <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3b6:	f043 0304 	orr.w	r3, r3, #4
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a3c2:	2103      	movs	r1, #3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff ff6b 	bl	800a2a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	69db      	ldr	r3, [r3, #28]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <netif_set_link_up+0x56>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	69db      	ldr	r3, [r3, #28]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	08017004 	.word	0x08017004
 800a3e4:	080171ec 	.word	0x080171ec
 800a3e8:	08017054 	.word	0x08017054

0800a3ec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d107      	bne.n	800a40a <netif_set_link_down+0x1e>
 800a3fa:	4b11      	ldr	r3, [pc, #68]	; (800a440 <netif_set_link_down+0x54>)
 800a3fc:	f240 4206 	movw	r2, #1030	; 0x406
 800a400:	4910      	ldr	r1, [pc, #64]	; (800a444 <netif_set_link_down+0x58>)
 800a402:	4811      	ldr	r0, [pc, #68]	; (800a448 <netif_set_link_down+0x5c>)
 800a404:	f00b f9f8 	bl	80157f8 <iprintf>
 800a408:	e017      	b.n	800a43a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a410:	f003 0304 	and.w	r3, r3, #4
 800a414:	2b00      	cmp	r3, #0
 800a416:	d010      	beq.n	800a43a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a41e:	f023 0304 	bic.w	r3, r3, #4
 800a422:	b2da      	uxtb	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	69db      	ldr	r3, [r3, #28]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d003      	beq.n	800a43a <netif_set_link_down+0x4e>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	08017004 	.word	0x08017004
 800a444:	08017210 	.word	0x08017210
 800a448:	08017054 	.word	0x08017054

0800a44c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	61da      	str	r2, [r3, #28]
  }
}
 800a462:	bf00      	nop
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a46e:	b480      	push	{r7}
 800a470:	b085      	sub	sp, #20
 800a472:	af00      	add	r7, sp, #0
 800a474:	60f8      	str	r0, [r7, #12]
 800a476:	60b9      	str	r1, [r7, #8]
 800a478:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a47a:	f06f 030b 	mvn.w	r3, #11
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
	...

0800a48c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	4603      	mov	r3, r0
 800a494:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a496:	79fb      	ldrb	r3, [r7, #7]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d013      	beq.n	800a4c4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a49c:	4b0d      	ldr	r3, [pc, #52]	; (800a4d4 <netif_get_by_index+0x48>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	60fb      	str	r3, [r7, #12]
 800a4a2:	e00c      	b.n	800a4be <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	79fa      	ldrb	r2, [r7, #7]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d101      	bne.n	800a4b8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	e006      	b.n	800a4c6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	60fb      	str	r3, [r7, #12]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1ef      	bne.n	800a4a4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	2000e490 	.word	0x2000e490

0800a4d8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a4de:	4b0c      	ldr	r3, [pc, #48]	; (800a510 <pbuf_free_ooseq+0x38>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a4e4:	4b0b      	ldr	r3, [pc, #44]	; (800a514 <pbuf_free_ooseq+0x3c>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	607b      	str	r3, [r7, #4]
 800a4ea:	e00a      	b.n	800a502 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d003      	beq.n	800a4fc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f002 fb6d 	bl	800cbd4 <tcp_free_ooseq>
      return;
 800a4fa:	e005      	b.n	800a508 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	607b      	str	r3, [r7, #4]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1f1      	bne.n	800a4ec <pbuf_free_ooseq+0x14>
    }
  }
}
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	2000e499 	.word	0x2000e499
 800a514:	2000e4a8 	.word	0x2000e4a8

0800a518 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a518:	b480      	push	{r7}
 800a51a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a51c:	4b03      	ldr	r3, [pc, #12]	; (800a52c <pbuf_pool_is_empty+0x14>)
 800a51e:	2201      	movs	r2, #1
 800a520:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a522:	bf00      	nop
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr
 800a52c:	2000e499 	.word	0x2000e499

0800a530 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	4611      	mov	r1, r2
 800a53c:	461a      	mov	r2, r3
 800a53e:	460b      	mov	r3, r1
 800a540:	80fb      	strh	r3, [r7, #6]
 800a542:	4613      	mov	r3, r2
 800a544:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	88fa      	ldrh	r2, [r7, #6]
 800a556:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	88ba      	ldrh	r2, [r7, #4]
 800a55c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a55e:	8b3b      	ldrh	r3, [r7, #24]
 800a560:	b2da      	uxtb	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	7f3a      	ldrb	r2, [r7, #28]
 800a56a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2201      	movs	r2, #1
 800a570:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	73da      	strb	r2, [r3, #15]
}
 800a578:	bf00      	nop
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b08c      	sub	sp, #48	; 0x30
 800a588:	af02      	add	r7, sp, #8
 800a58a:	4603      	mov	r3, r0
 800a58c:	71fb      	strb	r3, [r7, #7]
 800a58e:	460b      	mov	r3, r1
 800a590:	80bb      	strh	r3, [r7, #4]
 800a592:	4613      	mov	r3, r2
 800a594:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a596:	79fb      	ldrb	r3, [r7, #7]
 800a598:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a59a:	887b      	ldrh	r3, [r7, #2]
 800a59c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a5a0:	d07f      	beq.n	800a6a2 <pbuf_alloc+0x11e>
 800a5a2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a5a6:	f300 80c8 	bgt.w	800a73a <pbuf_alloc+0x1b6>
 800a5aa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a5ae:	d010      	beq.n	800a5d2 <pbuf_alloc+0x4e>
 800a5b0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a5b4:	f300 80c1 	bgt.w	800a73a <pbuf_alloc+0x1b6>
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d002      	beq.n	800a5c2 <pbuf_alloc+0x3e>
 800a5bc:	2b41      	cmp	r3, #65	; 0x41
 800a5be:	f040 80bc 	bne.w	800a73a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a5c2:	887a      	ldrh	r2, [r7, #2]
 800a5c4:	88bb      	ldrh	r3, [r7, #4]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	f000 f8d1 	bl	800a770 <pbuf_alloc_reference>
 800a5ce:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a5d0:	e0bd      	b.n	800a74e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a5da:	88bb      	ldrh	r3, [r7, #4]
 800a5dc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a5de:	2007      	movs	r0, #7
 800a5e0:	f7ff fbd2 	bl	8009d88 <memp_malloc>
 800a5e4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d109      	bne.n	800a600 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a5ec:	f7ff ff94 	bl	800a518 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d002      	beq.n	800a5fc <pbuf_alloc+0x78>
            pbuf_free(p);
 800a5f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5f8:	f000 faa8 	bl	800ab4c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	e0a7      	b.n	800a750 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a600:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a602:	3303      	adds	r3, #3
 800a604:	b29b      	uxth	r3, r3
 800a606:	f023 0303 	bic.w	r3, r3, #3
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a610:	b29b      	uxth	r3, r3
 800a612:	8b7a      	ldrh	r2, [r7, #26]
 800a614:	4293      	cmp	r3, r2
 800a616:	bf28      	it	cs
 800a618:	4613      	movcs	r3, r2
 800a61a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a61c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a61e:	3310      	adds	r3, #16
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	4413      	add	r3, r2
 800a624:	3303      	adds	r3, #3
 800a626:	f023 0303 	bic.w	r3, r3, #3
 800a62a:	4618      	mov	r0, r3
 800a62c:	89f9      	ldrh	r1, [r7, #14]
 800a62e:	8b7a      	ldrh	r2, [r7, #26]
 800a630:	2300      	movs	r3, #0
 800a632:	9301      	str	r3, [sp, #4]
 800a634:	887b      	ldrh	r3, [r7, #2]
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	460b      	mov	r3, r1
 800a63a:	4601      	mov	r1, r0
 800a63c:	6938      	ldr	r0, [r7, #16]
 800a63e:	f7ff ff77 	bl	800a530 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	f003 0303 	and.w	r3, r3, #3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d006      	beq.n	800a65c <pbuf_alloc+0xd8>
 800a64e:	4b42      	ldr	r3, [pc, #264]	; (800a758 <pbuf_alloc+0x1d4>)
 800a650:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a654:	4941      	ldr	r1, [pc, #260]	; (800a75c <pbuf_alloc+0x1d8>)
 800a656:	4842      	ldr	r0, [pc, #264]	; (800a760 <pbuf_alloc+0x1dc>)
 800a658:	f00b f8ce 	bl	80157f8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a65c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a65e:	3303      	adds	r3, #3
 800a660:	f023 0303 	bic.w	r3, r3, #3
 800a664:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a668:	d106      	bne.n	800a678 <pbuf_alloc+0xf4>
 800a66a:	4b3b      	ldr	r3, [pc, #236]	; (800a758 <pbuf_alloc+0x1d4>)
 800a66c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a670:	493c      	ldr	r1, [pc, #240]	; (800a764 <pbuf_alloc+0x1e0>)
 800a672:	483b      	ldr	r0, [pc, #236]	; (800a760 <pbuf_alloc+0x1dc>)
 800a674:	f00b f8c0 	bl	80157f8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d102      	bne.n	800a684 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	627b      	str	r3, [r7, #36]	; 0x24
 800a682:	e002      	b.n	800a68a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a68e:	8b7a      	ldrh	r2, [r7, #26]
 800a690:	89fb      	ldrh	r3, [r7, #14]
 800a692:	1ad3      	subs	r3, r2, r3
 800a694:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a69a:	8b7b      	ldrh	r3, [r7, #26]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d19e      	bne.n	800a5de <pbuf_alloc+0x5a>
      break;
 800a6a0:	e055      	b.n	800a74e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a6a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6a4:	3303      	adds	r3, #3
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	f023 0303 	bic.w	r3, r3, #3
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	88bb      	ldrh	r3, [r7, #4]
 800a6b0:	3303      	adds	r3, #3
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	f023 0303 	bic.w	r3, r3, #3
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	4413      	add	r3, r2
 800a6bc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a6be:	8b3b      	ldrh	r3, [r7, #24]
 800a6c0:	3310      	adds	r3, #16
 800a6c2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a6c4:	8b3a      	ldrh	r2, [r7, #24]
 800a6c6:	88bb      	ldrh	r3, [r7, #4]
 800a6c8:	3303      	adds	r3, #3
 800a6ca:	f023 0303 	bic.w	r3, r3, #3
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d306      	bcc.n	800a6e0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a6d2:	8afa      	ldrh	r2, [r7, #22]
 800a6d4:	88bb      	ldrh	r3, [r7, #4]
 800a6d6:	3303      	adds	r3, #3
 800a6d8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d201      	bcs.n	800a6e4 <pbuf_alloc+0x160>
        return NULL;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	e035      	b.n	800a750 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a6e4:	8afb      	ldrh	r3, [r7, #22]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7ff f9be 	bl	8009a68 <mem_malloc>
 800a6ec:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d101      	bne.n	800a6f8 <pbuf_alloc+0x174>
        return NULL;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	e02b      	b.n	800a750 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a6f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6fa:	3310      	adds	r3, #16
 800a6fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6fe:	4413      	add	r3, r2
 800a700:	3303      	adds	r3, #3
 800a702:	f023 0303 	bic.w	r3, r3, #3
 800a706:	4618      	mov	r0, r3
 800a708:	88b9      	ldrh	r1, [r7, #4]
 800a70a:	88ba      	ldrh	r2, [r7, #4]
 800a70c:	2300      	movs	r3, #0
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	887b      	ldrh	r3, [r7, #2]
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	460b      	mov	r3, r1
 800a716:	4601      	mov	r1, r0
 800a718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a71a:	f7ff ff09 	bl	800a530 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	f003 0303 	and.w	r3, r3, #3
 800a726:	2b00      	cmp	r3, #0
 800a728:	d010      	beq.n	800a74c <pbuf_alloc+0x1c8>
 800a72a:	4b0b      	ldr	r3, [pc, #44]	; (800a758 <pbuf_alloc+0x1d4>)
 800a72c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a730:	490d      	ldr	r1, [pc, #52]	; (800a768 <pbuf_alloc+0x1e4>)
 800a732:	480b      	ldr	r0, [pc, #44]	; (800a760 <pbuf_alloc+0x1dc>)
 800a734:	f00b f860 	bl	80157f8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a738:	e008      	b.n	800a74c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a73a:	4b07      	ldr	r3, [pc, #28]	; (800a758 <pbuf_alloc+0x1d4>)
 800a73c:	f240 1227 	movw	r2, #295	; 0x127
 800a740:	490a      	ldr	r1, [pc, #40]	; (800a76c <pbuf_alloc+0x1e8>)
 800a742:	4807      	ldr	r0, [pc, #28]	; (800a760 <pbuf_alloc+0x1dc>)
 800a744:	f00b f858 	bl	80157f8 <iprintf>
      return NULL;
 800a748:	2300      	movs	r3, #0
 800a74a:	e001      	b.n	800a750 <pbuf_alloc+0x1cc>
      break;
 800a74c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a750:	4618      	mov	r0, r3
 800a752:	3728      	adds	r7, #40	; 0x28
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	08017234 	.word	0x08017234
 800a75c:	08017264 	.word	0x08017264
 800a760:	08017294 	.word	0x08017294
 800a764:	080172bc 	.word	0x080172bc
 800a768:	080172f0 	.word	0x080172f0
 800a76c:	0801731c 	.word	0x0801731c

0800a770 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af02      	add	r7, sp, #8
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	460b      	mov	r3, r1
 800a77a:	807b      	strh	r3, [r7, #2]
 800a77c:	4613      	mov	r3, r2
 800a77e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a780:	883b      	ldrh	r3, [r7, #0]
 800a782:	2b41      	cmp	r3, #65	; 0x41
 800a784:	d009      	beq.n	800a79a <pbuf_alloc_reference+0x2a>
 800a786:	883b      	ldrh	r3, [r7, #0]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d006      	beq.n	800a79a <pbuf_alloc_reference+0x2a>
 800a78c:	4b0f      	ldr	r3, [pc, #60]	; (800a7cc <pbuf_alloc_reference+0x5c>)
 800a78e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a792:	490f      	ldr	r1, [pc, #60]	; (800a7d0 <pbuf_alloc_reference+0x60>)
 800a794:	480f      	ldr	r0, [pc, #60]	; (800a7d4 <pbuf_alloc_reference+0x64>)
 800a796:	f00b f82f 	bl	80157f8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a79a:	2006      	movs	r0, #6
 800a79c:	f7ff faf4 	bl	8009d88 <memp_malloc>
 800a7a0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d101      	bne.n	800a7ac <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	e00b      	b.n	800a7c4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a7ac:	8879      	ldrh	r1, [r7, #2]
 800a7ae:	887a      	ldrh	r2, [r7, #2]
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	9301      	str	r3, [sp, #4]
 800a7b4:	883b      	ldrh	r3, [r7, #0]
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	6879      	ldr	r1, [r7, #4]
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f7ff feb7 	bl	800a530 <pbuf_init_alloced_pbuf>
  return p;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	08017234 	.word	0x08017234
 800a7d0:	08017338 	.word	0x08017338
 800a7d4:	08017294 	.word	0x08017294

0800a7d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b088      	sub	sp, #32
 800a7dc:	af02      	add	r7, sp, #8
 800a7de:	607b      	str	r3, [r7, #4]
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	73fb      	strb	r3, [r7, #15]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	81bb      	strh	r3, [r7, #12]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a7ec:	7bfb      	ldrb	r3, [r7, #15]
 800a7ee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a7f0:	8a7b      	ldrh	r3, [r7, #18]
 800a7f2:	3303      	adds	r3, #3
 800a7f4:	f023 0203 	bic.w	r2, r3, #3
 800a7f8:	89bb      	ldrh	r3, [r7, #12]
 800a7fa:	441a      	add	r2, r3
 800a7fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d901      	bls.n	800a806 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a802:	2300      	movs	r3, #0
 800a804:	e018      	b.n	800a838 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a806:	6a3b      	ldr	r3, [r7, #32]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d007      	beq.n	800a81c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a80c:	8a7b      	ldrh	r3, [r7, #18]
 800a80e:	3303      	adds	r3, #3
 800a810:	f023 0303 	bic.w	r3, r3, #3
 800a814:	6a3a      	ldr	r2, [r7, #32]
 800a816:	4413      	add	r3, r2
 800a818:	617b      	str	r3, [r7, #20]
 800a81a:	e001      	b.n	800a820 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a81c:	2300      	movs	r3, #0
 800a81e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	89b9      	ldrh	r1, [r7, #12]
 800a824:	89ba      	ldrh	r2, [r7, #12]
 800a826:	2302      	movs	r3, #2
 800a828:	9301      	str	r3, [sp, #4]
 800a82a:	897b      	ldrh	r3, [r7, #10]
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	460b      	mov	r3, r1
 800a830:	6979      	ldr	r1, [r7, #20]
 800a832:	f7ff fe7d 	bl	800a530 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a836:	687b      	ldr	r3, [r7, #4]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3718      	adds	r7, #24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	460b      	mov	r3, r1
 800a84a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d106      	bne.n	800a860 <pbuf_realloc+0x20>
 800a852:	4b3a      	ldr	r3, [pc, #232]	; (800a93c <pbuf_realloc+0xfc>)
 800a854:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a858:	4939      	ldr	r1, [pc, #228]	; (800a940 <pbuf_realloc+0x100>)
 800a85a:	483a      	ldr	r0, [pc, #232]	; (800a944 <pbuf_realloc+0x104>)
 800a85c:	f00a ffcc 	bl	80157f8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	891b      	ldrh	r3, [r3, #8]
 800a864:	887a      	ldrh	r2, [r7, #2]
 800a866:	429a      	cmp	r2, r3
 800a868:	d263      	bcs.n	800a932 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	891a      	ldrh	r2, [r3, #8]
 800a86e:	887b      	ldrh	r3, [r7, #2]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a874:	887b      	ldrh	r3, [r7, #2]
 800a876:	817b      	strh	r3, [r7, #10]
  q = p;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a87c:	e018      	b.n	800a8b0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	895b      	ldrh	r3, [r3, #10]
 800a882:	897a      	ldrh	r2, [r7, #10]
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	891a      	ldrh	r2, [r3, #8]
 800a88c:	893b      	ldrh	r3, [r7, #8]
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	b29a      	uxth	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d106      	bne.n	800a8b0 <pbuf_realloc+0x70>
 800a8a2:	4b26      	ldr	r3, [pc, #152]	; (800a93c <pbuf_realloc+0xfc>)
 800a8a4:	f240 12af 	movw	r2, #431	; 0x1af
 800a8a8:	4927      	ldr	r1, [pc, #156]	; (800a948 <pbuf_realloc+0x108>)
 800a8aa:	4826      	ldr	r0, [pc, #152]	; (800a944 <pbuf_realloc+0x104>)
 800a8ac:	f00a ffa4 	bl	80157f8 <iprintf>
  while (rem_len > q->len) {
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	895b      	ldrh	r3, [r3, #10]
 800a8b4:	897a      	ldrh	r2, [r7, #10]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d8e1      	bhi.n	800a87e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	7b1b      	ldrb	r3, [r3, #12]
 800a8be:	f003 030f 	and.w	r3, r3, #15
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d121      	bne.n	800a90a <pbuf_realloc+0xca>
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	895b      	ldrh	r3, [r3, #10]
 800a8ca:	897a      	ldrh	r2, [r7, #10]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d01c      	beq.n	800a90a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	7b5b      	ldrb	r3, [r3, #13]
 800a8d4:	f003 0302 	and.w	r3, r3, #2
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d116      	bne.n	800a90a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	685a      	ldr	r2, [r3, #4]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	897b      	ldrh	r3, [r7, #10]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f7fe ffbe 	bl	8009870 <mem_trim>
 800a8f4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d106      	bne.n	800a90a <pbuf_realloc+0xca>
 800a8fc:	4b0f      	ldr	r3, [pc, #60]	; (800a93c <pbuf_realloc+0xfc>)
 800a8fe:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a902:	4912      	ldr	r1, [pc, #72]	; (800a94c <pbuf_realloc+0x10c>)
 800a904:	480f      	ldr	r0, [pc, #60]	; (800a944 <pbuf_realloc+0x104>)
 800a906:	f00a ff77 	bl	80157f8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	897a      	ldrh	r2, [r7, #10]
 800a90e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	895a      	ldrh	r2, [r3, #10]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d004      	beq.n	800a92a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4618      	mov	r0, r3
 800a926:	f000 f911 	bl	800ab4c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	601a      	str	r2, [r3, #0]
 800a930:	e000      	b.n	800a934 <pbuf_realloc+0xf4>
    return;
 800a932:	bf00      	nop

}
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	08017234 	.word	0x08017234
 800a940:	0801734c 	.word	0x0801734c
 800a944:	08017294 	.word	0x08017294
 800a948:	08017364 	.word	0x08017364
 800a94c:	0801737c 	.word	0x0801737c

0800a950 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	4613      	mov	r3, r2
 800a95c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d106      	bne.n	800a972 <pbuf_add_header_impl+0x22>
 800a964:	4b2b      	ldr	r3, [pc, #172]	; (800aa14 <pbuf_add_header_impl+0xc4>)
 800a966:	f240 12df 	movw	r2, #479	; 0x1df
 800a96a:	492b      	ldr	r1, [pc, #172]	; (800aa18 <pbuf_add_header_impl+0xc8>)
 800a96c:	482b      	ldr	r0, [pc, #172]	; (800aa1c <pbuf_add_header_impl+0xcc>)
 800a96e:	f00a ff43 	bl	80157f8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d003      	beq.n	800a980 <pbuf_add_header_impl+0x30>
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a97e:	d301      	bcc.n	800a984 <pbuf_add_header_impl+0x34>
    return 1;
 800a980:	2301      	movs	r3, #1
 800a982:	e043      	b.n	800aa0c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d101      	bne.n	800a98e <pbuf_add_header_impl+0x3e>
    return 0;
 800a98a:	2300      	movs	r3, #0
 800a98c:	e03e      	b.n	800aa0c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	891a      	ldrh	r2, [r3, #8]
 800a996:	8a7b      	ldrh	r3, [r7, #18]
 800a998:	4413      	add	r3, r2
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	8a7a      	ldrh	r2, [r7, #18]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d901      	bls.n	800a9a6 <pbuf_add_header_impl+0x56>
    return 1;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e032      	b.n	800aa0c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	7b1b      	ldrb	r3, [r3, #12]
 800a9aa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a9ac:	8a3b      	ldrh	r3, [r7, #16]
 800a9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00c      	beq.n	800a9d0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	685a      	ldr	r2, [r3, #4]
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	425b      	negs	r3, r3
 800a9be:	4413      	add	r3, r2
 800a9c0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	3310      	adds	r3, #16
 800a9c6:	697a      	ldr	r2, [r7, #20]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d20d      	bcs.n	800a9e8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e01d      	b.n	800aa0c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a9d0:	79fb      	ldrb	r3, [r7, #7]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d006      	beq.n	800a9e4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	685a      	ldr	r2, [r3, #4]
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	425b      	negs	r3, r3
 800a9de:	4413      	add	r3, r2
 800a9e0:	617b      	str	r3, [r7, #20]
 800a9e2:	e001      	b.n	800a9e8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e011      	b.n	800aa0c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	895a      	ldrh	r2, [r3, #10]
 800a9f2:	8a7b      	ldrh	r3, [r7, #18]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	b29a      	uxth	r2, r3
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	891a      	ldrh	r2, [r3, #8]
 800aa00:	8a7b      	ldrh	r3, [r7, #18]
 800aa02:	4413      	add	r3, r2
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	811a      	strh	r2, [r3, #8]


  return 0;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3718      	adds	r7, #24
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	08017234 	.word	0x08017234
 800aa18:	08017398 	.word	0x08017398
 800aa1c:	08017294 	.word	0x08017294

0800aa20 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7ff ff8e 	bl	800a950 <pbuf_add_header_impl>
 800aa34:	4603      	mov	r3, r0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
	...

0800aa40 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d106      	bne.n	800aa5e <pbuf_remove_header+0x1e>
 800aa50:	4b20      	ldr	r3, [pc, #128]	; (800aad4 <pbuf_remove_header+0x94>)
 800aa52:	f240 224b 	movw	r2, #587	; 0x24b
 800aa56:	4920      	ldr	r1, [pc, #128]	; (800aad8 <pbuf_remove_header+0x98>)
 800aa58:	4820      	ldr	r0, [pc, #128]	; (800aadc <pbuf_remove_header+0x9c>)
 800aa5a:	f00a fecd 	bl	80157f8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d003      	beq.n	800aa6c <pbuf_remove_header+0x2c>
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa6a:	d301      	bcc.n	800aa70 <pbuf_remove_header+0x30>
    return 1;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e02c      	b.n	800aaca <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <pbuf_remove_header+0x3a>
    return 0;
 800aa76:	2300      	movs	r3, #0
 800aa78:	e027      	b.n	800aaca <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	895b      	ldrh	r3, [r3, #10]
 800aa82:	89fa      	ldrh	r2, [r7, #14]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d908      	bls.n	800aa9a <pbuf_remove_header+0x5a>
 800aa88:	4b12      	ldr	r3, [pc, #72]	; (800aad4 <pbuf_remove_header+0x94>)
 800aa8a:	f240 2255 	movw	r2, #597	; 0x255
 800aa8e:	4914      	ldr	r1, [pc, #80]	; (800aae0 <pbuf_remove_header+0xa0>)
 800aa90:	4812      	ldr	r0, [pc, #72]	; (800aadc <pbuf_remove_header+0x9c>)
 800aa92:	f00a feb1 	bl	80157f8 <iprintf>
 800aa96:	2301      	movs	r3, #1
 800aa98:	e017      	b.n	800aaca <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685a      	ldr	r2, [r3, #4]
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	441a      	add	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	895a      	ldrh	r2, [r3, #10]
 800aab0:	89fb      	ldrh	r3, [r7, #14]
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	891a      	ldrh	r2, [r3, #8]
 800aabe:	89fb      	ldrh	r3, [r7, #14]
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	08017234 	.word	0x08017234
 800aad8:	08017398 	.word	0x08017398
 800aadc:	08017294 	.word	0x08017294
 800aae0:	080173a4 	.word	0x080173a4

0800aae4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	460b      	mov	r3, r1
 800aaee:	807b      	strh	r3, [r7, #2]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800aaf4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	da08      	bge.n	800ab0e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800aafc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab00:	425b      	negs	r3, r3
 800ab02:	4619      	mov	r1, r3
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff ff9b 	bl	800aa40 <pbuf_remove_header>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	e007      	b.n	800ab1e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ab0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab12:	787a      	ldrb	r2, [r7, #1]
 800ab14:	4619      	mov	r1, r3
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7ff ff1a 	bl	800a950 <pbuf_add_header_impl>
 800ab1c:	4603      	mov	r3, r0
  }
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b082      	sub	sp, #8
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
 800ab2e:	460b      	mov	r3, r1
 800ab30:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ab32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab36:	2201      	movs	r2, #1
 800ab38:	4619      	mov	r1, r3
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f7ff ffd2 	bl	800aae4 <pbuf_header_impl>
 800ab40:	4603      	mov	r3, r0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
	...

0800ab4c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d10b      	bne.n	800ab72 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d106      	bne.n	800ab6e <pbuf_free+0x22>
 800ab60:	4b38      	ldr	r3, [pc, #224]	; (800ac44 <pbuf_free+0xf8>)
 800ab62:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ab66:	4938      	ldr	r1, [pc, #224]	; (800ac48 <pbuf_free+0xfc>)
 800ab68:	4838      	ldr	r0, [pc, #224]	; (800ac4c <pbuf_free+0x100>)
 800ab6a:	f00a fe45 	bl	80157f8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	e063      	b.n	800ac3a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ab72:	2300      	movs	r3, #0
 800ab74:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ab76:	e05c      	b.n	800ac32 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	7b9b      	ldrb	r3, [r3, #14]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d106      	bne.n	800ab8e <pbuf_free+0x42>
 800ab80:	4b30      	ldr	r3, [pc, #192]	; (800ac44 <pbuf_free+0xf8>)
 800ab82:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ab86:	4932      	ldr	r1, [pc, #200]	; (800ac50 <pbuf_free+0x104>)
 800ab88:	4830      	ldr	r0, [pc, #192]	; (800ac4c <pbuf_free+0x100>)
 800ab8a:	f00a fe35 	bl	80157f8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	7b9b      	ldrb	r3, [r3, #14]
 800ab92:	3b01      	subs	r3, #1
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	739a      	strb	r2, [r3, #14]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	7b9b      	ldrb	r3, [r3, #14]
 800ab9e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800aba0:	7dbb      	ldrb	r3, [r7, #22]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d143      	bne.n	800ac2e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	7b1b      	ldrb	r3, [r3, #12]
 800abb0:	f003 030f 	and.w	r3, r3, #15
 800abb4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	7b5b      	ldrb	r3, [r3, #13]
 800abba:	f003 0302 	and.w	r3, r3, #2
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d011      	beq.n	800abe6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d106      	bne.n	800abdc <pbuf_free+0x90>
 800abce:	4b1d      	ldr	r3, [pc, #116]	; (800ac44 <pbuf_free+0xf8>)
 800abd0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800abd4:	491f      	ldr	r1, [pc, #124]	; (800ac54 <pbuf_free+0x108>)
 800abd6:	481d      	ldr	r0, [pc, #116]	; (800ac4c <pbuf_free+0x100>)
 800abd8:	f00a fe0e 	bl	80157f8 <iprintf>
        pc->custom_free_function(p);
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	4798      	blx	r3
 800abe4:	e01d      	b.n	800ac22 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800abe6:	7bfb      	ldrb	r3, [r7, #15]
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d104      	bne.n	800abf6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800abec:	6879      	ldr	r1, [r7, #4]
 800abee:	2007      	movs	r0, #7
 800abf0:	f7ff f93a 	bl	8009e68 <memp_free>
 800abf4:	e015      	b.n	800ac22 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d104      	bne.n	800ac06 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800abfc:	6879      	ldr	r1, [r7, #4]
 800abfe:	2006      	movs	r0, #6
 800ac00:	f7ff f932 	bl	8009e68 <memp_free>
 800ac04:	e00d      	b.n	800ac22 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ac06:	7bfb      	ldrb	r3, [r7, #15]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d103      	bne.n	800ac14 <pbuf_free+0xc8>
          mem_free(p);
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7fe fdc5 	bl	800979c <mem_free>
 800ac12:	e006      	b.n	800ac22 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ac14:	4b0b      	ldr	r3, [pc, #44]	; (800ac44 <pbuf_free+0xf8>)
 800ac16:	f240 320f 	movw	r2, #783	; 0x30f
 800ac1a:	490f      	ldr	r1, [pc, #60]	; (800ac58 <pbuf_free+0x10c>)
 800ac1c:	480b      	ldr	r0, [pc, #44]	; (800ac4c <pbuf_free+0x100>)
 800ac1e:	f00a fdeb 	bl	80157f8 <iprintf>
        }
      }
      count++;
 800ac22:	7dfb      	ldrb	r3, [r7, #23]
 800ac24:	3301      	adds	r3, #1
 800ac26:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	607b      	str	r3, [r7, #4]
 800ac2c:	e001      	b.n	800ac32 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d19f      	bne.n	800ab78 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ac38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3718      	adds	r7, #24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	08017234 	.word	0x08017234
 800ac48:	08017398 	.word	0x08017398
 800ac4c:	08017294 	.word	0x08017294
 800ac50:	080173c4 	.word	0x080173c4
 800ac54:	080173dc 	.word	0x080173dc
 800ac58:	08017400 	.word	0x08017400

0800ac5c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ac68:	e005      	b.n	800ac76 <pbuf_clen+0x1a>
    ++len;
 800ac6a:	89fb      	ldrh	r3, [r7, #14]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1f6      	bne.n	800ac6a <pbuf_clen+0xe>
  }
  return len;
 800ac7c:	89fb      	ldrh	r3, [r7, #14]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
	...

0800ac8c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d010      	beq.n	800acbc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	7b9b      	ldrb	r3, [r3, #14]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	b2da      	uxtb	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	7b9b      	ldrb	r3, [r3, #14]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d106      	bne.n	800acbc <pbuf_ref+0x30>
 800acae:	4b05      	ldr	r3, [pc, #20]	; (800acc4 <pbuf_ref+0x38>)
 800acb0:	f240 3242 	movw	r2, #834	; 0x342
 800acb4:	4904      	ldr	r1, [pc, #16]	; (800acc8 <pbuf_ref+0x3c>)
 800acb6:	4805      	ldr	r0, [pc, #20]	; (800accc <pbuf_ref+0x40>)
 800acb8:	f00a fd9e 	bl	80157f8 <iprintf>
  }
}
 800acbc:	bf00      	nop
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	08017234 	.word	0x08017234
 800acc8:	08017414 	.word	0x08017414
 800accc:	08017294 	.word	0x08017294

0800acd0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <pbuf_cat+0x16>
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d107      	bne.n	800acf6 <pbuf_cat+0x26>
 800ace6:	4b20      	ldr	r3, [pc, #128]	; (800ad68 <pbuf_cat+0x98>)
 800ace8:	f240 3259 	movw	r2, #857	; 0x359
 800acec:	491f      	ldr	r1, [pc, #124]	; (800ad6c <pbuf_cat+0x9c>)
 800acee:	4820      	ldr	r0, [pc, #128]	; (800ad70 <pbuf_cat+0xa0>)
 800acf0:	f00a fd82 	bl	80157f8 <iprintf>
 800acf4:	e034      	b.n	800ad60 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	60fb      	str	r3, [r7, #12]
 800acfa:	e00a      	b.n	800ad12 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	891a      	ldrh	r2, [r3, #8]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	891b      	ldrh	r3, [r3, #8]
 800ad04:	4413      	add	r3, r2
 800ad06:	b29a      	uxth	r2, r3
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	60fb      	str	r3, [r7, #12]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1f0      	bne.n	800acfc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	891a      	ldrh	r2, [r3, #8]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	895b      	ldrh	r3, [r3, #10]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d006      	beq.n	800ad34 <pbuf_cat+0x64>
 800ad26:	4b10      	ldr	r3, [pc, #64]	; (800ad68 <pbuf_cat+0x98>)
 800ad28:	f240 3262 	movw	r2, #866	; 0x362
 800ad2c:	4911      	ldr	r1, [pc, #68]	; (800ad74 <pbuf_cat+0xa4>)
 800ad2e:	4810      	ldr	r0, [pc, #64]	; (800ad70 <pbuf_cat+0xa0>)
 800ad30:	f00a fd62 	bl	80157f8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d006      	beq.n	800ad4a <pbuf_cat+0x7a>
 800ad3c:	4b0a      	ldr	r3, [pc, #40]	; (800ad68 <pbuf_cat+0x98>)
 800ad3e:	f240 3263 	movw	r2, #867	; 0x363
 800ad42:	490d      	ldr	r1, [pc, #52]	; (800ad78 <pbuf_cat+0xa8>)
 800ad44:	480a      	ldr	r0, [pc, #40]	; (800ad70 <pbuf_cat+0xa0>)
 800ad46:	f00a fd57 	bl	80157f8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	891a      	ldrh	r2, [r3, #8]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	891b      	ldrh	r3, [r3, #8]
 800ad52:	4413      	add	r3, r2
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	683a      	ldr	r2, [r7, #0]
 800ad5e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	08017234 	.word	0x08017234
 800ad6c:	08017428 	.word	0x08017428
 800ad70:	08017294 	.word	0x08017294
 800ad74:	08017460 	.word	0x08017460
 800ad78:	08017490 	.word	0x08017490

0800ad7c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ad86:	2300      	movs	r3, #0
 800ad88:	617b      	str	r3, [r7, #20]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d008      	beq.n	800ada6 <pbuf_copy+0x2a>
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d005      	beq.n	800ada6 <pbuf_copy+0x2a>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	891a      	ldrh	r2, [r3, #8]
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	891b      	ldrh	r3, [r3, #8]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d209      	bcs.n	800adba <pbuf_copy+0x3e>
 800ada6:	4b57      	ldr	r3, [pc, #348]	; (800af04 <pbuf_copy+0x188>)
 800ada8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800adac:	4956      	ldr	r1, [pc, #344]	; (800af08 <pbuf_copy+0x18c>)
 800adae:	4857      	ldr	r0, [pc, #348]	; (800af0c <pbuf_copy+0x190>)
 800adb0:	f00a fd22 	bl	80157f8 <iprintf>
 800adb4:	f06f 030f 	mvn.w	r3, #15
 800adb8:	e09f      	b.n	800aefa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	895b      	ldrh	r3, [r3, #10]
 800adbe:	461a      	mov	r2, r3
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	1ad2      	subs	r2, r2, r3
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	895b      	ldrh	r3, [r3, #10]
 800adc8:	4619      	mov	r1, r3
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	1acb      	subs	r3, r1, r3
 800adce:	429a      	cmp	r2, r3
 800add0:	d306      	bcc.n	800ade0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	895b      	ldrh	r3, [r3, #10]
 800add6:	461a      	mov	r2, r3
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	e005      	b.n	800adec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	895b      	ldrh	r3, [r3, #10]
 800ade4:	461a      	mov	r2, r3
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685a      	ldr	r2, [r3, #4]
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	18d0      	adds	r0, r2, r3
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	685a      	ldr	r2, [r3, #4]
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	4413      	add	r3, r2
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	4619      	mov	r1, r3
 800ae00:	f00a fe2d 	bl	8015a5e <memcpy>
    offset_to += len;
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	4413      	add	r3, r2
 800ae0a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ae0c:	693a      	ldr	r2, [r7, #16]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	4413      	add	r3, r2
 800ae12:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	895b      	ldrh	r3, [r3, #10]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d906      	bls.n	800ae2e <pbuf_copy+0xb2>
 800ae20:	4b38      	ldr	r3, [pc, #224]	; (800af04 <pbuf_copy+0x188>)
 800ae22:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ae26:	493a      	ldr	r1, [pc, #232]	; (800af10 <pbuf_copy+0x194>)
 800ae28:	4838      	ldr	r0, [pc, #224]	; (800af0c <pbuf_copy+0x190>)
 800ae2a:	f00a fce5 	bl	80157f8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	895b      	ldrh	r3, [r3, #10]
 800ae32:	461a      	mov	r2, r3
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d906      	bls.n	800ae48 <pbuf_copy+0xcc>
 800ae3a:	4b32      	ldr	r3, [pc, #200]	; (800af04 <pbuf_copy+0x188>)
 800ae3c:	f240 32da 	movw	r2, #986	; 0x3da
 800ae40:	4934      	ldr	r1, [pc, #208]	; (800af14 <pbuf_copy+0x198>)
 800ae42:	4832      	ldr	r0, [pc, #200]	; (800af0c <pbuf_copy+0x190>)
 800ae44:	f00a fcd8 	bl	80157f8 <iprintf>
    if (offset_from >= p_from->len) {
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	895b      	ldrh	r3, [r3, #10]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d304      	bcc.n	800ae5e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	895b      	ldrh	r3, [r3, #10]
 800ae62:	461a      	mov	r2, r3
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d114      	bne.n	800ae94 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10c      	bne.n	800ae94 <pbuf_copy+0x118>
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d009      	beq.n	800ae94 <pbuf_copy+0x118>
 800ae80:	4b20      	ldr	r3, [pc, #128]	; (800af04 <pbuf_copy+0x188>)
 800ae82:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ae86:	4924      	ldr	r1, [pc, #144]	; (800af18 <pbuf_copy+0x19c>)
 800ae88:	4820      	ldr	r0, [pc, #128]	; (800af0c <pbuf_copy+0x190>)
 800ae8a:	f00a fcb5 	bl	80157f8 <iprintf>
 800ae8e:	f06f 030f 	mvn.w	r3, #15
 800ae92:	e032      	b.n	800aefa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d013      	beq.n	800aec2 <pbuf_copy+0x146>
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	895a      	ldrh	r2, [r3, #10]
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	891b      	ldrh	r3, [r3, #8]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d10d      	bne.n	800aec2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d009      	beq.n	800aec2 <pbuf_copy+0x146>
 800aeae:	4b15      	ldr	r3, [pc, #84]	; (800af04 <pbuf_copy+0x188>)
 800aeb0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800aeb4:	4919      	ldr	r1, [pc, #100]	; (800af1c <pbuf_copy+0x1a0>)
 800aeb6:	4815      	ldr	r0, [pc, #84]	; (800af0c <pbuf_copy+0x190>)
 800aeb8:	f00a fc9e 	bl	80157f8 <iprintf>
 800aebc:	f06f 0305 	mvn.w	r3, #5
 800aec0:	e01b      	b.n	800aefa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d013      	beq.n	800aef0 <pbuf_copy+0x174>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	895a      	ldrh	r2, [r3, #10]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	891b      	ldrh	r3, [r3, #8]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d10d      	bne.n	800aef0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d009      	beq.n	800aef0 <pbuf_copy+0x174>
 800aedc:	4b09      	ldr	r3, [pc, #36]	; (800af04 <pbuf_copy+0x188>)
 800aede:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800aee2:	490e      	ldr	r1, [pc, #56]	; (800af1c <pbuf_copy+0x1a0>)
 800aee4:	4809      	ldr	r0, [pc, #36]	; (800af0c <pbuf_copy+0x190>)
 800aee6:	f00a fc87 	bl	80157f8 <iprintf>
 800aeea:	f06f 0305 	mvn.w	r3, #5
 800aeee:	e004      	b.n	800aefa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f47f af61 	bne.w	800adba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3718      	adds	r7, #24
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	08017234 	.word	0x08017234
 800af08:	080174dc 	.word	0x080174dc
 800af0c:	08017294 	.word	0x08017294
 800af10:	0801750c 	.word	0x0801750c
 800af14:	08017524 	.word	0x08017524
 800af18:	08017540 	.word	0x08017540
 800af1c:	08017550 	.word	0x08017550

0800af20 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b088      	sub	sp, #32
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	4611      	mov	r1, r2
 800af2c:	461a      	mov	r2, r3
 800af2e:	460b      	mov	r3, r1
 800af30:	80fb      	strh	r3, [r7, #6]
 800af32:	4613      	mov	r3, r2
 800af34:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800af3a:	2300      	movs	r3, #0
 800af3c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d108      	bne.n	800af56 <pbuf_copy_partial+0x36>
 800af44:	4b2b      	ldr	r3, [pc, #172]	; (800aff4 <pbuf_copy_partial+0xd4>)
 800af46:	f240 420a 	movw	r2, #1034	; 0x40a
 800af4a:	492b      	ldr	r1, [pc, #172]	; (800aff8 <pbuf_copy_partial+0xd8>)
 800af4c:	482b      	ldr	r0, [pc, #172]	; (800affc <pbuf_copy_partial+0xdc>)
 800af4e:	f00a fc53 	bl	80157f8 <iprintf>
 800af52:	2300      	movs	r3, #0
 800af54:	e04a      	b.n	800afec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d108      	bne.n	800af6e <pbuf_copy_partial+0x4e>
 800af5c:	4b25      	ldr	r3, [pc, #148]	; (800aff4 <pbuf_copy_partial+0xd4>)
 800af5e:	f240 420b 	movw	r2, #1035	; 0x40b
 800af62:	4927      	ldr	r1, [pc, #156]	; (800b000 <pbuf_copy_partial+0xe0>)
 800af64:	4825      	ldr	r0, [pc, #148]	; (800affc <pbuf_copy_partial+0xdc>)
 800af66:	f00a fc47 	bl	80157f8 <iprintf>
 800af6a:	2300      	movs	r3, #0
 800af6c:	e03e      	b.n	800afec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	61fb      	str	r3, [r7, #28]
 800af72:	e034      	b.n	800afde <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800af74:	88bb      	ldrh	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00a      	beq.n	800af90 <pbuf_copy_partial+0x70>
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	895b      	ldrh	r3, [r3, #10]
 800af7e:	88ba      	ldrh	r2, [r7, #4]
 800af80:	429a      	cmp	r2, r3
 800af82:	d305      	bcc.n	800af90 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	895b      	ldrh	r3, [r3, #10]
 800af88:	88ba      	ldrh	r2, [r7, #4]
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	80bb      	strh	r3, [r7, #4]
 800af8e:	e023      	b.n	800afd8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	895a      	ldrh	r2, [r3, #10]
 800af94:	88bb      	ldrh	r3, [r7, #4]
 800af96:	1ad3      	subs	r3, r2, r3
 800af98:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800af9a:	8b3a      	ldrh	r2, [r7, #24]
 800af9c:	88fb      	ldrh	r3, [r7, #6]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d901      	bls.n	800afa6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800afa2:	88fb      	ldrh	r3, [r7, #6]
 800afa4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800afa6:	8b7b      	ldrh	r3, [r7, #26]
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	18d0      	adds	r0, r2, r3
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	685a      	ldr	r2, [r3, #4]
 800afb0:	88bb      	ldrh	r3, [r7, #4]
 800afb2:	4413      	add	r3, r2
 800afb4:	8b3a      	ldrh	r2, [r7, #24]
 800afb6:	4619      	mov	r1, r3
 800afb8:	f00a fd51 	bl	8015a5e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800afbc:	8afa      	ldrh	r2, [r7, #22]
 800afbe:	8b3b      	ldrh	r3, [r7, #24]
 800afc0:	4413      	add	r3, r2
 800afc2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800afc4:	8b7a      	ldrh	r2, [r7, #26]
 800afc6:	8b3b      	ldrh	r3, [r7, #24]
 800afc8:	4413      	add	r3, r2
 800afca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800afcc:	88fa      	ldrh	r2, [r7, #6]
 800afce:	8b3b      	ldrh	r3, [r7, #24]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	61fb      	str	r3, [r7, #28]
 800afde:	88fb      	ldrh	r3, [r7, #6]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <pbuf_copy_partial+0xca>
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1c4      	bne.n	800af74 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800afea:	8afb      	ldrh	r3, [r7, #22]
}
 800afec:	4618      	mov	r0, r3
 800afee:	3720      	adds	r7, #32
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	08017234 	.word	0x08017234
 800aff8:	0801757c 	.word	0x0801757c
 800affc:	08017294 	.word	0x08017294
 800b000:	0801759c 	.word	0x0801759c

0800b004 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	4603      	mov	r3, r0
 800b00c:	603a      	str	r2, [r7, #0]
 800b00e:	71fb      	strb	r3, [r7, #7]
 800b010:	460b      	mov	r3, r1
 800b012:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	8919      	ldrh	r1, [r3, #8]
 800b018:	88ba      	ldrh	r2, [r7, #4]
 800b01a:	79fb      	ldrb	r3, [r7, #7]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7ff fab1 	bl	800a584 <pbuf_alloc>
 800b022:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d101      	bne.n	800b02e <pbuf_clone+0x2a>
    return NULL;
 800b02a:	2300      	movs	r3, #0
 800b02c:	e011      	b.n	800b052 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f7ff fea3 	bl	800ad7c <pbuf_copy>
 800b036:	4603      	mov	r3, r0
 800b038:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b03a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d006      	beq.n	800b050 <pbuf_clone+0x4c>
 800b042:	4b06      	ldr	r3, [pc, #24]	; (800b05c <pbuf_clone+0x58>)
 800b044:	f240 5224 	movw	r2, #1316	; 0x524
 800b048:	4905      	ldr	r1, [pc, #20]	; (800b060 <pbuf_clone+0x5c>)
 800b04a:	4806      	ldr	r0, [pc, #24]	; (800b064 <pbuf_clone+0x60>)
 800b04c:	f00a fbd4 	bl	80157f8 <iprintf>
  return q;
 800b050:	68fb      	ldr	r3, [r7, #12]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	08017234 	.word	0x08017234
 800b060:	080176a8 	.word	0x080176a8
 800b064:	08017294 	.word	0x08017294

0800b068 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b06c:	f00a fac4 	bl	80155f8 <rand>
 800b070:	4603      	mov	r3, r0
 800b072:	b29b      	uxth	r3, r3
 800b074:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b078:	b29b      	uxth	r3, r3
 800b07a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b07e:	b29a      	uxth	r2, r3
 800b080:	4b01      	ldr	r3, [pc, #4]	; (800b088 <tcp_init+0x20>)
 800b082:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b084:	bf00      	nop
 800b086:	bd80      	pop	{r7, pc}
 800b088:	2000046c 	.word	0x2000046c

0800b08c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	7d1b      	ldrb	r3, [r3, #20]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d105      	bne.n	800b0a8 <tcp_free+0x1c>
 800b09c:	4b06      	ldr	r3, [pc, #24]	; (800b0b8 <tcp_free+0x2c>)
 800b09e:	22d4      	movs	r2, #212	; 0xd4
 800b0a0:	4906      	ldr	r1, [pc, #24]	; (800b0bc <tcp_free+0x30>)
 800b0a2:	4807      	ldr	r0, [pc, #28]	; (800b0c0 <tcp_free+0x34>)
 800b0a4:	f00a fba8 	bl	80157f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b0a8:	6879      	ldr	r1, [r7, #4]
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	f7fe fedc 	bl	8009e68 <memp_free>
}
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	08017734 	.word	0x08017734
 800b0bc:	08017764 	.word	0x08017764
 800b0c0:	08017778 	.word	0x08017778

0800b0c4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	7d1b      	ldrb	r3, [r3, #20]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d105      	bne.n	800b0e0 <tcp_free_listen+0x1c>
 800b0d4:	4b06      	ldr	r3, [pc, #24]	; (800b0f0 <tcp_free_listen+0x2c>)
 800b0d6:	22df      	movs	r2, #223	; 0xdf
 800b0d8:	4906      	ldr	r1, [pc, #24]	; (800b0f4 <tcp_free_listen+0x30>)
 800b0da:	4807      	ldr	r0, [pc, #28]	; (800b0f8 <tcp_free_listen+0x34>)
 800b0dc:	f00a fb8c 	bl	80157f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b0e0:	6879      	ldr	r1, [r7, #4]
 800b0e2:	2001      	movs	r0, #1
 800b0e4:	f7fe fec0 	bl	8009e68 <memp_free>
}
 800b0e8:	bf00      	nop
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	08017734 	.word	0x08017734
 800b0f4:	080177a0 	.word	0x080177a0
 800b0f8:	08017778 	.word	0x08017778

0800b0fc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b100:	f001 f85c 	bl	800c1bc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b104:	4b07      	ldr	r3, [pc, #28]	; (800b124 <tcp_tmr+0x28>)
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	3301      	adds	r3, #1
 800b10a:	b2da      	uxtb	r2, r3
 800b10c:	4b05      	ldr	r3, [pc, #20]	; (800b124 <tcp_tmr+0x28>)
 800b10e:	701a      	strb	r2, [r3, #0]
 800b110:	4b04      	ldr	r3, [pc, #16]	; (800b124 <tcp_tmr+0x28>)
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	f003 0301 	and.w	r3, r3, #1
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d001      	beq.n	800b120 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b11c:	f000 fd0e 	bl	800bb3c <tcp_slowtmr>
  }
}
 800b120:	bf00      	nop
 800b122:	bd80      	pop	{r7, pc}
 800b124:	2000e4b1 	.word	0x2000e4b1

0800b128 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d105      	bne.n	800b144 <tcp_remove_listener+0x1c>
 800b138:	4b0d      	ldr	r3, [pc, #52]	; (800b170 <tcp_remove_listener+0x48>)
 800b13a:	22ff      	movs	r2, #255	; 0xff
 800b13c:	490d      	ldr	r1, [pc, #52]	; (800b174 <tcp_remove_listener+0x4c>)
 800b13e:	480e      	ldr	r0, [pc, #56]	; (800b178 <tcp_remove_listener+0x50>)
 800b140:	f00a fb5a 	bl	80157f8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	60fb      	str	r3, [r7, #12]
 800b148:	e00a      	b.n	800b160 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	429a      	cmp	r2, r3
 800b152:	d102      	bne.n	800b15a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	60fb      	str	r3, [r7, #12]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1f1      	bne.n	800b14a <tcp_remove_listener+0x22>
    }
  }
}
 800b166:	bf00      	nop
 800b168:	bf00      	nop
 800b16a:	3710      	adds	r7, #16
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	08017734 	.word	0x08017734
 800b174:	080177bc 	.word	0x080177bc
 800b178:	08017778 	.word	0x08017778

0800b17c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d106      	bne.n	800b198 <tcp_listen_closed+0x1c>
 800b18a:	4b14      	ldr	r3, [pc, #80]	; (800b1dc <tcp_listen_closed+0x60>)
 800b18c:	f240 1211 	movw	r2, #273	; 0x111
 800b190:	4913      	ldr	r1, [pc, #76]	; (800b1e0 <tcp_listen_closed+0x64>)
 800b192:	4814      	ldr	r0, [pc, #80]	; (800b1e4 <tcp_listen_closed+0x68>)
 800b194:	f00a fb30 	bl	80157f8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	7d1b      	ldrb	r3, [r3, #20]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d006      	beq.n	800b1ae <tcp_listen_closed+0x32>
 800b1a0:	4b0e      	ldr	r3, [pc, #56]	; (800b1dc <tcp_listen_closed+0x60>)
 800b1a2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b1a6:	4910      	ldr	r1, [pc, #64]	; (800b1e8 <tcp_listen_closed+0x6c>)
 800b1a8:	480e      	ldr	r0, [pc, #56]	; (800b1e4 <tcp_listen_closed+0x68>)
 800b1aa:	f00a fb25 	bl	80157f8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	60fb      	str	r3, [r7, #12]
 800b1b2:	e00b      	b.n	800b1cc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b1b4:	4a0d      	ldr	r2, [pc, #52]	; (800b1ec <tcp_listen_closed+0x70>)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	6879      	ldr	r1, [r7, #4]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff ffb1 	bl	800b128 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b03      	cmp	r3, #3
 800b1d0:	d9f0      	bls.n	800b1b4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b1d2:	bf00      	nop
 800b1d4:	bf00      	nop
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	08017734 	.word	0x08017734
 800b1e0:	080177e4 	.word	0x080177e4
 800b1e4:	08017778 	.word	0x08017778
 800b1e8:	080177f0 	.word	0x080177f0
 800b1ec:	080197c8 	.word	0x080197c8

0800b1f0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b1f0:	b5b0      	push	{r4, r5, r7, lr}
 800b1f2:	b088      	sub	sp, #32
 800b1f4:	af04      	add	r7, sp, #16
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d106      	bne.n	800b210 <tcp_close_shutdown+0x20>
 800b202:	4b63      	ldr	r3, [pc, #396]	; (800b390 <tcp_close_shutdown+0x1a0>)
 800b204:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b208:	4962      	ldr	r1, [pc, #392]	; (800b394 <tcp_close_shutdown+0x1a4>)
 800b20a:	4863      	ldr	r0, [pc, #396]	; (800b398 <tcp_close_shutdown+0x1a8>)
 800b20c:	f00a faf4 	bl	80157f8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b210:	78fb      	ldrb	r3, [r7, #3]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d066      	beq.n	800b2e4 <tcp_close_shutdown+0xf4>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	7d1b      	ldrb	r3, [r3, #20]
 800b21a:	2b04      	cmp	r3, #4
 800b21c:	d003      	beq.n	800b226 <tcp_close_shutdown+0x36>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	7d1b      	ldrb	r3, [r3, #20]
 800b222:	2b07      	cmp	r3, #7
 800b224:	d15e      	bne.n	800b2e4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d104      	bne.n	800b238 <tcp_close_shutdown+0x48>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b232:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b236:	d055      	beq.n	800b2e4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	8b5b      	ldrh	r3, [r3, #26]
 800b23c:	f003 0310 	and.w	r3, r3, #16
 800b240:	2b00      	cmp	r3, #0
 800b242:	d106      	bne.n	800b252 <tcp_close_shutdown+0x62>
 800b244:	4b52      	ldr	r3, [pc, #328]	; (800b390 <tcp_close_shutdown+0x1a0>)
 800b246:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b24a:	4954      	ldr	r1, [pc, #336]	; (800b39c <tcp_close_shutdown+0x1ac>)
 800b24c:	4852      	ldr	r0, [pc, #328]	; (800b398 <tcp_close_shutdown+0x1a8>)
 800b24e:	f00a fad3 	bl	80157f8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b25a:	687d      	ldr	r5, [r7, #4]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	3304      	adds	r3, #4
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	8ad2      	ldrh	r2, [r2, #22]
 800b264:	6879      	ldr	r1, [r7, #4]
 800b266:	8b09      	ldrh	r1, [r1, #24]
 800b268:	9102      	str	r1, [sp, #8]
 800b26a:	9201      	str	r2, [sp, #4]
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	462b      	mov	r3, r5
 800b270:	4622      	mov	r2, r4
 800b272:	4601      	mov	r1, r0
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f005 fd19 	bl	8010cac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f001 faf6 	bl	800c86c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b280:	4b47      	ldr	r3, [pc, #284]	; (800b3a0 <tcp_close_shutdown+0x1b0>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	429a      	cmp	r2, r3
 800b288:	d105      	bne.n	800b296 <tcp_close_shutdown+0xa6>
 800b28a:	4b45      	ldr	r3, [pc, #276]	; (800b3a0 <tcp_close_shutdown+0x1b0>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	4a43      	ldr	r2, [pc, #268]	; (800b3a0 <tcp_close_shutdown+0x1b0>)
 800b292:	6013      	str	r3, [r2, #0]
 800b294:	e013      	b.n	800b2be <tcp_close_shutdown+0xce>
 800b296:	4b42      	ldr	r3, [pc, #264]	; (800b3a0 <tcp_close_shutdown+0x1b0>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	60fb      	str	r3, [r7, #12]
 800b29c:	e00c      	b.n	800b2b8 <tcp_close_shutdown+0xc8>
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d104      	bne.n	800b2b2 <tcp_close_shutdown+0xc2>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	68da      	ldr	r2, [r3, #12]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	60da      	str	r2, [r3, #12]
 800b2b0:	e005      	b.n	800b2be <tcp_close_shutdown+0xce>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	60fb      	str	r3, [r7, #12]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1ef      	bne.n	800b29e <tcp_close_shutdown+0xae>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	60da      	str	r2, [r3, #12]
 800b2c4:	4b37      	ldr	r3, [pc, #220]	; (800b3a4 <tcp_close_shutdown+0x1b4>)
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b2ca:	4b37      	ldr	r3, [pc, #220]	; (800b3a8 <tcp_close_shutdown+0x1b8>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d102      	bne.n	800b2da <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b2d4:	f003 ff8e 	bl	800f1f4 <tcp_trigger_input_pcb_close>
 800b2d8:	e002      	b.n	800b2e0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7ff fed6 	bl	800b08c <tcp_free>
      }
      return ERR_OK;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	e050      	b.n	800b386 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	7d1b      	ldrb	r3, [r3, #20]
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	d03b      	beq.n	800b364 <tcp_close_shutdown+0x174>
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	dc44      	bgt.n	800b37a <tcp_close_shutdown+0x18a>
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <tcp_close_shutdown+0x10a>
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d02a      	beq.n	800b34e <tcp_close_shutdown+0x15e>
 800b2f8:	e03f      	b.n	800b37a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	8adb      	ldrh	r3, [r3, #22]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d021      	beq.n	800b346 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b302:	4b2a      	ldr	r3, [pc, #168]	; (800b3ac <tcp_close_shutdown+0x1bc>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d105      	bne.n	800b318 <tcp_close_shutdown+0x128>
 800b30c:	4b27      	ldr	r3, [pc, #156]	; (800b3ac <tcp_close_shutdown+0x1bc>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	4a26      	ldr	r2, [pc, #152]	; (800b3ac <tcp_close_shutdown+0x1bc>)
 800b314:	6013      	str	r3, [r2, #0]
 800b316:	e013      	b.n	800b340 <tcp_close_shutdown+0x150>
 800b318:	4b24      	ldr	r3, [pc, #144]	; (800b3ac <tcp_close_shutdown+0x1bc>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	60bb      	str	r3, [r7, #8]
 800b31e:	e00c      	b.n	800b33a <tcp_close_shutdown+0x14a>
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	429a      	cmp	r2, r3
 800b328:	d104      	bne.n	800b334 <tcp_close_shutdown+0x144>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	68da      	ldr	r2, [r3, #12]
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	60da      	str	r2, [r3, #12]
 800b332:	e005      	b.n	800b340 <tcp_close_shutdown+0x150>
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	60bb      	str	r3, [r7, #8]
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1ef      	bne.n	800b320 <tcp_close_shutdown+0x130>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7ff fea0 	bl	800b08c <tcp_free>
      break;
 800b34c:	e01a      	b.n	800b384 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7ff ff14 	bl	800b17c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b354:	6879      	ldr	r1, [r7, #4]
 800b356:	4816      	ldr	r0, [pc, #88]	; (800b3b0 <tcp_close_shutdown+0x1c0>)
 800b358:	f001 fad8 	bl	800c90c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7ff feb1 	bl	800b0c4 <tcp_free_listen>
      break;
 800b362:	e00f      	b.n	800b384 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	480e      	ldr	r0, [pc, #56]	; (800b3a0 <tcp_close_shutdown+0x1b0>)
 800b368:	f001 fad0 	bl	800c90c <tcp_pcb_remove>
 800b36c:	4b0d      	ldr	r3, [pc, #52]	; (800b3a4 <tcp_close_shutdown+0x1b4>)
 800b36e:	2201      	movs	r2, #1
 800b370:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7ff fe8a 	bl	800b08c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b378:	e004      	b.n	800b384 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 f81a 	bl	800b3b4 <tcp_close_shutdown_fin>
 800b380:	4603      	mov	r3, r0
 800b382:	e000      	b.n	800b386 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bdb0      	pop	{r4, r5, r7, pc}
 800b38e:	bf00      	nop
 800b390:	08017734 	.word	0x08017734
 800b394:	08017808 	.word	0x08017808
 800b398:	08017778 	.word	0x08017778
 800b39c:	08017828 	.word	0x08017828
 800b3a0:	2000e4a8 	.word	0x2000e4a8
 800b3a4:	2000e4b0 	.word	0x2000e4b0
 800b3a8:	2000e4e8 	.word	0x2000e4e8
 800b3ac:	2000e4a0 	.word	0x2000e4a0
 800b3b0:	2000e4a4 	.word	0x2000e4a4

0800b3b4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d106      	bne.n	800b3d0 <tcp_close_shutdown_fin+0x1c>
 800b3c2:	4b2e      	ldr	r3, [pc, #184]	; (800b47c <tcp_close_shutdown_fin+0xc8>)
 800b3c4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b3c8:	492d      	ldr	r1, [pc, #180]	; (800b480 <tcp_close_shutdown_fin+0xcc>)
 800b3ca:	482e      	ldr	r0, [pc, #184]	; (800b484 <tcp_close_shutdown_fin+0xd0>)
 800b3cc:	f00a fa14 	bl	80157f8 <iprintf>

  switch (pcb->state) {
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	7d1b      	ldrb	r3, [r3, #20]
 800b3d4:	2b07      	cmp	r3, #7
 800b3d6:	d020      	beq.n	800b41a <tcp_close_shutdown_fin+0x66>
 800b3d8:	2b07      	cmp	r3, #7
 800b3da:	dc2b      	bgt.n	800b434 <tcp_close_shutdown_fin+0x80>
 800b3dc:	2b03      	cmp	r3, #3
 800b3de:	d002      	beq.n	800b3e6 <tcp_close_shutdown_fin+0x32>
 800b3e0:	2b04      	cmp	r3, #4
 800b3e2:	d00d      	beq.n	800b400 <tcp_close_shutdown_fin+0x4c>
 800b3e4:	e026      	b.n	800b434 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f004 fd6e 	bl	800fec8 <tcp_send_fin>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b3f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d11f      	bne.n	800b438 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2205      	movs	r2, #5
 800b3fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b3fe:	e01b      	b.n	800b438 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f004 fd61 	bl	800fec8 <tcp_send_fin>
 800b406:	4603      	mov	r3, r0
 800b408:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b40a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d114      	bne.n	800b43c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2205      	movs	r2, #5
 800b416:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b418:	e010      	b.n	800b43c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f004 fd54 	bl	800fec8 <tcp_send_fin>
 800b420:	4603      	mov	r3, r0
 800b422:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d109      	bne.n	800b440 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2209      	movs	r2, #9
 800b430:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b432:	e005      	b.n	800b440 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b434:	2300      	movs	r3, #0
 800b436:	e01c      	b.n	800b472 <tcp_close_shutdown_fin+0xbe>
      break;
 800b438:	bf00      	nop
 800b43a:	e002      	b.n	800b442 <tcp_close_shutdown_fin+0x8e>
      break;
 800b43c:	bf00      	nop
 800b43e:	e000      	b.n	800b442 <tcp_close_shutdown_fin+0x8e>
      break;
 800b440:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d103      	bne.n	800b452 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f004 fe7a 	bl	8010144 <tcp_output>
 800b450:	e00d      	b.n	800b46e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b45a:	d108      	bne.n	800b46e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	8b5b      	ldrh	r3, [r3, #26]
 800b460:	f043 0308 	orr.w	r3, r3, #8
 800b464:	b29a      	uxth	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b46a:	2300      	movs	r3, #0
 800b46c:	e001      	b.n	800b472 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b46e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	08017734 	.word	0x08017734
 800b480:	080177e4 	.word	0x080177e4
 800b484:	08017778 	.word	0x08017778

0800b488 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d109      	bne.n	800b4aa <tcp_close+0x22>
 800b496:	4b0f      	ldr	r3, [pc, #60]	; (800b4d4 <tcp_close+0x4c>)
 800b498:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b49c:	490e      	ldr	r1, [pc, #56]	; (800b4d8 <tcp_close+0x50>)
 800b49e:	480f      	ldr	r0, [pc, #60]	; (800b4dc <tcp_close+0x54>)
 800b4a0:	f00a f9aa 	bl	80157f8 <iprintf>
 800b4a4:	f06f 030f 	mvn.w	r3, #15
 800b4a8:	e00f      	b.n	800b4ca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	7d1b      	ldrb	r3, [r3, #20]
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d006      	beq.n	800b4c0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	8b5b      	ldrh	r3, [r3, #26]
 800b4b6:	f043 0310 	orr.w	r3, r3, #16
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b4c0:	2101      	movs	r1, #1
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7ff fe94 	bl	800b1f0 <tcp_close_shutdown>
 800b4c8:	4603      	mov	r3, r0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	08017734 	.word	0x08017734
 800b4d8:	08017844 	.word	0x08017844
 800b4dc:	08017778 	.word	0x08017778

0800b4e0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b08e      	sub	sp, #56	; 0x38
 800b4e4:	af04      	add	r7, sp, #16
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d107      	bne.n	800b500 <tcp_abandon+0x20>
 800b4f0:	4b52      	ldr	r3, [pc, #328]	; (800b63c <tcp_abandon+0x15c>)
 800b4f2:	f240 223d 	movw	r2, #573	; 0x23d
 800b4f6:	4952      	ldr	r1, [pc, #328]	; (800b640 <tcp_abandon+0x160>)
 800b4f8:	4852      	ldr	r0, [pc, #328]	; (800b644 <tcp_abandon+0x164>)
 800b4fa:	f00a f97d 	bl	80157f8 <iprintf>
 800b4fe:	e099      	b.n	800b634 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	7d1b      	ldrb	r3, [r3, #20]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d106      	bne.n	800b516 <tcp_abandon+0x36>
 800b508:	4b4c      	ldr	r3, [pc, #304]	; (800b63c <tcp_abandon+0x15c>)
 800b50a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b50e:	494e      	ldr	r1, [pc, #312]	; (800b648 <tcp_abandon+0x168>)
 800b510:	484c      	ldr	r0, [pc, #304]	; (800b644 <tcp_abandon+0x164>)
 800b512:	f00a f971 	bl	80157f8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	7d1b      	ldrb	r3, [r3, #20]
 800b51a:	2b0a      	cmp	r3, #10
 800b51c:	d107      	bne.n	800b52e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b51e:	6879      	ldr	r1, [r7, #4]
 800b520:	484a      	ldr	r0, [pc, #296]	; (800b64c <tcp_abandon+0x16c>)
 800b522:	f001 f9f3 	bl	800c90c <tcp_pcb_remove>
    tcp_free(pcb);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f7ff fdb0 	bl	800b08c <tcp_free>
 800b52c:	e082      	b.n	800b634 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b52e:	2300      	movs	r3, #0
 800b530:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b532:	2300      	movs	r3, #0
 800b534:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b53a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b540:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b548:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	7d1b      	ldrb	r3, [r3, #20]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d126      	bne.n	800b5a6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	8adb      	ldrh	r3, [r3, #22]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d02e      	beq.n	800b5be <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b560:	4b3b      	ldr	r3, [pc, #236]	; (800b650 <tcp_abandon+0x170>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	429a      	cmp	r2, r3
 800b568:	d105      	bne.n	800b576 <tcp_abandon+0x96>
 800b56a:	4b39      	ldr	r3, [pc, #228]	; (800b650 <tcp_abandon+0x170>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	4a37      	ldr	r2, [pc, #220]	; (800b650 <tcp_abandon+0x170>)
 800b572:	6013      	str	r3, [r2, #0]
 800b574:	e013      	b.n	800b59e <tcp_abandon+0xbe>
 800b576:	4b36      	ldr	r3, [pc, #216]	; (800b650 <tcp_abandon+0x170>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	61fb      	str	r3, [r7, #28]
 800b57c:	e00c      	b.n	800b598 <tcp_abandon+0xb8>
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	429a      	cmp	r2, r3
 800b586:	d104      	bne.n	800b592 <tcp_abandon+0xb2>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	68da      	ldr	r2, [r3, #12]
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	60da      	str	r2, [r3, #12]
 800b590:	e005      	b.n	800b59e <tcp_abandon+0xbe>
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	61fb      	str	r3, [r7, #28]
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1ef      	bne.n	800b57e <tcp_abandon+0x9e>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	60da      	str	r2, [r3, #12]
 800b5a4:	e00b      	b.n	800b5be <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	8adb      	ldrh	r3, [r3, #22]
 800b5ae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b5b0:	6879      	ldr	r1, [r7, #4]
 800b5b2:	4828      	ldr	r0, [pc, #160]	; (800b654 <tcp_abandon+0x174>)
 800b5b4:	f001 f9aa 	bl	800c90c <tcp_pcb_remove>
 800b5b8:	4b27      	ldr	r3, [pc, #156]	; (800b658 <tcp_abandon+0x178>)
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d004      	beq.n	800b5d0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f000 fed6 	bl	800c37c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d004      	beq.n	800b5e2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f000 fecd 	bl	800c37c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d004      	beq.n	800b5f4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 fec4 	bl	800c37c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00e      	beq.n	800b618 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b5fa:	6879      	ldr	r1, [r7, #4]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	3304      	adds	r3, #4
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	8b12      	ldrh	r2, [r2, #24]
 800b604:	9202      	str	r2, [sp, #8]
 800b606:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b608:	9201      	str	r2, [sp, #4]
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	460b      	mov	r3, r1
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	69b9      	ldr	r1, [r7, #24]
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f005 fb4a 	bl	8010cac <tcp_rst>
    }
    last_state = pcb->state;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	7d1b      	ldrb	r3, [r3, #20]
 800b61c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7ff fd34 	bl	800b08c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d004      	beq.n	800b634 <tcp_abandon+0x154>
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	f06f 010c 	mvn.w	r1, #12
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	4798      	blx	r3
  }
}
 800b634:	3728      	adds	r7, #40	; 0x28
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	08017734 	.word	0x08017734
 800b640:	08017878 	.word	0x08017878
 800b644:	08017778 	.word	0x08017778
 800b648:	08017894 	.word	0x08017894
 800b64c:	2000e4ac 	.word	0x2000e4ac
 800b650:	2000e4a0 	.word	0x2000e4a0
 800b654:	2000e4a8 	.word	0x2000e4a8
 800b658:	2000e4b0 	.word	0x2000e4b0

0800b65c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b664:	2101      	movs	r1, #1
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7ff ff3a 	bl	800b4e0 <tcp_abandon>
}
 800b66c:	bf00      	nop
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	4613      	mov	r3, r2
 800b680:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800b682:	2304      	movs	r3, #4
 800b684:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d101      	bne.n	800b690 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800b68c:	4b3e      	ldr	r3, [pc, #248]	; (800b788 <tcp_bind+0x114>)
 800b68e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d109      	bne.n	800b6aa <tcp_bind+0x36>
 800b696:	4b3d      	ldr	r3, [pc, #244]	; (800b78c <tcp_bind+0x118>)
 800b698:	f240 22a9 	movw	r2, #681	; 0x2a9
 800b69c:	493c      	ldr	r1, [pc, #240]	; (800b790 <tcp_bind+0x11c>)
 800b69e:	483d      	ldr	r0, [pc, #244]	; (800b794 <tcp_bind+0x120>)
 800b6a0:	f00a f8aa 	bl	80157f8 <iprintf>
 800b6a4:	f06f 030f 	mvn.w	r3, #15
 800b6a8:	e06a      	b.n	800b780 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	7d1b      	ldrb	r3, [r3, #20]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d009      	beq.n	800b6c6 <tcp_bind+0x52>
 800b6b2:	4b36      	ldr	r3, [pc, #216]	; (800b78c <tcp_bind+0x118>)
 800b6b4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b6b8:	4937      	ldr	r1, [pc, #220]	; (800b798 <tcp_bind+0x124>)
 800b6ba:	4836      	ldr	r0, [pc, #216]	; (800b794 <tcp_bind+0x120>)
 800b6bc:	f00a f89c 	bl	80157f8 <iprintf>
 800b6c0:	f06f 0305 	mvn.w	r3, #5
 800b6c4:	e05c      	b.n	800b780 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800b6c6:	88fb      	ldrh	r3, [r7, #6]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d109      	bne.n	800b6e0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800b6cc:	f000 f9f0 	bl	800bab0 <tcp_new_port>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b6d4:	88fb      	ldrh	r3, [r7, #6]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d135      	bne.n	800b746 <tcp_bind+0xd2>
      return ERR_BUF;
 800b6da:	f06f 0301 	mvn.w	r3, #1
 800b6de:	e04f      	b.n	800b780 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	61fb      	str	r3, [r7, #28]
 800b6e4:	e02b      	b.n	800b73e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b6e6:	4a2d      	ldr	r2, [pc, #180]	; (800b79c <tcp_bind+0x128>)
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	61bb      	str	r3, [r7, #24]
 800b6f2:	e01e      	b.n	800b732 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800b6f4:	69bb      	ldr	r3, [r7, #24]
 800b6f6:	8adb      	ldrh	r3, [r3, #22]
 800b6f8:	88fa      	ldrh	r2, [r7, #6]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d116      	bne.n	800b72c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800b6fe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b700:	2b00      	cmp	r3, #0
 800b702:	d010      	beq.n	800b726 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00c      	beq.n	800b726 <tcp_bind+0xb2>
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d009      	beq.n	800b726 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d005      	beq.n	800b726 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b722:	429a      	cmp	r2, r3
 800b724:	d102      	bne.n	800b72c <tcp_bind+0xb8>
              return ERR_USE;
 800b726:	f06f 0307 	mvn.w	r3, #7
 800b72a:	e029      	b.n	800b780 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	61bb      	str	r3, [r7, #24]
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1dd      	bne.n	800b6f4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	3301      	adds	r3, #1
 800b73c:	61fb      	str	r3, [r7, #28]
 800b73e:	69fa      	ldr	r2, [r7, #28]
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	429a      	cmp	r2, r3
 800b744:	dbcf      	blt.n	800b6e6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00c      	beq.n	800b766 <tcp_bind+0xf2>
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d008      	beq.n	800b766 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d002      	beq.n	800b760 <tcp_bind+0xec>
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	e000      	b.n	800b762 <tcp_bind+0xee>
 800b760:	2300      	movs	r3, #0
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	88fa      	ldrh	r2, [r7, #6]
 800b76a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b76c:	4b0c      	ldr	r3, [pc, #48]	; (800b7a0 <tcp_bind+0x12c>)
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	60da      	str	r2, [r3, #12]
 800b774:	4a0a      	ldr	r2, [pc, #40]	; (800b7a0 <tcp_bind+0x12c>)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6013      	str	r3, [r2, #0]
 800b77a:	f005 fc59 	bl	8011030 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3720      	adds	r7, #32
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	080197f0 	.word	0x080197f0
 800b78c:	08017734 	.word	0x08017734
 800b790:	080178c8 	.word	0x080178c8
 800b794:	08017778 	.word	0x08017778
 800b798:	080178e0 	.word	0x080178e0
 800b79c:	080197c8 	.word	0x080197c8
 800b7a0:	2000e4a0 	.word	0x2000e4a0

0800b7a4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d106      	bne.n	800b7c6 <tcp_accept_null+0x22>
 800b7b8:	4b07      	ldr	r3, [pc, #28]	; (800b7d8 <tcp_accept_null+0x34>)
 800b7ba:	f240 320f 	movw	r2, #783	; 0x30f
 800b7be:	4907      	ldr	r1, [pc, #28]	; (800b7dc <tcp_accept_null+0x38>)
 800b7c0:	4807      	ldr	r0, [pc, #28]	; (800b7e0 <tcp_accept_null+0x3c>)
 800b7c2:	f00a f819 	bl	80157f8 <iprintf>

  tcp_abort(pcb);
 800b7c6:	68b8      	ldr	r0, [r7, #8]
 800b7c8:	f7ff ff48 	bl	800b65c <tcp_abort>

  return ERR_ABRT;
 800b7cc:	f06f 030c 	mvn.w	r3, #12
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	08017734 	.word	0x08017734
 800b7dc:	08017908 	.word	0x08017908
 800b7e0:	08017778 	.word	0x08017778

0800b7e4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800b7f0:	78fb      	ldrb	r3, [r7, #3]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 f806 	bl	800b808 <tcp_listen_with_backlog_and_err>
 800b7fc:	4603      	mov	r3, r0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
	...

0800b808 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b088      	sub	sp, #32
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	460b      	mov	r3, r1
 800b812:	607a      	str	r2, [r7, #4]
 800b814:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800b816:	2300      	movs	r3, #0
 800b818:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d109      	bne.n	800b834 <tcp_listen_with_backlog_and_err+0x2c>
 800b820:	4b47      	ldr	r3, [pc, #284]	; (800b940 <tcp_listen_with_backlog_and_err+0x138>)
 800b822:	f240 3259 	movw	r2, #857	; 0x359
 800b826:	4947      	ldr	r1, [pc, #284]	; (800b944 <tcp_listen_with_backlog_and_err+0x13c>)
 800b828:	4847      	ldr	r0, [pc, #284]	; (800b948 <tcp_listen_with_backlog_and_err+0x140>)
 800b82a:	f009 ffe5 	bl	80157f8 <iprintf>
 800b82e:	23f0      	movs	r3, #240	; 0xf0
 800b830:	76fb      	strb	r3, [r7, #27]
 800b832:	e079      	b.n	800b928 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	7d1b      	ldrb	r3, [r3, #20]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d009      	beq.n	800b850 <tcp_listen_with_backlog_and_err+0x48>
 800b83c:	4b40      	ldr	r3, [pc, #256]	; (800b940 <tcp_listen_with_backlog_and_err+0x138>)
 800b83e:	f240 325a 	movw	r2, #858	; 0x35a
 800b842:	4942      	ldr	r1, [pc, #264]	; (800b94c <tcp_listen_with_backlog_and_err+0x144>)
 800b844:	4840      	ldr	r0, [pc, #256]	; (800b948 <tcp_listen_with_backlog_and_err+0x140>)
 800b846:	f009 ffd7 	bl	80157f8 <iprintf>
 800b84a:	23f1      	movs	r3, #241	; 0xf1
 800b84c:	76fb      	strb	r3, [r7, #27]
 800b84e:	e06b      	b.n	800b928 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	7d1b      	ldrb	r3, [r3, #20]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d104      	bne.n	800b862 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800b85c:	23f7      	movs	r3, #247	; 0xf7
 800b85e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800b860:	e062      	b.n	800b928 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800b862:	2001      	movs	r0, #1
 800b864:	f7fe fa90 	bl	8009d88 <memp_malloc>
 800b868:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d102      	bne.n	800b876 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800b870:	23ff      	movs	r3, #255	; 0xff
 800b872:	76fb      	strb	r3, [r7, #27]
    goto done;
 800b874:	e058      	b.n	800b928 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	691a      	ldr	r2, [r3, #16]
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	8ada      	ldrh	r2, [r3, #22]
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	2201      	movs	r2, #1
 800b88a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	7d5a      	ldrb	r2, [r3, #21]
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	7a5a      	ldrb	r2, [r3, #9]
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	7ada      	ldrb	r2, [r3, #11]
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	7a9a      	ldrb	r2, [r3, #10]
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	8adb      	ldrh	r3, [r3, #22]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d021      	beq.n	800b906 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b8c2:	4b23      	ldr	r3, [pc, #140]	; (800b950 <tcp_listen_with_backlog_and_err+0x148>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d105      	bne.n	800b8d8 <tcp_listen_with_backlog_and_err+0xd0>
 800b8cc:	4b20      	ldr	r3, [pc, #128]	; (800b950 <tcp_listen_with_backlog_and_err+0x148>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	4a1f      	ldr	r2, [pc, #124]	; (800b950 <tcp_listen_with_backlog_and_err+0x148>)
 800b8d4:	6013      	str	r3, [r2, #0]
 800b8d6:	e013      	b.n	800b900 <tcp_listen_with_backlog_and_err+0xf8>
 800b8d8:	4b1d      	ldr	r3, [pc, #116]	; (800b950 <tcp_listen_with_backlog_and_err+0x148>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	617b      	str	r3, [r7, #20]
 800b8de:	e00c      	b.n	800b8fa <tcp_listen_with_backlog_and_err+0xf2>
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d104      	bne.n	800b8f4 <tcp_listen_with_backlog_and_err+0xec>
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	68da      	ldr	r2, [r3, #12]
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	60da      	str	r2, [r3, #12]
 800b8f2:	e005      	b.n	800b900 <tcp_listen_with_backlog_and_err+0xf8>
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	617b      	str	r3, [r7, #20]
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1ef      	bne.n	800b8e0 <tcp_listen_with_backlog_and_err+0xd8>
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2200      	movs	r2, #0
 800b904:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800b906:	68f8      	ldr	r0, [r7, #12]
 800b908:	f7ff fbc0 	bl	800b08c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	4a11      	ldr	r2, [pc, #68]	; (800b954 <tcp_listen_with_backlog_and_err+0x14c>)
 800b910:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800b912:	4b11      	ldr	r3, [pc, #68]	; (800b958 <tcp_listen_with_backlog_and_err+0x150>)
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	60da      	str	r2, [r3, #12]
 800b91a:	4a0f      	ldr	r2, [pc, #60]	; (800b958 <tcp_listen_with_backlog_and_err+0x150>)
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	6013      	str	r3, [r2, #0]
 800b920:	f005 fb86 	bl	8011030 <tcp_timer_needed>
  res = ERR_OK;
 800b924:	2300      	movs	r3, #0
 800b926:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d002      	beq.n	800b934 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	7efa      	ldrb	r2, [r7, #27]
 800b932:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800b934:	69fb      	ldr	r3, [r7, #28]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3720      	adds	r7, #32
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	08017734 	.word	0x08017734
 800b944:	08017928 	.word	0x08017928
 800b948:	08017778 	.word	0x08017778
 800b94c:	08017958 	.word	0x08017958
 800b950:	2000e4a0 	.word	0x2000e4a0
 800b954:	0800b7a5 	.word	0x0800b7a5
 800b958:	2000e4a4 	.word	0x2000e4a4

0800b95c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d106      	bne.n	800b978 <tcp_update_rcv_ann_wnd+0x1c>
 800b96a:	4b25      	ldr	r3, [pc, #148]	; (800ba00 <tcp_update_rcv_ann_wnd+0xa4>)
 800b96c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b970:	4924      	ldr	r1, [pc, #144]	; (800ba04 <tcp_update_rcv_ann_wnd+0xa8>)
 800b972:	4825      	ldr	r0, [pc, #148]	; (800ba08 <tcp_update_rcv_ann_wnd+0xac>)
 800b974:	f009 ff40 	bl	80157f8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b980:	4413      	add	r3, r2
 800b982:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b98c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b990:	bf28      	it	cs
 800b992:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b996:	b292      	uxth	r2, r2
 800b998:	4413      	add	r3, r2
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	db08      	blt.n	800b9b4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	e020      	b.n	800b9f6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	dd03      	ble.n	800b9ca <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b9c8:	e014      	b.n	800b9f4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9dc:	d306      	bcc.n	800b9ec <tcp_update_rcv_ann_wnd+0x90>
 800b9de:	4b08      	ldr	r3, [pc, #32]	; (800ba00 <tcp_update_rcv_ann_wnd+0xa4>)
 800b9e0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b9e4:	4909      	ldr	r1, [pc, #36]	; (800ba0c <tcp_update_rcv_ann_wnd+0xb0>)
 800b9e6:	4808      	ldr	r0, [pc, #32]	; (800ba08 <tcp_update_rcv_ann_wnd+0xac>)
 800b9e8:	f009 ff06 	bl	80157f8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b9f4:	2300      	movs	r3, #0
  }
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	08017734 	.word	0x08017734
 800ba04:	08017990 	.word	0x08017990
 800ba08:	08017778 	.word	0x08017778
 800ba0c:	080179b4 	.word	0x080179b4

0800ba10 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d107      	bne.n	800ba32 <tcp_recved+0x22>
 800ba22:	4b1f      	ldr	r3, [pc, #124]	; (800baa0 <tcp_recved+0x90>)
 800ba24:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ba28:	491e      	ldr	r1, [pc, #120]	; (800baa4 <tcp_recved+0x94>)
 800ba2a:	481f      	ldr	r0, [pc, #124]	; (800baa8 <tcp_recved+0x98>)
 800ba2c:	f009 fee4 	bl	80157f8 <iprintf>
 800ba30:	e032      	b.n	800ba98 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	7d1b      	ldrb	r3, [r3, #20]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d106      	bne.n	800ba48 <tcp_recved+0x38>
 800ba3a:	4b19      	ldr	r3, [pc, #100]	; (800baa0 <tcp_recved+0x90>)
 800ba3c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ba40:	491a      	ldr	r1, [pc, #104]	; (800baac <tcp_recved+0x9c>)
 800ba42:	4819      	ldr	r0, [pc, #100]	; (800baa8 <tcp_recved+0x98>)
 800ba44:	f009 fed8 	bl	80157f8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ba4c:	887b      	ldrh	r3, [r7, #2]
 800ba4e:	4413      	add	r3, r2
 800ba50:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ba52:	89fb      	ldrh	r3, [r7, #14]
 800ba54:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ba58:	d804      	bhi.n	800ba64 <tcp_recved+0x54>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba5e:	89fa      	ldrh	r2, [r7, #14]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d204      	bcs.n	800ba6e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ba6a:	851a      	strh	r2, [r3, #40]	; 0x28
 800ba6c:	e002      	b.n	800ba74 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	89fa      	ldrh	r2, [r7, #14]
 800ba72:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f7ff ff71 	bl	800b95c <tcp_update_rcv_ann_wnd>
 800ba7a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ba82:	d309      	bcc.n	800ba98 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	8b5b      	ldrh	r3, [r3, #26]
 800ba88:	f043 0302 	orr.w	r3, r3, #2
 800ba8c:	b29a      	uxth	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f004 fb56 	bl	8010144 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	08017734 	.word	0x08017734
 800baa4:	080179d0 	.word	0x080179d0
 800baa8:	08017778 	.word	0x08017778
 800baac:	080179e8 	.word	0x080179e8

0800bab0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800bab6:	2300      	movs	r3, #0
 800bab8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800baba:	4b1e      	ldr	r3, [pc, #120]	; (800bb34 <tcp_new_port+0x84>)
 800babc:	881b      	ldrh	r3, [r3, #0]
 800babe:	3301      	adds	r3, #1
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	4b1c      	ldr	r3, [pc, #112]	; (800bb34 <tcp_new_port+0x84>)
 800bac4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800bac6:	4b1b      	ldr	r3, [pc, #108]	; (800bb34 <tcp_new_port+0x84>)
 800bac8:	881b      	ldrh	r3, [r3, #0]
 800baca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bace:	4293      	cmp	r3, r2
 800bad0:	d103      	bne.n	800bada <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800bad2:	4b18      	ldr	r3, [pc, #96]	; (800bb34 <tcp_new_port+0x84>)
 800bad4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800bad8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800bada:	2300      	movs	r3, #0
 800badc:	71fb      	strb	r3, [r7, #7]
 800bade:	e01e      	b.n	800bb1e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800bae0:	79fb      	ldrb	r3, [r7, #7]
 800bae2:	4a15      	ldr	r2, [pc, #84]	; (800bb38 <tcp_new_port+0x88>)
 800bae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	603b      	str	r3, [r7, #0]
 800baec:	e011      	b.n	800bb12 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	8ada      	ldrh	r2, [r3, #22]
 800baf2:	4b10      	ldr	r3, [pc, #64]	; (800bb34 <tcp_new_port+0x84>)
 800baf4:	881b      	ldrh	r3, [r3, #0]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d108      	bne.n	800bb0c <tcp_new_port+0x5c>
        n++;
 800bafa:	88bb      	ldrh	r3, [r7, #4]
 800bafc:	3301      	adds	r3, #1
 800bafe:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800bb00:	88bb      	ldrh	r3, [r7, #4]
 800bb02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb06:	d3d8      	bcc.n	800baba <tcp_new_port+0xa>
          return 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	e00d      	b.n	800bb28 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	603b      	str	r3, [r7, #0]
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d1ea      	bne.n	800baee <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800bb18:	79fb      	ldrb	r3, [r7, #7]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	71fb      	strb	r3, [r7, #7]
 800bb1e:	79fb      	ldrb	r3, [r7, #7]
 800bb20:	2b03      	cmp	r3, #3
 800bb22:	d9dd      	bls.n	800bae0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800bb24:	4b03      	ldr	r3, [pc, #12]	; (800bb34 <tcp_new_port+0x84>)
 800bb26:	881b      	ldrh	r3, [r3, #0]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr
 800bb34:	2000046c 	.word	0x2000046c
 800bb38:	080197c8 	.word	0x080197c8

0800bb3c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800bb3c:	b5b0      	push	{r4, r5, r7, lr}
 800bb3e:	b090      	sub	sp, #64	; 0x40
 800bb40:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800bb42:	2300      	movs	r3, #0
 800bb44:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800bb48:	4b94      	ldr	r3, [pc, #592]	; (800bd9c <tcp_slowtmr+0x260>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	4a93      	ldr	r2, [pc, #588]	; (800bd9c <tcp_slowtmr+0x260>)
 800bb50:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800bb52:	4b93      	ldr	r3, [pc, #588]	; (800bda0 <tcp_slowtmr+0x264>)
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	3301      	adds	r3, #1
 800bb58:	b2da      	uxtb	r2, r3
 800bb5a:	4b91      	ldr	r3, [pc, #580]	; (800bda0 <tcp_slowtmr+0x264>)
 800bb5c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800bb62:	4b90      	ldr	r3, [pc, #576]	; (800bda4 <tcp_slowtmr+0x268>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800bb68:	e29f      	b.n	800c0aa <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800bb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6c:	7d1b      	ldrb	r3, [r3, #20]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d106      	bne.n	800bb80 <tcp_slowtmr+0x44>
 800bb72:	4b8d      	ldr	r3, [pc, #564]	; (800bda8 <tcp_slowtmr+0x26c>)
 800bb74:	f240 42be 	movw	r2, #1214	; 0x4be
 800bb78:	498c      	ldr	r1, [pc, #560]	; (800bdac <tcp_slowtmr+0x270>)
 800bb7a:	488d      	ldr	r0, [pc, #564]	; (800bdb0 <tcp_slowtmr+0x274>)
 800bb7c:	f009 fe3c 	bl	80157f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800bb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb82:	7d1b      	ldrb	r3, [r3, #20]
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d106      	bne.n	800bb96 <tcp_slowtmr+0x5a>
 800bb88:	4b87      	ldr	r3, [pc, #540]	; (800bda8 <tcp_slowtmr+0x26c>)
 800bb8a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800bb8e:	4989      	ldr	r1, [pc, #548]	; (800bdb4 <tcp_slowtmr+0x278>)
 800bb90:	4887      	ldr	r0, [pc, #540]	; (800bdb0 <tcp_slowtmr+0x274>)
 800bb92:	f009 fe31 	bl	80157f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800bb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb98:	7d1b      	ldrb	r3, [r3, #20]
 800bb9a:	2b0a      	cmp	r3, #10
 800bb9c:	d106      	bne.n	800bbac <tcp_slowtmr+0x70>
 800bb9e:	4b82      	ldr	r3, [pc, #520]	; (800bda8 <tcp_slowtmr+0x26c>)
 800bba0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800bba4:	4984      	ldr	r1, [pc, #528]	; (800bdb8 <tcp_slowtmr+0x27c>)
 800bba6:	4882      	ldr	r0, [pc, #520]	; (800bdb0 <tcp_slowtmr+0x274>)
 800bba8:	f009 fe26 	bl	80157f8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbae:	7f9a      	ldrb	r2, [r3, #30]
 800bbb0:	4b7b      	ldr	r3, [pc, #492]	; (800bda0 <tcp_slowtmr+0x264>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d105      	bne.n	800bbc4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800bbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbbe:	68db      	ldr	r3, [r3, #12]
 800bbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800bbc2:	e272      	b.n	800c0aa <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800bbc4:	4b76      	ldr	r3, [pc, #472]	; (800bda0 <tcp_slowtmr+0x264>)
 800bbc6:	781a      	ldrb	r2, [r3, #0]
 800bbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbca:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbda:	7d1b      	ldrb	r3, [r3, #20]
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d10a      	bne.n	800bbf6 <tcp_slowtmr+0xba>
 800bbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bbe6:	2b05      	cmp	r3, #5
 800bbe8:	d905      	bls.n	800bbf6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800bbea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbee:	3301      	adds	r3, #1
 800bbf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bbf4:	e11e      	b.n	800be34 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800bbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bbfc:	2b0b      	cmp	r3, #11
 800bbfe:	d905      	bls.n	800bc0c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800bc00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc04:	3301      	adds	r3, #1
 800bc06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc0a:	e113      	b.n	800be34 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800bc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d075      	beq.n	800bd02 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d006      	beq.n	800bc2c <tcp_slowtmr+0xf0>
 800bc1e:	4b62      	ldr	r3, [pc, #392]	; (800bda8 <tcp_slowtmr+0x26c>)
 800bc20:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800bc24:	4965      	ldr	r1, [pc, #404]	; (800bdbc <tcp_slowtmr+0x280>)
 800bc26:	4862      	ldr	r0, [pc, #392]	; (800bdb0 <tcp_slowtmr+0x274>)
 800bc28:	f009 fde6 	bl	80157f8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d106      	bne.n	800bc42 <tcp_slowtmr+0x106>
 800bc34:	4b5c      	ldr	r3, [pc, #368]	; (800bda8 <tcp_slowtmr+0x26c>)
 800bc36:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800bc3a:	4961      	ldr	r1, [pc, #388]	; (800bdc0 <tcp_slowtmr+0x284>)
 800bc3c:	485c      	ldr	r0, [pc, #368]	; (800bdb0 <tcp_slowtmr+0x274>)
 800bc3e:	f009 fddb 	bl	80157f8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc44:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bc48:	2b0b      	cmp	r3, #11
 800bc4a:	d905      	bls.n	800bc58 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800bc4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc50:	3301      	adds	r3, #1
 800bc52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc56:	e0ed      	b.n	800be34 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc5a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	4a58      	ldr	r2, [pc, #352]	; (800bdc4 <tcp_slowtmr+0x288>)
 800bc62:	5cd3      	ldrb	r3, [r2, r3]
 800bc64:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800bc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bc6c:	7c7a      	ldrb	r2, [r7, #17]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d907      	bls.n	800bc82 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800bc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bc78:	3301      	adds	r3, #1
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800bc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bc88:	7c7a      	ldrb	r2, [r7, #17]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	f200 80d2 	bhi.w	800be34 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800bc90:	2301      	movs	r3, #1
 800bc92:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800bc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d108      	bne.n	800bcb0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bc9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bca0:	f005 f8f8 	bl	8010e94 <tcp_zero_window_probe>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d014      	beq.n	800bcd4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800bcaa:	2300      	movs	r3, #0
 800bcac:	623b      	str	r3, [r7, #32]
 800bcae:	e011      	b.n	800bcd4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcba:	f003 ffbd 	bl	800fc38 <tcp_split_unsent_seg>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d107      	bne.n	800bcd4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800bcc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcc6:	f004 fa3d 	bl	8010144 <tcp_output>
 800bcca:	4603      	mov	r3, r0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d101      	bne.n	800bcd4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800bcd4:	6a3b      	ldr	r3, [r7, #32]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f000 80ac 	beq.w	800be34 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800bcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bcea:	2b06      	cmp	r3, #6
 800bcec:	f200 80a2 	bhi.w	800be34 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800bcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800bd00:	e098      	b.n	800be34 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	db0f      	blt.n	800bd2c <tcp_slowtmr+0x1f0>
 800bd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bd12:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d008      	beq.n	800bd2c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800bd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	3301      	adds	r3, #1
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	b21a      	sxth	r2, r3
 800bd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800bd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800bd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd34:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	db7b      	blt.n	800be34 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800bd3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd3e:	f004 fcf5 	bl	801072c <tcp_rexmit_rto_prepare>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d007      	beq.n	800bd58 <tcp_slowtmr+0x21c>
 800bd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d171      	bne.n	800be34 <tcp_slowtmr+0x2f8>
 800bd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d06d      	beq.n	800be34 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800bd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5a:	7d1b      	ldrb	r3, [r3, #20]
 800bd5c:	2b02      	cmp	r3, #2
 800bd5e:	d03a      	beq.n	800bdd6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800bd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd66:	2b0c      	cmp	r3, #12
 800bd68:	bf28      	it	cs
 800bd6a:	230c      	movcs	r3, #12
 800bd6c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bd74:	10db      	asrs	r3, r3, #3
 800bd76:	b21b      	sxth	r3, r3
 800bd78:	461a      	mov	r2, r3
 800bd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bd80:	4413      	add	r3, r2
 800bd82:	7efa      	ldrb	r2, [r7, #27]
 800bd84:	4910      	ldr	r1, [pc, #64]	; (800bdc8 <tcp_slowtmr+0x28c>)
 800bd86:	5c8a      	ldrb	r2, [r1, r2]
 800bd88:	4093      	lsls	r3, r2
 800bd8a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800bd92:	4293      	cmp	r3, r2
 800bd94:	dc1a      	bgt.n	800bdcc <tcp_slowtmr+0x290>
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	b21a      	sxth	r2, r3
 800bd9a:	e019      	b.n	800bdd0 <tcp_slowtmr+0x294>
 800bd9c:	2000e49c 	.word	0x2000e49c
 800bda0:	2000e4b2 	.word	0x2000e4b2
 800bda4:	2000e4a8 	.word	0x2000e4a8
 800bda8:	08017734 	.word	0x08017734
 800bdac:	08017a78 	.word	0x08017a78
 800bdb0:	08017778 	.word	0x08017778
 800bdb4:	08017aa4 	.word	0x08017aa4
 800bdb8:	08017ad0 	.word	0x08017ad0
 800bdbc:	08017b00 	.word	0x08017b00
 800bdc0:	08017b34 	.word	0x08017b34
 800bdc4:	080197c0 	.word	0x080197c0
 800bdc8:	080197b0 	.word	0x080197b0
 800bdcc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800bdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd8:	2200      	movs	r2, #0
 800bdda:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bde8:	4293      	cmp	r3, r2
 800bdea:	bf28      	it	cs
 800bdec:	4613      	movcs	r3, r2
 800bdee:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800bdf0:	8a7b      	ldrh	r3, [r7, #18]
 800bdf2:	085b      	lsrs	r3, r3, #1
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800be02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800be06:	005b      	lsls	r3, r3, #1
 800be08:	b29b      	uxth	r3, r3
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d206      	bcs.n	800be1c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800be0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800be12:	005b      	lsls	r3, r3, #1
 800be14:	b29a      	uxth	r2, r3
 800be16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800be1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800be20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800be26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be28:	2200      	movs	r2, #0
 800be2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800be2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be30:	f004 fcec 	bl	801080c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800be34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be36:	7d1b      	ldrb	r3, [r3, #20]
 800be38:	2b06      	cmp	r3, #6
 800be3a:	d111      	bne.n	800be60 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800be3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3e:	8b5b      	ldrh	r3, [r3, #26]
 800be40:	f003 0310 	and.w	r3, r3, #16
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00b      	beq.n	800be60 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be48:	4b9d      	ldr	r3, [pc, #628]	; (800c0c0 <tcp_slowtmr+0x584>)
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4e:	6a1b      	ldr	r3, [r3, #32]
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	2b28      	cmp	r3, #40	; 0x28
 800be54:	d904      	bls.n	800be60 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800be56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be5a:	3301      	adds	r3, #1
 800be5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800be60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be62:	7a5b      	ldrb	r3, [r3, #9]
 800be64:	f003 0308 	and.w	r3, r3, #8
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d04c      	beq.n	800bf06 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800be6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800be70:	2b04      	cmp	r3, #4
 800be72:	d003      	beq.n	800be7c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800be74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be76:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800be78:	2b07      	cmp	r3, #7
 800be7a:	d144      	bne.n	800bf06 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be7c:	4b90      	ldr	r3, [pc, #576]	; (800c0c0 <tcp_slowtmr+0x584>)
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be82:	6a1b      	ldr	r3, [r3, #32]
 800be84:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800be86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be8c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800be90:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800be94:	498b      	ldr	r1, [pc, #556]	; (800c0c4 <tcp_slowtmr+0x588>)
 800be96:	fba1 1303 	umull	r1, r3, r1, r3
 800be9a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d90a      	bls.n	800beb6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800bea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bea4:	3301      	adds	r3, #1
 800bea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800beaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800beae:	3301      	adds	r3, #1
 800beb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800beb4:	e027      	b.n	800bf06 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800beb6:	4b82      	ldr	r3, [pc, #520]	; (800c0c0 <tcp_slowtmr+0x584>)
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebc:	6a1b      	ldr	r3, [r3, #32]
 800bebe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800becc:	4618      	mov	r0, r3
 800bece:	4b7e      	ldr	r3, [pc, #504]	; (800c0c8 <tcp_slowtmr+0x58c>)
 800bed0:	fb00 f303 	mul.w	r3, r0, r3
 800bed4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800bed6:	497b      	ldr	r1, [pc, #492]	; (800c0c4 <tcp_slowtmr+0x588>)
 800bed8:	fba1 1303 	umull	r1, r3, r1, r3
 800bedc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bede:	429a      	cmp	r2, r3
 800bee0:	d911      	bls.n	800bf06 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800bee2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bee4:	f004 ff96 	bl	8010e14 <tcp_keepalive>
 800bee8:	4603      	mov	r3, r0
 800beea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800beee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d107      	bne.n	800bf06 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800bef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800befc:	3301      	adds	r3, #1
 800befe:	b2da      	uxtb	r2, r3
 800bf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf02:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800bf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d011      	beq.n	800bf32 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800bf0e:	4b6c      	ldr	r3, [pc, #432]	; (800c0c0 <tcp_slowtmr+0x584>)
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf14:	6a1b      	ldr	r3, [r3, #32]
 800bf16:	1ad2      	subs	r2, r2, r3
 800bf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bf1e:	4619      	mov	r1, r3
 800bf20:	460b      	mov	r3, r1
 800bf22:	005b      	lsls	r3, r3, #1
 800bf24:	440b      	add	r3, r1
 800bf26:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d302      	bcc.n	800bf32 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800bf2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf2e:	f000 fe51 	bl	800cbd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800bf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf34:	7d1b      	ldrb	r3, [r3, #20]
 800bf36:	2b03      	cmp	r3, #3
 800bf38:	d10b      	bne.n	800bf52 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf3a:	4b61      	ldr	r3, [pc, #388]	; (800c0c0 <tcp_slowtmr+0x584>)
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	2b28      	cmp	r3, #40	; 0x28
 800bf46:	d904      	bls.n	800bf52 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800bf48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800bf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf54:	7d1b      	ldrb	r3, [r3, #20]
 800bf56:	2b09      	cmp	r3, #9
 800bf58:	d10b      	bne.n	800bf72 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bf5a:	4b59      	ldr	r3, [pc, #356]	; (800c0c0 <tcp_slowtmr+0x584>)
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf60:	6a1b      	ldr	r3, [r3, #32]
 800bf62:	1ad3      	subs	r3, r2, r3
 800bf64:	2bf0      	cmp	r3, #240	; 0xf0
 800bf66:	d904      	bls.n	800bf72 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800bf68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bf72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d060      	beq.n	800c03c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800bf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf80:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800bf82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf84:	f000 fc72 	bl	800c86c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d010      	beq.n	800bfb0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bf8e:	4b4f      	ldr	r3, [pc, #316]	; (800c0cc <tcp_slowtmr+0x590>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d106      	bne.n	800bfa6 <tcp_slowtmr+0x46a>
 800bf98:	4b4d      	ldr	r3, [pc, #308]	; (800c0d0 <tcp_slowtmr+0x594>)
 800bf9a:	f240 526d 	movw	r2, #1389	; 0x56d
 800bf9e:	494d      	ldr	r1, [pc, #308]	; (800c0d4 <tcp_slowtmr+0x598>)
 800bfa0:	484d      	ldr	r0, [pc, #308]	; (800c0d8 <tcp_slowtmr+0x59c>)
 800bfa2:	f009 fc29 	bl	80157f8 <iprintf>
        prev->next = pcb->next;
 800bfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa8:	68da      	ldr	r2, [r3, #12]
 800bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfac:	60da      	str	r2, [r3, #12]
 800bfae:	e00f      	b.n	800bfd0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bfb0:	4b46      	ldr	r3, [pc, #280]	; (800c0cc <tcp_slowtmr+0x590>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d006      	beq.n	800bfc8 <tcp_slowtmr+0x48c>
 800bfba:	4b45      	ldr	r3, [pc, #276]	; (800c0d0 <tcp_slowtmr+0x594>)
 800bfbc:	f240 5271 	movw	r2, #1393	; 0x571
 800bfc0:	4946      	ldr	r1, [pc, #280]	; (800c0dc <tcp_slowtmr+0x5a0>)
 800bfc2:	4845      	ldr	r0, [pc, #276]	; (800c0d8 <tcp_slowtmr+0x59c>)
 800bfc4:	f009 fc18 	bl	80157f8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800bfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	4a3f      	ldr	r2, [pc, #252]	; (800c0cc <tcp_slowtmr+0x590>)
 800bfce:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800bfd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d013      	beq.n	800c000 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfda:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfde:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bfe0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800bfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfe8:	8ad2      	ldrh	r2, [r2, #22]
 800bfea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfec:	8b09      	ldrh	r1, [r1, #24]
 800bfee:	9102      	str	r1, [sp, #8]
 800bff0:	9201      	str	r2, [sp, #4]
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	462b      	mov	r3, r5
 800bff6:	4622      	mov	r2, r4
 800bff8:	4601      	mov	r1, r0
 800bffa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bffc:	f004 fe56 	bl	8010cac <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c008:	7d1b      	ldrb	r3, [r3, #20]
 800c00a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c016:	6838      	ldr	r0, [r7, #0]
 800c018:	f7ff f838 	bl	800b08c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c01c:	4b30      	ldr	r3, [pc, #192]	; (800c0e0 <tcp_slowtmr+0x5a4>)
 800c01e:	2200      	movs	r2, #0
 800c020:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d004      	beq.n	800c032 <tcp_slowtmr+0x4f6>
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f06f 010c 	mvn.w	r1, #12
 800c02e:	68b8      	ldr	r0, [r7, #8]
 800c030:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c032:	4b2b      	ldr	r3, [pc, #172]	; (800c0e0 <tcp_slowtmr+0x5a4>)
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d037      	beq.n	800c0aa <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800c03a:	e590      	b.n	800bb5e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	7f1b      	ldrb	r3, [r3, #28]
 800c04a:	3301      	adds	r3, #1
 800c04c:	b2da      	uxtb	r2, r3
 800c04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c050:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c054:	7f1a      	ldrb	r2, [r3, #28]
 800c056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c058:	7f5b      	ldrb	r3, [r3, #29]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d325      	bcc.n	800c0aa <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800c05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c060:	2200      	movs	r2, #0
 800c062:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c064:	4b1e      	ldr	r3, [pc, #120]	; (800c0e0 <tcp_slowtmr+0x5a4>)
 800c066:	2200      	movs	r2, #0
 800c068:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c070:	2b00      	cmp	r3, #0
 800c072:	d00b      	beq.n	800c08c <tcp_slowtmr+0x550>
 800c074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c07a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c07c:	6912      	ldr	r2, [r2, #16]
 800c07e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c080:	4610      	mov	r0, r2
 800c082:	4798      	blx	r3
 800c084:	4603      	mov	r3, r0
 800c086:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c08a:	e002      	b.n	800c092 <tcp_slowtmr+0x556>
 800c08c:	2300      	movs	r3, #0
 800c08e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c092:	4b13      	ldr	r3, [pc, #76]	; (800c0e0 <tcp_slowtmr+0x5a4>)
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d000      	beq.n	800c09c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800c09a:	e560      	b.n	800bb5e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c09c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d102      	bne.n	800c0aa <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800c0a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0a6:	f004 f84d 	bl	8010144 <tcp_output>
  while (pcb != NULL) {
 800c0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f47f ad5c 	bne.w	800bb6a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c0b6:	4b0b      	ldr	r3, [pc, #44]	; (800c0e4 <tcp_slowtmr+0x5a8>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c0bc:	e067      	b.n	800c18e <tcp_slowtmr+0x652>
 800c0be:	bf00      	nop
 800c0c0:	2000e49c 	.word	0x2000e49c
 800c0c4:	10624dd3 	.word	0x10624dd3
 800c0c8:	000124f8 	.word	0x000124f8
 800c0cc:	2000e4a8 	.word	0x2000e4a8
 800c0d0:	08017734 	.word	0x08017734
 800c0d4:	08017b6c 	.word	0x08017b6c
 800c0d8:	08017778 	.word	0x08017778
 800c0dc:	08017b98 	.word	0x08017b98
 800c0e0:	2000e4b0 	.word	0x2000e4b0
 800c0e4:	2000e4ac 	.word	0x2000e4ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ea:	7d1b      	ldrb	r3, [r3, #20]
 800c0ec:	2b0a      	cmp	r3, #10
 800c0ee:	d006      	beq.n	800c0fe <tcp_slowtmr+0x5c2>
 800c0f0:	4b2b      	ldr	r3, [pc, #172]	; (800c1a0 <tcp_slowtmr+0x664>)
 800c0f2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c0f6:	492b      	ldr	r1, [pc, #172]	; (800c1a4 <tcp_slowtmr+0x668>)
 800c0f8:	482b      	ldr	r0, [pc, #172]	; (800c1a8 <tcp_slowtmr+0x66c>)
 800c0fa:	f009 fb7d 	bl	80157f8 <iprintf>
    pcb_remove = 0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c104:	4b29      	ldr	r3, [pc, #164]	; (800c1ac <tcp_slowtmr+0x670>)
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10a:	6a1b      	ldr	r3, [r3, #32]
 800c10c:	1ad3      	subs	r3, r2, r3
 800c10e:	2bf0      	cmp	r3, #240	; 0xf0
 800c110:	d904      	bls.n	800c11c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c116:	3301      	adds	r3, #1
 800c118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c11c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c120:	2b00      	cmp	r3, #0
 800c122:	d02f      	beq.n	800c184 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c124:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c126:	f000 fba1 	bl	800c86c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d010      	beq.n	800c152 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c130:	4b1f      	ldr	r3, [pc, #124]	; (800c1b0 <tcp_slowtmr+0x674>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c136:	429a      	cmp	r2, r3
 800c138:	d106      	bne.n	800c148 <tcp_slowtmr+0x60c>
 800c13a:	4b19      	ldr	r3, [pc, #100]	; (800c1a0 <tcp_slowtmr+0x664>)
 800c13c:	f240 52af 	movw	r2, #1455	; 0x5af
 800c140:	491c      	ldr	r1, [pc, #112]	; (800c1b4 <tcp_slowtmr+0x678>)
 800c142:	4819      	ldr	r0, [pc, #100]	; (800c1a8 <tcp_slowtmr+0x66c>)
 800c144:	f009 fb58 	bl	80157f8 <iprintf>
        prev->next = pcb->next;
 800c148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14a:	68da      	ldr	r2, [r3, #12]
 800c14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14e:	60da      	str	r2, [r3, #12]
 800c150:	e00f      	b.n	800c172 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c152:	4b17      	ldr	r3, [pc, #92]	; (800c1b0 <tcp_slowtmr+0x674>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c158:	429a      	cmp	r2, r3
 800c15a:	d006      	beq.n	800c16a <tcp_slowtmr+0x62e>
 800c15c:	4b10      	ldr	r3, [pc, #64]	; (800c1a0 <tcp_slowtmr+0x664>)
 800c15e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c162:	4915      	ldr	r1, [pc, #84]	; (800c1b8 <tcp_slowtmr+0x67c>)
 800c164:	4810      	ldr	r0, [pc, #64]	; (800c1a8 <tcp_slowtmr+0x66c>)
 800c166:	f009 fb47 	bl	80157f8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	4a10      	ldr	r2, [pc, #64]	; (800c1b0 <tcp_slowtmr+0x674>)
 800c170:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c174:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c17c:	69f8      	ldr	r0, [r7, #28]
 800c17e:	f7fe ff85 	bl	800b08c <tcp_free>
 800c182:	e004      	b.n	800c18e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c186:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c190:	2b00      	cmp	r3, #0
 800c192:	d1a9      	bne.n	800c0e8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c194:	bf00      	nop
 800c196:	bf00      	nop
 800c198:	3730      	adds	r7, #48	; 0x30
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bdb0      	pop	{r4, r5, r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	08017734 	.word	0x08017734
 800c1a4:	08017bc4 	.word	0x08017bc4
 800c1a8:	08017778 	.word	0x08017778
 800c1ac:	2000e49c 	.word	0x2000e49c
 800c1b0:	2000e4ac 	.word	0x2000e4ac
 800c1b4:	08017bf4 	.word	0x08017bf4
 800c1b8:	08017c1c 	.word	0x08017c1c

0800c1bc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c1c2:	4b2d      	ldr	r3, [pc, #180]	; (800c278 <tcp_fasttmr+0xbc>)
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	b2da      	uxtb	r2, r3
 800c1ca:	4b2b      	ldr	r3, [pc, #172]	; (800c278 <tcp_fasttmr+0xbc>)
 800c1cc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c1ce:	4b2b      	ldr	r3, [pc, #172]	; (800c27c <tcp_fasttmr+0xc0>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c1d4:	e048      	b.n	800c268 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	7f9a      	ldrb	r2, [r3, #30]
 800c1da:	4b27      	ldr	r3, [pc, #156]	; (800c278 <tcp_fasttmr+0xbc>)
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d03f      	beq.n	800c262 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c1e2:	4b25      	ldr	r3, [pc, #148]	; (800c278 <tcp_fasttmr+0xbc>)
 800c1e4:	781a      	ldrb	r2, [r3, #0]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	8b5b      	ldrh	r3, [r3, #26]
 800c1ee:	f003 0301 	and.w	r3, r3, #1
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d010      	beq.n	800c218 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	8b5b      	ldrh	r3, [r3, #26]
 800c1fa:	f043 0302 	orr.w	r3, r3, #2
 800c1fe:	b29a      	uxth	r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f003 ff9d 	bl	8010144 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	8b5b      	ldrh	r3, [r3, #26]
 800c20e:	f023 0303 	bic.w	r3, r3, #3
 800c212:	b29a      	uxth	r2, r3
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	8b5b      	ldrh	r3, [r3, #26]
 800c21c:	f003 0308 	and.w	r3, r3, #8
 800c220:	2b00      	cmp	r3, #0
 800c222:	d009      	beq.n	800c238 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	8b5b      	ldrh	r3, [r3, #26]
 800c228:	f023 0308 	bic.w	r3, r3, #8
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f7ff f8be 	bl	800b3b4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00a      	beq.n	800c25c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c246:	4b0e      	ldr	r3, [pc, #56]	; (800c280 <tcp_fasttmr+0xc4>)
 800c248:	2200      	movs	r2, #0
 800c24a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 f819 	bl	800c284 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c252:	4b0b      	ldr	r3, [pc, #44]	; (800c280 <tcp_fasttmr+0xc4>)
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d000      	beq.n	800c25c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c25a:	e7b8      	b.n	800c1ce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	607b      	str	r3, [r7, #4]
 800c260:	e002      	b.n	800c268 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1b3      	bne.n	800c1d6 <tcp_fasttmr+0x1a>
    }
  }
}
 800c26e:	bf00      	nop
 800c270:	bf00      	nop
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	2000e4b2 	.word	0x2000e4b2
 800c27c:	2000e4a8 	.word	0x2000e4a8
 800c280:	2000e4b0 	.word	0x2000e4b0

0800c284 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c284:	b590      	push	{r4, r7, lr}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d109      	bne.n	800c2a6 <tcp_process_refused_data+0x22>
 800c292:	4b37      	ldr	r3, [pc, #220]	; (800c370 <tcp_process_refused_data+0xec>)
 800c294:	f240 6209 	movw	r2, #1545	; 0x609
 800c298:	4936      	ldr	r1, [pc, #216]	; (800c374 <tcp_process_refused_data+0xf0>)
 800c29a:	4837      	ldr	r0, [pc, #220]	; (800c378 <tcp_process_refused_data+0xf4>)
 800c29c:	f009 faac 	bl	80157f8 <iprintf>
 800c2a0:	f06f 030f 	mvn.w	r3, #15
 800c2a4:	e060      	b.n	800c368 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2aa:	7b5b      	ldrb	r3, [r3, #13]
 800c2ac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2b2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d00b      	beq.n	800c2dc <tcp_process_refused_data+0x58>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6918      	ldr	r0, [r3, #16]
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	6879      	ldr	r1, [r7, #4]
 800c2d4:	47a0      	blx	r4
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	73fb      	strb	r3, [r7, #15]
 800c2da:	e007      	b.n	800c2ec <tcp_process_refused_data+0x68>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	6879      	ldr	r1, [r7, #4]
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	f000 f8a4 	bl	800c430 <tcp_recv_null>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c2ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d12a      	bne.n	800c34a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c2f4:	7bbb      	ldrb	r3, [r7, #14]
 800c2f6:	f003 0320 	and.w	r3, r3, #32
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d033      	beq.n	800c366 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c302:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c306:	d005      	beq.n	800c314 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c30c:	3301      	adds	r3, #1
 800c30e:	b29a      	uxth	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00b      	beq.n	800c336 <tcp_process_refused_data+0xb2>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6918      	ldr	r0, [r3, #16]
 800c328:	2300      	movs	r3, #0
 800c32a:	2200      	movs	r2, #0
 800c32c:	6879      	ldr	r1, [r7, #4]
 800c32e:	47a0      	blx	r4
 800c330:	4603      	mov	r3, r0
 800c332:	73fb      	strb	r3, [r7, #15]
 800c334:	e001      	b.n	800c33a <tcp_process_refused_data+0xb6>
 800c336:	2300      	movs	r3, #0
 800c338:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c33a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c33e:	f113 0f0d 	cmn.w	r3, #13
 800c342:	d110      	bne.n	800c366 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c344:	f06f 030c 	mvn.w	r3, #12
 800c348:	e00e      	b.n	800c368 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c34a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c34e:	f113 0f0d 	cmn.w	r3, #13
 800c352:	d102      	bne.n	800c35a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c354:	f06f 030c 	mvn.w	r3, #12
 800c358:	e006      	b.n	800c368 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	68ba      	ldr	r2, [r7, #8]
 800c35e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c360:	f06f 0304 	mvn.w	r3, #4
 800c364:	e000      	b.n	800c368 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3714      	adds	r7, #20
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd90      	pop	{r4, r7, pc}
 800c370:	08017734 	.word	0x08017734
 800c374:	08017c44 	.word	0x08017c44
 800c378:	08017778 	.word	0x08017778

0800c37c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c384:	e007      	b.n	800c396 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 f80a 	bl	800c3a6 <tcp_seg_free>
    seg = next;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1f4      	bne.n	800c386 <tcp_segs_free+0xa>
  }
}
 800c39c:	bf00      	nop
 800c39e:	bf00      	nop
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b082      	sub	sp, #8
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d00c      	beq.n	800c3ce <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d004      	beq.n	800c3c6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7fe fbc3 	bl	800ab4c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c3c6:	6879      	ldr	r1, [r7, #4]
 800c3c8:	2002      	movs	r0, #2
 800c3ca:	f7fd fd4d 	bl	8009e68 <memp_free>
  }
}
 800c3ce:	bf00      	nop
 800c3d0:	3708      	adds	r7, #8
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
	...

0800c3d8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d106      	bne.n	800c3f4 <tcp_seg_copy+0x1c>
 800c3e6:	4b0f      	ldr	r3, [pc, #60]	; (800c424 <tcp_seg_copy+0x4c>)
 800c3e8:	f240 6282 	movw	r2, #1666	; 0x682
 800c3ec:	490e      	ldr	r1, [pc, #56]	; (800c428 <tcp_seg_copy+0x50>)
 800c3ee:	480f      	ldr	r0, [pc, #60]	; (800c42c <tcp_seg_copy+0x54>)
 800c3f0:	f009 fa02 	bl	80157f8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c3f4:	2002      	movs	r0, #2
 800c3f6:	f7fd fcc7 	bl	8009d88 <memp_malloc>
 800c3fa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d101      	bne.n	800c406 <tcp_seg_copy+0x2e>
    return NULL;
 800c402:	2300      	movs	r3, #0
 800c404:	e00a      	b.n	800c41c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c406:	2210      	movs	r2, #16
 800c408:	6879      	ldr	r1, [r7, #4]
 800c40a:	68f8      	ldr	r0, [r7, #12]
 800c40c:	f009 fb27 	bl	8015a5e <memcpy>
  pbuf_ref(cseg->p);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	4618      	mov	r0, r3
 800c416:	f7fe fc39 	bl	800ac8c <pbuf_ref>
  return cseg;
 800c41a:	68fb      	ldr	r3, [r7, #12]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	08017734 	.word	0x08017734
 800c428:	08017c88 	.word	0x08017c88
 800c42c:	08017778 	.word	0x08017778

0800c430 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d109      	bne.n	800c458 <tcp_recv_null+0x28>
 800c444:	4b12      	ldr	r3, [pc, #72]	; (800c490 <tcp_recv_null+0x60>)
 800c446:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c44a:	4912      	ldr	r1, [pc, #72]	; (800c494 <tcp_recv_null+0x64>)
 800c44c:	4812      	ldr	r0, [pc, #72]	; (800c498 <tcp_recv_null+0x68>)
 800c44e:	f009 f9d3 	bl	80157f8 <iprintf>
 800c452:	f06f 030f 	mvn.w	r3, #15
 800c456:	e016      	b.n	800c486 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d009      	beq.n	800c472 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	891b      	ldrh	r3, [r3, #8]
 800c462:	4619      	mov	r1, r3
 800c464:	68b8      	ldr	r0, [r7, #8]
 800c466:	f7ff fad3 	bl	800ba10 <tcp_recved>
    pbuf_free(p);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f7fe fb6e 	bl	800ab4c <pbuf_free>
 800c470:	e008      	b.n	800c484 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c472:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d104      	bne.n	800c484 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c47a:	68b8      	ldr	r0, [r7, #8]
 800c47c:	f7ff f804 	bl	800b488 <tcp_close>
 800c480:	4603      	mov	r3, r0
 800c482:	e000      	b.n	800c486 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	08017734 	.word	0x08017734
 800c494:	08017ca4 	.word	0x08017ca4
 800c498:	08017778 	.word	0x08017778

0800c49c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c4a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	db01      	blt.n	800c4b2 <tcp_kill_prio+0x16>
 800c4ae:	79fb      	ldrb	r3, [r7, #7]
 800c4b0:	e000      	b.n	800c4b4 <tcp_kill_prio+0x18>
 800c4b2:	237f      	movs	r3, #127	; 0x7f
 800c4b4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c4b6:	7afb      	ldrb	r3, [r7, #11]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d034      	beq.n	800c526 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c4bc:	7afb      	ldrb	r3, [r7, #11]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4ca:	4b19      	ldr	r3, [pc, #100]	; (800c530 <tcp_kill_prio+0x94>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	617b      	str	r3, [r7, #20]
 800c4d0:	e01f      	b.n	800c512 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	7d5b      	ldrb	r3, [r3, #21]
 800c4d6:	7afa      	ldrb	r2, [r7, #11]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d80c      	bhi.n	800c4f6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c4e0:	7afa      	ldrb	r2, [r7, #11]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d112      	bne.n	800c50c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c4e6:	4b13      	ldr	r3, [pc, #76]	; (800c534 <tcp_kill_prio+0x98>)
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	6a1b      	ldr	r3, [r3, #32]
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d80a      	bhi.n	800c50c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c4f6:	4b0f      	ldr	r3, [pc, #60]	; (800c534 <tcp_kill_prio+0x98>)
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	6a1b      	ldr	r3, [r3, #32]
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	7d5b      	ldrb	r3, [r3, #21]
 800c50a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	617b      	str	r3, [r7, #20]
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1dc      	bne.n	800c4d2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d004      	beq.n	800c528 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c51e:	6938      	ldr	r0, [r7, #16]
 800c520:	f7ff f89c 	bl	800b65c <tcp_abort>
 800c524:	e000      	b.n	800c528 <tcp_kill_prio+0x8c>
    return;
 800c526:	bf00      	nop
  }
}
 800c528:	3718      	adds	r7, #24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	2000e4a8 	.word	0x2000e4a8
 800c534:	2000e49c 	.word	0x2000e49c

0800c538 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b086      	sub	sp, #24
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	4603      	mov	r3, r0
 800c540:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c542:	79fb      	ldrb	r3, [r7, #7]
 800c544:	2b08      	cmp	r3, #8
 800c546:	d009      	beq.n	800c55c <tcp_kill_state+0x24>
 800c548:	79fb      	ldrb	r3, [r7, #7]
 800c54a:	2b09      	cmp	r3, #9
 800c54c:	d006      	beq.n	800c55c <tcp_kill_state+0x24>
 800c54e:	4b1a      	ldr	r3, [pc, #104]	; (800c5b8 <tcp_kill_state+0x80>)
 800c550:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c554:	4919      	ldr	r1, [pc, #100]	; (800c5bc <tcp_kill_state+0x84>)
 800c556:	481a      	ldr	r0, [pc, #104]	; (800c5c0 <tcp_kill_state+0x88>)
 800c558:	f009 f94e 	bl	80157f8 <iprintf>

  inactivity = 0;
 800c55c:	2300      	movs	r3, #0
 800c55e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c560:	2300      	movs	r3, #0
 800c562:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c564:	4b17      	ldr	r3, [pc, #92]	; (800c5c4 <tcp_kill_state+0x8c>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	617b      	str	r3, [r7, #20]
 800c56a:	e017      	b.n	800c59c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	7d1b      	ldrb	r3, [r3, #20]
 800c570:	79fa      	ldrb	r2, [r7, #7]
 800c572:	429a      	cmp	r2, r3
 800c574:	d10f      	bne.n	800c596 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c576:	4b14      	ldr	r3, [pc, #80]	; (800c5c8 <tcp_kill_state+0x90>)
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	6a1b      	ldr	r3, [r3, #32]
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	429a      	cmp	r2, r3
 800c584:	d807      	bhi.n	800c596 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c586:	4b10      	ldr	r3, [pc, #64]	; (800c5c8 <tcp_kill_state+0x90>)
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	6a1b      	ldr	r3, [r3, #32]
 800c58e:	1ad3      	subs	r3, r2, r3
 800c590:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	617b      	str	r3, [r7, #20]
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1e4      	bne.n	800c56c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d003      	beq.n	800c5b0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	6938      	ldr	r0, [r7, #16]
 800c5ac:	f7fe ff98 	bl	800b4e0 <tcp_abandon>
  }
}
 800c5b0:	bf00      	nop
 800c5b2:	3718      	adds	r7, #24
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	08017734 	.word	0x08017734
 800c5bc:	08017cc0 	.word	0x08017cc0
 800c5c0:	08017778 	.word	0x08017778
 800c5c4:	2000e4a8 	.word	0x2000e4a8
 800c5c8:	2000e49c 	.word	0x2000e49c

0800c5cc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5da:	4b12      	ldr	r3, [pc, #72]	; (800c624 <tcp_kill_timewait+0x58>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	60fb      	str	r3, [r7, #12]
 800c5e0:	e012      	b.n	800c608 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c5e2:	4b11      	ldr	r3, [pc, #68]	; (800c628 <tcp_kill_timewait+0x5c>)
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6a1b      	ldr	r3, [r3, #32]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d807      	bhi.n	800c602 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c5f2:	4b0d      	ldr	r3, [pc, #52]	; (800c628 <tcp_kill_timewait+0x5c>)
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	6a1b      	ldr	r3, [r3, #32]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	60fb      	str	r3, [r7, #12]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1e9      	bne.n	800c5e2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d002      	beq.n	800c61a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c614:	68b8      	ldr	r0, [r7, #8]
 800c616:	f7ff f821 	bl	800b65c <tcp_abort>
  }
}
 800c61a:	bf00      	nop
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	2000e4ac 	.word	0x2000e4ac
 800c628:	2000e49c 	.word	0x2000e49c

0800c62c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c632:	4b10      	ldr	r3, [pc, #64]	; (800c674 <tcp_handle_closepend+0x48>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c638:	e014      	b.n	800c664 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	8b5b      	ldrh	r3, [r3, #26]
 800c644:	f003 0308 	and.w	r3, r3, #8
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d009      	beq.n	800c660 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	8b5b      	ldrh	r3, [r3, #26]
 800c650:	f023 0308 	bic.w	r3, r3, #8
 800c654:	b29a      	uxth	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7fe feaa 	bl	800b3b4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d1e7      	bne.n	800c63a <tcp_handle_closepend+0xe>
  }
}
 800c66a:	bf00      	nop
 800c66c:	bf00      	nop
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	2000e4a8 	.word	0x2000e4a8

0800c678 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	4603      	mov	r3, r0
 800c680:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c682:	2000      	movs	r0, #0
 800c684:	f7fd fb80 	bl	8009d88 <memp_malloc>
 800c688:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d126      	bne.n	800c6de <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c690:	f7ff ffcc 	bl	800c62c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c694:	f7ff ff9a 	bl	800c5cc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c698:	2000      	movs	r0, #0
 800c69a:	f7fd fb75 	bl	8009d88 <memp_malloc>
 800c69e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d11b      	bne.n	800c6de <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c6a6:	2009      	movs	r0, #9
 800c6a8:	f7ff ff46 	bl	800c538 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	f7fd fb6b 	bl	8009d88 <memp_malloc>
 800c6b2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d111      	bne.n	800c6de <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c6ba:	2008      	movs	r0, #8
 800c6bc:	f7ff ff3c 	bl	800c538 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c6c0:	2000      	movs	r0, #0
 800c6c2:	f7fd fb61 	bl	8009d88 <memp_malloc>
 800c6c6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d107      	bne.n	800c6de <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c6ce:	79fb      	ldrb	r3, [r7, #7]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7ff fee3 	bl	800c49c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	f7fd fb56 	bl	8009d88 <memp_malloc>
 800c6dc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d03f      	beq.n	800c764 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c6e4:	229c      	movs	r2, #156	; 0x9c
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	68f8      	ldr	r0, [r7, #12]
 800c6ea:	f009 f943 	bl	8015974 <memset>
    pcb->prio = prio;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	79fa      	ldrb	r2, [r7, #7]
 800c6f2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c6fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c704:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2240      	movs	r2, #64	; 0x40
 800c712:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c71a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2206      	movs	r2, #6
 800c720:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2206      	movs	r2, #6
 800c728:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c730:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2201      	movs	r2, #1
 800c736:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c73a:	4b0d      	ldr	r3, [pc, #52]	; (800c770 <tcp_alloc+0xf8>)
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c742:	4b0c      	ldr	r3, [pc, #48]	; (800c774 <tcp_alloc+0xfc>)
 800c744:	781a      	ldrb	r2, [r3, #0]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c750:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	4a08      	ldr	r2, [pc, #32]	; (800c778 <tcp_alloc+0x100>)
 800c758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	4a07      	ldr	r2, [pc, #28]	; (800c77c <tcp_alloc+0x104>)
 800c760:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c764:	68fb      	ldr	r3, [r7, #12]
}
 800c766:	4618      	mov	r0, r3
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	2000e49c 	.word	0x2000e49c
 800c774:	2000e4b2 	.word	0x2000e4b2
 800c778:	0800c431 	.word	0x0800c431
 800c77c:	006ddd00 	.word	0x006ddd00

0800c780 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800c784:	2040      	movs	r0, #64	; 0x40
 800c786:	f7ff ff77 	bl	800c678 <tcp_alloc>
 800c78a:	4603      	mov	r3, r0
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d002      	beq.n	800c7a6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	683a      	ldr	r2, [r7, #0]
 800c7a4:	611a      	str	r2, [r3, #16]
  }
}
 800c7a6:	bf00      	nop
 800c7a8:	370c      	adds	r7, #12
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
	...

0800c7b4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00e      	beq.n	800c7e2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	7d1b      	ldrb	r3, [r3, #20]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d106      	bne.n	800c7da <tcp_recv+0x26>
 800c7cc:	4b07      	ldr	r3, [pc, #28]	; (800c7ec <tcp_recv+0x38>)
 800c7ce:	f240 72df 	movw	r2, #2015	; 0x7df
 800c7d2:	4907      	ldr	r1, [pc, #28]	; (800c7f0 <tcp_recv+0x3c>)
 800c7d4:	4807      	ldr	r0, [pc, #28]	; (800c7f4 <tcp_recv+0x40>)
 800c7d6:	f009 f80f 	bl	80157f8 <iprintf>
    pcb->recv = recv;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	683a      	ldr	r2, [r7, #0]
 800c7de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800c7e2:	bf00      	nop
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	08017734 	.word	0x08017734
 800c7f0:	08017cd0 	.word	0x08017cd0
 800c7f4:	08017778 	.word	0x08017778

0800c7f8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00e      	beq.n	800c826 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	7d1b      	ldrb	r3, [r3, #20]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d106      	bne.n	800c81e <tcp_err+0x26>
 800c810:	4b07      	ldr	r3, [pc, #28]	; (800c830 <tcp_err+0x38>)
 800c812:	f640 020d 	movw	r2, #2061	; 0x80d
 800c816:	4907      	ldr	r1, [pc, #28]	; (800c834 <tcp_err+0x3c>)
 800c818:	4807      	ldr	r0, [pc, #28]	; (800c838 <tcp_err+0x40>)
 800c81a:	f008 ffed 	bl	80157f8 <iprintf>
    pcb->errf = err;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	683a      	ldr	r2, [r7, #0]
 800c822:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800c826:	bf00      	nop
 800c828:	3708      	adds	r7, #8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	08017734 	.word	0x08017734
 800c834:	08017d20 	.word	0x08017d20
 800c838:	08017778 	.word	0x08017778

0800c83c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b085      	sub	sp, #20
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d008      	beq.n	800c85e <tcp_accept+0x22>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	7d1b      	ldrb	r3, [r3, #20]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d104      	bne.n	800c85e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	683a      	ldr	r2, [r7, #0]
 800c85c:	619a      	str	r2, [r3, #24]
  }
}
 800c85e:	bf00      	nop
 800c860:	3714      	adds	r7, #20
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr
	...

0800c86c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d107      	bne.n	800c88a <tcp_pcb_purge+0x1e>
 800c87a:	4b21      	ldr	r3, [pc, #132]	; (800c900 <tcp_pcb_purge+0x94>)
 800c87c:	f640 0251 	movw	r2, #2129	; 0x851
 800c880:	4920      	ldr	r1, [pc, #128]	; (800c904 <tcp_pcb_purge+0x98>)
 800c882:	4821      	ldr	r0, [pc, #132]	; (800c908 <tcp_pcb_purge+0x9c>)
 800c884:	f008 ffb8 	bl	80157f8 <iprintf>
 800c888:	e037      	b.n	800c8fa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	7d1b      	ldrb	r3, [r3, #20]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d033      	beq.n	800c8fa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c896:	2b0a      	cmp	r3, #10
 800c898:	d02f      	beq.n	800c8fa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d02b      	beq.n	800c8fa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d007      	beq.n	800c8ba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7fe f94c 	bl	800ab4c <pbuf_free>
      pcb->refused_data = NULL;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d002      	beq.n	800c8c8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f986 	bl	800cbd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8ce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7ff fd51 	bl	800c37c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7ff fd4c 	bl	800c37c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	66da      	str	r2, [r3, #108]	; 0x6c
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c8fa:	3708      	adds	r7, #8
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	08017734 	.word	0x08017734
 800c904:	08017d80 	.word	0x08017d80
 800c908:	08017778 	.word	0x08017778

0800c90c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d106      	bne.n	800c92a <tcp_pcb_remove+0x1e>
 800c91c:	4b3e      	ldr	r3, [pc, #248]	; (800ca18 <tcp_pcb_remove+0x10c>)
 800c91e:	f640 0283 	movw	r2, #2179	; 0x883
 800c922:	493e      	ldr	r1, [pc, #248]	; (800ca1c <tcp_pcb_remove+0x110>)
 800c924:	483e      	ldr	r0, [pc, #248]	; (800ca20 <tcp_pcb_remove+0x114>)
 800c926:	f008 ff67 	bl	80157f8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d106      	bne.n	800c93e <tcp_pcb_remove+0x32>
 800c930:	4b39      	ldr	r3, [pc, #228]	; (800ca18 <tcp_pcb_remove+0x10c>)
 800c932:	f640 0284 	movw	r2, #2180	; 0x884
 800c936:	493b      	ldr	r1, [pc, #236]	; (800ca24 <tcp_pcb_remove+0x118>)
 800c938:	4839      	ldr	r0, [pc, #228]	; (800ca20 <tcp_pcb_remove+0x114>)
 800c93a:	f008 ff5d 	bl	80157f8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	683a      	ldr	r2, [r7, #0]
 800c944:	429a      	cmp	r2, r3
 800c946:	d105      	bne.n	800c954 <tcp_pcb_remove+0x48>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	68da      	ldr	r2, [r3, #12]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	601a      	str	r2, [r3, #0]
 800c952:	e013      	b.n	800c97c <tcp_pcb_remove+0x70>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	60fb      	str	r3, [r7, #12]
 800c95a:	e00c      	b.n	800c976 <tcp_pcb_remove+0x6a>
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	683a      	ldr	r2, [r7, #0]
 800c962:	429a      	cmp	r2, r3
 800c964:	d104      	bne.n	800c970 <tcp_pcb_remove+0x64>
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	68da      	ldr	r2, [r3, #12]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	60da      	str	r2, [r3, #12]
 800c96e:	e005      	b.n	800c97c <tcp_pcb_remove+0x70>
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	60fb      	str	r3, [r7, #12]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1ef      	bne.n	800c95c <tcp_pcb_remove+0x50>
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	2200      	movs	r2, #0
 800c980:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c982:	6838      	ldr	r0, [r7, #0]
 800c984:	f7ff ff72 	bl	800c86c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	7d1b      	ldrb	r3, [r3, #20]
 800c98c:	2b0a      	cmp	r3, #10
 800c98e:	d013      	beq.n	800c9b8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c994:	2b01      	cmp	r3, #1
 800c996:	d00f      	beq.n	800c9b8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	8b5b      	ldrh	r3, [r3, #26]
 800c99c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d009      	beq.n	800c9b8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	8b5b      	ldrh	r3, [r3, #26]
 800c9a8:	f043 0302 	orr.w	r3, r3, #2
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c9b2:	6838      	ldr	r0, [r7, #0]
 800c9b4:	f003 fbc6 	bl	8010144 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	7d1b      	ldrb	r3, [r3, #20]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d020      	beq.n	800ca02 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d006      	beq.n	800c9d6 <tcp_pcb_remove+0xca>
 800c9c8:	4b13      	ldr	r3, [pc, #76]	; (800ca18 <tcp_pcb_remove+0x10c>)
 800c9ca:	f640 0293 	movw	r2, #2195	; 0x893
 800c9ce:	4916      	ldr	r1, [pc, #88]	; (800ca28 <tcp_pcb_remove+0x11c>)
 800c9d0:	4813      	ldr	r0, [pc, #76]	; (800ca20 <tcp_pcb_remove+0x114>)
 800c9d2:	f008 ff11 	bl	80157f8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d006      	beq.n	800c9ec <tcp_pcb_remove+0xe0>
 800c9de:	4b0e      	ldr	r3, [pc, #56]	; (800ca18 <tcp_pcb_remove+0x10c>)
 800c9e0:	f640 0294 	movw	r2, #2196	; 0x894
 800c9e4:	4911      	ldr	r1, [pc, #68]	; (800ca2c <tcp_pcb_remove+0x120>)
 800c9e6:	480e      	ldr	r0, [pc, #56]	; (800ca20 <tcp_pcb_remove+0x114>)
 800c9e8:	f008 ff06 	bl	80157f8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d006      	beq.n	800ca02 <tcp_pcb_remove+0xf6>
 800c9f4:	4b08      	ldr	r3, [pc, #32]	; (800ca18 <tcp_pcb_remove+0x10c>)
 800c9f6:	f640 0296 	movw	r2, #2198	; 0x896
 800c9fa:	490d      	ldr	r1, [pc, #52]	; (800ca30 <tcp_pcb_remove+0x124>)
 800c9fc:	4808      	ldr	r0, [pc, #32]	; (800ca20 <tcp_pcb_remove+0x114>)
 800c9fe:	f008 fefb 	bl	80157f8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2200      	movs	r2, #0
 800ca06:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ca0e:	bf00      	nop
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	08017734 	.word	0x08017734
 800ca1c:	08017d9c 	.word	0x08017d9c
 800ca20:	08017778 	.word	0x08017778
 800ca24:	08017db8 	.word	0x08017db8
 800ca28:	08017dd8 	.word	0x08017dd8
 800ca2c:	08017df0 	.word	0x08017df0
 800ca30:	08017e0c 	.word	0x08017e0c

0800ca34 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d106      	bne.n	800ca50 <tcp_next_iss+0x1c>
 800ca42:	4b0a      	ldr	r3, [pc, #40]	; (800ca6c <tcp_next_iss+0x38>)
 800ca44:	f640 02af 	movw	r2, #2223	; 0x8af
 800ca48:	4909      	ldr	r1, [pc, #36]	; (800ca70 <tcp_next_iss+0x3c>)
 800ca4a:	480a      	ldr	r0, [pc, #40]	; (800ca74 <tcp_next_iss+0x40>)
 800ca4c:	f008 fed4 	bl	80157f8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ca50:	4b09      	ldr	r3, [pc, #36]	; (800ca78 <tcp_next_iss+0x44>)
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	4b09      	ldr	r3, [pc, #36]	; (800ca7c <tcp_next_iss+0x48>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4413      	add	r3, r2
 800ca5a:	4a07      	ldr	r2, [pc, #28]	; (800ca78 <tcp_next_iss+0x44>)
 800ca5c:	6013      	str	r3, [r2, #0]
  return iss;
 800ca5e:	4b06      	ldr	r3, [pc, #24]	; (800ca78 <tcp_next_iss+0x44>)
 800ca60:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	08017734 	.word	0x08017734
 800ca70:	08017e24 	.word	0x08017e24
 800ca74:	08017778 	.word	0x08017778
 800ca78:	20000470 	.word	0x20000470
 800ca7c:	2000e49c 	.word	0x2000e49c

0800ca80 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b086      	sub	sp, #24
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	4603      	mov	r3, r0
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	607a      	str	r2, [r7, #4]
 800ca8c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d106      	bne.n	800caa2 <tcp_eff_send_mss_netif+0x22>
 800ca94:	4b14      	ldr	r3, [pc, #80]	; (800cae8 <tcp_eff_send_mss_netif+0x68>)
 800ca96:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ca9a:	4914      	ldr	r1, [pc, #80]	; (800caec <tcp_eff_send_mss_netif+0x6c>)
 800ca9c:	4814      	ldr	r0, [pc, #80]	; (800caf0 <tcp_eff_send_mss_netif+0x70>)
 800ca9e:	f008 feab 	bl	80157f8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d101      	bne.n	800caac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800caa8:	89fb      	ldrh	r3, [r7, #14]
 800caaa:	e019      	b.n	800cae0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cab0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800cab2:	8afb      	ldrh	r3, [r7, #22]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d012      	beq.n	800cade <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800cab8:	2328      	movs	r3, #40	; 0x28
 800caba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800cabc:	8afa      	ldrh	r2, [r7, #22]
 800cabe:	8abb      	ldrh	r3, [r7, #20]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d904      	bls.n	800cace <tcp_eff_send_mss_netif+0x4e>
 800cac4:	8afa      	ldrh	r2, [r7, #22]
 800cac6:	8abb      	ldrh	r3, [r7, #20]
 800cac8:	1ad3      	subs	r3, r2, r3
 800caca:	b29b      	uxth	r3, r3
 800cacc:	e000      	b.n	800cad0 <tcp_eff_send_mss_netif+0x50>
 800cace:	2300      	movs	r3, #0
 800cad0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800cad2:	8a7a      	ldrh	r2, [r7, #18]
 800cad4:	89fb      	ldrh	r3, [r7, #14]
 800cad6:	4293      	cmp	r3, r2
 800cad8:	bf28      	it	cs
 800cada:	4613      	movcs	r3, r2
 800cadc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800cade:	89fb      	ldrh	r3, [r7, #14]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3718      	adds	r7, #24
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	08017734 	.word	0x08017734
 800caec:	08017e40 	.word	0x08017e40
 800caf0:	08017778 	.word	0x08017778

0800caf4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d119      	bne.n	800cb3c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800cb08:	4b10      	ldr	r3, [pc, #64]	; (800cb4c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800cb0a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800cb0e:	4910      	ldr	r1, [pc, #64]	; (800cb50 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800cb10:	4810      	ldr	r0, [pc, #64]	; (800cb54 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800cb12:	f008 fe71 	bl	80157f8 <iprintf>

  while (pcb != NULL) {
 800cb16:	e011      	b.n	800cb3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d108      	bne.n	800cb36 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f7fe fd96 	bl	800b65c <tcp_abort>
      pcb = next;
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	60fb      	str	r3, [r7, #12]
 800cb34:	e002      	b.n	800cb3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1ea      	bne.n	800cb18 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800cb42:	bf00      	nop
 800cb44:	bf00      	nop
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	08017734 	.word	0x08017734
 800cb50:	08017e68 	.word	0x08017e68
 800cb54:	08017778 	.word	0x08017778

0800cb58 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d02a      	beq.n	800cbbe <tcp_netif_ip_addr_changed+0x66>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d026      	beq.n	800cbbe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cb70:	4b15      	ldr	r3, [pc, #84]	; (800cbc8 <tcp_netif_ip_addr_changed+0x70>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4619      	mov	r1, r3
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7ff ffbc 	bl	800caf4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cb7c:	4b13      	ldr	r3, [pc, #76]	; (800cbcc <tcp_netif_ip_addr_changed+0x74>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4619      	mov	r1, r3
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f7ff ffb6 	bl	800caf4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d017      	beq.n	800cbbe <tcp_netif_ip_addr_changed+0x66>
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d013      	beq.n	800cbbe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cb96:	4b0e      	ldr	r3, [pc, #56]	; (800cbd0 <tcp_netif_ip_addr_changed+0x78>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	60fb      	str	r3, [r7, #12]
 800cb9c:	e00c      	b.n	800cbb8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d103      	bne.n	800cbb2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d1ef      	bne.n	800cb9e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800cbbe:	bf00      	nop
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	2000e4a8 	.word	0x2000e4a8
 800cbcc:	2000e4a0 	.word	0x2000e4a0
 800cbd0:	2000e4a4 	.word	0x2000e4a4

0800cbd4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d007      	beq.n	800cbf4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7ff fbc7 	bl	800c37c <tcp_segs_free>
    pcb->ooseq = NULL;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800cbf4:	bf00      	nop
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800cbfc:	b590      	push	{r4, r7, lr}
 800cbfe:	b08d      	sub	sp, #52	; 0x34
 800cc00:	af04      	add	r7, sp, #16
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d105      	bne.n	800cc18 <tcp_input+0x1c>
 800cc0c:	4b9b      	ldr	r3, [pc, #620]	; (800ce7c <tcp_input+0x280>)
 800cc0e:	2283      	movs	r2, #131	; 0x83
 800cc10:	499b      	ldr	r1, [pc, #620]	; (800ce80 <tcp_input+0x284>)
 800cc12:	489c      	ldr	r0, [pc, #624]	; (800ce84 <tcp_input+0x288>)
 800cc14:	f008 fdf0 	bl	80157f8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	4a9a      	ldr	r2, [pc, #616]	; (800ce88 <tcp_input+0x28c>)
 800cc1e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	895b      	ldrh	r3, [r3, #10]
 800cc24:	2b13      	cmp	r3, #19
 800cc26:	f240 83d1 	bls.w	800d3cc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cc2a:	4b98      	ldr	r3, [pc, #608]	; (800ce8c <tcp_input+0x290>)
 800cc2c:	695b      	ldr	r3, [r3, #20]
 800cc2e:	4a97      	ldr	r2, [pc, #604]	; (800ce8c <tcp_input+0x290>)
 800cc30:	6812      	ldr	r2, [r2, #0]
 800cc32:	4611      	mov	r1, r2
 800cc34:	4618      	mov	r0, r3
 800cc36:	f005 feab 	bl	8012990 <ip4_addr_isbroadcast_u32>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f040 83c7 	bne.w	800d3d0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800cc42:	4b92      	ldr	r3, [pc, #584]	; (800ce8c <tcp_input+0x290>)
 800cc44:	695b      	ldr	r3, [r3, #20]
 800cc46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cc4a:	2be0      	cmp	r3, #224	; 0xe0
 800cc4c:	f000 83c0 	beq.w	800d3d0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800cc50:	4b8d      	ldr	r3, [pc, #564]	; (800ce88 <tcp_input+0x28c>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	899b      	ldrh	r3, [r3, #12]
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fc fc1f 	bl	800949c <lwip_htons>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	0b1b      	lsrs	r3, r3, #12
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800cc6a:	7cbb      	ldrb	r3, [r7, #18]
 800cc6c:	2b13      	cmp	r3, #19
 800cc6e:	f240 83b1 	bls.w	800d3d4 <tcp_input+0x7d8>
 800cc72:	7cbb      	ldrb	r3, [r7, #18]
 800cc74:	b29a      	uxth	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	891b      	ldrh	r3, [r3, #8]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	f200 83aa 	bhi.w	800d3d4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cc80:	7cbb      	ldrb	r3, [r7, #18]
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	3b14      	subs	r3, #20
 800cc86:	b29a      	uxth	r2, r3
 800cc88:	4b81      	ldr	r3, [pc, #516]	; (800ce90 <tcp_input+0x294>)
 800cc8a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800cc8c:	4b81      	ldr	r3, [pc, #516]	; (800ce94 <tcp_input+0x298>)
 800cc8e:	2200      	movs	r2, #0
 800cc90:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	895a      	ldrh	r2, [r3, #10]
 800cc96:	7cbb      	ldrb	r3, [r7, #18]
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d309      	bcc.n	800ccb2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800cc9e:	4b7c      	ldr	r3, [pc, #496]	; (800ce90 <tcp_input+0x294>)
 800cca0:	881a      	ldrh	r2, [r3, #0]
 800cca2:	4b7d      	ldr	r3, [pc, #500]	; (800ce98 <tcp_input+0x29c>)
 800cca4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cca6:	7cbb      	ldrb	r3, [r7, #18]
 800cca8:	4619      	mov	r1, r3
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7fd fec8 	bl	800aa40 <pbuf_remove_header>
 800ccb0:	e04e      	b.n	800cd50 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d105      	bne.n	800ccc6 <tcp_input+0xca>
 800ccba:	4b70      	ldr	r3, [pc, #448]	; (800ce7c <tcp_input+0x280>)
 800ccbc:	22c2      	movs	r2, #194	; 0xc2
 800ccbe:	4977      	ldr	r1, [pc, #476]	; (800ce9c <tcp_input+0x2a0>)
 800ccc0:	4870      	ldr	r0, [pc, #448]	; (800ce84 <tcp_input+0x288>)
 800ccc2:	f008 fd99 	bl	80157f8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ccc6:	2114      	movs	r1, #20
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f7fd feb9 	bl	800aa40 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	895a      	ldrh	r2, [r3, #10]
 800ccd2:	4b71      	ldr	r3, [pc, #452]	; (800ce98 <tcp_input+0x29c>)
 800ccd4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ccd6:	4b6e      	ldr	r3, [pc, #440]	; (800ce90 <tcp_input+0x294>)
 800ccd8:	881a      	ldrh	r2, [r3, #0]
 800ccda:	4b6f      	ldr	r3, [pc, #444]	; (800ce98 <tcp_input+0x29c>)
 800ccdc:	881b      	ldrh	r3, [r3, #0]
 800ccde:	1ad3      	subs	r3, r2, r3
 800cce0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800cce2:	4b6d      	ldr	r3, [pc, #436]	; (800ce98 <tcp_input+0x29c>)
 800cce4:	881b      	ldrh	r3, [r3, #0]
 800cce6:	4619      	mov	r1, r3
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f7fd fea9 	bl	800aa40 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	895b      	ldrh	r3, [r3, #10]
 800ccf4:	8a3a      	ldrh	r2, [r7, #16]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	f200 836e 	bhi.w	800d3d8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	4a64      	ldr	r2, [pc, #400]	; (800ce94 <tcp_input+0x298>)
 800cd04:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	8a3a      	ldrh	r2, [r7, #16]
 800cd0c:	4611      	mov	r1, r2
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7fd fe96 	bl	800aa40 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	891a      	ldrh	r2, [r3, #8]
 800cd18:	8a3b      	ldrh	r3, [r7, #16]
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	895b      	ldrh	r3, [r3, #10]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d005      	beq.n	800cd36 <tcp_input+0x13a>
 800cd2a:	4b54      	ldr	r3, [pc, #336]	; (800ce7c <tcp_input+0x280>)
 800cd2c:	22df      	movs	r2, #223	; 0xdf
 800cd2e:	495c      	ldr	r1, [pc, #368]	; (800cea0 <tcp_input+0x2a4>)
 800cd30:	4854      	ldr	r0, [pc, #336]	; (800ce84 <tcp_input+0x288>)
 800cd32:	f008 fd61 	bl	80157f8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	891a      	ldrh	r2, [r3, #8]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	891b      	ldrh	r3, [r3, #8]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d005      	beq.n	800cd50 <tcp_input+0x154>
 800cd44:	4b4d      	ldr	r3, [pc, #308]	; (800ce7c <tcp_input+0x280>)
 800cd46:	22e0      	movs	r2, #224	; 0xe0
 800cd48:	4956      	ldr	r1, [pc, #344]	; (800cea4 <tcp_input+0x2a8>)
 800cd4a:	484e      	ldr	r0, [pc, #312]	; (800ce84 <tcp_input+0x288>)
 800cd4c:	f008 fd54 	bl	80157f8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cd50:	4b4d      	ldr	r3, [pc, #308]	; (800ce88 <tcp_input+0x28c>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	881b      	ldrh	r3, [r3, #0]
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	4a4b      	ldr	r2, [pc, #300]	; (800ce88 <tcp_input+0x28c>)
 800cd5a:	6814      	ldr	r4, [r2, #0]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7fc fb9d 	bl	800949c <lwip_htons>
 800cd62:	4603      	mov	r3, r0
 800cd64:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cd66:	4b48      	ldr	r3, [pc, #288]	; (800ce88 <tcp_input+0x28c>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	885b      	ldrh	r3, [r3, #2]
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	4a46      	ldr	r2, [pc, #280]	; (800ce88 <tcp_input+0x28c>)
 800cd70:	6814      	ldr	r4, [r2, #0]
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7fc fb92 	bl	800949c <lwip_htons>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cd7c:	4b42      	ldr	r3, [pc, #264]	; (800ce88 <tcp_input+0x28c>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	4a41      	ldr	r2, [pc, #260]	; (800ce88 <tcp_input+0x28c>)
 800cd84:	6814      	ldr	r4, [r2, #0]
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fc fb9d 	bl	80094c6 <lwip_htonl>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	6063      	str	r3, [r4, #4]
 800cd90:	6863      	ldr	r3, [r4, #4]
 800cd92:	4a45      	ldr	r2, [pc, #276]	; (800cea8 <tcp_input+0x2ac>)
 800cd94:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cd96:	4b3c      	ldr	r3, [pc, #240]	; (800ce88 <tcp_input+0x28c>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	689b      	ldr	r3, [r3, #8]
 800cd9c:	4a3a      	ldr	r2, [pc, #232]	; (800ce88 <tcp_input+0x28c>)
 800cd9e:	6814      	ldr	r4, [r2, #0]
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7fc fb90 	bl	80094c6 <lwip_htonl>
 800cda6:	4603      	mov	r3, r0
 800cda8:	60a3      	str	r3, [r4, #8]
 800cdaa:	68a3      	ldr	r3, [r4, #8]
 800cdac:	4a3f      	ldr	r2, [pc, #252]	; (800ceac <tcp_input+0x2b0>)
 800cdae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cdb0:	4b35      	ldr	r3, [pc, #212]	; (800ce88 <tcp_input+0x28c>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	89db      	ldrh	r3, [r3, #14]
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	4a33      	ldr	r2, [pc, #204]	; (800ce88 <tcp_input+0x28c>)
 800cdba:	6814      	ldr	r4, [r2, #0]
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7fc fb6d 	bl	800949c <lwip_htons>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800cdc6:	4b30      	ldr	r3, [pc, #192]	; (800ce88 <tcp_input+0x28c>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	899b      	ldrh	r3, [r3, #12]
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7fc fb64 	bl	800949c <lwip_htons>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cddc:	b2da      	uxtb	r2, r3
 800cdde:	4b34      	ldr	r3, [pc, #208]	; (800ceb0 <tcp_input+0x2b4>)
 800cde0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	891a      	ldrh	r2, [r3, #8]
 800cde6:	4b33      	ldr	r3, [pc, #204]	; (800ceb4 <tcp_input+0x2b8>)
 800cde8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800cdea:	4b31      	ldr	r3, [pc, #196]	; (800ceb0 <tcp_input+0x2b4>)
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	f003 0303 	and.w	r3, r3, #3
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00c      	beq.n	800ce10 <tcp_input+0x214>
    tcplen++;
 800cdf6:	4b2f      	ldr	r3, [pc, #188]	; (800ceb4 <tcp_input+0x2b8>)
 800cdf8:	881b      	ldrh	r3, [r3, #0]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	b29a      	uxth	r2, r3
 800cdfe:	4b2d      	ldr	r3, [pc, #180]	; (800ceb4 <tcp_input+0x2b8>)
 800ce00:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	891a      	ldrh	r2, [r3, #8]
 800ce06:	4b2b      	ldr	r3, [pc, #172]	; (800ceb4 <tcp_input+0x2b8>)
 800ce08:	881b      	ldrh	r3, [r3, #0]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	f200 82e6 	bhi.w	800d3dc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ce10:	2300      	movs	r3, #0
 800ce12:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce14:	4b28      	ldr	r3, [pc, #160]	; (800ceb8 <tcp_input+0x2bc>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	61fb      	str	r3, [r7, #28]
 800ce1a:	e09d      	b.n	800cf58 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	7d1b      	ldrb	r3, [r3, #20]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d105      	bne.n	800ce30 <tcp_input+0x234>
 800ce24:	4b15      	ldr	r3, [pc, #84]	; (800ce7c <tcp_input+0x280>)
 800ce26:	22fb      	movs	r2, #251	; 0xfb
 800ce28:	4924      	ldr	r1, [pc, #144]	; (800cebc <tcp_input+0x2c0>)
 800ce2a:	4816      	ldr	r0, [pc, #88]	; (800ce84 <tcp_input+0x288>)
 800ce2c:	f008 fce4 	bl	80157f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	7d1b      	ldrb	r3, [r3, #20]
 800ce34:	2b0a      	cmp	r3, #10
 800ce36:	d105      	bne.n	800ce44 <tcp_input+0x248>
 800ce38:	4b10      	ldr	r3, [pc, #64]	; (800ce7c <tcp_input+0x280>)
 800ce3a:	22fc      	movs	r2, #252	; 0xfc
 800ce3c:	4920      	ldr	r1, [pc, #128]	; (800cec0 <tcp_input+0x2c4>)
 800ce3e:	4811      	ldr	r0, [pc, #68]	; (800ce84 <tcp_input+0x288>)
 800ce40:	f008 fcda 	bl	80157f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	7d1b      	ldrb	r3, [r3, #20]
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d105      	bne.n	800ce58 <tcp_input+0x25c>
 800ce4c:	4b0b      	ldr	r3, [pc, #44]	; (800ce7c <tcp_input+0x280>)
 800ce4e:	22fd      	movs	r2, #253	; 0xfd
 800ce50:	491c      	ldr	r1, [pc, #112]	; (800cec4 <tcp_input+0x2c8>)
 800ce52:	480c      	ldr	r0, [pc, #48]	; (800ce84 <tcp_input+0x288>)
 800ce54:	f008 fcd0 	bl	80157f8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	7a1b      	ldrb	r3, [r3, #8]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d033      	beq.n	800cec8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	7a1a      	ldrb	r2, [r3, #8]
 800ce64:	4b09      	ldr	r3, [pc, #36]	; (800ce8c <tcp_input+0x290>)
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d029      	beq.n	800cec8 <tcp_input+0x2cc>
      prev = pcb;
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	61bb      	str	r3, [r7, #24]
      continue;
 800ce78:	e06b      	b.n	800cf52 <tcp_input+0x356>
 800ce7a:	bf00      	nop
 800ce7c:	08017e9c 	.word	0x08017e9c
 800ce80:	08017ed0 	.word	0x08017ed0
 800ce84:	08017ee8 	.word	0x08017ee8
 800ce88:	2000e4c4 	.word	0x2000e4c4
 800ce8c:	20005550 	.word	0x20005550
 800ce90:	2000e4c8 	.word	0x2000e4c8
 800ce94:	2000e4cc 	.word	0x2000e4cc
 800ce98:	2000e4ca 	.word	0x2000e4ca
 800ce9c:	08017f10 	.word	0x08017f10
 800cea0:	08017f20 	.word	0x08017f20
 800cea4:	08017f2c 	.word	0x08017f2c
 800cea8:	2000e4d4 	.word	0x2000e4d4
 800ceac:	2000e4d8 	.word	0x2000e4d8
 800ceb0:	2000e4e0 	.word	0x2000e4e0
 800ceb4:	2000e4de 	.word	0x2000e4de
 800ceb8:	2000e4a8 	.word	0x2000e4a8
 800cebc:	08017f4c 	.word	0x08017f4c
 800cec0:	08017f74 	.word	0x08017f74
 800cec4:	08017fa0 	.word	0x08017fa0
    }

    if (pcb->remote_port == tcphdr->src &&
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	8b1a      	ldrh	r2, [r3, #24]
 800cecc:	4b72      	ldr	r3, [pc, #456]	; (800d098 <tcp_input+0x49c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	881b      	ldrh	r3, [r3, #0]
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d13a      	bne.n	800cf4e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ced8:	69fb      	ldr	r3, [r7, #28]
 800ceda:	8ada      	ldrh	r2, [r3, #22]
 800cedc:	4b6e      	ldr	r3, [pc, #440]	; (800d098 <tcp_input+0x49c>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	885b      	ldrh	r3, [r3, #2]
 800cee2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d132      	bne.n	800cf4e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	4b6b      	ldr	r3, [pc, #428]	; (800d09c <tcp_input+0x4a0>)
 800ceee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d12c      	bne.n	800cf4e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	4b68      	ldr	r3, [pc, #416]	; (800d09c <tcp_input+0x4a0>)
 800cefa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d126      	bne.n	800cf4e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	69fa      	ldr	r2, [r7, #28]
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d106      	bne.n	800cf18 <tcp_input+0x31c>
 800cf0a:	4b65      	ldr	r3, [pc, #404]	; (800d0a0 <tcp_input+0x4a4>)
 800cf0c:	f240 120d 	movw	r2, #269	; 0x10d
 800cf10:	4964      	ldr	r1, [pc, #400]	; (800d0a4 <tcp_input+0x4a8>)
 800cf12:	4865      	ldr	r0, [pc, #404]	; (800d0a8 <tcp_input+0x4ac>)
 800cf14:	f008 fc70 	bl	80157f8 <iprintf>
      if (prev != NULL) {
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00a      	beq.n	800cf34 <tcp_input+0x338>
        prev->next = pcb->next;
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	68da      	ldr	r2, [r3, #12]
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800cf26:	4b61      	ldr	r3, [pc, #388]	; (800d0ac <tcp_input+0x4b0>)
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800cf2e:	4a5f      	ldr	r2, [pc, #380]	; (800d0ac <tcp_input+0x4b0>)
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	69fa      	ldr	r2, [r7, #28]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d111      	bne.n	800cf62 <tcp_input+0x366>
 800cf3e:	4b58      	ldr	r3, [pc, #352]	; (800d0a0 <tcp_input+0x4a4>)
 800cf40:	f240 1215 	movw	r2, #277	; 0x115
 800cf44:	495a      	ldr	r1, [pc, #360]	; (800d0b0 <tcp_input+0x4b4>)
 800cf46:	4858      	ldr	r0, [pc, #352]	; (800d0a8 <tcp_input+0x4ac>)
 800cf48:	f008 fc56 	bl	80157f8 <iprintf>
      break;
 800cf4c:	e009      	b.n	800cf62 <tcp_input+0x366>
    }
    prev = pcb;
 800cf4e:	69fb      	ldr	r3, [r7, #28]
 800cf50:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	61fb      	str	r3, [r7, #28]
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f47f af5e 	bne.w	800ce1c <tcp_input+0x220>
 800cf60:	e000      	b.n	800cf64 <tcp_input+0x368>
      break;
 800cf62:	bf00      	nop
  }

  if (pcb == NULL) {
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	f040 80aa 	bne.w	800d0c0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf6c:	4b51      	ldr	r3, [pc, #324]	; (800d0b4 <tcp_input+0x4b8>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	61fb      	str	r3, [r7, #28]
 800cf72:	e03f      	b.n	800cff4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	7d1b      	ldrb	r3, [r3, #20]
 800cf78:	2b0a      	cmp	r3, #10
 800cf7a:	d006      	beq.n	800cf8a <tcp_input+0x38e>
 800cf7c:	4b48      	ldr	r3, [pc, #288]	; (800d0a0 <tcp_input+0x4a4>)
 800cf7e:	f240 121f 	movw	r2, #287	; 0x11f
 800cf82:	494d      	ldr	r1, [pc, #308]	; (800d0b8 <tcp_input+0x4bc>)
 800cf84:	4848      	ldr	r0, [pc, #288]	; (800d0a8 <tcp_input+0x4ac>)
 800cf86:	f008 fc37 	bl	80157f8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	7a1b      	ldrb	r3, [r3, #8]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d009      	beq.n	800cfa6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	7a1a      	ldrb	r2, [r3, #8]
 800cf96:	4b41      	ldr	r3, [pc, #260]	; (800d09c <tcp_input+0x4a0>)
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d122      	bne.n	800cfec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	8b1a      	ldrh	r2, [r3, #24]
 800cfaa:	4b3b      	ldr	r3, [pc, #236]	; (800d098 <tcp_input+0x49c>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	881b      	ldrh	r3, [r3, #0]
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d11b      	bne.n	800cfee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800cfb6:	69fb      	ldr	r3, [r7, #28]
 800cfb8:	8ada      	ldrh	r2, [r3, #22]
 800cfba:	4b37      	ldr	r3, [pc, #220]	; (800d098 <tcp_input+0x49c>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	885b      	ldrh	r3, [r3, #2]
 800cfc0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d113      	bne.n	800cfee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cfc6:	69fb      	ldr	r3, [r7, #28]
 800cfc8:	685a      	ldr	r2, [r3, #4]
 800cfca:	4b34      	ldr	r3, [pc, #208]	; (800d09c <tcp_input+0x4a0>)
 800cfcc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d10d      	bne.n	800cfee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	4b31      	ldr	r3, [pc, #196]	; (800d09c <tcp_input+0x4a0>)
 800cfd8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d107      	bne.n	800cfee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800cfde:	69f8      	ldr	r0, [r7, #28]
 800cfe0:	f000 fb56 	bl	800d690 <tcp_timewait_input>
        }
        pbuf_free(p);
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7fd fdb1 	bl	800ab4c <pbuf_free>
        return;
 800cfea:	e1fd      	b.n	800d3e8 <tcp_input+0x7ec>
        continue;
 800cfec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfee:	69fb      	ldr	r3, [r7, #28]
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	61fb      	str	r3, [r7, #28]
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1bc      	bne.n	800cf74 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800cffa:	2300      	movs	r3, #0
 800cffc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cffe:	4b2f      	ldr	r3, [pc, #188]	; (800d0bc <tcp_input+0x4c0>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	617b      	str	r3, [r7, #20]
 800d004:	e02a      	b.n	800d05c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	7a1b      	ldrb	r3, [r3, #8]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d00c      	beq.n	800d028 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	7a1a      	ldrb	r2, [r3, #8]
 800d012:	4b22      	ldr	r3, [pc, #136]	; (800d09c <tcp_input+0x4a0>)
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d01a:	3301      	adds	r3, #1
 800d01c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d01e:	429a      	cmp	r2, r3
 800d020:	d002      	beq.n	800d028 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	61bb      	str	r3, [r7, #24]
        continue;
 800d026:	e016      	b.n	800d056 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	8ada      	ldrh	r2, [r3, #22]
 800d02c:	4b1a      	ldr	r3, [pc, #104]	; (800d098 <tcp_input+0x49c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	885b      	ldrh	r3, [r3, #2]
 800d032:	b29b      	uxth	r3, r3
 800d034:	429a      	cmp	r2, r3
 800d036:	d10c      	bne.n	800d052 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	4b17      	ldr	r3, [pc, #92]	; (800d09c <tcp_input+0x4a0>)
 800d03e:	695b      	ldr	r3, [r3, #20]
 800d040:	429a      	cmp	r2, r3
 800d042:	d00f      	beq.n	800d064 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00d      	beq.n	800d066 <tcp_input+0x46a>
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d009      	beq.n	800d066 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	617b      	str	r3, [r7, #20]
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d1d1      	bne.n	800d006 <tcp_input+0x40a>
 800d062:	e000      	b.n	800d066 <tcp_input+0x46a>
            break;
 800d064:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d029      	beq.n	800d0c0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00a      	beq.n	800d088 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	68da      	ldr	r2, [r3, #12]
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d07a:	4b10      	ldr	r3, [pc, #64]	; (800d0bc <tcp_input+0x4c0>)
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d082:	4a0e      	ldr	r2, [pc, #56]	; (800d0bc <tcp_input+0x4c0>)
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d088:	6978      	ldr	r0, [r7, #20]
 800d08a:	f000 fa03 	bl	800d494 <tcp_listen_input>
      }
      pbuf_free(p);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f7fd fd5c 	bl	800ab4c <pbuf_free>
      return;
 800d094:	e1a8      	b.n	800d3e8 <tcp_input+0x7ec>
 800d096:	bf00      	nop
 800d098:	2000e4c4 	.word	0x2000e4c4
 800d09c:	20005550 	.word	0x20005550
 800d0a0:	08017e9c 	.word	0x08017e9c
 800d0a4:	08017fc8 	.word	0x08017fc8
 800d0a8:	08017ee8 	.word	0x08017ee8
 800d0ac:	2000e4a8 	.word	0x2000e4a8
 800d0b0:	08017ff4 	.word	0x08017ff4
 800d0b4:	2000e4ac 	.word	0x2000e4ac
 800d0b8:	08018020 	.word	0x08018020
 800d0bc:	2000e4a4 	.word	0x2000e4a4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d0c0:	69fb      	ldr	r3, [r7, #28]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f000 8158 	beq.w	800d378 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d0c8:	4b95      	ldr	r3, [pc, #596]	; (800d320 <tcp_input+0x724>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	891a      	ldrh	r2, [r3, #8]
 800d0d2:	4b93      	ldr	r3, [pc, #588]	; (800d320 <tcp_input+0x724>)
 800d0d4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d0d6:	4a92      	ldr	r2, [pc, #584]	; (800d320 <tcp_input+0x724>)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d0dc:	4b91      	ldr	r3, [pc, #580]	; (800d324 <tcp_input+0x728>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a8f      	ldr	r2, [pc, #572]	; (800d320 <tcp_input+0x724>)
 800d0e2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d0e4:	4b90      	ldr	r3, [pc, #576]	; (800d328 <tcp_input+0x72c>)
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d0ea:	4b90      	ldr	r3, [pc, #576]	; (800d32c <tcp_input+0x730>)
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d0f0:	4b8f      	ldr	r3, [pc, #572]	; (800d330 <tcp_input+0x734>)
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d0f6:	4b8f      	ldr	r3, [pc, #572]	; (800d334 <tcp_input+0x738>)
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	f003 0308 	and.w	r3, r3, #8
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d006      	beq.n	800d110 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	7b5b      	ldrb	r3, [r3, #13]
 800d106:	f043 0301 	orr.w	r3, r3, #1
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d110:	69fb      	ldr	r3, [r7, #28]
 800d112:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d114:	2b00      	cmp	r3, #0
 800d116:	d017      	beq.n	800d148 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d118:	69f8      	ldr	r0, [r7, #28]
 800d11a:	f7ff f8b3 	bl	800c284 <tcp_process_refused_data>
 800d11e:	4603      	mov	r3, r0
 800d120:	f113 0f0d 	cmn.w	r3, #13
 800d124:	d007      	beq.n	800d136 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d126:	69fb      	ldr	r3, [r7, #28]
 800d128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00c      	beq.n	800d148 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d12e:	4b82      	ldr	r3, [pc, #520]	; (800d338 <tcp_input+0x73c>)
 800d130:	881b      	ldrh	r3, [r3, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d008      	beq.n	800d148 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	f040 80e3 	bne.w	800d306 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d140:	69f8      	ldr	r0, [r7, #28]
 800d142:	f003 fe05 	bl	8010d50 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d146:	e0de      	b.n	800d306 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d148:	4a7c      	ldr	r2, [pc, #496]	; (800d33c <tcp_input+0x740>)
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d14e:	69f8      	ldr	r0, [r7, #28]
 800d150:	f000 fb18 	bl	800d784 <tcp_process>
 800d154:	4603      	mov	r3, r0
 800d156:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d158:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d15c:	f113 0f0d 	cmn.w	r3, #13
 800d160:	f000 80d3 	beq.w	800d30a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d164:	4b71      	ldr	r3, [pc, #452]	; (800d32c <tcp_input+0x730>)
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	f003 0308 	and.w	r3, r3, #8
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d015      	beq.n	800d19c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d170:	69fb      	ldr	r3, [r7, #28]
 800d172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d176:	2b00      	cmp	r3, #0
 800d178:	d008      	beq.n	800d18c <tcp_input+0x590>
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d180:	69fa      	ldr	r2, [r7, #28]
 800d182:	6912      	ldr	r2, [r2, #16]
 800d184:	f06f 010d 	mvn.w	r1, #13
 800d188:	4610      	mov	r0, r2
 800d18a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d18c:	69f9      	ldr	r1, [r7, #28]
 800d18e:	486c      	ldr	r0, [pc, #432]	; (800d340 <tcp_input+0x744>)
 800d190:	f7ff fbbc 	bl	800c90c <tcp_pcb_remove>
        tcp_free(pcb);
 800d194:	69f8      	ldr	r0, [r7, #28]
 800d196:	f7fd ff79 	bl	800b08c <tcp_free>
 800d19a:	e0da      	b.n	800d352 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d19c:	2300      	movs	r3, #0
 800d19e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d1a0:	4b63      	ldr	r3, [pc, #396]	; (800d330 <tcp_input+0x734>)
 800d1a2:	881b      	ldrh	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d01d      	beq.n	800d1e4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d1a8:	4b61      	ldr	r3, [pc, #388]	; (800d330 <tcp_input+0x734>)
 800d1aa:	881b      	ldrh	r3, [r3, #0]
 800d1ac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d00a      	beq.n	800d1ce <tcp_input+0x5d2>
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1be:	69fa      	ldr	r2, [r7, #28]
 800d1c0:	6910      	ldr	r0, [r2, #16]
 800d1c2:	89fa      	ldrh	r2, [r7, #14]
 800d1c4:	69f9      	ldr	r1, [r7, #28]
 800d1c6:	4798      	blx	r3
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	74fb      	strb	r3, [r7, #19]
 800d1cc:	e001      	b.n	800d1d2 <tcp_input+0x5d6>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d1d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1d6:	f113 0f0d 	cmn.w	r3, #13
 800d1da:	f000 8098 	beq.w	800d30e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d1de:	4b54      	ldr	r3, [pc, #336]	; (800d330 <tcp_input+0x734>)
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d1e4:	69f8      	ldr	r0, [r7, #28]
 800d1e6:	f000 f915 	bl	800d414 <tcp_input_delayed_close>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	f040 8090 	bne.w	800d312 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d1f2:	4b4d      	ldr	r3, [pc, #308]	; (800d328 <tcp_input+0x72c>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d041      	beq.n	800d27e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d006      	beq.n	800d210 <tcp_input+0x614>
 800d202:	4b50      	ldr	r3, [pc, #320]	; (800d344 <tcp_input+0x748>)
 800d204:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d208:	494f      	ldr	r1, [pc, #316]	; (800d348 <tcp_input+0x74c>)
 800d20a:	4850      	ldr	r0, [pc, #320]	; (800d34c <tcp_input+0x750>)
 800d20c:	f008 faf4 	bl	80157f8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	8b5b      	ldrh	r3, [r3, #26]
 800d214:	f003 0310 	and.w	r3, r3, #16
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d008      	beq.n	800d22e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d21c:	4b42      	ldr	r3, [pc, #264]	; (800d328 <tcp_input+0x72c>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4618      	mov	r0, r3
 800d222:	f7fd fc93 	bl	800ab4c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d226:	69f8      	ldr	r0, [r7, #28]
 800d228:	f7fe fa18 	bl	800b65c <tcp_abort>
            goto aborted;
 800d22c:	e091      	b.n	800d352 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00c      	beq.n	800d252 <tcp_input+0x656>
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d23e:	69fb      	ldr	r3, [r7, #28]
 800d240:	6918      	ldr	r0, [r3, #16]
 800d242:	4b39      	ldr	r3, [pc, #228]	; (800d328 <tcp_input+0x72c>)
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	2300      	movs	r3, #0
 800d248:	69f9      	ldr	r1, [r7, #28]
 800d24a:	47a0      	blx	r4
 800d24c:	4603      	mov	r3, r0
 800d24e:	74fb      	strb	r3, [r7, #19]
 800d250:	e008      	b.n	800d264 <tcp_input+0x668>
 800d252:	4b35      	ldr	r3, [pc, #212]	; (800d328 <tcp_input+0x72c>)
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	2300      	movs	r3, #0
 800d258:	69f9      	ldr	r1, [r7, #28]
 800d25a:	2000      	movs	r0, #0
 800d25c:	f7ff f8e8 	bl	800c430 <tcp_recv_null>
 800d260:	4603      	mov	r3, r0
 800d262:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d264:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d268:	f113 0f0d 	cmn.w	r3, #13
 800d26c:	d053      	beq.n	800d316 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d26e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d003      	beq.n	800d27e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d276:	4b2c      	ldr	r3, [pc, #176]	; (800d328 <tcp_input+0x72c>)
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d27e:	4b2b      	ldr	r3, [pc, #172]	; (800d32c <tcp_input+0x730>)
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	f003 0320 	and.w	r3, r3, #32
 800d286:	2b00      	cmp	r3, #0
 800d288:	d030      	beq.n	800d2ec <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d009      	beq.n	800d2a6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d296:	7b5a      	ldrb	r2, [r3, #13]
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d29c:	f042 0220 	orr.w	r2, r2, #32
 800d2a0:	b2d2      	uxtb	r2, r2
 800d2a2:	735a      	strb	r2, [r3, #13]
 800d2a4:	e022      	b.n	800d2ec <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d2ae:	d005      	beq.n	800d2bc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d2bc:	69fb      	ldr	r3, [r7, #28]
 800d2be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00b      	beq.n	800d2de <tcp_input+0x6e2>
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	6918      	ldr	r0, [r3, #16]
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	69f9      	ldr	r1, [r7, #28]
 800d2d6:	47a0      	blx	r4
 800d2d8:	4603      	mov	r3, r0
 800d2da:	74fb      	strb	r3, [r7, #19]
 800d2dc:	e001      	b.n	800d2e2 <tcp_input+0x6e6>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d2e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d2e6:	f113 0f0d 	cmn.w	r3, #13
 800d2ea:	d016      	beq.n	800d31a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d2ec:	4b13      	ldr	r3, [pc, #76]	; (800d33c <tcp_input+0x740>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d2f2:	69f8      	ldr	r0, [r7, #28]
 800d2f4:	f000 f88e 	bl	800d414 <tcp_input_delayed_close>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d128      	bne.n	800d350 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d2fe:	69f8      	ldr	r0, [r7, #28]
 800d300:	f002 ff20 	bl	8010144 <tcp_output>
 800d304:	e025      	b.n	800d352 <tcp_input+0x756>
        goto aborted;
 800d306:	bf00      	nop
 800d308:	e023      	b.n	800d352 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d30a:	bf00      	nop
 800d30c:	e021      	b.n	800d352 <tcp_input+0x756>
              goto aborted;
 800d30e:	bf00      	nop
 800d310:	e01f      	b.n	800d352 <tcp_input+0x756>
          goto aborted;
 800d312:	bf00      	nop
 800d314:	e01d      	b.n	800d352 <tcp_input+0x756>
            goto aborted;
 800d316:	bf00      	nop
 800d318:	e01b      	b.n	800d352 <tcp_input+0x756>
              goto aborted;
 800d31a:	bf00      	nop
 800d31c:	e019      	b.n	800d352 <tcp_input+0x756>
 800d31e:	bf00      	nop
 800d320:	2000e4b4 	.word	0x2000e4b4
 800d324:	2000e4c4 	.word	0x2000e4c4
 800d328:	2000e4e4 	.word	0x2000e4e4
 800d32c:	2000e4e1 	.word	0x2000e4e1
 800d330:	2000e4dc 	.word	0x2000e4dc
 800d334:	2000e4e0 	.word	0x2000e4e0
 800d338:	2000e4de 	.word	0x2000e4de
 800d33c:	2000e4e8 	.word	0x2000e4e8
 800d340:	2000e4a8 	.word	0x2000e4a8
 800d344:	08017e9c 	.word	0x08017e9c
 800d348:	08018050 	.word	0x08018050
 800d34c:	08017ee8 	.word	0x08017ee8
          goto aborted;
 800d350:	bf00      	nop
    tcp_input_pcb = NULL;
 800d352:	4b27      	ldr	r3, [pc, #156]	; (800d3f0 <tcp_input+0x7f4>)
 800d354:	2200      	movs	r2, #0
 800d356:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d358:	4b26      	ldr	r3, [pc, #152]	; (800d3f4 <tcp_input+0x7f8>)
 800d35a:	2200      	movs	r2, #0
 800d35c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d35e:	4b26      	ldr	r3, [pc, #152]	; (800d3f8 <tcp_input+0x7fc>)
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d03f      	beq.n	800d3e6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800d366:	4b24      	ldr	r3, [pc, #144]	; (800d3f8 <tcp_input+0x7fc>)
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7fd fbee 	bl	800ab4c <pbuf_free>
      inseg.p = NULL;
 800d370:	4b21      	ldr	r3, [pc, #132]	; (800d3f8 <tcp_input+0x7fc>)
 800d372:	2200      	movs	r2, #0
 800d374:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d376:	e036      	b.n	800d3e6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d378:	4b20      	ldr	r3, [pc, #128]	; (800d3fc <tcp_input+0x800>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	899b      	ldrh	r3, [r3, #12]
 800d37e:	b29b      	uxth	r3, r3
 800d380:	4618      	mov	r0, r3
 800d382:	f7fc f88b 	bl	800949c <lwip_htons>
 800d386:	4603      	mov	r3, r0
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	f003 0304 	and.w	r3, r3, #4
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d118      	bne.n	800d3c4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d392:	4b1b      	ldr	r3, [pc, #108]	; (800d400 <tcp_input+0x804>)
 800d394:	6819      	ldr	r1, [r3, #0]
 800d396:	4b1b      	ldr	r3, [pc, #108]	; (800d404 <tcp_input+0x808>)
 800d398:	881b      	ldrh	r3, [r3, #0]
 800d39a:	461a      	mov	r2, r3
 800d39c:	4b1a      	ldr	r3, [pc, #104]	; (800d408 <tcp_input+0x80c>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3a2:	4b16      	ldr	r3, [pc, #88]	; (800d3fc <tcp_input+0x800>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3a6:	885b      	ldrh	r3, [r3, #2]
 800d3a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3aa:	4a14      	ldr	r2, [pc, #80]	; (800d3fc <tcp_input+0x800>)
 800d3ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3ae:	8812      	ldrh	r2, [r2, #0]
 800d3b0:	b292      	uxth	r2, r2
 800d3b2:	9202      	str	r2, [sp, #8]
 800d3b4:	9301      	str	r3, [sp, #4]
 800d3b6:	4b15      	ldr	r3, [pc, #84]	; (800d40c <tcp_input+0x810>)
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	4b15      	ldr	r3, [pc, #84]	; (800d410 <tcp_input+0x814>)
 800d3bc:	4602      	mov	r2, r0
 800d3be:	2000      	movs	r0, #0
 800d3c0:	f003 fc74 	bl	8010cac <tcp_rst>
    pbuf_free(p);
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7fd fbc1 	bl	800ab4c <pbuf_free>
  return;
 800d3ca:	e00c      	b.n	800d3e6 <tcp_input+0x7ea>
    goto dropped;
 800d3cc:	bf00      	nop
 800d3ce:	e006      	b.n	800d3de <tcp_input+0x7e2>
    goto dropped;
 800d3d0:	bf00      	nop
 800d3d2:	e004      	b.n	800d3de <tcp_input+0x7e2>
    goto dropped;
 800d3d4:	bf00      	nop
 800d3d6:	e002      	b.n	800d3de <tcp_input+0x7e2>
      goto dropped;
 800d3d8:	bf00      	nop
 800d3da:	e000      	b.n	800d3de <tcp_input+0x7e2>
      goto dropped;
 800d3dc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f7fd fbb4 	bl	800ab4c <pbuf_free>
 800d3e4:	e000      	b.n	800d3e8 <tcp_input+0x7ec>
  return;
 800d3e6:	bf00      	nop
}
 800d3e8:	3724      	adds	r7, #36	; 0x24
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd90      	pop	{r4, r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	2000e4e8 	.word	0x2000e4e8
 800d3f4:	2000e4e4 	.word	0x2000e4e4
 800d3f8:	2000e4b4 	.word	0x2000e4b4
 800d3fc:	2000e4c4 	.word	0x2000e4c4
 800d400:	2000e4d8 	.word	0x2000e4d8
 800d404:	2000e4de 	.word	0x2000e4de
 800d408:	2000e4d4 	.word	0x2000e4d4
 800d40c:	20005560 	.word	0x20005560
 800d410:	20005564 	.word	0x20005564

0800d414 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d106      	bne.n	800d430 <tcp_input_delayed_close+0x1c>
 800d422:	4b17      	ldr	r3, [pc, #92]	; (800d480 <tcp_input_delayed_close+0x6c>)
 800d424:	f240 225a 	movw	r2, #602	; 0x25a
 800d428:	4916      	ldr	r1, [pc, #88]	; (800d484 <tcp_input_delayed_close+0x70>)
 800d42a:	4817      	ldr	r0, [pc, #92]	; (800d488 <tcp_input_delayed_close+0x74>)
 800d42c:	f008 f9e4 	bl	80157f8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d430:	4b16      	ldr	r3, [pc, #88]	; (800d48c <tcp_input_delayed_close+0x78>)
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	f003 0310 	and.w	r3, r3, #16
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d01c      	beq.n	800d476 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	8b5b      	ldrh	r3, [r3, #26]
 800d440:	f003 0310 	and.w	r3, r3, #16
 800d444:	2b00      	cmp	r3, #0
 800d446:	d10d      	bne.n	800d464 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d008      	beq.n	800d464 <tcp_input_delayed_close+0x50>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	6912      	ldr	r2, [r2, #16]
 800d45c:	f06f 010e 	mvn.w	r1, #14
 800d460:	4610      	mov	r0, r2
 800d462:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d464:	6879      	ldr	r1, [r7, #4]
 800d466:	480a      	ldr	r0, [pc, #40]	; (800d490 <tcp_input_delayed_close+0x7c>)
 800d468:	f7ff fa50 	bl	800c90c <tcp_pcb_remove>
    tcp_free(pcb);
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7fd fe0d 	bl	800b08c <tcp_free>
    return 1;
 800d472:	2301      	movs	r3, #1
 800d474:	e000      	b.n	800d478 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d476:	2300      	movs	r3, #0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	08017e9c 	.word	0x08017e9c
 800d484:	0801806c 	.word	0x0801806c
 800d488:	08017ee8 	.word	0x08017ee8
 800d48c:	2000e4e1 	.word	0x2000e4e1
 800d490:	2000e4a8 	.word	0x2000e4a8

0800d494 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d494:	b590      	push	{r4, r7, lr}
 800d496:	b08b      	sub	sp, #44	; 0x2c
 800d498:	af04      	add	r7, sp, #16
 800d49a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d49c:	4b6f      	ldr	r3, [pc, #444]	; (800d65c <tcp_listen_input+0x1c8>)
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	f003 0304 	and.w	r3, r3, #4
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f040 80d2 	bne.w	800d64e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d106      	bne.n	800d4be <tcp_listen_input+0x2a>
 800d4b0:	4b6b      	ldr	r3, [pc, #428]	; (800d660 <tcp_listen_input+0x1cc>)
 800d4b2:	f240 2281 	movw	r2, #641	; 0x281
 800d4b6:	496b      	ldr	r1, [pc, #428]	; (800d664 <tcp_listen_input+0x1d0>)
 800d4b8:	486b      	ldr	r0, [pc, #428]	; (800d668 <tcp_listen_input+0x1d4>)
 800d4ba:	f008 f99d 	bl	80157f8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d4be:	4b67      	ldr	r3, [pc, #412]	; (800d65c <tcp_listen_input+0x1c8>)
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	f003 0310 	and.w	r3, r3, #16
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d019      	beq.n	800d4fe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4ca:	4b68      	ldr	r3, [pc, #416]	; (800d66c <tcp_listen_input+0x1d8>)
 800d4cc:	6819      	ldr	r1, [r3, #0]
 800d4ce:	4b68      	ldr	r3, [pc, #416]	; (800d670 <tcp_listen_input+0x1dc>)
 800d4d0:	881b      	ldrh	r3, [r3, #0]
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	4b67      	ldr	r3, [pc, #412]	; (800d674 <tcp_listen_input+0x1e0>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d4da:	4b67      	ldr	r3, [pc, #412]	; (800d678 <tcp_listen_input+0x1e4>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4de:	885b      	ldrh	r3, [r3, #2]
 800d4e0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d4e2:	4a65      	ldr	r2, [pc, #404]	; (800d678 <tcp_listen_input+0x1e4>)
 800d4e4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4e6:	8812      	ldrh	r2, [r2, #0]
 800d4e8:	b292      	uxth	r2, r2
 800d4ea:	9202      	str	r2, [sp, #8]
 800d4ec:	9301      	str	r3, [sp, #4]
 800d4ee:	4b63      	ldr	r3, [pc, #396]	; (800d67c <tcp_listen_input+0x1e8>)
 800d4f0:	9300      	str	r3, [sp, #0]
 800d4f2:	4b63      	ldr	r3, [pc, #396]	; (800d680 <tcp_listen_input+0x1ec>)
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f003 fbd8 	bl	8010cac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d4fc:	e0a9      	b.n	800d652 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d4fe:	4b57      	ldr	r3, [pc, #348]	; (800d65c <tcp_listen_input+0x1c8>)
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	f003 0302 	and.w	r3, r3, #2
 800d506:	2b00      	cmp	r3, #0
 800d508:	f000 80a3 	beq.w	800d652 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	7d5b      	ldrb	r3, [r3, #21]
 800d510:	4618      	mov	r0, r3
 800d512:	f7ff f8b1 	bl	800c678 <tcp_alloc>
 800d516:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d111      	bne.n	800d542 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	699b      	ldr	r3, [r3, #24]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d00a      	beq.n	800d53c <tcp_listen_input+0xa8>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	699b      	ldr	r3, [r3, #24]
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	6910      	ldr	r0, [r2, #16]
 800d52e:	f04f 32ff 	mov.w	r2, #4294967295
 800d532:	2100      	movs	r1, #0
 800d534:	4798      	blx	r3
 800d536:	4603      	mov	r3, r0
 800d538:	73bb      	strb	r3, [r7, #14]
      return;
 800d53a:	e08b      	b.n	800d654 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d53c:	23f0      	movs	r3, #240	; 0xf0
 800d53e:	73bb      	strb	r3, [r7, #14]
      return;
 800d540:	e088      	b.n	800d654 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d542:	4b50      	ldr	r3, [pc, #320]	; (800d684 <tcp_listen_input+0x1f0>)
 800d544:	695a      	ldr	r2, [r3, #20]
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d54a:	4b4e      	ldr	r3, [pc, #312]	; (800d684 <tcp_listen_input+0x1f0>)
 800d54c:	691a      	ldr	r2, [r3, #16]
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	8ada      	ldrh	r2, [r3, #22]
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d55a:	4b47      	ldr	r3, [pc, #284]	; (800d678 <tcp_listen_input+0x1e4>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	881b      	ldrh	r3, [r3, #0]
 800d560:	b29a      	uxth	r2, r3
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	2203      	movs	r2, #3
 800d56a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d56c:	4b41      	ldr	r3, [pc, #260]	; (800d674 <tcp_listen_input+0x1e0>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	1c5a      	adds	r2, r3, #1
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d57e:	6978      	ldr	r0, [r7, #20]
 800d580:	f7ff fa58 	bl	800ca34 <tcp_next_iss>
 800d584:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	693a      	ldr	r2, [r7, #16]
 800d58a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	693a      	ldr	r2, [r7, #16]
 800d590:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	693a      	ldr	r2, [r7, #16]
 800d596:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	693a      	ldr	r2, [r7, #16]
 800d59c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d59e:	4b35      	ldr	r3, [pc, #212]	; (800d674 <tcp_listen_input+0x1e0>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	1e5a      	subs	r2, r3, #1
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	691a      	ldr	r2, [r3, #16]
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	7a5b      	ldrb	r3, [r3, #9]
 800d5ba:	f003 030c 	and.w	r3, r3, #12
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	7a1a      	ldrb	r2, [r3, #8]
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d5cc:	4b2e      	ldr	r3, [pc, #184]	; (800d688 <tcp_listen_input+0x1f4>)
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	60da      	str	r2, [r3, #12]
 800d5d4:	4a2c      	ldr	r2, [pc, #176]	; (800d688 <tcp_listen_input+0x1f4>)
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	6013      	str	r3, [r2, #0]
 800d5da:	f003 fd29 	bl	8011030 <tcp_timer_needed>
 800d5de:	4b2b      	ldr	r3, [pc, #172]	; (800d68c <tcp_listen_input+0x1f8>)
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d5e4:	6978      	ldr	r0, [r7, #20]
 800d5e6:	f001 fd8f 	bl	800f108 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d5ea:	4b23      	ldr	r3, [pc, #140]	; (800d678 <tcp_listen_input+0x1e4>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	89db      	ldrh	r3, [r3, #14]
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	3304      	adds	r3, #4
 800d60c:	4618      	mov	r0, r3
 800d60e:	f004 ff33 	bl	8012478 <ip4_route>
 800d612:	4601      	mov	r1, r0
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	3304      	adds	r3, #4
 800d618:	461a      	mov	r2, r3
 800d61a:	4620      	mov	r0, r4
 800d61c:	f7ff fa30 	bl	800ca80 <tcp_eff_send_mss_netif>
 800d620:	4603      	mov	r3, r0
 800d622:	461a      	mov	r2, r3
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d628:	2112      	movs	r1, #18
 800d62a:	6978      	ldr	r0, [r7, #20]
 800d62c:	f002 fc9c 	bl	800ff68 <tcp_enqueue_flags>
 800d630:	4603      	mov	r3, r0
 800d632:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d004      	beq.n	800d646 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d63c:	2100      	movs	r1, #0
 800d63e:	6978      	ldr	r0, [r7, #20]
 800d640:	f7fd ff4e 	bl	800b4e0 <tcp_abandon>
      return;
 800d644:	e006      	b.n	800d654 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d646:	6978      	ldr	r0, [r7, #20]
 800d648:	f002 fd7c 	bl	8010144 <tcp_output>
  return;
 800d64c:	e001      	b.n	800d652 <tcp_listen_input+0x1be>
    return;
 800d64e:	bf00      	nop
 800d650:	e000      	b.n	800d654 <tcp_listen_input+0x1c0>
  return;
 800d652:	bf00      	nop
}
 800d654:	371c      	adds	r7, #28
 800d656:	46bd      	mov	sp, r7
 800d658:	bd90      	pop	{r4, r7, pc}
 800d65a:	bf00      	nop
 800d65c:	2000e4e0 	.word	0x2000e4e0
 800d660:	08017e9c 	.word	0x08017e9c
 800d664:	08018094 	.word	0x08018094
 800d668:	08017ee8 	.word	0x08017ee8
 800d66c:	2000e4d8 	.word	0x2000e4d8
 800d670:	2000e4de 	.word	0x2000e4de
 800d674:	2000e4d4 	.word	0x2000e4d4
 800d678:	2000e4c4 	.word	0x2000e4c4
 800d67c:	20005560 	.word	0x20005560
 800d680:	20005564 	.word	0x20005564
 800d684:	20005550 	.word	0x20005550
 800d688:	2000e4a8 	.word	0x2000e4a8
 800d68c:	2000e4b0 	.word	0x2000e4b0

0800d690 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b086      	sub	sp, #24
 800d694:	af04      	add	r7, sp, #16
 800d696:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d698:	4b2f      	ldr	r3, [pc, #188]	; (800d758 <tcp_timewait_input+0xc8>)
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	f003 0304 	and.w	r3, r3, #4
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d153      	bne.n	800d74c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d106      	bne.n	800d6b8 <tcp_timewait_input+0x28>
 800d6aa:	4b2c      	ldr	r3, [pc, #176]	; (800d75c <tcp_timewait_input+0xcc>)
 800d6ac:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d6b0:	492b      	ldr	r1, [pc, #172]	; (800d760 <tcp_timewait_input+0xd0>)
 800d6b2:	482c      	ldr	r0, [pc, #176]	; (800d764 <tcp_timewait_input+0xd4>)
 800d6b4:	f008 f8a0 	bl	80157f8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d6b8:	4b27      	ldr	r3, [pc, #156]	; (800d758 <tcp_timewait_input+0xc8>)
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	f003 0302 	and.w	r3, r3, #2
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d02a      	beq.n	800d71a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d6c4:	4b28      	ldr	r3, [pc, #160]	; (800d768 <tcp_timewait_input+0xd8>)
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6cc:	1ad3      	subs	r3, r2, r3
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	db2d      	blt.n	800d72e <tcp_timewait_input+0x9e>
 800d6d2:	4b25      	ldr	r3, [pc, #148]	; (800d768 <tcp_timewait_input+0xd8>)
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6da:	6879      	ldr	r1, [r7, #4]
 800d6dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d6de:	440b      	add	r3, r1
 800d6e0:	1ad3      	subs	r3, r2, r3
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	dc23      	bgt.n	800d72e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d6e6:	4b21      	ldr	r3, [pc, #132]	; (800d76c <tcp_timewait_input+0xdc>)
 800d6e8:	6819      	ldr	r1, [r3, #0]
 800d6ea:	4b21      	ldr	r3, [pc, #132]	; (800d770 <tcp_timewait_input+0xe0>)
 800d6ec:	881b      	ldrh	r3, [r3, #0]
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	4b1d      	ldr	r3, [pc, #116]	; (800d768 <tcp_timewait_input+0xd8>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d6f6:	4b1f      	ldr	r3, [pc, #124]	; (800d774 <tcp_timewait_input+0xe4>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d6fa:	885b      	ldrh	r3, [r3, #2]
 800d6fc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d6fe:	4a1d      	ldr	r2, [pc, #116]	; (800d774 <tcp_timewait_input+0xe4>)
 800d700:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d702:	8812      	ldrh	r2, [r2, #0]
 800d704:	b292      	uxth	r2, r2
 800d706:	9202      	str	r2, [sp, #8]
 800d708:	9301      	str	r3, [sp, #4]
 800d70a:	4b1b      	ldr	r3, [pc, #108]	; (800d778 <tcp_timewait_input+0xe8>)
 800d70c:	9300      	str	r3, [sp, #0]
 800d70e:	4b1b      	ldr	r3, [pc, #108]	; (800d77c <tcp_timewait_input+0xec>)
 800d710:	4602      	mov	r2, r0
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f003 faca 	bl	8010cac <tcp_rst>
      return;
 800d718:	e01b      	b.n	800d752 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d71a:	4b0f      	ldr	r3, [pc, #60]	; (800d758 <tcp_timewait_input+0xc8>)
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	f003 0301 	and.w	r3, r3, #1
 800d722:	2b00      	cmp	r3, #0
 800d724:	d003      	beq.n	800d72e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d726:	4b16      	ldr	r3, [pc, #88]	; (800d780 <tcp_timewait_input+0xf0>)
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d72e:	4b10      	ldr	r3, [pc, #64]	; (800d770 <tcp_timewait_input+0xe0>)
 800d730:	881b      	ldrh	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00c      	beq.n	800d750 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	8b5b      	ldrh	r3, [r3, #26]
 800d73a:	f043 0302 	orr.w	r3, r3, #2
 800d73e:	b29a      	uxth	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f002 fcfd 	bl	8010144 <tcp_output>
  }
  return;
 800d74a:	e001      	b.n	800d750 <tcp_timewait_input+0xc0>
    return;
 800d74c:	bf00      	nop
 800d74e:	e000      	b.n	800d752 <tcp_timewait_input+0xc2>
  return;
 800d750:	bf00      	nop
}
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}
 800d758:	2000e4e0 	.word	0x2000e4e0
 800d75c:	08017e9c 	.word	0x08017e9c
 800d760:	080180b4 	.word	0x080180b4
 800d764:	08017ee8 	.word	0x08017ee8
 800d768:	2000e4d4 	.word	0x2000e4d4
 800d76c:	2000e4d8 	.word	0x2000e4d8
 800d770:	2000e4de 	.word	0x2000e4de
 800d774:	2000e4c4 	.word	0x2000e4c4
 800d778:	20005560 	.word	0x20005560
 800d77c:	20005564 	.word	0x20005564
 800d780:	2000e49c 	.word	0x2000e49c

0800d784 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d784:	b590      	push	{r4, r7, lr}
 800d786:	b08d      	sub	sp, #52	; 0x34
 800d788:	af04      	add	r7, sp, #16
 800d78a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d78c:	2300      	movs	r3, #0
 800d78e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d790:	2300      	movs	r3, #0
 800d792:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d106      	bne.n	800d7a8 <tcp_process+0x24>
 800d79a:	4b9d      	ldr	r3, [pc, #628]	; (800da10 <tcp_process+0x28c>)
 800d79c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d7a0:	499c      	ldr	r1, [pc, #624]	; (800da14 <tcp_process+0x290>)
 800d7a2:	489d      	ldr	r0, [pc, #628]	; (800da18 <tcp_process+0x294>)
 800d7a4:	f008 f828 	bl	80157f8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d7a8:	4b9c      	ldr	r3, [pc, #624]	; (800da1c <tcp_process+0x298>)
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	f003 0304 	and.w	r3, r3, #4
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d04e      	beq.n	800d852 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	7d1b      	ldrb	r3, [r3, #20]
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	d108      	bne.n	800d7ce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d7c0:	4b97      	ldr	r3, [pc, #604]	; (800da20 <tcp_process+0x29c>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d123      	bne.n	800d810 <tcp_process+0x8c>
        acceptable = 1;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	76fb      	strb	r3, [r7, #27]
 800d7cc:	e020      	b.n	800d810 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7d2:	4b94      	ldr	r3, [pc, #592]	; (800da24 <tcp_process+0x2a0>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d102      	bne.n	800d7e0 <tcp_process+0x5c>
        acceptable = 1;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	76fb      	strb	r3, [r7, #27]
 800d7de:	e017      	b.n	800d810 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d7e0:	4b90      	ldr	r3, [pc, #576]	; (800da24 <tcp_process+0x2a0>)
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e8:	1ad3      	subs	r3, r2, r3
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	db10      	blt.n	800d810 <tcp_process+0x8c>
 800d7ee:	4b8d      	ldr	r3, [pc, #564]	; (800da24 <tcp_process+0x2a0>)
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f6:	6879      	ldr	r1, [r7, #4]
 800d7f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d7fa:	440b      	add	r3, r1
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	dc06      	bgt.n	800d810 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	8b5b      	ldrh	r3, [r3, #26]
 800d806:	f043 0302 	orr.w	r3, r3, #2
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d810:	7efb      	ldrb	r3, [r7, #27]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d01b      	beq.n	800d84e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	7d1b      	ldrb	r3, [r3, #20]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d106      	bne.n	800d82c <tcp_process+0xa8>
 800d81e:	4b7c      	ldr	r3, [pc, #496]	; (800da10 <tcp_process+0x28c>)
 800d820:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d824:	4980      	ldr	r1, [pc, #512]	; (800da28 <tcp_process+0x2a4>)
 800d826:	487c      	ldr	r0, [pc, #496]	; (800da18 <tcp_process+0x294>)
 800d828:	f007 ffe6 	bl	80157f8 <iprintf>
      recv_flags |= TF_RESET;
 800d82c:	4b7f      	ldr	r3, [pc, #508]	; (800da2c <tcp_process+0x2a8>)
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	f043 0308 	orr.w	r3, r3, #8
 800d834:	b2da      	uxtb	r2, r3
 800d836:	4b7d      	ldr	r3, [pc, #500]	; (800da2c <tcp_process+0x2a8>)
 800d838:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	8b5b      	ldrh	r3, [r3, #26]
 800d83e:	f023 0301 	bic.w	r3, r3, #1
 800d842:	b29a      	uxth	r2, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d848:	f06f 030d 	mvn.w	r3, #13
 800d84c:	e37a      	b.n	800df44 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d84e:	2300      	movs	r3, #0
 800d850:	e378      	b.n	800df44 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d852:	4b72      	ldr	r3, [pc, #456]	; (800da1c <tcp_process+0x298>)
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	f003 0302 	and.w	r3, r3, #2
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d010      	beq.n	800d880 <tcp_process+0xfc>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	7d1b      	ldrb	r3, [r3, #20]
 800d862:	2b02      	cmp	r3, #2
 800d864:	d00c      	beq.n	800d880 <tcp_process+0xfc>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	7d1b      	ldrb	r3, [r3, #20]
 800d86a:	2b03      	cmp	r3, #3
 800d86c:	d008      	beq.n	800d880 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	8b5b      	ldrh	r3, [r3, #26]
 800d872:	f043 0302 	orr.w	r3, r3, #2
 800d876:	b29a      	uxth	r2, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	e361      	b.n	800df44 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	8b5b      	ldrh	r3, [r3, #26]
 800d884:	f003 0310 	and.w	r3, r3, #16
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d103      	bne.n	800d894 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d88c:	4b68      	ldr	r3, [pc, #416]	; (800da30 <tcp_process+0x2ac>)
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f001 fc2f 	bl	800f108 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	7d1b      	ldrb	r3, [r3, #20]
 800d8ae:	3b02      	subs	r3, #2
 800d8b0:	2b07      	cmp	r3, #7
 800d8b2:	f200 8337 	bhi.w	800df24 <tcp_process+0x7a0>
 800d8b6:	a201      	add	r2, pc, #4	; (adr r2, 800d8bc <tcp_process+0x138>)
 800d8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8bc:	0800d8dd 	.word	0x0800d8dd
 800d8c0:	0800db0d 	.word	0x0800db0d
 800d8c4:	0800dc85 	.word	0x0800dc85
 800d8c8:	0800dcaf 	.word	0x0800dcaf
 800d8cc:	0800ddd3 	.word	0x0800ddd3
 800d8d0:	0800dc85 	.word	0x0800dc85
 800d8d4:	0800de5f 	.word	0x0800de5f
 800d8d8:	0800deef 	.word	0x0800deef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d8dc:	4b4f      	ldr	r3, [pc, #316]	; (800da1c <tcp_process+0x298>)
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	f003 0310 	and.w	r3, r3, #16
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	f000 80e4 	beq.w	800dab2 <tcp_process+0x32e>
 800d8ea:	4b4c      	ldr	r3, [pc, #304]	; (800da1c <tcp_process+0x298>)
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	f003 0302 	and.w	r3, r3, #2
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f000 80dd 	beq.w	800dab2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8fc:	1c5a      	adds	r2, r3, #1
 800d8fe:	4b48      	ldr	r3, [pc, #288]	; (800da20 <tcp_process+0x29c>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	429a      	cmp	r2, r3
 800d904:	f040 80d5 	bne.w	800dab2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d908:	4b46      	ldr	r3, [pc, #280]	; (800da24 <tcp_process+0x2a0>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	1c5a      	adds	r2, r3, #1
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d91a:	4b41      	ldr	r3, [pc, #260]	; (800da20 <tcp_process+0x29c>)
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d922:	4b44      	ldr	r3, [pc, #272]	; (800da34 <tcp_process+0x2b0>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	89db      	ldrh	r3, [r3, #14]
 800d928:	b29a      	uxth	r2, r3
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d93c:	4b39      	ldr	r3, [pc, #228]	; (800da24 <tcp_process+0x2a0>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	1e5a      	subs	r2, r3, #1
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2204      	movs	r2, #4
 800d94a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	3304      	adds	r3, #4
 800d954:	4618      	mov	r0, r3
 800d956:	f004 fd8f 	bl	8012478 <ip4_route>
 800d95a:	4601      	mov	r1, r0
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	3304      	adds	r3, #4
 800d960:	461a      	mov	r2, r3
 800d962:	4620      	mov	r0, r4
 800d964:	f7ff f88c 	bl	800ca80 <tcp_eff_send_mss_netif>
 800d968:	4603      	mov	r3, r0
 800d96a:	461a      	mov	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d974:	009a      	lsls	r2, r3, #2
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d97a:	005b      	lsls	r3, r3, #1
 800d97c:	f241 111c 	movw	r1, #4380	; 0x111c
 800d980:	428b      	cmp	r3, r1
 800d982:	bf38      	it	cc
 800d984:	460b      	movcc	r3, r1
 800d986:	429a      	cmp	r2, r3
 800d988:	d204      	bcs.n	800d994 <tcp_process+0x210>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	b29b      	uxth	r3, r3
 800d992:	e00d      	b.n	800d9b0 <tcp_process+0x22c>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d998:	005b      	lsls	r3, r3, #1
 800d99a:	f241 121c 	movw	r2, #4380	; 0x111c
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d904      	bls.n	800d9ac <tcp_process+0x228>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d9a6:	005b      	lsls	r3, r3, #1
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	e001      	b.n	800d9b0 <tcp_process+0x22c>
 800d9ac:	f241 131c 	movw	r3, #4380	; 0x111c
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d106      	bne.n	800d9ce <tcp_process+0x24a>
 800d9c0:	4b13      	ldr	r3, [pc, #76]	; (800da10 <tcp_process+0x28c>)
 800d9c2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d9c6:	491c      	ldr	r1, [pc, #112]	; (800da38 <tcp_process+0x2b4>)
 800d9c8:	4813      	ldr	r0, [pc, #76]	; (800da18 <tcp_process+0x294>)
 800d9ca:	f007 ff15 	bl	80157f8 <iprintf>
        --pcb->snd_queuelen;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d9d4:	3b01      	subs	r3, #1
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9e2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d12a      	bne.n	800da40 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9ee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d106      	bne.n	800da04 <tcp_process+0x280>
 800d9f6:	4b06      	ldr	r3, [pc, #24]	; (800da10 <tcp_process+0x28c>)
 800d9f8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d9fc:	490f      	ldr	r1, [pc, #60]	; (800da3c <tcp_process+0x2b8>)
 800d9fe:	4806      	ldr	r0, [pc, #24]	; (800da18 <tcp_process+0x294>)
 800da00:	f007 fefa 	bl	80157f8 <iprintf>
          pcb->unsent = rseg->next;
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	66da      	str	r2, [r3, #108]	; 0x6c
 800da0c:	e01c      	b.n	800da48 <tcp_process+0x2c4>
 800da0e:	bf00      	nop
 800da10:	08017e9c 	.word	0x08017e9c
 800da14:	080180d4 	.word	0x080180d4
 800da18:	08017ee8 	.word	0x08017ee8
 800da1c:	2000e4e0 	.word	0x2000e4e0
 800da20:	2000e4d8 	.word	0x2000e4d8
 800da24:	2000e4d4 	.word	0x2000e4d4
 800da28:	080180f0 	.word	0x080180f0
 800da2c:	2000e4e1 	.word	0x2000e4e1
 800da30:	2000e49c 	.word	0x2000e49c
 800da34:	2000e4c4 	.word	0x2000e4c4
 800da38:	08018110 	.word	0x08018110
 800da3c:	08018128 	.word	0x08018128
        } else {
          pcb->unacked = rseg->next;
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800da48:	69f8      	ldr	r0, [r7, #28]
 800da4a:	f7fe fcac 	bl	800c3a6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da52:	2b00      	cmp	r3, #0
 800da54:	d104      	bne.n	800da60 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da5c:	861a      	strh	r2, [r3, #48]	; 0x30
 800da5e:	e006      	b.n	800da6e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2200      	movs	r2, #0
 800da64:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da74:	2b00      	cmp	r3, #0
 800da76:	d00a      	beq.n	800da8e <tcp_process+0x30a>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	6910      	ldr	r0, [r2, #16]
 800da82:	2200      	movs	r2, #0
 800da84:	6879      	ldr	r1, [r7, #4]
 800da86:	4798      	blx	r3
 800da88:	4603      	mov	r3, r0
 800da8a:	76bb      	strb	r3, [r7, #26]
 800da8c:	e001      	b.n	800da92 <tcp_process+0x30e>
 800da8e:	2300      	movs	r3, #0
 800da90:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800da92:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800da96:	f113 0f0d 	cmn.w	r3, #13
 800da9a:	d102      	bne.n	800daa2 <tcp_process+0x31e>
          return ERR_ABRT;
 800da9c:	f06f 030c 	mvn.w	r3, #12
 800daa0:	e250      	b.n	800df44 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	8b5b      	ldrh	r3, [r3, #26]
 800daa6:	f043 0302 	orr.w	r3, r3, #2
 800daaa:	b29a      	uxth	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800dab0:	e23a      	b.n	800df28 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800dab2:	4b98      	ldr	r3, [pc, #608]	; (800dd14 <tcp_process+0x590>)
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	f003 0310 	and.w	r3, r3, #16
 800daba:	2b00      	cmp	r3, #0
 800dabc:	f000 8234 	beq.w	800df28 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dac0:	4b95      	ldr	r3, [pc, #596]	; (800dd18 <tcp_process+0x594>)
 800dac2:	6819      	ldr	r1, [r3, #0]
 800dac4:	4b95      	ldr	r3, [pc, #596]	; (800dd1c <tcp_process+0x598>)
 800dac6:	881b      	ldrh	r3, [r3, #0]
 800dac8:	461a      	mov	r2, r3
 800daca:	4b95      	ldr	r3, [pc, #596]	; (800dd20 <tcp_process+0x59c>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dad0:	4b94      	ldr	r3, [pc, #592]	; (800dd24 <tcp_process+0x5a0>)
 800dad2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dad4:	885b      	ldrh	r3, [r3, #2]
 800dad6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dad8:	4a92      	ldr	r2, [pc, #584]	; (800dd24 <tcp_process+0x5a0>)
 800dada:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dadc:	8812      	ldrh	r2, [r2, #0]
 800dade:	b292      	uxth	r2, r2
 800dae0:	9202      	str	r2, [sp, #8]
 800dae2:	9301      	str	r3, [sp, #4]
 800dae4:	4b90      	ldr	r3, [pc, #576]	; (800dd28 <tcp_process+0x5a4>)
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	4b90      	ldr	r3, [pc, #576]	; (800dd2c <tcp_process+0x5a8>)
 800daea:	4602      	mov	r2, r0
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f003 f8dd 	bl	8010cac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800daf8:	2b05      	cmp	r3, #5
 800dafa:	f200 8215 	bhi.w	800df28 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f002 fea9 	bl	801085c <tcp_rexmit_rto>
      break;
 800db0a:	e20d      	b.n	800df28 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800db0c:	4b81      	ldr	r3, [pc, #516]	; (800dd14 <tcp_process+0x590>)
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	f003 0310 	and.w	r3, r3, #16
 800db14:	2b00      	cmp	r3, #0
 800db16:	f000 80a1 	beq.w	800dc5c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db1a:	4b7f      	ldr	r3, [pc, #508]	; (800dd18 <tcp_process+0x594>)
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	3b01      	subs	r3, #1
 800db26:	2b00      	cmp	r3, #0
 800db28:	db7e      	blt.n	800dc28 <tcp_process+0x4a4>
 800db2a:	4b7b      	ldr	r3, [pc, #492]	; (800dd18 <tcp_process+0x594>)
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db32:	1ad3      	subs	r3, r2, r3
 800db34:	2b00      	cmp	r3, #0
 800db36:	dc77      	bgt.n	800dc28 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2204      	movs	r2, #4
 800db3c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db42:	2b00      	cmp	r3, #0
 800db44:	d102      	bne.n	800db4c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800db46:	23fa      	movs	r3, #250	; 0xfa
 800db48:	76bb      	strb	r3, [r7, #26]
 800db4a:	e01d      	b.n	800db88 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db50:	699b      	ldr	r3, [r3, #24]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d106      	bne.n	800db64 <tcp_process+0x3e0>
 800db56:	4b76      	ldr	r3, [pc, #472]	; (800dd30 <tcp_process+0x5ac>)
 800db58:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800db5c:	4975      	ldr	r1, [pc, #468]	; (800dd34 <tcp_process+0x5b0>)
 800db5e:	4876      	ldr	r0, [pc, #472]	; (800dd38 <tcp_process+0x5b4>)
 800db60:	f007 fe4a 	bl	80157f8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db68:	699b      	ldr	r3, [r3, #24]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d00a      	beq.n	800db84 <tcp_process+0x400>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db72:	699b      	ldr	r3, [r3, #24]
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	6910      	ldr	r0, [r2, #16]
 800db78:	2200      	movs	r2, #0
 800db7a:	6879      	ldr	r1, [r7, #4]
 800db7c:	4798      	blx	r3
 800db7e:	4603      	mov	r3, r0
 800db80:	76bb      	strb	r3, [r7, #26]
 800db82:	e001      	b.n	800db88 <tcp_process+0x404>
 800db84:	23f0      	movs	r3, #240	; 0xf0
 800db86:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800db88:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00a      	beq.n	800dba6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800db90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800db94:	f113 0f0d 	cmn.w	r3, #13
 800db98:	d002      	beq.n	800dba0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f7fd fd5e 	bl	800b65c <tcp_abort>
            }
            return ERR_ABRT;
 800dba0:	f06f 030c 	mvn.w	r3, #12
 800dba4:	e1ce      	b.n	800df44 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 fae0 	bl	800e16c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800dbac:	4b63      	ldr	r3, [pc, #396]	; (800dd3c <tcp_process+0x5b8>)
 800dbae:	881b      	ldrh	r3, [r3, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d005      	beq.n	800dbc0 <tcp_process+0x43c>
            recv_acked--;
 800dbb4:	4b61      	ldr	r3, [pc, #388]	; (800dd3c <tcp_process+0x5b8>)
 800dbb6:	881b      	ldrh	r3, [r3, #0]
 800dbb8:	3b01      	subs	r3, #1
 800dbba:	b29a      	uxth	r2, r3
 800dbbc:	4b5f      	ldr	r3, [pc, #380]	; (800dd3c <tcp_process+0x5b8>)
 800dbbe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbc4:	009a      	lsls	r2, r3, #2
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbca:	005b      	lsls	r3, r3, #1
 800dbcc:	f241 111c 	movw	r1, #4380	; 0x111c
 800dbd0:	428b      	cmp	r3, r1
 800dbd2:	bf38      	it	cc
 800dbd4:	460b      	movcc	r3, r1
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d204      	bcs.n	800dbe4 <tcp_process+0x460>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbde:	009b      	lsls	r3, r3, #2
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	e00d      	b.n	800dc00 <tcp_process+0x47c>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbe8:	005b      	lsls	r3, r3, #1
 800dbea:	f241 121c 	movw	r2, #4380	; 0x111c
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d904      	bls.n	800dbfc <tcp_process+0x478>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbf6:	005b      	lsls	r3, r3, #1
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	e001      	b.n	800dc00 <tcp_process+0x47c>
 800dbfc:	f241 131c 	movw	r3, #4380	; 0x111c
 800dc00:	687a      	ldr	r2, [r7, #4]
 800dc02:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800dc06:	4b4e      	ldr	r3, [pc, #312]	; (800dd40 <tcp_process+0x5bc>)
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	f003 0320 	and.w	r3, r3, #32
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d037      	beq.n	800dc82 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	8b5b      	ldrh	r3, [r3, #26]
 800dc16:	f043 0302 	orr.w	r3, r3, #2
 800dc1a:	b29a      	uxth	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2207      	movs	r2, #7
 800dc24:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800dc26:	e02c      	b.n	800dc82 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc28:	4b3b      	ldr	r3, [pc, #236]	; (800dd18 <tcp_process+0x594>)
 800dc2a:	6819      	ldr	r1, [r3, #0]
 800dc2c:	4b3b      	ldr	r3, [pc, #236]	; (800dd1c <tcp_process+0x598>)
 800dc2e:	881b      	ldrh	r3, [r3, #0]
 800dc30:	461a      	mov	r2, r3
 800dc32:	4b3b      	ldr	r3, [pc, #236]	; (800dd20 <tcp_process+0x59c>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc38:	4b3a      	ldr	r3, [pc, #232]	; (800dd24 <tcp_process+0x5a0>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc3c:	885b      	ldrh	r3, [r3, #2]
 800dc3e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc40:	4a38      	ldr	r2, [pc, #224]	; (800dd24 <tcp_process+0x5a0>)
 800dc42:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc44:	8812      	ldrh	r2, [r2, #0]
 800dc46:	b292      	uxth	r2, r2
 800dc48:	9202      	str	r2, [sp, #8]
 800dc4a:	9301      	str	r3, [sp, #4]
 800dc4c:	4b36      	ldr	r3, [pc, #216]	; (800dd28 <tcp_process+0x5a4>)
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	4b36      	ldr	r3, [pc, #216]	; (800dd2c <tcp_process+0x5a8>)
 800dc52:	4602      	mov	r2, r0
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f003 f829 	bl	8010cac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800dc5a:	e167      	b.n	800df2c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800dc5c:	4b2d      	ldr	r3, [pc, #180]	; (800dd14 <tcp_process+0x590>)
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	f003 0302 	and.w	r3, r3, #2
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f000 8161 	beq.w	800df2c <tcp_process+0x7a8>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6e:	1e5a      	subs	r2, r3, #1
 800dc70:	4b2b      	ldr	r3, [pc, #172]	; (800dd20 <tcp_process+0x59c>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	f040 8159 	bne.w	800df2c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f002 fe10 	bl	80108a0 <tcp_rexmit>
      break;
 800dc80:	e154      	b.n	800df2c <tcp_process+0x7a8>
 800dc82:	e153      	b.n	800df2c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 fa71 	bl	800e16c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800dc8a:	4b2d      	ldr	r3, [pc, #180]	; (800dd40 <tcp_process+0x5bc>)
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	f003 0320 	and.w	r3, r3, #32
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f000 814c 	beq.w	800df30 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	8b5b      	ldrh	r3, [r3, #26]
 800dc9c:	f043 0302 	orr.w	r3, r3, #2
 800dca0:	b29a      	uxth	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2207      	movs	r2, #7
 800dcaa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dcac:	e140      	b.n	800df30 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 fa5c 	bl	800e16c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dcb4:	4b22      	ldr	r3, [pc, #136]	; (800dd40 <tcp_process+0x5bc>)
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	f003 0320 	and.w	r3, r3, #32
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d071      	beq.n	800dda4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dcc0:	4b14      	ldr	r3, [pc, #80]	; (800dd14 <tcp_process+0x590>)
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	f003 0310 	and.w	r3, r3, #16
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d060      	beq.n	800dd8e <tcp_process+0x60a>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dcd0:	4b11      	ldr	r3, [pc, #68]	; (800dd18 <tcp_process+0x594>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d15a      	bne.n	800dd8e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d156      	bne.n	800dd8e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	8b5b      	ldrh	r3, [r3, #26]
 800dce4:	f043 0302 	orr.w	r3, r3, #2
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7fe fdbc 	bl	800c86c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800dcf4:	4b13      	ldr	r3, [pc, #76]	; (800dd44 <tcp_process+0x5c0>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d105      	bne.n	800dd0a <tcp_process+0x586>
 800dcfe:	4b11      	ldr	r3, [pc, #68]	; (800dd44 <tcp_process+0x5c0>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	4a0f      	ldr	r2, [pc, #60]	; (800dd44 <tcp_process+0x5c0>)
 800dd06:	6013      	str	r3, [r2, #0]
 800dd08:	e02e      	b.n	800dd68 <tcp_process+0x5e4>
 800dd0a:	4b0e      	ldr	r3, [pc, #56]	; (800dd44 <tcp_process+0x5c0>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	617b      	str	r3, [r7, #20]
 800dd10:	e027      	b.n	800dd62 <tcp_process+0x5de>
 800dd12:	bf00      	nop
 800dd14:	2000e4e0 	.word	0x2000e4e0
 800dd18:	2000e4d8 	.word	0x2000e4d8
 800dd1c:	2000e4de 	.word	0x2000e4de
 800dd20:	2000e4d4 	.word	0x2000e4d4
 800dd24:	2000e4c4 	.word	0x2000e4c4
 800dd28:	20005560 	.word	0x20005560
 800dd2c:	20005564 	.word	0x20005564
 800dd30:	08017e9c 	.word	0x08017e9c
 800dd34:	0801813c 	.word	0x0801813c
 800dd38:	08017ee8 	.word	0x08017ee8
 800dd3c:	2000e4dc 	.word	0x2000e4dc
 800dd40:	2000e4e1 	.word	0x2000e4e1
 800dd44:	2000e4a8 	.word	0x2000e4a8
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	68db      	ldr	r3, [r3, #12]
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d104      	bne.n	800dd5c <tcp_process+0x5d8>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	68da      	ldr	r2, [r3, #12]
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	60da      	str	r2, [r3, #12]
 800dd5a:	e005      	b.n	800dd68 <tcp_process+0x5e4>
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	617b      	str	r3, [r7, #20]
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d1ef      	bne.n	800dd48 <tcp_process+0x5c4>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	60da      	str	r2, [r3, #12]
 800dd6e:	4b77      	ldr	r3, [pc, #476]	; (800df4c <tcp_process+0x7c8>)
 800dd70:	2201      	movs	r2, #1
 800dd72:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	220a      	movs	r2, #10
 800dd78:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800dd7a:	4b75      	ldr	r3, [pc, #468]	; (800df50 <tcp_process+0x7cc>)
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	60da      	str	r2, [r3, #12]
 800dd82:	4a73      	ldr	r2, [pc, #460]	; (800df50 <tcp_process+0x7cc>)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6013      	str	r3, [r2, #0]
 800dd88:	f003 f952 	bl	8011030 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800dd8c:	e0d2      	b.n	800df34 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	8b5b      	ldrh	r3, [r3, #26]
 800dd92:	f043 0302 	orr.w	r3, r3, #2
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2208      	movs	r2, #8
 800dda0:	751a      	strb	r2, [r3, #20]
      break;
 800dda2:	e0c7      	b.n	800df34 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dda4:	4b6b      	ldr	r3, [pc, #428]	; (800df54 <tcp_process+0x7d0>)
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	f003 0310 	and.w	r3, r3, #16
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	f000 80c1 	beq.w	800df34 <tcp_process+0x7b0>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ddb6:	4b68      	ldr	r3, [pc, #416]	; (800df58 <tcp_process+0x7d4>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	f040 80ba 	bne.w	800df34 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	f040 80b5 	bne.w	800df34 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2206      	movs	r2, #6
 800ddce:	751a      	strb	r2, [r3, #20]
      break;
 800ddd0:	e0b0      	b.n	800df34 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f000 f9ca 	bl	800e16c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ddd8:	4b60      	ldr	r3, [pc, #384]	; (800df5c <tcp_process+0x7d8>)
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	f003 0320 	and.w	r3, r3, #32
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	f000 80a9 	beq.w	800df38 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	8b5b      	ldrh	r3, [r3, #26]
 800ddea:	f043 0302 	orr.w	r3, r3, #2
 800ddee:	b29a      	uxth	r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7fe fd39 	bl	800c86c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ddfa:	4b59      	ldr	r3, [pc, #356]	; (800df60 <tcp_process+0x7dc>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	429a      	cmp	r2, r3
 800de02:	d105      	bne.n	800de10 <tcp_process+0x68c>
 800de04:	4b56      	ldr	r3, [pc, #344]	; (800df60 <tcp_process+0x7dc>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	4a55      	ldr	r2, [pc, #340]	; (800df60 <tcp_process+0x7dc>)
 800de0c:	6013      	str	r3, [r2, #0]
 800de0e:	e013      	b.n	800de38 <tcp_process+0x6b4>
 800de10:	4b53      	ldr	r3, [pc, #332]	; (800df60 <tcp_process+0x7dc>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	613b      	str	r3, [r7, #16]
 800de16:	e00c      	b.n	800de32 <tcp_process+0x6ae>
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d104      	bne.n	800de2c <tcp_process+0x6a8>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	68da      	ldr	r2, [r3, #12]
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	60da      	str	r2, [r3, #12]
 800de2a:	e005      	b.n	800de38 <tcp_process+0x6b4>
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	613b      	str	r3, [r7, #16]
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d1ef      	bne.n	800de18 <tcp_process+0x694>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2200      	movs	r2, #0
 800de3c:	60da      	str	r2, [r3, #12]
 800de3e:	4b43      	ldr	r3, [pc, #268]	; (800df4c <tcp_process+0x7c8>)
 800de40:	2201      	movs	r2, #1
 800de42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	220a      	movs	r2, #10
 800de48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800de4a:	4b41      	ldr	r3, [pc, #260]	; (800df50 <tcp_process+0x7cc>)
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	60da      	str	r2, [r3, #12]
 800de52:	4a3f      	ldr	r2, [pc, #252]	; (800df50 <tcp_process+0x7cc>)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6013      	str	r3, [r2, #0]
 800de58:	f003 f8ea 	bl	8011030 <tcp_timer_needed>
      }
      break;
 800de5c:	e06c      	b.n	800df38 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 f984 	bl	800e16c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800de64:	4b3b      	ldr	r3, [pc, #236]	; (800df54 <tcp_process+0x7d0>)
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	f003 0310 	and.w	r3, r3, #16
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d065      	beq.n	800df3c <tcp_process+0x7b8>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de74:	4b38      	ldr	r3, [pc, #224]	; (800df58 <tcp_process+0x7d4>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d15f      	bne.n	800df3c <tcp_process+0x7b8>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de80:	2b00      	cmp	r3, #0
 800de82:	d15b      	bne.n	800df3c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f7fe fcf1 	bl	800c86c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800de8a:	4b35      	ldr	r3, [pc, #212]	; (800df60 <tcp_process+0x7dc>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	429a      	cmp	r2, r3
 800de92:	d105      	bne.n	800dea0 <tcp_process+0x71c>
 800de94:	4b32      	ldr	r3, [pc, #200]	; (800df60 <tcp_process+0x7dc>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	4a31      	ldr	r2, [pc, #196]	; (800df60 <tcp_process+0x7dc>)
 800de9c:	6013      	str	r3, [r2, #0]
 800de9e:	e013      	b.n	800dec8 <tcp_process+0x744>
 800dea0:	4b2f      	ldr	r3, [pc, #188]	; (800df60 <tcp_process+0x7dc>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	60fb      	str	r3, [r7, #12]
 800dea6:	e00c      	b.n	800dec2 <tcp_process+0x73e>
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	68db      	ldr	r3, [r3, #12]
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d104      	bne.n	800debc <tcp_process+0x738>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	68da      	ldr	r2, [r3, #12]
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	60da      	str	r2, [r3, #12]
 800deba:	e005      	b.n	800dec8 <tcp_process+0x744>
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	60fb      	str	r3, [r7, #12]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d1ef      	bne.n	800dea8 <tcp_process+0x724>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2200      	movs	r2, #0
 800decc:	60da      	str	r2, [r3, #12]
 800dece:	4b1f      	ldr	r3, [pc, #124]	; (800df4c <tcp_process+0x7c8>)
 800ded0:	2201      	movs	r2, #1
 800ded2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	220a      	movs	r2, #10
 800ded8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800deda:	4b1d      	ldr	r3, [pc, #116]	; (800df50 <tcp_process+0x7cc>)
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	60da      	str	r2, [r3, #12]
 800dee2:	4a1b      	ldr	r2, [pc, #108]	; (800df50 <tcp_process+0x7cc>)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6013      	str	r3, [r2, #0]
 800dee8:	f003 f8a2 	bl	8011030 <tcp_timer_needed>
      }
      break;
 800deec:	e026      	b.n	800df3c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 f93c 	bl	800e16c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800def4:	4b17      	ldr	r3, [pc, #92]	; (800df54 <tcp_process+0x7d0>)
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	f003 0310 	and.w	r3, r3, #16
 800defc:	2b00      	cmp	r3, #0
 800defe:	d01f      	beq.n	800df40 <tcp_process+0x7bc>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df04:	4b14      	ldr	r3, [pc, #80]	; (800df58 <tcp_process+0x7d4>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d119      	bne.n	800df40 <tcp_process+0x7bc>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df10:	2b00      	cmp	r3, #0
 800df12:	d115      	bne.n	800df40 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800df14:	4b11      	ldr	r3, [pc, #68]	; (800df5c <tcp_process+0x7d8>)
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	f043 0310 	orr.w	r3, r3, #16
 800df1c:	b2da      	uxtb	r2, r3
 800df1e:	4b0f      	ldr	r3, [pc, #60]	; (800df5c <tcp_process+0x7d8>)
 800df20:	701a      	strb	r2, [r3, #0]
      }
      break;
 800df22:	e00d      	b.n	800df40 <tcp_process+0x7bc>
    default:
      break;
 800df24:	bf00      	nop
 800df26:	e00c      	b.n	800df42 <tcp_process+0x7be>
      break;
 800df28:	bf00      	nop
 800df2a:	e00a      	b.n	800df42 <tcp_process+0x7be>
      break;
 800df2c:	bf00      	nop
 800df2e:	e008      	b.n	800df42 <tcp_process+0x7be>
      break;
 800df30:	bf00      	nop
 800df32:	e006      	b.n	800df42 <tcp_process+0x7be>
      break;
 800df34:	bf00      	nop
 800df36:	e004      	b.n	800df42 <tcp_process+0x7be>
      break;
 800df38:	bf00      	nop
 800df3a:	e002      	b.n	800df42 <tcp_process+0x7be>
      break;
 800df3c:	bf00      	nop
 800df3e:	e000      	b.n	800df42 <tcp_process+0x7be>
      break;
 800df40:	bf00      	nop
  }
  return ERR_OK;
 800df42:	2300      	movs	r3, #0
}
 800df44:	4618      	mov	r0, r3
 800df46:	3724      	adds	r7, #36	; 0x24
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd90      	pop	{r4, r7, pc}
 800df4c:	2000e4b0 	.word	0x2000e4b0
 800df50:	2000e4ac 	.word	0x2000e4ac
 800df54:	2000e4e0 	.word	0x2000e4e0
 800df58:	2000e4d8 	.word	0x2000e4d8
 800df5c:	2000e4e1 	.word	0x2000e4e1
 800df60:	2000e4a8 	.word	0x2000e4a8

0800df64 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800df64:	b590      	push	{r4, r7, lr}
 800df66:	b085      	sub	sp, #20
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d106      	bne.n	800df82 <tcp_oos_insert_segment+0x1e>
 800df74:	4b3b      	ldr	r3, [pc, #236]	; (800e064 <tcp_oos_insert_segment+0x100>)
 800df76:	f240 421f 	movw	r2, #1055	; 0x41f
 800df7a:	493b      	ldr	r1, [pc, #236]	; (800e068 <tcp_oos_insert_segment+0x104>)
 800df7c:	483b      	ldr	r0, [pc, #236]	; (800e06c <tcp_oos_insert_segment+0x108>)
 800df7e:	f007 fc3b 	bl	80157f8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	899b      	ldrh	r3, [r3, #12]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7fb fa86 	bl	800949c <lwip_htons>
 800df90:	4603      	mov	r3, r0
 800df92:	b2db      	uxtb	r3, r3
 800df94:	f003 0301 	and.w	r3, r3, #1
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d028      	beq.n	800dfee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800df9c:	6838      	ldr	r0, [r7, #0]
 800df9e:	f7fe f9ed 	bl	800c37c <tcp_segs_free>
    next = NULL;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	603b      	str	r3, [r7, #0]
 800dfa6:	e056      	b.n	800e056 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	899b      	ldrh	r3, [r3, #12]
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7fb fa73 	bl	800949c <lwip_htons>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	f003 0301 	and.w	r3, r3, #1
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d00d      	beq.n	800dfde <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	68db      	ldr	r3, [r3, #12]
 800dfc6:	899b      	ldrh	r3, [r3, #12]
 800dfc8:	b29c      	uxth	r4, r3
 800dfca:	2001      	movs	r0, #1
 800dfcc:	f7fb fa66 	bl	800949c <lwip_htons>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	68db      	ldr	r3, [r3, #12]
 800dfd8:	4322      	orrs	r2, r4
 800dfda:	b292      	uxth	r2, r2
 800dfdc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f7fe f9dc 	bl	800c3a6 <tcp_seg_free>
    while (next &&
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d00e      	beq.n	800e012 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	891b      	ldrh	r3, [r3, #8]
 800dff8:	461a      	mov	r2, r3
 800dffa:	4b1d      	ldr	r3, [pc, #116]	; (800e070 <tcp_oos_insert_segment+0x10c>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	441a      	add	r2, r3
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	6839      	ldr	r1, [r7, #0]
 800e008:	8909      	ldrh	r1, [r1, #8]
 800e00a:	440b      	add	r3, r1
 800e00c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e00e:	2b00      	cmp	r3, #0
 800e010:	daca      	bge.n	800dfa8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d01e      	beq.n	800e056 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	891b      	ldrh	r3, [r3, #8]
 800e01c:	461a      	mov	r2, r3
 800e01e:	4b14      	ldr	r3, [pc, #80]	; (800e070 <tcp_oos_insert_segment+0x10c>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	441a      	add	r2, r3
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	dd12      	ble.n	800e056 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	b29a      	uxth	r2, r3
 800e038:	4b0d      	ldr	r3, [pc, #52]	; (800e070 <tcp_oos_insert_segment+0x10c>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	1ad3      	subs	r3, r2, r3
 800e040:	b29a      	uxth	r2, r3
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	685a      	ldr	r2, [r3, #4]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	891b      	ldrh	r3, [r3, #8]
 800e04e:	4619      	mov	r1, r3
 800e050:	4610      	mov	r0, r2
 800e052:	f7fc fbf5 	bl	800a840 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	683a      	ldr	r2, [r7, #0]
 800e05a:	601a      	str	r2, [r3, #0]
}
 800e05c:	bf00      	nop
 800e05e:	3714      	adds	r7, #20
 800e060:	46bd      	mov	sp, r7
 800e062:	bd90      	pop	{r4, r7, pc}
 800e064:	08017e9c 	.word	0x08017e9c
 800e068:	0801815c 	.word	0x0801815c
 800e06c:	08017ee8 	.word	0x08017ee8
 800e070:	2000e4d4 	.word	0x2000e4d4

0800e074 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e074:	b5b0      	push	{r4, r5, r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	607a      	str	r2, [r7, #4]
 800e080:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e082:	e03e      	b.n	800e102 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	4618      	mov	r0, r3
 800e094:	f7fc fde2 	bl	800ac5c <pbuf_clen>
 800e098:	4603      	mov	r3, r0
 800e09a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e0a2:	8a7a      	ldrh	r2, [r7, #18]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d906      	bls.n	800e0b6 <tcp_free_acked_segments+0x42>
 800e0a8:	4b2a      	ldr	r3, [pc, #168]	; (800e154 <tcp_free_acked_segments+0xe0>)
 800e0aa:	f240 4257 	movw	r2, #1111	; 0x457
 800e0ae:	492a      	ldr	r1, [pc, #168]	; (800e158 <tcp_free_acked_segments+0xe4>)
 800e0b0:	482a      	ldr	r0, [pc, #168]	; (800e15c <tcp_free_acked_segments+0xe8>)
 800e0b2:	f007 fba1 	bl	80157f8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e0bc:	8a7b      	ldrh	r3, [r7, #18]
 800e0be:	1ad3      	subs	r3, r2, r3
 800e0c0:	b29a      	uxth	r2, r3
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	891a      	ldrh	r2, [r3, #8]
 800e0cc:	4b24      	ldr	r3, [pc, #144]	; (800e160 <tcp_free_acked_segments+0xec>)
 800e0ce:	881b      	ldrh	r3, [r3, #0]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	b29a      	uxth	r2, r3
 800e0d4:	4b22      	ldr	r3, [pc, #136]	; (800e160 <tcp_free_acked_segments+0xec>)
 800e0d6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e0d8:	6978      	ldr	r0, [r7, #20]
 800e0da:	f7fe f964 	bl	800c3a6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d00c      	beq.n	800e102 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d109      	bne.n	800e102 <tcp_free_acked_segments+0x8e>
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d106      	bne.n	800e102 <tcp_free_acked_segments+0x8e>
 800e0f4:	4b17      	ldr	r3, [pc, #92]	; (800e154 <tcp_free_acked_segments+0xe0>)
 800e0f6:	f240 4261 	movw	r2, #1121	; 0x461
 800e0fa:	491a      	ldr	r1, [pc, #104]	; (800e164 <tcp_free_acked_segments+0xf0>)
 800e0fc:	4817      	ldr	r0, [pc, #92]	; (800e15c <tcp_free_acked_segments+0xe8>)
 800e0fe:	f007 fb7b 	bl	80157f8 <iprintf>
  while (seg_list != NULL &&
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d020      	beq.n	800e14a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fb f9d9 	bl	80094c6 <lwip_htonl>
 800e114:	4604      	mov	r4, r0
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	891b      	ldrh	r3, [r3, #8]
 800e11a:	461d      	mov	r5, r3
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	899b      	ldrh	r3, [r3, #12]
 800e122:	b29b      	uxth	r3, r3
 800e124:	4618      	mov	r0, r3
 800e126:	f7fb f9b9 	bl	800949c <lwip_htons>
 800e12a:	4603      	mov	r3, r0
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	f003 0303 	and.w	r3, r3, #3
 800e132:	2b00      	cmp	r3, #0
 800e134:	d001      	beq.n	800e13a <tcp_free_acked_segments+0xc6>
 800e136:	2301      	movs	r3, #1
 800e138:	e000      	b.n	800e13c <tcp_free_acked_segments+0xc8>
 800e13a:	2300      	movs	r3, #0
 800e13c:	442b      	add	r3, r5
 800e13e:	18e2      	adds	r2, r4, r3
 800e140:	4b09      	ldr	r3, [pc, #36]	; (800e168 <tcp_free_acked_segments+0xf4>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e146:	2b00      	cmp	r3, #0
 800e148:	dd9c      	ble.n	800e084 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e14a:	68bb      	ldr	r3, [r7, #8]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3718      	adds	r7, #24
 800e150:	46bd      	mov	sp, r7
 800e152:	bdb0      	pop	{r4, r5, r7, pc}
 800e154:	08017e9c 	.word	0x08017e9c
 800e158:	08018184 	.word	0x08018184
 800e15c:	08017ee8 	.word	0x08017ee8
 800e160:	2000e4dc 	.word	0x2000e4dc
 800e164:	080181ac 	.word	0x080181ac
 800e168:	2000e4d8 	.word	0x2000e4d8

0800e16c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e16c:	b5b0      	push	{r4, r5, r7, lr}
 800e16e:	b094      	sub	sp, #80	; 0x50
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d106      	bne.n	800e18c <tcp_receive+0x20>
 800e17e:	4b91      	ldr	r3, [pc, #580]	; (800e3c4 <tcp_receive+0x258>)
 800e180:	f240 427b 	movw	r2, #1147	; 0x47b
 800e184:	4990      	ldr	r1, [pc, #576]	; (800e3c8 <tcp_receive+0x25c>)
 800e186:	4891      	ldr	r0, [pc, #580]	; (800e3cc <tcp_receive+0x260>)
 800e188:	f007 fb36 	bl	80157f8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	7d1b      	ldrb	r3, [r3, #20]
 800e190:	2b03      	cmp	r3, #3
 800e192:	d806      	bhi.n	800e1a2 <tcp_receive+0x36>
 800e194:	4b8b      	ldr	r3, [pc, #556]	; (800e3c4 <tcp_receive+0x258>)
 800e196:	f240 427c 	movw	r2, #1148	; 0x47c
 800e19a:	498d      	ldr	r1, [pc, #564]	; (800e3d0 <tcp_receive+0x264>)
 800e19c:	488b      	ldr	r0, [pc, #556]	; (800e3cc <tcp_receive+0x260>)
 800e19e:	f007 fb2b 	bl	80157f8 <iprintf>

  if (flags & TCP_ACK) {
 800e1a2:	4b8c      	ldr	r3, [pc, #560]	; (800e3d4 <tcp_receive+0x268>)
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	f003 0310 	and.w	r3, r3, #16
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f000 8264 	beq.w	800e678 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1bc:	4413      	add	r3, r2
 800e1be:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1c4:	4b84      	ldr	r3, [pc, #528]	; (800e3d8 <tcp_receive+0x26c>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	1ad3      	subs	r3, r2, r3
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	db1b      	blt.n	800e206 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1d2:	4b81      	ldr	r3, [pc, #516]	; (800e3d8 <tcp_receive+0x26c>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d106      	bne.n	800e1e8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e1de:	4b7f      	ldr	r3, [pc, #508]	; (800e3dc <tcp_receive+0x270>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	1ad3      	subs	r3, r2, r3
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	db0e      	blt.n	800e206 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e1ec:	4b7b      	ldr	r3, [pc, #492]	; (800e3dc <tcp_receive+0x270>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d125      	bne.n	800e240 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e1f4:	4b7a      	ldr	r3, [pc, #488]	; (800e3e0 <tcp_receive+0x274>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	89db      	ldrh	r3, [r3, #14]
 800e1fa:	b29a      	uxth	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e202:	429a      	cmp	r2, r3
 800e204:	d91c      	bls.n	800e240 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e206:	4b76      	ldr	r3, [pc, #472]	; (800e3e0 <tcp_receive+0x274>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	89db      	ldrh	r3, [r3, #14]
 800e20c:	b29a      	uxth	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e220:	429a      	cmp	r2, r3
 800e222:	d205      	bcs.n	800e230 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e230:	4b69      	ldr	r3, [pc, #420]	; (800e3d8 <tcp_receive+0x26c>)
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e238:	4b68      	ldr	r3, [pc, #416]	; (800e3dc <tcp_receive+0x270>)
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e240:	4b66      	ldr	r3, [pc, #408]	; (800e3dc <tcp_receive+0x270>)
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e248:	1ad3      	subs	r3, r2, r3
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	dc58      	bgt.n	800e300 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e24e:	4b65      	ldr	r3, [pc, #404]	; (800e3e4 <tcp_receive+0x278>)
 800e250:	881b      	ldrh	r3, [r3, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d14b      	bne.n	800e2ee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e260:	4413      	add	r3, r2
 800e262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e264:	429a      	cmp	r2, r3
 800e266:	d142      	bne.n	800e2ee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e26e:	2b00      	cmp	r3, #0
 800e270:	db3d      	blt.n	800e2ee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e276:	4b59      	ldr	r3, [pc, #356]	; (800e3dc <tcp_receive+0x270>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d137      	bne.n	800e2ee <tcp_receive+0x182>
              found_dupack = 1;
 800e27e:	2301      	movs	r3, #1
 800e280:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e288:	2bff      	cmp	r3, #255	; 0xff
 800e28a:	d007      	beq.n	800e29c <tcp_receive+0x130>
                ++pcb->dupacks;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e292:	3301      	adds	r3, #1
 800e294:	b2da      	uxtb	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e2a2:	2b03      	cmp	r3, #3
 800e2a4:	d91b      	bls.n	800e2de <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2b0:	4413      	add	r3, r2
 800e2b2:	b29a      	uxth	r2, r3
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d30a      	bcc.n	800e2d4 <tcp_receive+0x168>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2c8:	4413      	add	r3, r2
 800e2ca:	b29a      	uxth	r2, r3
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e2d2:	e004      	b.n	800e2de <tcp_receive+0x172>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e2e4:	2b02      	cmp	r3, #2
 800e2e6:	d902      	bls.n	800e2ee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f002 fb45 	bl	8010978 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e2ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	f040 8161 	bne.w	800e5b8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e2fe:	e15b      	b.n	800e5b8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e300:	4b36      	ldr	r3, [pc, #216]	; (800e3dc <tcp_receive+0x270>)
 800e302:	681a      	ldr	r2, [r3, #0]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e308:	1ad3      	subs	r3, r2, r3
 800e30a:	3b01      	subs	r3, #1
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	f2c0 814e 	blt.w	800e5ae <tcp_receive+0x442>
 800e312:	4b32      	ldr	r3, [pc, #200]	; (800e3dc <tcp_receive+0x270>)
 800e314:	681a      	ldr	r2, [r3, #0]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e31a:	1ad3      	subs	r3, r2, r3
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f300 8146 	bgt.w	800e5ae <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	8b5b      	ldrh	r3, [r3, #26]
 800e326:	f003 0304 	and.w	r3, r3, #4
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d010      	beq.n	800e350 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	8b5b      	ldrh	r3, [r3, #26]
 800e332:	f023 0304 	bic.w	r3, r3, #4
 800e336:	b29a      	uxth	r2, r3
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2200      	movs	r2, #0
 800e354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e35e:	10db      	asrs	r3, r3, #3
 800e360:	b21b      	sxth	r3, r3
 800e362:	b29a      	uxth	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	4413      	add	r3, r2
 800e36e:	b29b      	uxth	r3, r3
 800e370:	b21a      	sxth	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e378:	4b18      	ldr	r3, [pc, #96]	; (800e3dc <tcp_receive+0x270>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	b29a      	uxth	r2, r3
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e382:	b29b      	uxth	r3, r3
 800e384:	1ad3      	subs	r3, r2, r3
 800e386:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2200      	movs	r2, #0
 800e38c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e390:	4b12      	ldr	r3, [pc, #72]	; (800e3dc <tcp_receive+0x270>)
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	7d1b      	ldrb	r3, [r3, #20]
 800e39c:	2b03      	cmp	r3, #3
 800e39e:	f240 8097 	bls.w	800e4d0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d245      	bcs.n	800e43e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	8b5b      	ldrh	r3, [r3, #26]
 800e3b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d014      	beq.n	800e3e8 <tcp_receive+0x27c>
 800e3be:	2301      	movs	r3, #1
 800e3c0:	e013      	b.n	800e3ea <tcp_receive+0x27e>
 800e3c2:	bf00      	nop
 800e3c4:	08017e9c 	.word	0x08017e9c
 800e3c8:	080181cc 	.word	0x080181cc
 800e3cc:	08017ee8 	.word	0x08017ee8
 800e3d0:	080181e8 	.word	0x080181e8
 800e3d4:	2000e4e0 	.word	0x2000e4e0
 800e3d8:	2000e4d4 	.word	0x2000e4d4
 800e3dc:	2000e4d8 	.word	0x2000e4d8
 800e3e0:	2000e4c4 	.word	0x2000e4c4
 800e3e4:	2000e4de 	.word	0x2000e4de
 800e3e8:	2302      	movs	r3, #2
 800e3ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e3ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3f8:	fb12 f303 	smulbb	r3, r2, r3
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e400:	4293      	cmp	r3, r2
 800e402:	bf28      	it	cs
 800e404:	4613      	movcs	r3, r2
 800e406:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e40e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e410:	4413      	add	r3, r2
 800e412:	b29a      	uxth	r2, r3
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d309      	bcc.n	800e432 <tcp_receive+0x2c6>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e424:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e426:	4413      	add	r3, r2
 800e428:	b29a      	uxth	r2, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e430:	e04e      	b.n	800e4d0 <tcp_receive+0x364>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e438:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e43c:	e048      	b.n	800e4d0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e444:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e446:	4413      	add	r3, r2
 800e448:	b29a      	uxth	r2, r3
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e450:	429a      	cmp	r2, r3
 800e452:	d309      	bcc.n	800e468 <tcp_receive+0x2fc>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e45a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e45c:	4413      	add	r3, r2
 800e45e:	b29a      	uxth	r2, r3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e466:	e004      	b.n	800e472 <tcp_receive+0x306>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e46e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e47e:	429a      	cmp	r2, r3
 800e480:	d326      	bcc.n	800e4d0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e48e:	1ad3      	subs	r3, r2, r3
 800e490:	b29a      	uxth	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4a2:	4413      	add	r3, r2
 800e4a4:	b29a      	uxth	r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d30a      	bcc.n	800e4c6 <tcp_receive+0x35a>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4ba:	4413      	add	r3, r2
 800e4bc:	b29a      	uxth	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e4c4:	e004      	b.n	800e4d0 <tcp_receive+0x364>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4d8:	4a98      	ldr	r2, [pc, #608]	; (800e73c <tcp_receive+0x5d0>)
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f7ff fdca 	bl	800e074 <tcp_free_acked_segments>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4ee:	4a94      	ldr	r2, [pc, #592]	; (800e740 <tcp_receive+0x5d4>)
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f7ff fdbf 	bl	800e074 <tcp_free_acked_segments>
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e500:	2b00      	cmp	r3, #0
 800e502:	d104      	bne.n	800e50e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e50a:	861a      	strh	r2, [r3, #48]	; 0x30
 800e50c:	e002      	b.n	800e514 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2200      	movs	r2, #0
 800e512:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2200      	movs	r2, #0
 800e518:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d103      	bne.n	800e52a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e530:	4b84      	ldr	r3, [pc, #528]	; (800e744 <tcp_receive+0x5d8>)
 800e532:	881b      	ldrh	r3, [r3, #0]
 800e534:	4413      	add	r3, r2
 800e536:	b29a      	uxth	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	8b5b      	ldrh	r3, [r3, #26]
 800e542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e546:	2b00      	cmp	r3, #0
 800e548:	d035      	beq.n	800e5b6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d118      	bne.n	800e584 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00c      	beq.n	800e574 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e562:	68db      	ldr	r3, [r3, #12]
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	4618      	mov	r0, r3
 800e568:	f7fa ffad 	bl	80094c6 <lwip_htonl>
 800e56c:	4603      	mov	r3, r0
 800e56e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e570:	2b00      	cmp	r3, #0
 800e572:	dc20      	bgt.n	800e5b6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	8b5b      	ldrh	r3, [r3, #26]
 800e578:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e57c:	b29a      	uxth	r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e582:	e018      	b.n	800e5b6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	4618      	mov	r0, r3
 800e592:	f7fa ff98 	bl	80094c6 <lwip_htonl>
 800e596:	4603      	mov	r3, r0
 800e598:	1ae3      	subs	r3, r4, r3
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	dc0b      	bgt.n	800e5b6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	8b5b      	ldrh	r3, [r3, #26]
 800e5a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e5a6:	b29a      	uxth	r2, r3
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e5ac:	e003      	b.n	800e5b6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f002 fbce 	bl	8010d50 <tcp_send_empty_ack>
 800e5b4:	e000      	b.n	800e5b8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e5b6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d05b      	beq.n	800e678 <tcp_receive+0x50c>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5c4:	4b60      	ldr	r3, [pc, #384]	; (800e748 <tcp_receive+0x5dc>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	da54      	bge.n	800e678 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e5ce:	4b5f      	ldr	r3, [pc, #380]	; (800e74c <tcp_receive+0x5e0>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	b29a      	uxth	r2, r3
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	1ad3      	subs	r3, r2, r3
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e5e2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e5ec:	10db      	asrs	r3, r3, #3
 800e5ee:	b21b      	sxth	r3, r3
 800e5f0:	b29b      	uxth	r3, r3
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e600:	b29a      	uxth	r2, r3
 800e602:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e606:	4413      	add	r3, r2
 800e608:	b29b      	uxth	r3, r3
 800e60a:	b21a      	sxth	r2, r3
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e610:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e614:	2b00      	cmp	r3, #0
 800e616:	da05      	bge.n	800e624 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e618:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e61c:	425b      	negs	r3, r3
 800e61e:	b29b      	uxth	r3, r3
 800e620:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e624:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e62e:	109b      	asrs	r3, r3, #2
 800e630:	b21b      	sxth	r3, r3
 800e632:	b29b      	uxth	r3, r3
 800e634:	1ad3      	subs	r3, r2, r3
 800e636:	b29b      	uxth	r3, r3
 800e638:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e642:	b29a      	uxth	r2, r3
 800e644:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e648:	4413      	add	r3, r2
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	b21a      	sxth	r2, r3
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e658:	10db      	asrs	r3, r3, #3
 800e65a:	b21b      	sxth	r3, r3
 800e65c:	b29a      	uxth	r2, r3
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e664:	b29b      	uxth	r3, r3
 800e666:	4413      	add	r3, r2
 800e668:	b29b      	uxth	r3, r3
 800e66a:	b21a      	sxth	r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2200      	movs	r2, #0
 800e676:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e678:	4b35      	ldr	r3, [pc, #212]	; (800e750 <tcp_receive+0x5e4>)
 800e67a:	881b      	ldrh	r3, [r3, #0]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	f000 84e2 	beq.w	800f046 <tcp_receive+0xeda>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	7d1b      	ldrb	r3, [r3, #20]
 800e686:	2b06      	cmp	r3, #6
 800e688:	f200 84dd 	bhi.w	800f046 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e690:	4b30      	ldr	r3, [pc, #192]	; (800e754 <tcp_receive+0x5e8>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	3b01      	subs	r3, #1
 800e698:	2b00      	cmp	r3, #0
 800e69a:	f2c0 808f 	blt.w	800e7bc <tcp_receive+0x650>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6a2:	4b2b      	ldr	r3, [pc, #172]	; (800e750 <tcp_receive+0x5e4>)
 800e6a4:	881b      	ldrh	r3, [r3, #0]
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	4b2a      	ldr	r3, [pc, #168]	; (800e754 <tcp_receive+0x5e8>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	440b      	add	r3, r1
 800e6ae:	1ad3      	subs	r3, r2, r3
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	f300 8082 	bgt.w	800e7bc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e6b8:	4b27      	ldr	r3, [pc, #156]	; (800e758 <tcp_receive+0x5ec>)
 800e6ba:	685b      	ldr	r3, [r3, #4]
 800e6bc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6c2:	4b24      	ldr	r3, [pc, #144]	; (800e754 <tcp_receive+0x5e8>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	1ad3      	subs	r3, r2, r3
 800e6c8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e6ca:	4b23      	ldr	r3, [pc, #140]	; (800e758 <tcp_receive+0x5ec>)
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d106      	bne.n	800e6e0 <tcp_receive+0x574>
 800e6d2:	4b22      	ldr	r3, [pc, #136]	; (800e75c <tcp_receive+0x5f0>)
 800e6d4:	f240 5294 	movw	r2, #1428	; 0x594
 800e6d8:	4921      	ldr	r1, [pc, #132]	; (800e760 <tcp_receive+0x5f4>)
 800e6da:	4822      	ldr	r0, [pc, #136]	; (800e764 <tcp_receive+0x5f8>)
 800e6dc:	f007 f88c 	bl	80157f8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d906      	bls.n	800e6f8 <tcp_receive+0x58c>
 800e6ea:	4b1c      	ldr	r3, [pc, #112]	; (800e75c <tcp_receive+0x5f0>)
 800e6ec:	f240 5295 	movw	r2, #1429	; 0x595
 800e6f0:	491d      	ldr	r1, [pc, #116]	; (800e768 <tcp_receive+0x5fc>)
 800e6f2:	481c      	ldr	r0, [pc, #112]	; (800e764 <tcp_receive+0x5f8>)
 800e6f4:	f007 f880 	bl	80157f8 <iprintf>
      off = (u16_t)off32;
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e6fe:	4b16      	ldr	r3, [pc, #88]	; (800e758 <tcp_receive+0x5ec>)
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	891b      	ldrh	r3, [r3, #8]
 800e704:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e708:	429a      	cmp	r2, r3
 800e70a:	d906      	bls.n	800e71a <tcp_receive+0x5ae>
 800e70c:	4b13      	ldr	r3, [pc, #76]	; (800e75c <tcp_receive+0x5f0>)
 800e70e:	f240 5297 	movw	r2, #1431	; 0x597
 800e712:	4916      	ldr	r1, [pc, #88]	; (800e76c <tcp_receive+0x600>)
 800e714:	4813      	ldr	r0, [pc, #76]	; (800e764 <tcp_receive+0x5f8>)
 800e716:	f007 f86f 	bl	80157f8 <iprintf>
      inseg.len -= off;
 800e71a:	4b0f      	ldr	r3, [pc, #60]	; (800e758 <tcp_receive+0x5ec>)
 800e71c:	891a      	ldrh	r2, [r3, #8]
 800e71e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e722:	1ad3      	subs	r3, r2, r3
 800e724:	b29a      	uxth	r2, r3
 800e726:	4b0c      	ldr	r3, [pc, #48]	; (800e758 <tcp_receive+0x5ec>)
 800e728:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e72a:	4b0b      	ldr	r3, [pc, #44]	; (800e758 <tcp_receive+0x5ec>)
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	891a      	ldrh	r2, [r3, #8]
 800e730:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e734:	1ad3      	subs	r3, r2, r3
 800e736:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e738:	e02a      	b.n	800e790 <tcp_receive+0x624>
 800e73a:	bf00      	nop
 800e73c:	08018204 	.word	0x08018204
 800e740:	0801820c 	.word	0x0801820c
 800e744:	2000e4dc 	.word	0x2000e4dc
 800e748:	2000e4d8 	.word	0x2000e4d8
 800e74c:	2000e49c 	.word	0x2000e49c
 800e750:	2000e4de 	.word	0x2000e4de
 800e754:	2000e4d4 	.word	0x2000e4d4
 800e758:	2000e4b4 	.word	0x2000e4b4
 800e75c:	08017e9c 	.word	0x08017e9c
 800e760:	08018214 	.word	0x08018214
 800e764:	08017ee8 	.word	0x08017ee8
 800e768:	08018224 	.word	0x08018224
 800e76c:	08018234 	.word	0x08018234
        off -= p->len;
 800e770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e772:	895b      	ldrh	r3, [r3, #10]
 800e774:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e77e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e780:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e782:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e786:	2200      	movs	r2, #0
 800e788:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e78a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e792:	895b      	ldrh	r3, [r3, #10]
 800e794:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e798:	429a      	cmp	r2, r3
 800e79a:	d8e9      	bhi.n	800e770 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e79c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e7a4:	f7fc f94c 	bl	800aa40 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ac:	4a91      	ldr	r2, [pc, #580]	; (800e9f4 <tcp_receive+0x888>)
 800e7ae:	6013      	str	r3, [r2, #0]
 800e7b0:	4b91      	ldr	r3, [pc, #580]	; (800e9f8 <tcp_receive+0x88c>)
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	4a8f      	ldr	r2, [pc, #572]	; (800e9f4 <tcp_receive+0x888>)
 800e7b6:	6812      	ldr	r2, [r2, #0]
 800e7b8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e7ba:	e00d      	b.n	800e7d8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e7bc:	4b8d      	ldr	r3, [pc, #564]	; (800e9f4 <tcp_receive+0x888>)
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c4:	1ad3      	subs	r3, r2, r3
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	da06      	bge.n	800e7d8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	8b5b      	ldrh	r3, [r3, #26]
 800e7ce:	f043 0302 	orr.w	r3, r3, #2
 800e7d2:	b29a      	uxth	r2, r3
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e7d8:	4b86      	ldr	r3, [pc, #536]	; (800e9f4 <tcp_receive+0x888>)
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e0:	1ad3      	subs	r3, r2, r3
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	f2c0 842a 	blt.w	800f03c <tcp_receive+0xed0>
 800e7e8:	4b82      	ldr	r3, [pc, #520]	; (800e9f4 <tcp_receive+0x888>)
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7f0:	6879      	ldr	r1, [r7, #4]
 800e7f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e7f4:	440b      	add	r3, r1
 800e7f6:	1ad3      	subs	r3, r2, r3
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	f300 841e 	bgt.w	800f03c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e804:	4b7b      	ldr	r3, [pc, #492]	; (800e9f4 <tcp_receive+0x888>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	429a      	cmp	r2, r3
 800e80a:	f040 829a 	bne.w	800ed42 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e80e:	4b7a      	ldr	r3, [pc, #488]	; (800e9f8 <tcp_receive+0x88c>)
 800e810:	891c      	ldrh	r4, [r3, #8]
 800e812:	4b79      	ldr	r3, [pc, #484]	; (800e9f8 <tcp_receive+0x88c>)
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	899b      	ldrh	r3, [r3, #12]
 800e818:	b29b      	uxth	r3, r3
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7fa fe3e 	bl	800949c <lwip_htons>
 800e820:	4603      	mov	r3, r0
 800e822:	b2db      	uxtb	r3, r3
 800e824:	f003 0303 	and.w	r3, r3, #3
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d001      	beq.n	800e830 <tcp_receive+0x6c4>
 800e82c:	2301      	movs	r3, #1
 800e82e:	e000      	b.n	800e832 <tcp_receive+0x6c6>
 800e830:	2300      	movs	r3, #0
 800e832:	4423      	add	r3, r4
 800e834:	b29a      	uxth	r2, r3
 800e836:	4b71      	ldr	r3, [pc, #452]	; (800e9fc <tcp_receive+0x890>)
 800e838:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e83e:	4b6f      	ldr	r3, [pc, #444]	; (800e9fc <tcp_receive+0x890>)
 800e840:	881b      	ldrh	r3, [r3, #0]
 800e842:	429a      	cmp	r2, r3
 800e844:	d275      	bcs.n	800e932 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e846:	4b6c      	ldr	r3, [pc, #432]	; (800e9f8 <tcp_receive+0x88c>)
 800e848:	68db      	ldr	r3, [r3, #12]
 800e84a:	899b      	ldrh	r3, [r3, #12]
 800e84c:	b29b      	uxth	r3, r3
 800e84e:	4618      	mov	r0, r3
 800e850:	f7fa fe24 	bl	800949c <lwip_htons>
 800e854:	4603      	mov	r3, r0
 800e856:	b2db      	uxtb	r3, r3
 800e858:	f003 0301 	and.w	r3, r3, #1
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d01f      	beq.n	800e8a0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e860:	4b65      	ldr	r3, [pc, #404]	; (800e9f8 <tcp_receive+0x88c>)
 800e862:	68db      	ldr	r3, [r3, #12]
 800e864:	899b      	ldrh	r3, [r3, #12]
 800e866:	b29b      	uxth	r3, r3
 800e868:	b21b      	sxth	r3, r3
 800e86a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e86e:	b21c      	sxth	r4, r3
 800e870:	4b61      	ldr	r3, [pc, #388]	; (800e9f8 <tcp_receive+0x88c>)
 800e872:	68db      	ldr	r3, [r3, #12]
 800e874:	899b      	ldrh	r3, [r3, #12]
 800e876:	b29b      	uxth	r3, r3
 800e878:	4618      	mov	r0, r3
 800e87a:	f7fa fe0f 	bl	800949c <lwip_htons>
 800e87e:	4603      	mov	r3, r0
 800e880:	b2db      	uxtb	r3, r3
 800e882:	b29b      	uxth	r3, r3
 800e884:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e888:	b29b      	uxth	r3, r3
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7fa fe06 	bl	800949c <lwip_htons>
 800e890:	4603      	mov	r3, r0
 800e892:	b21b      	sxth	r3, r3
 800e894:	4323      	orrs	r3, r4
 800e896:	b21a      	sxth	r2, r3
 800e898:	4b57      	ldr	r3, [pc, #348]	; (800e9f8 <tcp_receive+0x88c>)
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	b292      	uxth	r2, r2
 800e89e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e8a4:	4b54      	ldr	r3, [pc, #336]	; (800e9f8 <tcp_receive+0x88c>)
 800e8a6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e8a8:	4b53      	ldr	r3, [pc, #332]	; (800e9f8 <tcp_receive+0x88c>)
 800e8aa:	68db      	ldr	r3, [r3, #12]
 800e8ac:	899b      	ldrh	r3, [r3, #12]
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7fa fdf3 	bl	800949c <lwip_htons>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	b2db      	uxtb	r3, r3
 800e8ba:	f003 0302 	and.w	r3, r3, #2
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d005      	beq.n	800e8ce <tcp_receive+0x762>
            inseg.len -= 1;
 800e8c2:	4b4d      	ldr	r3, [pc, #308]	; (800e9f8 <tcp_receive+0x88c>)
 800e8c4:	891b      	ldrh	r3, [r3, #8]
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	b29a      	uxth	r2, r3
 800e8ca:	4b4b      	ldr	r3, [pc, #300]	; (800e9f8 <tcp_receive+0x88c>)
 800e8cc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e8ce:	4b4a      	ldr	r3, [pc, #296]	; (800e9f8 <tcp_receive+0x88c>)
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	4a49      	ldr	r2, [pc, #292]	; (800e9f8 <tcp_receive+0x88c>)
 800e8d4:	8912      	ldrh	r2, [r2, #8]
 800e8d6:	4611      	mov	r1, r2
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7fb ffb1 	bl	800a840 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e8de:	4b46      	ldr	r3, [pc, #280]	; (800e9f8 <tcp_receive+0x88c>)
 800e8e0:	891c      	ldrh	r4, [r3, #8]
 800e8e2:	4b45      	ldr	r3, [pc, #276]	; (800e9f8 <tcp_receive+0x88c>)
 800e8e4:	68db      	ldr	r3, [r3, #12]
 800e8e6:	899b      	ldrh	r3, [r3, #12]
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fa fdd6 	bl	800949c <lwip_htons>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	f003 0303 	and.w	r3, r3, #3
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d001      	beq.n	800e900 <tcp_receive+0x794>
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	e000      	b.n	800e902 <tcp_receive+0x796>
 800e900:	2300      	movs	r3, #0
 800e902:	4423      	add	r3, r4
 800e904:	b29a      	uxth	r2, r3
 800e906:	4b3d      	ldr	r3, [pc, #244]	; (800e9fc <tcp_receive+0x890>)
 800e908:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e90a:	4b3c      	ldr	r3, [pc, #240]	; (800e9fc <tcp_receive+0x890>)
 800e90c:	881b      	ldrh	r3, [r3, #0]
 800e90e:	461a      	mov	r2, r3
 800e910:	4b38      	ldr	r3, [pc, #224]	; (800e9f4 <tcp_receive+0x888>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	441a      	add	r2, r3
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e91a:	6879      	ldr	r1, [r7, #4]
 800e91c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e91e:	440b      	add	r3, r1
 800e920:	429a      	cmp	r2, r3
 800e922:	d006      	beq.n	800e932 <tcp_receive+0x7c6>
 800e924:	4b36      	ldr	r3, [pc, #216]	; (800ea00 <tcp_receive+0x894>)
 800e926:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e92a:	4936      	ldr	r1, [pc, #216]	; (800ea04 <tcp_receive+0x898>)
 800e92c:	4836      	ldr	r0, [pc, #216]	; (800ea08 <tcp_receive+0x89c>)
 800e92e:	f006 ff63 	bl	80157f8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e936:	2b00      	cmp	r3, #0
 800e938:	f000 80e7 	beq.w	800eb0a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e93c:	4b2e      	ldr	r3, [pc, #184]	; (800e9f8 <tcp_receive+0x88c>)
 800e93e:	68db      	ldr	r3, [r3, #12]
 800e940:	899b      	ldrh	r3, [r3, #12]
 800e942:	b29b      	uxth	r3, r3
 800e944:	4618      	mov	r0, r3
 800e946:	f7fa fda9 	bl	800949c <lwip_htons>
 800e94a:	4603      	mov	r3, r0
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	f003 0301 	and.w	r3, r3, #1
 800e952:	2b00      	cmp	r3, #0
 800e954:	d010      	beq.n	800e978 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e956:	e00a      	b.n	800e96e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e95c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e968:	68f8      	ldr	r0, [r7, #12]
 800e96a:	f7fd fd1c 	bl	800c3a6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e972:	2b00      	cmp	r3, #0
 800e974:	d1f0      	bne.n	800e958 <tcp_receive+0x7ec>
 800e976:	e0c8      	b.n	800eb0a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e97c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e97e:	e052      	b.n	800ea26 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e982:	68db      	ldr	r3, [r3, #12]
 800e984:	899b      	ldrh	r3, [r3, #12]
 800e986:	b29b      	uxth	r3, r3
 800e988:	4618      	mov	r0, r3
 800e98a:	f7fa fd87 	bl	800949c <lwip_htons>
 800e98e:	4603      	mov	r3, r0
 800e990:	b2db      	uxtb	r3, r3
 800e992:	f003 0301 	and.w	r3, r3, #1
 800e996:	2b00      	cmp	r3, #0
 800e998:	d03d      	beq.n	800ea16 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e99a:	4b17      	ldr	r3, [pc, #92]	; (800e9f8 <tcp_receive+0x88c>)
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	899b      	ldrh	r3, [r3, #12]
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f7fa fd7a 	bl	800949c <lwip_htons>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d130      	bne.n	800ea16 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e9b4:	4b10      	ldr	r3, [pc, #64]	; (800e9f8 <tcp_receive+0x88c>)
 800e9b6:	68db      	ldr	r3, [r3, #12]
 800e9b8:	899b      	ldrh	r3, [r3, #12]
 800e9ba:	b29c      	uxth	r4, r3
 800e9bc:	2001      	movs	r0, #1
 800e9be:	f7fa fd6d 	bl	800949c <lwip_htons>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	4b0c      	ldr	r3, [pc, #48]	; (800e9f8 <tcp_receive+0x88c>)
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	4322      	orrs	r2, r4
 800e9cc:	b292      	uxth	r2, r2
 800e9ce:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e9d0:	4b09      	ldr	r3, [pc, #36]	; (800e9f8 <tcp_receive+0x88c>)
 800e9d2:	891c      	ldrh	r4, [r3, #8]
 800e9d4:	4b08      	ldr	r3, [pc, #32]	; (800e9f8 <tcp_receive+0x88c>)
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	899b      	ldrh	r3, [r3, #12]
 800e9da:	b29b      	uxth	r3, r3
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7fa fd5d 	bl	800949c <lwip_htons>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	f003 0303 	and.w	r3, r3, #3
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00e      	beq.n	800ea0c <tcp_receive+0x8a0>
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	e00d      	b.n	800ea0e <tcp_receive+0x8a2>
 800e9f2:	bf00      	nop
 800e9f4:	2000e4d4 	.word	0x2000e4d4
 800e9f8:	2000e4b4 	.word	0x2000e4b4
 800e9fc:	2000e4de 	.word	0x2000e4de
 800ea00:	08017e9c 	.word	0x08017e9c
 800ea04:	08018244 	.word	0x08018244
 800ea08:	08017ee8 	.word	0x08017ee8
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	4423      	add	r3, r4
 800ea10:	b29a      	uxth	r2, r3
 800ea12:	4b98      	ldr	r3, [pc, #608]	; (800ec74 <tcp_receive+0xb08>)
 800ea14:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ea16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea18:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ea1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ea20:	6938      	ldr	r0, [r7, #16]
 800ea22:	f7fd fcc0 	bl	800c3a6 <tcp_seg_free>
            while (next &&
 800ea26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d00e      	beq.n	800ea4a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ea2c:	4b91      	ldr	r3, [pc, #580]	; (800ec74 <tcp_receive+0xb08>)
 800ea2e:	881b      	ldrh	r3, [r3, #0]
 800ea30:	461a      	mov	r2, r3
 800ea32:	4b91      	ldr	r3, [pc, #580]	; (800ec78 <tcp_receive+0xb0c>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	441a      	add	r2, r3
 800ea38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea40:	8909      	ldrh	r1, [r1, #8]
 800ea42:	440b      	add	r3, r1
 800ea44:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	da9a      	bge.n	800e980 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ea4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d059      	beq.n	800eb04 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800ea50:	4b88      	ldr	r3, [pc, #544]	; (800ec74 <tcp_receive+0xb08>)
 800ea52:	881b      	ldrh	r3, [r3, #0]
 800ea54:	461a      	mov	r2, r3
 800ea56:	4b88      	ldr	r3, [pc, #544]	; (800ec78 <tcp_receive+0xb0c>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	441a      	add	r2, r3
 800ea5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	dd4d      	ble.n	800eb04 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ea68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	4b81      	ldr	r3, [pc, #516]	; (800ec78 <tcp_receive+0xb0c>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	1ad3      	subs	r3, r2, r3
 800ea78:	b29a      	uxth	r2, r3
 800ea7a:	4b80      	ldr	r3, [pc, #512]	; (800ec7c <tcp_receive+0xb10>)
 800ea7c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ea7e:	4b7f      	ldr	r3, [pc, #508]	; (800ec7c <tcp_receive+0xb10>)
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	899b      	ldrh	r3, [r3, #12]
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7fa fd08 	bl	800949c <lwip_htons>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	b2db      	uxtb	r3, r3
 800ea90:	f003 0302 	and.w	r3, r3, #2
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d005      	beq.n	800eaa4 <tcp_receive+0x938>
                inseg.len -= 1;
 800ea98:	4b78      	ldr	r3, [pc, #480]	; (800ec7c <tcp_receive+0xb10>)
 800ea9a:	891b      	ldrh	r3, [r3, #8]
 800ea9c:	3b01      	subs	r3, #1
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	4b76      	ldr	r3, [pc, #472]	; (800ec7c <tcp_receive+0xb10>)
 800eaa2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800eaa4:	4b75      	ldr	r3, [pc, #468]	; (800ec7c <tcp_receive+0xb10>)
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	4a74      	ldr	r2, [pc, #464]	; (800ec7c <tcp_receive+0xb10>)
 800eaaa:	8912      	ldrh	r2, [r2, #8]
 800eaac:	4611      	mov	r1, r2
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fb fec6 	bl	800a840 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800eab4:	4b71      	ldr	r3, [pc, #452]	; (800ec7c <tcp_receive+0xb10>)
 800eab6:	891c      	ldrh	r4, [r3, #8]
 800eab8:	4b70      	ldr	r3, [pc, #448]	; (800ec7c <tcp_receive+0xb10>)
 800eaba:	68db      	ldr	r3, [r3, #12]
 800eabc:	899b      	ldrh	r3, [r3, #12]
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7fa fceb 	bl	800949c <lwip_htons>
 800eac6:	4603      	mov	r3, r0
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	f003 0303 	and.w	r3, r3, #3
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d001      	beq.n	800ead6 <tcp_receive+0x96a>
 800ead2:	2301      	movs	r3, #1
 800ead4:	e000      	b.n	800ead8 <tcp_receive+0x96c>
 800ead6:	2300      	movs	r3, #0
 800ead8:	4423      	add	r3, r4
 800eada:	b29a      	uxth	r2, r3
 800eadc:	4b65      	ldr	r3, [pc, #404]	; (800ec74 <tcp_receive+0xb08>)
 800eade:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800eae0:	4b64      	ldr	r3, [pc, #400]	; (800ec74 <tcp_receive+0xb08>)
 800eae2:	881b      	ldrh	r3, [r3, #0]
 800eae4:	461a      	mov	r2, r3
 800eae6:	4b64      	ldr	r3, [pc, #400]	; (800ec78 <tcp_receive+0xb0c>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	441a      	add	r2, r3
 800eaec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d006      	beq.n	800eb04 <tcp_receive+0x998>
 800eaf6:	4b62      	ldr	r3, [pc, #392]	; (800ec80 <tcp_receive+0xb14>)
 800eaf8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800eafc:	4961      	ldr	r1, [pc, #388]	; (800ec84 <tcp_receive+0xb18>)
 800eafe:	4862      	ldr	r0, [pc, #392]	; (800ec88 <tcp_receive+0xb1c>)
 800eb00:	f006 fe7a 	bl	80157f8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb08:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800eb0a:	4b5a      	ldr	r3, [pc, #360]	; (800ec74 <tcp_receive+0xb08>)
 800eb0c:	881b      	ldrh	r3, [r3, #0]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	4b59      	ldr	r3, [pc, #356]	; (800ec78 <tcp_receive+0xb0c>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	441a      	add	r2, r3
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eb1e:	4b55      	ldr	r3, [pc, #340]	; (800ec74 <tcp_receive+0xb08>)
 800eb20:	881b      	ldrh	r3, [r3, #0]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d206      	bcs.n	800eb34 <tcp_receive+0x9c8>
 800eb26:	4b56      	ldr	r3, [pc, #344]	; (800ec80 <tcp_receive+0xb14>)
 800eb28:	f240 6207 	movw	r2, #1543	; 0x607
 800eb2c:	4957      	ldr	r1, [pc, #348]	; (800ec8c <tcp_receive+0xb20>)
 800eb2e:	4856      	ldr	r0, [pc, #344]	; (800ec88 <tcp_receive+0xb1c>)
 800eb30:	f006 fe62 	bl	80157f8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eb38:	4b4e      	ldr	r3, [pc, #312]	; (800ec74 <tcp_receive+0xb08>)
 800eb3a:	881b      	ldrh	r3, [r3, #0]
 800eb3c:	1ad3      	subs	r3, r2, r3
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f7fc ff09 	bl	800b95c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800eb4a:	4b4c      	ldr	r3, [pc, #304]	; (800ec7c <tcp_receive+0xb10>)
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	891b      	ldrh	r3, [r3, #8]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d006      	beq.n	800eb62 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800eb54:	4b49      	ldr	r3, [pc, #292]	; (800ec7c <tcp_receive+0xb10>)
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	4a4d      	ldr	r2, [pc, #308]	; (800ec90 <tcp_receive+0xb24>)
 800eb5a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800eb5c:	4b47      	ldr	r3, [pc, #284]	; (800ec7c <tcp_receive+0xb10>)
 800eb5e:	2200      	movs	r2, #0
 800eb60:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eb62:	4b46      	ldr	r3, [pc, #280]	; (800ec7c <tcp_receive+0xb10>)
 800eb64:	68db      	ldr	r3, [r3, #12]
 800eb66:	899b      	ldrh	r3, [r3, #12]
 800eb68:	b29b      	uxth	r3, r3
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7fa fc96 	bl	800949c <lwip_htons>
 800eb70:	4603      	mov	r3, r0
 800eb72:	b2db      	uxtb	r3, r3
 800eb74:	f003 0301 	and.w	r3, r3, #1
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	f000 80b8 	beq.w	800ecee <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800eb7e:	4b45      	ldr	r3, [pc, #276]	; (800ec94 <tcp_receive+0xb28>)
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	f043 0320 	orr.w	r3, r3, #32
 800eb86:	b2da      	uxtb	r2, r3
 800eb88:	4b42      	ldr	r3, [pc, #264]	; (800ec94 <tcp_receive+0xb28>)
 800eb8a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800eb8c:	e0af      	b.n	800ecee <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb92:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	4a36      	ldr	r2, [pc, #216]	; (800ec78 <tcp_receive+0xb0c>)
 800eb9e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	891b      	ldrh	r3, [r3, #8]
 800eba4:	461c      	mov	r4, r3
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	899b      	ldrh	r3, [r3, #12]
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7fa fc74 	bl	800949c <lwip_htons>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	f003 0303 	and.w	r3, r3, #3
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d001      	beq.n	800ebc4 <tcp_receive+0xa58>
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	e000      	b.n	800ebc6 <tcp_receive+0xa5a>
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	191a      	adds	r2, r3, r4
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebcc:	441a      	add	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ebd6:	461c      	mov	r4, r3
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	891b      	ldrh	r3, [r3, #8]
 800ebdc:	461d      	mov	r5, r3
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	68db      	ldr	r3, [r3, #12]
 800ebe2:	899b      	ldrh	r3, [r3, #12]
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fa fc58 	bl	800949c <lwip_htons>
 800ebec:	4603      	mov	r3, r0
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	f003 0303 	and.w	r3, r3, #3
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d001      	beq.n	800ebfc <tcp_receive+0xa90>
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	e000      	b.n	800ebfe <tcp_receive+0xa92>
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	442b      	add	r3, r5
 800ec00:	429c      	cmp	r4, r3
 800ec02:	d206      	bcs.n	800ec12 <tcp_receive+0xaa6>
 800ec04:	4b1e      	ldr	r3, [pc, #120]	; (800ec80 <tcp_receive+0xb14>)
 800ec06:	f240 622b 	movw	r2, #1579	; 0x62b
 800ec0a:	4923      	ldr	r1, [pc, #140]	; (800ec98 <tcp_receive+0xb2c>)
 800ec0c:	481e      	ldr	r0, [pc, #120]	; (800ec88 <tcp_receive+0xb1c>)
 800ec0e:	f006 fdf3 	bl	80157f8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	891b      	ldrh	r3, [r3, #8]
 800ec16:	461c      	mov	r4, r3
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	899b      	ldrh	r3, [r3, #12]
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	4618      	mov	r0, r3
 800ec22:	f7fa fc3b 	bl	800949c <lwip_htons>
 800ec26:	4603      	mov	r3, r0
 800ec28:	b2db      	uxtb	r3, r3
 800ec2a:	f003 0303 	and.w	r3, r3, #3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d001      	beq.n	800ec36 <tcp_receive+0xaca>
 800ec32:	2301      	movs	r3, #1
 800ec34:	e000      	b.n	800ec38 <tcp_receive+0xacc>
 800ec36:	2300      	movs	r3, #0
 800ec38:	1919      	adds	r1, r3, r4
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec3e:	b28b      	uxth	r3, r1
 800ec40:	1ad3      	subs	r3, r2, r3
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f7fc fe87 	bl	800b95c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	891b      	ldrh	r3, [r3, #8]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d028      	beq.n	800ecaa <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ec58:	4b0d      	ldr	r3, [pc, #52]	; (800ec90 <tcp_receive+0xb24>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d01d      	beq.n	800ec9c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800ec60:	4b0b      	ldr	r3, [pc, #44]	; (800ec90 <tcp_receive+0xb24>)
 800ec62:	681a      	ldr	r2, [r3, #0]
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	4619      	mov	r1, r3
 800ec6a:	4610      	mov	r0, r2
 800ec6c:	f7fc f830 	bl	800acd0 <pbuf_cat>
 800ec70:	e018      	b.n	800eca4 <tcp_receive+0xb38>
 800ec72:	bf00      	nop
 800ec74:	2000e4de 	.word	0x2000e4de
 800ec78:	2000e4d4 	.word	0x2000e4d4
 800ec7c:	2000e4b4 	.word	0x2000e4b4
 800ec80:	08017e9c 	.word	0x08017e9c
 800ec84:	0801827c 	.word	0x0801827c
 800ec88:	08017ee8 	.word	0x08017ee8
 800ec8c:	080182b8 	.word	0x080182b8
 800ec90:	2000e4e4 	.word	0x2000e4e4
 800ec94:	2000e4e1 	.word	0x2000e4e1
 800ec98:	080182d8 	.word	0x080182d8
            } else {
              recv_data = cseg->p;
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	4a70      	ldr	r2, [pc, #448]	; (800ee64 <tcp_receive+0xcf8>)
 800eca2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	2200      	movs	r2, #0
 800eca8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	68db      	ldr	r3, [r3, #12]
 800ecae:	899b      	ldrh	r3, [r3, #12]
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fa fbf2 	bl	800949c <lwip_htons>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	b2db      	uxtb	r3, r3
 800ecbc:	f003 0301 	and.w	r3, r3, #1
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d00d      	beq.n	800ece0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ecc4:	4b68      	ldr	r3, [pc, #416]	; (800ee68 <tcp_receive+0xcfc>)
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	f043 0320 	orr.w	r3, r3, #32
 800eccc:	b2da      	uxtb	r2, r3
 800ecce:	4b66      	ldr	r3, [pc, #408]	; (800ee68 <tcp_receive+0xcfc>)
 800ecd0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	7d1b      	ldrb	r3, [r3, #20]
 800ecd6:	2b04      	cmp	r3, #4
 800ecd8:	d102      	bne.n	800ece0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2207      	movs	r2, #7
 800ecde:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ece8:	68b8      	ldr	r0, [r7, #8]
 800ecea:	f7fd fb5c 	bl	800c3a6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d008      	beq.n	800ed08 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecfa:	68db      	ldr	r3, [r3, #12]
 800ecfc:	685a      	ldr	r2, [r3, #4]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ed02:	429a      	cmp	r2, r3
 800ed04:	f43f af43 	beq.w	800eb8e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	8b5b      	ldrh	r3, [r3, #26]
 800ed0c:	f003 0301 	and.w	r3, r3, #1
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d00e      	beq.n	800ed32 <tcp_receive+0xbc6>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	8b5b      	ldrh	r3, [r3, #26]
 800ed18:	f023 0301 	bic.w	r3, r3, #1
 800ed1c:	b29a      	uxth	r2, r3
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	835a      	strh	r2, [r3, #26]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	8b5b      	ldrh	r3, [r3, #26]
 800ed26:	f043 0302 	orr.w	r3, r3, #2
 800ed2a:	b29a      	uxth	r2, r3
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ed30:	e188      	b.n	800f044 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	8b5b      	ldrh	r3, [r3, #26]
 800ed36:	f043 0301 	orr.w	r3, r3, #1
 800ed3a:	b29a      	uxth	r2, r3
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ed40:	e180      	b.n	800f044 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d106      	bne.n	800ed58 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ed4a:	4848      	ldr	r0, [pc, #288]	; (800ee6c <tcp_receive+0xd00>)
 800ed4c:	f7fd fb44 	bl	800c3d8 <tcp_seg_copy>
 800ed50:	4602      	mov	r2, r0
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	675a      	str	r2, [r3, #116]	; 0x74
 800ed56:	e16d      	b.n	800f034 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed60:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed62:	e157      	b.n	800f014 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ed64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	685a      	ldr	r2, [r3, #4]
 800ed6a:	4b41      	ldr	r3, [pc, #260]	; (800ee70 <tcp_receive+0xd04>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d11d      	bne.n	800edae <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ed72:	4b3e      	ldr	r3, [pc, #248]	; (800ee6c <tcp_receive+0xd00>)
 800ed74:	891a      	ldrh	r2, [r3, #8]
 800ed76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed78:	891b      	ldrh	r3, [r3, #8]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	f240 814f 	bls.w	800f01e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ed80:	483a      	ldr	r0, [pc, #232]	; (800ee6c <tcp_receive+0xd00>)
 800ed82:	f7fd fb29 	bl	800c3d8 <tcp_seg_copy>
 800ed86:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	f000 8149 	beq.w	800f022 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ed90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d003      	beq.n	800ed9e <tcp_receive+0xc32>
                    prev->next = cseg;
 800ed96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed98:	697a      	ldr	r2, [r7, #20]
 800ed9a:	601a      	str	r2, [r3, #0]
 800ed9c:	e002      	b.n	800eda4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	697a      	ldr	r2, [r7, #20]
 800eda2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800eda4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eda6:	6978      	ldr	r0, [r7, #20]
 800eda8:	f7ff f8dc 	bl	800df64 <tcp_oos_insert_segment>
                }
                break;
 800edac:	e139      	b.n	800f022 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800edae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d117      	bne.n	800ede4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800edb4:	4b2e      	ldr	r3, [pc, #184]	; (800ee70 <tcp_receive+0xd04>)
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	1ad3      	subs	r3, r2, r3
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	da57      	bge.n	800ee74 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800edc4:	4829      	ldr	r0, [pc, #164]	; (800ee6c <tcp_receive+0xd00>)
 800edc6:	f7fd fb07 	bl	800c3d8 <tcp_seg_copy>
 800edca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800edcc:	69bb      	ldr	r3, [r7, #24]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f000 8129 	beq.w	800f026 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	69ba      	ldr	r2, [r7, #24]
 800edd8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800edda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eddc:	69b8      	ldr	r0, [r7, #24]
 800edde:	f7ff f8c1 	bl	800df64 <tcp_oos_insert_segment>
                  }
                  break;
 800ede2:	e120      	b.n	800f026 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ede4:	4b22      	ldr	r3, [pc, #136]	; (800ee70 <tcp_receive+0xd04>)
 800ede6:	681a      	ldr	r2, [r3, #0]
 800ede8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edea:	68db      	ldr	r3, [r3, #12]
 800edec:	685b      	ldr	r3, [r3, #4]
 800edee:	1ad3      	subs	r3, r2, r3
 800edf0:	3b01      	subs	r3, #1
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	db3e      	blt.n	800ee74 <tcp_receive+0xd08>
 800edf6:	4b1e      	ldr	r3, [pc, #120]	; (800ee70 <tcp_receive+0xd04>)
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	1ad3      	subs	r3, r2, r3
 800ee02:	3301      	adds	r3, #1
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	dc35      	bgt.n	800ee74 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ee08:	4818      	ldr	r0, [pc, #96]	; (800ee6c <tcp_receive+0xd00>)
 800ee0a:	f7fd fae5 	bl	800c3d8 <tcp_seg_copy>
 800ee0e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ee10:	69fb      	ldr	r3, [r7, #28]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	f000 8109 	beq.w	800f02a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ee18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee1a:	68db      	ldr	r3, [r3, #12]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee20:	8912      	ldrh	r2, [r2, #8]
 800ee22:	441a      	add	r2, r3
 800ee24:	4b12      	ldr	r3, [pc, #72]	; (800ee70 <tcp_receive+0xd04>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	1ad3      	subs	r3, r2, r3
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	dd12      	ble.n	800ee54 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ee2e:	4b10      	ldr	r3, [pc, #64]	; (800ee70 <tcp_receive+0xd04>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	b29a      	uxth	r2, r3
 800ee34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	1ad3      	subs	r3, r2, r3
 800ee3e:	b29a      	uxth	r2, r3
 800ee40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee42:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ee44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee46:	685a      	ldr	r2, [r3, #4]
 800ee48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee4a:	891b      	ldrh	r3, [r3, #8]
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	4610      	mov	r0, r2
 800ee50:	f7fb fcf6 	bl	800a840 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ee54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee56:	69fa      	ldr	r2, [r7, #28]
 800ee58:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ee5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee5c:	69f8      	ldr	r0, [r7, #28]
 800ee5e:	f7ff f881 	bl	800df64 <tcp_oos_insert_segment>
                  }
                  break;
 800ee62:	e0e2      	b.n	800f02a <tcp_receive+0xebe>
 800ee64:	2000e4e4 	.word	0x2000e4e4
 800ee68:	2000e4e1 	.word	0x2000e4e1
 800ee6c:	2000e4b4 	.word	0x2000e4b4
 800ee70:	2000e4d4 	.word	0x2000e4d4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ee74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee76:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ee78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	f040 80c6 	bne.w	800f00e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ee82:	4b80      	ldr	r3, [pc, #512]	; (800f084 <tcp_receive+0xf18>)
 800ee84:	681a      	ldr	r2, [r3, #0]
 800ee86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	f340 80bd 	ble.w	800f00e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ee94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	899b      	ldrh	r3, [r3, #12]
 800ee9a:	b29b      	uxth	r3, r3
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7fa fafd 	bl	800949c <lwip_htons>
 800eea2:	4603      	mov	r3, r0
 800eea4:	b2db      	uxtb	r3, r3
 800eea6:	f003 0301 	and.w	r3, r3, #1
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	f040 80bf 	bne.w	800f02e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800eeb0:	4875      	ldr	r0, [pc, #468]	; (800f088 <tcp_receive+0xf1c>)
 800eeb2:	f7fd fa91 	bl	800c3d8 <tcp_seg_copy>
 800eeb6:	4602      	mov	r2, r0
 800eeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800eebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	f000 80b6 	beq.w	800f032 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800eec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec8:	68db      	ldr	r3, [r3, #12]
 800eeca:	685b      	ldr	r3, [r3, #4]
 800eecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eece:	8912      	ldrh	r2, [r2, #8]
 800eed0:	441a      	add	r2, r3
 800eed2:	4b6c      	ldr	r3, [pc, #432]	; (800f084 <tcp_receive+0xf18>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	1ad3      	subs	r3, r2, r3
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	dd12      	ble.n	800ef02 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800eedc:	4b69      	ldr	r3, [pc, #420]	; (800f084 <tcp_receive+0xf18>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	b29a      	uxth	r2, r3
 800eee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee4:	68db      	ldr	r3, [r3, #12]
 800eee6:	685b      	ldr	r3, [r3, #4]
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	1ad3      	subs	r3, r2, r3
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800eef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef4:	685a      	ldr	r2, [r3, #4]
 800eef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef8:	891b      	ldrh	r3, [r3, #8]
 800eefa:	4619      	mov	r1, r3
 800eefc:	4610      	mov	r0, r2
 800eefe:	f7fb fc9f 	bl	800a840 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ef02:	4b62      	ldr	r3, [pc, #392]	; (800f08c <tcp_receive+0xf20>)
 800ef04:	881b      	ldrh	r3, [r3, #0]
 800ef06:	461a      	mov	r2, r3
 800ef08:	4b5e      	ldr	r3, [pc, #376]	; (800f084 <tcp_receive+0xf18>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	441a      	add	r2, r3
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef12:	6879      	ldr	r1, [r7, #4]
 800ef14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ef16:	440b      	add	r3, r1
 800ef18:	1ad3      	subs	r3, r2, r3
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	f340 8089 	ble.w	800f032 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ef20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	68db      	ldr	r3, [r3, #12]
 800ef26:	899b      	ldrh	r3, [r3, #12]
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7fa fab6 	bl	800949c <lwip_htons>
 800ef30:	4603      	mov	r3, r0
 800ef32:	b2db      	uxtb	r3, r3
 800ef34:	f003 0301 	and.w	r3, r3, #1
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d022      	beq.n	800ef82 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ef3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	68db      	ldr	r3, [r3, #12]
 800ef42:	899b      	ldrh	r3, [r3, #12]
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	b21b      	sxth	r3, r3
 800ef48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ef4c:	b21c      	sxth	r4, r3
 800ef4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	899b      	ldrh	r3, [r3, #12]
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7fa fa9f 	bl	800949c <lwip_htons>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fa fa96 	bl	800949c <lwip_htons>
 800ef70:	4603      	mov	r3, r0
 800ef72:	b21b      	sxth	r3, r3
 800ef74:	4323      	orrs	r3, r4
 800ef76:	b21a      	sxth	r2, r3
 800ef78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	68db      	ldr	r3, [r3, #12]
 800ef7e:	b292      	uxth	r2, r2
 800ef80:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef86:	b29a      	uxth	r2, r3
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef8c:	4413      	add	r3, r2
 800ef8e:	b299      	uxth	r1, r3
 800ef90:	4b3c      	ldr	r3, [pc, #240]	; (800f084 <tcp_receive+0xf18>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	b29a      	uxth	r2, r3
 800ef96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	1a8a      	subs	r2, r1, r2
 800ef9c:	b292      	uxth	r2, r2
 800ef9e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800efa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	685a      	ldr	r2, [r3, #4]
 800efa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	891b      	ldrh	r3, [r3, #8]
 800efac:	4619      	mov	r1, r3
 800efae:	4610      	mov	r0, r2
 800efb0:	f7fb fc46 	bl	800a840 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800efb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	891c      	ldrh	r4, [r3, #8]
 800efba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	899b      	ldrh	r3, [r3, #12]
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7fa fa69 	bl	800949c <lwip_htons>
 800efca:	4603      	mov	r3, r0
 800efcc:	b2db      	uxtb	r3, r3
 800efce:	f003 0303 	and.w	r3, r3, #3
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d001      	beq.n	800efda <tcp_receive+0xe6e>
 800efd6:	2301      	movs	r3, #1
 800efd8:	e000      	b.n	800efdc <tcp_receive+0xe70>
 800efda:	2300      	movs	r3, #0
 800efdc:	4423      	add	r3, r4
 800efde:	b29a      	uxth	r2, r3
 800efe0:	4b2a      	ldr	r3, [pc, #168]	; (800f08c <tcp_receive+0xf20>)
 800efe2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800efe4:	4b29      	ldr	r3, [pc, #164]	; (800f08c <tcp_receive+0xf20>)
 800efe6:	881b      	ldrh	r3, [r3, #0]
 800efe8:	461a      	mov	r2, r3
 800efea:	4b26      	ldr	r3, [pc, #152]	; (800f084 <tcp_receive+0xf18>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	441a      	add	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eff4:	6879      	ldr	r1, [r7, #4]
 800eff6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eff8:	440b      	add	r3, r1
 800effa:	429a      	cmp	r2, r3
 800effc:	d019      	beq.n	800f032 <tcp_receive+0xec6>
 800effe:	4b24      	ldr	r3, [pc, #144]	; (800f090 <tcp_receive+0xf24>)
 800f000:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f004:	4923      	ldr	r1, [pc, #140]	; (800f094 <tcp_receive+0xf28>)
 800f006:	4824      	ldr	r0, [pc, #144]	; (800f098 <tcp_receive+0xf2c>)
 800f008:	f006 fbf6 	bl	80157f8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f00c:	e011      	b.n	800f032 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	63bb      	str	r3, [r7, #56]	; 0x38
 800f014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f016:	2b00      	cmp	r3, #0
 800f018:	f47f aea4 	bne.w	800ed64 <tcp_receive+0xbf8>
 800f01c:	e00a      	b.n	800f034 <tcp_receive+0xec8>
                break;
 800f01e:	bf00      	nop
 800f020:	e008      	b.n	800f034 <tcp_receive+0xec8>
                break;
 800f022:	bf00      	nop
 800f024:	e006      	b.n	800f034 <tcp_receive+0xec8>
                  break;
 800f026:	bf00      	nop
 800f028:	e004      	b.n	800f034 <tcp_receive+0xec8>
                  break;
 800f02a:	bf00      	nop
 800f02c:	e002      	b.n	800f034 <tcp_receive+0xec8>
                  break;
 800f02e:	bf00      	nop
 800f030:	e000      	b.n	800f034 <tcp_receive+0xec8>
                break;
 800f032:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f001 fe8b 	bl	8010d50 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f03a:	e003      	b.n	800f044 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f001 fe87 	bl	8010d50 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f042:	e01a      	b.n	800f07a <tcp_receive+0xf0e>
 800f044:	e019      	b.n	800f07a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f046:	4b0f      	ldr	r3, [pc, #60]	; (800f084 <tcp_receive+0xf18>)
 800f048:	681a      	ldr	r2, [r3, #0]
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f04e:	1ad3      	subs	r3, r2, r3
 800f050:	2b00      	cmp	r3, #0
 800f052:	db0a      	blt.n	800f06a <tcp_receive+0xefe>
 800f054:	4b0b      	ldr	r3, [pc, #44]	; (800f084 <tcp_receive+0xf18>)
 800f056:	681a      	ldr	r2, [r3, #0]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f05c:	6879      	ldr	r1, [r7, #4]
 800f05e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f060:	440b      	add	r3, r1
 800f062:	1ad3      	subs	r3, r2, r3
 800f064:	3301      	adds	r3, #1
 800f066:	2b00      	cmp	r3, #0
 800f068:	dd07      	ble.n	800f07a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	8b5b      	ldrh	r3, [r3, #26]
 800f06e:	f043 0302 	orr.w	r3, r3, #2
 800f072:	b29a      	uxth	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f078:	e7ff      	b.n	800f07a <tcp_receive+0xf0e>
 800f07a:	bf00      	nop
 800f07c:	3750      	adds	r7, #80	; 0x50
 800f07e:	46bd      	mov	sp, r7
 800f080:	bdb0      	pop	{r4, r5, r7, pc}
 800f082:	bf00      	nop
 800f084:	2000e4d4 	.word	0x2000e4d4
 800f088:	2000e4b4 	.word	0x2000e4b4
 800f08c:	2000e4de 	.word	0x2000e4de
 800f090:	08017e9c 	.word	0x08017e9c
 800f094:	08018244 	.word	0x08018244
 800f098:	08017ee8 	.word	0x08017ee8

0800f09c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b083      	sub	sp, #12
 800f0a0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f0a2:	4b15      	ldr	r3, [pc, #84]	; (800f0f8 <tcp_get_next_optbyte+0x5c>)
 800f0a4:	881b      	ldrh	r3, [r3, #0]
 800f0a6:	1c5a      	adds	r2, r3, #1
 800f0a8:	b291      	uxth	r1, r2
 800f0aa:	4a13      	ldr	r2, [pc, #76]	; (800f0f8 <tcp_get_next_optbyte+0x5c>)
 800f0ac:	8011      	strh	r1, [r2, #0]
 800f0ae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f0b0:	4b12      	ldr	r3, [pc, #72]	; (800f0fc <tcp_get_next_optbyte+0x60>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d004      	beq.n	800f0c2 <tcp_get_next_optbyte+0x26>
 800f0b8:	4b11      	ldr	r3, [pc, #68]	; (800f100 <tcp_get_next_optbyte+0x64>)
 800f0ba:	881b      	ldrh	r3, [r3, #0]
 800f0bc:	88fa      	ldrh	r2, [r7, #6]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d208      	bcs.n	800f0d4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f0c2:	4b10      	ldr	r3, [pc, #64]	; (800f104 <tcp_get_next_optbyte+0x68>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	3314      	adds	r3, #20
 800f0c8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f0ca:	88fb      	ldrh	r3, [r7, #6]
 800f0cc:	683a      	ldr	r2, [r7, #0]
 800f0ce:	4413      	add	r3, r2
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	e00b      	b.n	800f0ec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f0d4:	88fb      	ldrh	r3, [r7, #6]
 800f0d6:	b2da      	uxtb	r2, r3
 800f0d8:	4b09      	ldr	r3, [pc, #36]	; (800f100 <tcp_get_next_optbyte+0x64>)
 800f0da:	881b      	ldrh	r3, [r3, #0]
 800f0dc:	b2db      	uxtb	r3, r3
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f0e2:	4b06      	ldr	r3, [pc, #24]	; (800f0fc <tcp_get_next_optbyte+0x60>)
 800f0e4:	681a      	ldr	r2, [r3, #0]
 800f0e6:	797b      	ldrb	r3, [r7, #5]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	370c      	adds	r7, #12
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr
 800f0f8:	2000e4d0 	.word	0x2000e4d0
 800f0fc:	2000e4cc 	.word	0x2000e4cc
 800f100:	2000e4ca 	.word	0x2000e4ca
 800f104:	2000e4c4 	.word	0x2000e4c4

0800f108 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d106      	bne.n	800f124 <tcp_parseopt+0x1c>
 800f116:	4b32      	ldr	r3, [pc, #200]	; (800f1e0 <tcp_parseopt+0xd8>)
 800f118:	f240 727d 	movw	r2, #1917	; 0x77d
 800f11c:	4931      	ldr	r1, [pc, #196]	; (800f1e4 <tcp_parseopt+0xdc>)
 800f11e:	4832      	ldr	r0, [pc, #200]	; (800f1e8 <tcp_parseopt+0xe0>)
 800f120:	f006 fb6a 	bl	80157f8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f124:	4b31      	ldr	r3, [pc, #196]	; (800f1ec <tcp_parseopt+0xe4>)
 800f126:	881b      	ldrh	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d055      	beq.n	800f1d8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f12c:	4b30      	ldr	r3, [pc, #192]	; (800f1f0 <tcp_parseopt+0xe8>)
 800f12e:	2200      	movs	r2, #0
 800f130:	801a      	strh	r2, [r3, #0]
 800f132:	e045      	b.n	800f1c0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f134:	f7ff ffb2 	bl	800f09c <tcp_get_next_optbyte>
 800f138:	4603      	mov	r3, r0
 800f13a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f13c:	7bfb      	ldrb	r3, [r7, #15]
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d006      	beq.n	800f150 <tcp_parseopt+0x48>
 800f142:	2b02      	cmp	r3, #2
 800f144:	dc2b      	bgt.n	800f19e <tcp_parseopt+0x96>
 800f146:	2b00      	cmp	r3, #0
 800f148:	d041      	beq.n	800f1ce <tcp_parseopt+0xc6>
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	d127      	bne.n	800f19e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f14e:	e037      	b.n	800f1c0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f150:	f7ff ffa4 	bl	800f09c <tcp_get_next_optbyte>
 800f154:	4603      	mov	r3, r0
 800f156:	2b04      	cmp	r3, #4
 800f158:	d13b      	bne.n	800f1d2 <tcp_parseopt+0xca>
 800f15a:	4b25      	ldr	r3, [pc, #148]	; (800f1f0 <tcp_parseopt+0xe8>)
 800f15c:	881b      	ldrh	r3, [r3, #0]
 800f15e:	3301      	adds	r3, #1
 800f160:	4a22      	ldr	r2, [pc, #136]	; (800f1ec <tcp_parseopt+0xe4>)
 800f162:	8812      	ldrh	r2, [r2, #0]
 800f164:	4293      	cmp	r3, r2
 800f166:	da34      	bge.n	800f1d2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f168:	f7ff ff98 	bl	800f09c <tcp_get_next_optbyte>
 800f16c:	4603      	mov	r3, r0
 800f16e:	b29b      	uxth	r3, r3
 800f170:	021b      	lsls	r3, r3, #8
 800f172:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f174:	f7ff ff92 	bl	800f09c <tcp_get_next_optbyte>
 800f178:	4603      	mov	r3, r0
 800f17a:	b29a      	uxth	r2, r3
 800f17c:	89bb      	ldrh	r3, [r7, #12]
 800f17e:	4313      	orrs	r3, r2
 800f180:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f182:	89bb      	ldrh	r3, [r7, #12]
 800f184:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f188:	d804      	bhi.n	800f194 <tcp_parseopt+0x8c>
 800f18a:	89bb      	ldrh	r3, [r7, #12]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d001      	beq.n	800f194 <tcp_parseopt+0x8c>
 800f190:	89ba      	ldrh	r2, [r7, #12]
 800f192:	e001      	b.n	800f198 <tcp_parseopt+0x90>
 800f194:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f19c:	e010      	b.n	800f1c0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f19e:	f7ff ff7d 	bl	800f09c <tcp_get_next_optbyte>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f1a6:	7afb      	ldrb	r3, [r7, #11]
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d914      	bls.n	800f1d6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f1ac:	7afb      	ldrb	r3, [r7, #11]
 800f1ae:	b29a      	uxth	r2, r3
 800f1b0:	4b0f      	ldr	r3, [pc, #60]	; (800f1f0 <tcp_parseopt+0xe8>)
 800f1b2:	881b      	ldrh	r3, [r3, #0]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	3b02      	subs	r3, #2
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	4b0c      	ldr	r3, [pc, #48]	; (800f1f0 <tcp_parseopt+0xe8>)
 800f1be:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f1c0:	4b0b      	ldr	r3, [pc, #44]	; (800f1f0 <tcp_parseopt+0xe8>)
 800f1c2:	881a      	ldrh	r2, [r3, #0]
 800f1c4:	4b09      	ldr	r3, [pc, #36]	; (800f1ec <tcp_parseopt+0xe4>)
 800f1c6:	881b      	ldrh	r3, [r3, #0]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d3b3      	bcc.n	800f134 <tcp_parseopt+0x2c>
 800f1cc:	e004      	b.n	800f1d8 <tcp_parseopt+0xd0>
          return;
 800f1ce:	bf00      	nop
 800f1d0:	e002      	b.n	800f1d8 <tcp_parseopt+0xd0>
            return;
 800f1d2:	bf00      	nop
 800f1d4:	e000      	b.n	800f1d8 <tcp_parseopt+0xd0>
            return;
 800f1d6:	bf00      	nop
      }
    }
  }
}
 800f1d8:	3710      	adds	r7, #16
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	08017e9c 	.word	0x08017e9c
 800f1e4:	08018300 	.word	0x08018300
 800f1e8:	08017ee8 	.word	0x08017ee8
 800f1ec:	2000e4c8 	.word	0x2000e4c8
 800f1f0:	2000e4d0 	.word	0x2000e4d0

0800f1f4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f1f8:	4b05      	ldr	r3, [pc, #20]	; (800f210 <tcp_trigger_input_pcb_close+0x1c>)
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	f043 0310 	orr.w	r3, r3, #16
 800f200:	b2da      	uxtb	r2, r3
 800f202:	4b03      	ldr	r3, [pc, #12]	; (800f210 <tcp_trigger_input_pcb_close+0x1c>)
 800f204:	701a      	strb	r2, [r3, #0]
}
 800f206:	bf00      	nop
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr
 800f210:	2000e4e1 	.word	0x2000e4e1

0800f214 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	60f8      	str	r0, [r7, #12]
 800f21c:	60b9      	str	r1, [r7, #8]
 800f21e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d00a      	beq.n	800f23c <tcp_route+0x28>
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	7a1b      	ldrb	r3, [r3, #8]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d006      	beq.n	800f23c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	7a1b      	ldrb	r3, [r3, #8]
 800f232:	4618      	mov	r0, r3
 800f234:	f7fb f92a 	bl	800a48c <netif_get_by_index>
 800f238:	4603      	mov	r3, r0
 800f23a:	e003      	b.n	800f244 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f003 f91b 	bl	8012478 <ip4_route>
 800f242:	4603      	mov	r3, r0
  }
}
 800f244:	4618      	mov	r0, r3
 800f246:	3710      	adds	r7, #16
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f24c:	b590      	push	{r4, r7, lr}
 800f24e:	b087      	sub	sp, #28
 800f250:	af00      	add	r7, sp, #0
 800f252:	60f8      	str	r0, [r7, #12]
 800f254:	60b9      	str	r1, [r7, #8]
 800f256:	603b      	str	r3, [r7, #0]
 800f258:	4613      	mov	r3, r2
 800f25a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d105      	bne.n	800f26e <tcp_create_segment+0x22>
 800f262:	4b44      	ldr	r3, [pc, #272]	; (800f374 <tcp_create_segment+0x128>)
 800f264:	22a3      	movs	r2, #163	; 0xa3
 800f266:	4944      	ldr	r1, [pc, #272]	; (800f378 <tcp_create_segment+0x12c>)
 800f268:	4844      	ldr	r0, [pc, #272]	; (800f37c <tcp_create_segment+0x130>)
 800f26a:	f006 fac5 	bl	80157f8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d105      	bne.n	800f280 <tcp_create_segment+0x34>
 800f274:	4b3f      	ldr	r3, [pc, #252]	; (800f374 <tcp_create_segment+0x128>)
 800f276:	22a4      	movs	r2, #164	; 0xa4
 800f278:	4941      	ldr	r1, [pc, #260]	; (800f380 <tcp_create_segment+0x134>)
 800f27a:	4840      	ldr	r0, [pc, #256]	; (800f37c <tcp_create_segment+0x130>)
 800f27c:	f006 fabc 	bl	80157f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f280:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	b2db      	uxtb	r3, r3
 800f288:	f003 0304 	and.w	r3, r3, #4
 800f28c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f28e:	2002      	movs	r0, #2
 800f290:	f7fa fd7a 	bl	8009d88 <memp_malloc>
 800f294:	6138      	str	r0, [r7, #16]
 800f296:	693b      	ldr	r3, [r7, #16]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d104      	bne.n	800f2a6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f29c:	68b8      	ldr	r0, [r7, #8]
 800f29e:	f7fb fc55 	bl	800ab4c <pbuf_free>
    return NULL;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	e061      	b.n	800f36a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f2ac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	68ba      	ldr	r2, [r7, #8]
 800f2b8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	891a      	ldrh	r2, [r3, #8]
 800f2be:	7dfb      	ldrb	r3, [r7, #23]
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d205      	bcs.n	800f2d2 <tcp_create_segment+0x86>
 800f2c6:	4b2b      	ldr	r3, [pc, #172]	; (800f374 <tcp_create_segment+0x128>)
 800f2c8:	22b0      	movs	r2, #176	; 0xb0
 800f2ca:	492e      	ldr	r1, [pc, #184]	; (800f384 <tcp_create_segment+0x138>)
 800f2cc:	482b      	ldr	r0, [pc, #172]	; (800f37c <tcp_create_segment+0x130>)
 800f2ce:	f006 fa93 	bl	80157f8 <iprintf>
  seg->len = p->tot_len - optlen;
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	891a      	ldrh	r2, [r3, #8]
 800f2d6:	7dfb      	ldrb	r3, [r7, #23]
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	1ad3      	subs	r3, r2, r3
 800f2dc:	b29a      	uxth	r2, r3
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f2e2:	2114      	movs	r1, #20
 800f2e4:	68b8      	ldr	r0, [r7, #8]
 800f2e6:	f7fb fb9b 	bl	800aa20 <pbuf_add_header>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d004      	beq.n	800f2fa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f2f0:	6938      	ldr	r0, [r7, #16]
 800f2f2:	f7fd f858 	bl	800c3a6 <tcp_seg_free>
    return NULL;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	e037      	b.n	800f36a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	685a      	ldr	r2, [r3, #4]
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	8ada      	ldrh	r2, [r3, #22]
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	68dc      	ldr	r4, [r3, #12]
 800f30c:	4610      	mov	r0, r2
 800f30e:	f7fa f8c5 	bl	800949c <lwip_htons>
 800f312:	4603      	mov	r3, r0
 800f314:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	8b1a      	ldrh	r2, [r3, #24]
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	68dc      	ldr	r4, [r3, #12]
 800f31e:	4610      	mov	r0, r2
 800f320:	f7fa f8bc 	bl	800949c <lwip_htons>
 800f324:	4603      	mov	r3, r0
 800f326:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	68dc      	ldr	r4, [r3, #12]
 800f32c:	6838      	ldr	r0, [r7, #0]
 800f32e:	f7fa f8ca 	bl	80094c6 <lwip_htonl>
 800f332:	4603      	mov	r3, r0
 800f334:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f336:	7dfb      	ldrb	r3, [r7, #23]
 800f338:	089b      	lsrs	r3, r3, #2
 800f33a:	b2db      	uxtb	r3, r3
 800f33c:	b29b      	uxth	r3, r3
 800f33e:	3305      	adds	r3, #5
 800f340:	b29b      	uxth	r3, r3
 800f342:	031b      	lsls	r3, r3, #12
 800f344:	b29a      	uxth	r2, r3
 800f346:	79fb      	ldrb	r3, [r7, #7]
 800f348:	b29b      	uxth	r3, r3
 800f34a:	4313      	orrs	r3, r2
 800f34c:	b29a      	uxth	r2, r3
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	68dc      	ldr	r4, [r3, #12]
 800f352:	4610      	mov	r0, r2
 800f354:	f7fa f8a2 	bl	800949c <lwip_htons>
 800f358:	4603      	mov	r3, r0
 800f35a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	2200      	movs	r2, #0
 800f362:	749a      	strb	r2, [r3, #18]
 800f364:	2200      	movs	r2, #0
 800f366:	74da      	strb	r2, [r3, #19]
  return seg;
 800f368:	693b      	ldr	r3, [r7, #16]
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	371c      	adds	r7, #28
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd90      	pop	{r4, r7, pc}
 800f372:	bf00      	nop
 800f374:	0801831c 	.word	0x0801831c
 800f378:	08018350 	.word	0x08018350
 800f37c:	08018370 	.word	0x08018370
 800f380:	08018398 	.word	0x08018398
 800f384:	080183bc 	.word	0x080183bc

0800f388 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b086      	sub	sp, #24
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	607b      	str	r3, [r7, #4]
 800f390:	4603      	mov	r3, r0
 800f392:	73fb      	strb	r3, [r7, #15]
 800f394:	460b      	mov	r3, r1
 800f396:	81bb      	strh	r3, [r7, #12]
 800f398:	4613      	mov	r3, r2
 800f39a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800f39c:	89bb      	ldrh	r3, [r7, #12]
 800f39e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d105      	bne.n	800f3b2 <tcp_pbuf_prealloc+0x2a>
 800f3a6:	4b30      	ldr	r3, [pc, #192]	; (800f468 <tcp_pbuf_prealloc+0xe0>)
 800f3a8:	22e8      	movs	r2, #232	; 0xe8
 800f3aa:	4930      	ldr	r1, [pc, #192]	; (800f46c <tcp_pbuf_prealloc+0xe4>)
 800f3ac:	4830      	ldr	r0, [pc, #192]	; (800f470 <tcp_pbuf_prealloc+0xe8>)
 800f3ae:	f006 fa23 	bl	80157f8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800f3b2:	6a3b      	ldr	r3, [r7, #32]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d105      	bne.n	800f3c4 <tcp_pbuf_prealloc+0x3c>
 800f3b8:	4b2b      	ldr	r3, [pc, #172]	; (800f468 <tcp_pbuf_prealloc+0xe0>)
 800f3ba:	22e9      	movs	r2, #233	; 0xe9
 800f3bc:	492d      	ldr	r1, [pc, #180]	; (800f474 <tcp_pbuf_prealloc+0xec>)
 800f3be:	482c      	ldr	r0, [pc, #176]	; (800f470 <tcp_pbuf_prealloc+0xe8>)
 800f3c0:	f006 fa1a 	bl	80157f8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800f3c4:	89ba      	ldrh	r2, [r7, #12]
 800f3c6:	897b      	ldrh	r3, [r7, #10]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d221      	bcs.n	800f410 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f3cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f3d0:	f003 0302 	and.w	r3, r3, #2
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d111      	bne.n	800f3fc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800f3d8:	6a3b      	ldr	r3, [r7, #32]
 800f3da:	8b5b      	ldrh	r3, [r3, #26]
 800f3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d115      	bne.n	800f410 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800f3e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d007      	beq.n	800f3fc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800f3ec:	6a3b      	ldr	r3, [r7, #32]
 800f3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d103      	bne.n	800f3fc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800f3f4:	6a3b      	ldr	r3, [r7, #32]
 800f3f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d009      	beq.n	800f410 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800f3fc:	89bb      	ldrh	r3, [r7, #12]
 800f3fe:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f402:	f023 0203 	bic.w	r2, r3, #3
 800f406:	897b      	ldrh	r3, [r7, #10]
 800f408:	4293      	cmp	r3, r2
 800f40a:	bf28      	it	cs
 800f40c:	4613      	movcs	r3, r2
 800f40e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800f410:	8af9      	ldrh	r1, [r7, #22]
 800f412:	7bfb      	ldrb	r3, [r7, #15]
 800f414:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f418:	4618      	mov	r0, r3
 800f41a:	f7fb f8b3 	bl	800a584 <pbuf_alloc>
 800f41e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d101      	bne.n	800f42a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800f426:	2300      	movs	r3, #0
 800f428:	e019      	b.n	800f45e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d006      	beq.n	800f440 <tcp_pbuf_prealloc+0xb8>
 800f432:	4b0d      	ldr	r3, [pc, #52]	; (800f468 <tcp_pbuf_prealloc+0xe0>)
 800f434:	f240 120b 	movw	r2, #267	; 0x10b
 800f438:	490f      	ldr	r1, [pc, #60]	; (800f478 <tcp_pbuf_prealloc+0xf0>)
 800f43a:	480d      	ldr	r0, [pc, #52]	; (800f470 <tcp_pbuf_prealloc+0xe8>)
 800f43c:	f006 f9dc 	bl	80157f8 <iprintf>
  *oversize = p->len - length;
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	895a      	ldrh	r2, [r3, #10]
 800f444:	89bb      	ldrh	r3, [r7, #12]
 800f446:	1ad3      	subs	r3, r2, r3
 800f448:	b29a      	uxth	r2, r3
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	89ba      	ldrh	r2, [r7, #12]
 800f452:	811a      	strh	r2, [r3, #8]
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	891a      	ldrh	r2, [r3, #8]
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	815a      	strh	r2, [r3, #10]
  return p;
 800f45c:	693b      	ldr	r3, [r7, #16]
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3718      	adds	r7, #24
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	0801831c 	.word	0x0801831c
 800f46c:	080183d4 	.word	0x080183d4
 800f470:	08018370 	.word	0x08018370
 800f474:	080183f8 	.word	0x080183f8
 800f478:	08018418 	.word	0x08018418

0800f47c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	460b      	mov	r3, r1
 800f486:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d106      	bne.n	800f49c <tcp_write_checks+0x20>
 800f48e:	4b33      	ldr	r3, [pc, #204]	; (800f55c <tcp_write_checks+0xe0>)
 800f490:	f240 1233 	movw	r2, #307	; 0x133
 800f494:	4932      	ldr	r1, [pc, #200]	; (800f560 <tcp_write_checks+0xe4>)
 800f496:	4833      	ldr	r0, [pc, #204]	; (800f564 <tcp_write_checks+0xe8>)
 800f498:	f006 f9ae 	bl	80157f8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	7d1b      	ldrb	r3, [r3, #20]
 800f4a0:	2b04      	cmp	r3, #4
 800f4a2:	d00e      	beq.n	800f4c2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800f4a8:	2b07      	cmp	r3, #7
 800f4aa:	d00a      	beq.n	800f4c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800f4b0:	2b02      	cmp	r3, #2
 800f4b2:	d006      	beq.n	800f4c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800f4b8:	2b03      	cmp	r3, #3
 800f4ba:	d002      	beq.n	800f4c2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800f4bc:	f06f 030a 	mvn.w	r3, #10
 800f4c0:	e048      	b.n	800f554 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800f4c2:	887b      	ldrh	r3, [r7, #2]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d101      	bne.n	800f4cc <tcp_write_checks+0x50>
    return ERR_OK;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	e043      	b.n	800f554 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f4d2:	887a      	ldrh	r2, [r7, #2]
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	d909      	bls.n	800f4ec <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	8b5b      	ldrh	r3, [r3, #26]
 800f4dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4e0:	b29a      	uxth	r2, r3
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ea:	e033      	b.n	800f554 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f4f2:	2b08      	cmp	r3, #8
 800f4f4:	d909      	bls.n	800f50a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	8b5b      	ldrh	r3, [r3, #26]
 800f4fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4fe:	b29a      	uxth	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f504:	f04f 33ff 	mov.w	r3, #4294967295
 800f508:	e024      	b.n	800f554 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f510:	2b00      	cmp	r3, #0
 800f512:	d00f      	beq.n	800f534 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d11a      	bne.n	800f552 <tcp_write_checks+0xd6>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f520:	2b00      	cmp	r3, #0
 800f522:	d116      	bne.n	800f552 <tcp_write_checks+0xd6>
 800f524:	4b0d      	ldr	r3, [pc, #52]	; (800f55c <tcp_write_checks+0xe0>)
 800f526:	f240 1255 	movw	r2, #341	; 0x155
 800f52a:	490f      	ldr	r1, [pc, #60]	; (800f568 <tcp_write_checks+0xec>)
 800f52c:	480d      	ldr	r0, [pc, #52]	; (800f564 <tcp_write_checks+0xe8>)
 800f52e:	f006 f963 	bl	80157f8 <iprintf>
 800f532:	e00e      	b.n	800f552 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d103      	bne.n	800f544 <tcp_write_checks+0xc8>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f540:	2b00      	cmp	r3, #0
 800f542:	d006      	beq.n	800f552 <tcp_write_checks+0xd6>
 800f544:	4b05      	ldr	r3, [pc, #20]	; (800f55c <tcp_write_checks+0xe0>)
 800f546:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800f54a:	4908      	ldr	r1, [pc, #32]	; (800f56c <tcp_write_checks+0xf0>)
 800f54c:	4805      	ldr	r0, [pc, #20]	; (800f564 <tcp_write_checks+0xe8>)
 800f54e:	f006 f953 	bl	80157f8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800f552:	2300      	movs	r3, #0
}
 800f554:	4618      	mov	r0, r3
 800f556:	3708      	adds	r7, #8
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	0801831c 	.word	0x0801831c
 800f560:	0801842c 	.word	0x0801842c
 800f564:	08018370 	.word	0x08018370
 800f568:	0801844c 	.word	0x0801844c
 800f56c:	08018488 	.word	0x08018488

0800f570 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800f570:	b590      	push	{r4, r7, lr}
 800f572:	b09b      	sub	sp, #108	; 0x6c
 800f574:	af04      	add	r7, sp, #16
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	4611      	mov	r1, r2
 800f57c:	461a      	mov	r2, r3
 800f57e:	460b      	mov	r3, r1
 800f580:	80fb      	strh	r3, [r7, #6]
 800f582:	4613      	mov	r3, r2
 800f584:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800f586:	2300      	movs	r3, #0
 800f588:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800f58a:	2300      	movs	r3, #0
 800f58c:	653b      	str	r3, [r7, #80]	; 0x50
 800f58e:	2300      	movs	r3, #0
 800f590:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f592:	2300      	movs	r3, #0
 800f594:	64bb      	str	r3, [r7, #72]	; 0x48
 800f596:	2300      	movs	r3, #0
 800f598:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800f59a:	2300      	movs	r3, #0
 800f59c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d109      	bne.n	800f5cc <tcp_write+0x5c>
 800f5b8:	4ba4      	ldr	r3, [pc, #656]	; (800f84c <tcp_write+0x2dc>)
 800f5ba:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800f5be:	49a4      	ldr	r1, [pc, #656]	; (800f850 <tcp_write+0x2e0>)
 800f5c0:	48a4      	ldr	r0, [pc, #656]	; (800f854 <tcp_write+0x2e4>)
 800f5c2:	f006 f919 	bl	80157f8 <iprintf>
 800f5c6:	f06f 030f 	mvn.w	r3, #15
 800f5ca:	e32a      	b.n	800fc22 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5d2:	085b      	lsrs	r3, r3, #1
 800f5d4:	b29a      	uxth	r2, r3
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	bf28      	it	cs
 800f5de:	4613      	movcs	r3, r2
 800f5e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800f5e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d102      	bne.n	800f5ee <tcp_write+0x7e>
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5ec:	e000      	b.n	800f5f0 <tcp_write+0x80>
 800f5ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d109      	bne.n	800f60c <tcp_write+0x9c>
 800f5f8:	4b94      	ldr	r3, [pc, #592]	; (800f84c <tcp_write+0x2dc>)
 800f5fa:	f240 12ad 	movw	r2, #429	; 0x1ad
 800f5fe:	4996      	ldr	r1, [pc, #600]	; (800f858 <tcp_write+0x2e8>)
 800f600:	4894      	ldr	r0, [pc, #592]	; (800f854 <tcp_write+0x2e4>)
 800f602:	f006 f8f9 	bl	80157f8 <iprintf>
 800f606:	f06f 030f 	mvn.w	r3, #15
 800f60a:	e30a      	b.n	800fc22 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800f60c:	88fb      	ldrh	r3, [r7, #6]
 800f60e:	4619      	mov	r1, r3
 800f610:	68f8      	ldr	r0, [r7, #12]
 800f612:	f7ff ff33 	bl	800f47c <tcp_write_checks>
 800f616:	4603      	mov	r3, r0
 800f618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800f61c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f620:	2b00      	cmp	r3, #0
 800f622:	d002      	beq.n	800f62a <tcp_write+0xba>
    return err;
 800f624:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f628:	e2fb      	b.n	800fc22 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f630:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f634:	2300      	movs	r3, #0
 800f636:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f63e:	2b00      	cmp	r3, #0
 800f640:	f000 80f6 	beq.w	800f830 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f648:	653b      	str	r3, [r7, #80]	; 0x50
 800f64a:	e002      	b.n	800f652 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800f64c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d1f8      	bne.n	800f64c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800f65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f65c:	7a9b      	ldrb	r3, [r3, #10]
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	b29b      	uxth	r3, r3
 800f662:	f003 0304 	and.w	r3, r3, #4
 800f666:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800f668:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f66a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f66c:	891b      	ldrh	r3, [r3, #8]
 800f66e:	4619      	mov	r1, r3
 800f670:	8c3b      	ldrh	r3, [r7, #32]
 800f672:	440b      	add	r3, r1
 800f674:	429a      	cmp	r2, r3
 800f676:	da06      	bge.n	800f686 <tcp_write+0x116>
 800f678:	4b74      	ldr	r3, [pc, #464]	; (800f84c <tcp_write+0x2dc>)
 800f67a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f67e:	4977      	ldr	r1, [pc, #476]	; (800f85c <tcp_write+0x2ec>)
 800f680:	4874      	ldr	r0, [pc, #464]	; (800f854 <tcp_write+0x2e4>)
 800f682:	f006 f8b9 	bl	80157f8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800f686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f688:	891a      	ldrh	r2, [r3, #8]
 800f68a:	8c3b      	ldrh	r3, [r7, #32]
 800f68c:	4413      	add	r3, r2
 800f68e:	b29b      	uxth	r3, r3
 800f690:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f692:	1ad3      	subs	r3, r2, r3
 800f694:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f69c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800f69e:	8a7b      	ldrh	r3, [r7, #18]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d026      	beq.n	800f6f2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800f6a4:	8a7b      	ldrh	r3, [r7, #18]
 800f6a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d206      	bcs.n	800f6ba <tcp_write+0x14a>
 800f6ac:	4b67      	ldr	r3, [pc, #412]	; (800f84c <tcp_write+0x2dc>)
 800f6ae:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800f6b2:	496b      	ldr	r1, [pc, #428]	; (800f860 <tcp_write+0x2f0>)
 800f6b4:	4867      	ldr	r0, [pc, #412]	; (800f854 <tcp_write+0x2e4>)
 800f6b6:	f006 f89f 	bl	80157f8 <iprintf>
      seg = last_unsent;
 800f6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6bc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800f6be:	8a7b      	ldrh	r3, [r7, #18]
 800f6c0:	88fa      	ldrh	r2, [r7, #6]
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	bf28      	it	cs
 800f6c6:	4613      	movcs	r3, r2
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f6cc:	4293      	cmp	r3, r2
 800f6ce:	bf28      	it	cs
 800f6d0:	4613      	movcs	r3, r2
 800f6d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800f6d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f6d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f6da:	4413      	add	r3, r2
 800f6dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800f6e0:	8a7a      	ldrh	r2, [r7, #18]
 800f6e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f6e4:	1ad3      	subs	r3, r2, r3
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800f6ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f6ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f6ee:	1ad3      	subs	r3, r2, r3
 800f6f0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800f6f2:	8a7b      	ldrh	r3, [r7, #18]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d00b      	beq.n	800f710 <tcp_write+0x1a0>
 800f6f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f6fc:	88fb      	ldrh	r3, [r7, #6]
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d006      	beq.n	800f710 <tcp_write+0x1a0>
 800f702:	4b52      	ldr	r3, [pc, #328]	; (800f84c <tcp_write+0x2dc>)
 800f704:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f708:	4956      	ldr	r1, [pc, #344]	; (800f864 <tcp_write+0x2f4>)
 800f70a:	4852      	ldr	r0, [pc, #328]	; (800f854 <tcp_write+0x2e4>)
 800f70c:	f006 f874 	bl	80157f8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800f710:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f714:	88fb      	ldrh	r3, [r7, #6]
 800f716:	429a      	cmp	r2, r3
 800f718:	f080 8167 	bcs.w	800f9ea <tcp_write+0x47a>
 800f71c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f000 8163 	beq.w	800f9ea <tcp_write+0x47a>
 800f724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f726:	891b      	ldrh	r3, [r3, #8]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	f000 815e 	beq.w	800f9ea <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800f72e:	88fa      	ldrh	r2, [r7, #6]
 800f730:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f734:	1ad2      	subs	r2, r2, r3
 800f736:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f738:	4293      	cmp	r3, r2
 800f73a:	bfa8      	it	ge
 800f73c:	4613      	movge	r3, r2
 800f73e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800f740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f742:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f744:	797b      	ldrb	r3, [r7, #5]
 800f746:	f003 0301 	and.w	r3, r3, #1
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d027      	beq.n	800f79e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800f74e:	f107 0012 	add.w	r0, r7, #18
 800f752:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f754:	8bf9      	ldrh	r1, [r7, #30]
 800f756:	2301      	movs	r3, #1
 800f758:	9302      	str	r3, [sp, #8]
 800f75a:	797b      	ldrb	r3, [r7, #5]
 800f75c:	9301      	str	r3, [sp, #4]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	9300      	str	r3, [sp, #0]
 800f762:	4603      	mov	r3, r0
 800f764:	2000      	movs	r0, #0
 800f766:	f7ff fe0f 	bl	800f388 <tcp_pbuf_prealloc>
 800f76a:	6578      	str	r0, [r7, #84]	; 0x54
 800f76c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f76e:	2b00      	cmp	r3, #0
 800f770:	f000 8225 	beq.w	800fbbe <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800f774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f776:	6858      	ldr	r0, [r3, #4]
 800f778:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f77c:	68ba      	ldr	r2, [r7, #8]
 800f77e:	4413      	add	r3, r2
 800f780:	8bfa      	ldrh	r2, [r7, #30]
 800f782:	4619      	mov	r1, r3
 800f784:	f006 f96b 	bl	8015a5e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800f788:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f78a:	f7fb fa67 	bl	800ac5c <pbuf_clen>
 800f78e:	4603      	mov	r3, r0
 800f790:	461a      	mov	r2, r3
 800f792:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f796:	4413      	add	r3, r2
 800f798:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f79c:	e041      	b.n	800f822 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800f79e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	637b      	str	r3, [r7, #52]	; 0x34
 800f7a4:	e002      	b.n	800f7ac <tcp_write+0x23c>
 800f7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	637b      	str	r3, [r7, #52]	; 0x34
 800f7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d1f8      	bne.n	800f7a6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f7b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7b6:	7b1b      	ldrb	r3, [r3, #12]
 800f7b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d115      	bne.n	800f7ec <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800f7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7c2:	685b      	ldr	r3, [r3, #4]
 800f7c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7c6:	8952      	ldrh	r2, [r2, #10]
 800f7c8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f7ca:	68ba      	ldr	r2, [r7, #8]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d10d      	bne.n	800f7ec <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800f7d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d006      	beq.n	800f7e6 <tcp_write+0x276>
 800f7d8:	4b1c      	ldr	r3, [pc, #112]	; (800f84c <tcp_write+0x2dc>)
 800f7da:	f240 2231 	movw	r2, #561	; 0x231
 800f7de:	4922      	ldr	r1, [pc, #136]	; (800f868 <tcp_write+0x2f8>)
 800f7e0:	481c      	ldr	r0, [pc, #112]	; (800f854 <tcp_write+0x2e4>)
 800f7e2:	f006 f809 	bl	80157f8 <iprintf>
          extendlen = seglen;
 800f7e6:	8bfb      	ldrh	r3, [r7, #30]
 800f7e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f7ea:	e01a      	b.n	800f822 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800f7ec:	8bfb      	ldrh	r3, [r7, #30]
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	2000      	movs	r0, #0
 800f7f4:	f7fa fec6 	bl	800a584 <pbuf_alloc>
 800f7f8:	6578      	str	r0, [r7, #84]	; 0x54
 800f7fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f000 81e0 	beq.w	800fbc2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800f802:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f806:	68ba      	ldr	r2, [r7, #8]
 800f808:	441a      	add	r2, r3
 800f80a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f80c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800f80e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f810:	f7fb fa24 	bl	800ac5c <pbuf_clen>
 800f814:	4603      	mov	r3, r0
 800f816:	461a      	mov	r2, r3
 800f818:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f81c:	4413      	add	r3, r2
 800f81e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800f822:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f826:	8bfb      	ldrh	r3, [r7, #30]
 800f828:	4413      	add	r3, r2
 800f82a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f82e:	e0dc      	b.n	800f9ea <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f836:	2b00      	cmp	r3, #0
 800f838:	f000 80d7 	beq.w	800f9ea <tcp_write+0x47a>
 800f83c:	4b03      	ldr	r3, [pc, #12]	; (800f84c <tcp_write+0x2dc>)
 800f83e:	f240 224a 	movw	r2, #586	; 0x24a
 800f842:	490a      	ldr	r1, [pc, #40]	; (800f86c <tcp_write+0x2fc>)
 800f844:	4803      	ldr	r0, [pc, #12]	; (800f854 <tcp_write+0x2e4>)
 800f846:	f005 ffd7 	bl	80157f8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800f84a:	e0ce      	b.n	800f9ea <tcp_write+0x47a>
 800f84c:	0801831c 	.word	0x0801831c
 800f850:	080184bc 	.word	0x080184bc
 800f854:	08018370 	.word	0x08018370
 800f858:	080184d4 	.word	0x080184d4
 800f85c:	08018508 	.word	0x08018508
 800f860:	08018520 	.word	0x08018520
 800f864:	08018540 	.word	0x08018540
 800f868:	08018560 	.word	0x08018560
 800f86c:	0801858c 	.word	0x0801858c
    struct pbuf *p;
    u16_t left = len - pos;
 800f870:	88fa      	ldrh	r2, [r7, #6]
 800f872:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f876:	1ad3      	subs	r3, r2, r3
 800f878:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800f87a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f87e:	b29b      	uxth	r3, r3
 800f880:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f882:	1ad3      	subs	r3, r2, r3
 800f884:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800f886:	8b7a      	ldrh	r2, [r7, #26]
 800f888:	8bbb      	ldrh	r3, [r7, #28]
 800f88a:	4293      	cmp	r3, r2
 800f88c:	bf28      	it	cs
 800f88e:	4613      	movcs	r3, r2
 800f890:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f892:	797b      	ldrb	r3, [r7, #5]
 800f894:	f003 0301 	and.w	r3, r3, #1
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d036      	beq.n	800f90a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800f89c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f8a0:	b29a      	uxth	r2, r3
 800f8a2:	8b3b      	ldrh	r3, [r7, #24]
 800f8a4:	4413      	add	r3, r2
 800f8a6:	b299      	uxth	r1, r3
 800f8a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	bf0c      	ite	eq
 800f8ae:	2301      	moveq	r3, #1
 800f8b0:	2300      	movne	r3, #0
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	f107 0012 	add.w	r0, r7, #18
 800f8b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f8ba:	9302      	str	r3, [sp, #8]
 800f8bc:	797b      	ldrb	r3, [r7, #5]
 800f8be:	9301      	str	r3, [sp, #4]
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	9300      	str	r3, [sp, #0]
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	2036      	movs	r0, #54	; 0x36
 800f8c8:	f7ff fd5e 	bl	800f388 <tcp_pbuf_prealloc>
 800f8cc:	6338      	str	r0, [r7, #48]	; 0x30
 800f8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	f000 8178 	beq.w	800fbc6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800f8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d8:	895b      	ldrh	r3, [r3, #10]
 800f8da:	8b3a      	ldrh	r2, [r7, #24]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d906      	bls.n	800f8ee <tcp_write+0x37e>
 800f8e0:	4b8c      	ldr	r3, [pc, #560]	; (800fb14 <tcp_write+0x5a4>)
 800f8e2:	f240 2266 	movw	r2, #614	; 0x266
 800f8e6:	498c      	ldr	r1, [pc, #560]	; (800fb18 <tcp_write+0x5a8>)
 800f8e8:	488c      	ldr	r0, [pc, #560]	; (800fb1c <tcp_write+0x5ac>)
 800f8ea:	f005 ff85 	bl	80157f8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800f8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f0:	685a      	ldr	r2, [r3, #4]
 800f8f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f8f6:	18d0      	adds	r0, r2, r3
 800f8f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f8fc:	68ba      	ldr	r2, [r7, #8]
 800f8fe:	4413      	add	r3, r2
 800f900:	8b3a      	ldrh	r2, [r7, #24]
 800f902:	4619      	mov	r1, r3
 800f904:	f006 f8ab 	bl	8015a5e <memcpy>
 800f908:	e02f      	b.n	800f96a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800f90a:	8a7b      	ldrh	r3, [r7, #18]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d006      	beq.n	800f91e <tcp_write+0x3ae>
 800f910:	4b80      	ldr	r3, [pc, #512]	; (800fb14 <tcp_write+0x5a4>)
 800f912:	f240 2271 	movw	r2, #625	; 0x271
 800f916:	4982      	ldr	r1, [pc, #520]	; (800fb20 <tcp_write+0x5b0>)
 800f918:	4880      	ldr	r0, [pc, #512]	; (800fb1c <tcp_write+0x5ac>)
 800f91a:	f005 ff6d 	bl	80157f8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800f91e:	8b3b      	ldrh	r3, [r7, #24]
 800f920:	2201      	movs	r2, #1
 800f922:	4619      	mov	r1, r3
 800f924:	2036      	movs	r0, #54	; 0x36
 800f926:	f7fa fe2d 	bl	800a584 <pbuf_alloc>
 800f92a:	6178      	str	r0, [r7, #20]
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	f000 814b 	beq.w	800fbca <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800f934:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f938:	68ba      	ldr	r2, [r7, #8]
 800f93a:	441a      	add	r2, r3
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f940:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f944:	b29b      	uxth	r3, r3
 800f946:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f94a:	4619      	mov	r1, r3
 800f94c:	2036      	movs	r0, #54	; 0x36
 800f94e:	f7fa fe19 	bl	800a584 <pbuf_alloc>
 800f952:	6338      	str	r0, [r7, #48]	; 0x30
 800f954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f956:	2b00      	cmp	r3, #0
 800f958:	d103      	bne.n	800f962 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800f95a:	6978      	ldr	r0, [r7, #20]
 800f95c:	f7fb f8f6 	bl	800ab4c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800f960:	e136      	b.n	800fbd0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800f962:	6979      	ldr	r1, [r7, #20]
 800f964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f966:	f7fb f9b3 	bl	800acd0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800f96a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f96c:	f7fb f976 	bl	800ac5c <pbuf_clen>
 800f970:	4603      	mov	r3, r0
 800f972:	461a      	mov	r2, r3
 800f974:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f978:	4413      	add	r3, r2
 800f97a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800f97e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f982:	2b09      	cmp	r3, #9
 800f984:	d903      	bls.n	800f98e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800f986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f988:	f7fb f8e0 	bl	800ab4c <pbuf_free>
      goto memerr;
 800f98c:	e120      	b.n	800fbd0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f992:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f996:	441a      	add	r2, r3
 800f998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f99c:	9300      	str	r3, [sp, #0]
 800f99e:	4613      	mov	r3, r2
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f9a4:	68f8      	ldr	r0, [r7, #12]
 800f9a6:	f7ff fc51 	bl	800f24c <tcp_create_segment>
 800f9aa:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f9ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f000 810d 	beq.w	800fbce <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800f9b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d102      	bne.n	800f9c0 <tcp_write+0x450>
      queue = seg;
 800f9ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9bc:	647b      	str	r3, [r7, #68]	; 0x44
 800f9be:	e00c      	b.n	800f9da <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800f9c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d106      	bne.n	800f9d4 <tcp_write+0x464>
 800f9c6:	4b53      	ldr	r3, [pc, #332]	; (800fb14 <tcp_write+0x5a4>)
 800f9c8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f9cc:	4955      	ldr	r1, [pc, #340]	; (800fb24 <tcp_write+0x5b4>)
 800f9ce:	4853      	ldr	r0, [pc, #332]	; (800fb1c <tcp_write+0x5ac>)
 800f9d0:	f005 ff12 	bl	80157f8 <iprintf>
      prev_seg->next = seg;
 800f9d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f9d8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800f9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9dc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800f9de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f9e2:	8b3b      	ldrh	r3, [r7, #24]
 800f9e4:	4413      	add	r3, r2
 800f9e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800f9ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f9ee:	88fb      	ldrh	r3, [r7, #6]
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	f4ff af3d 	bcc.w	800f870 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800f9f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d02c      	beq.n	800fa56 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800f9fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa02:	e01e      	b.n	800fa42 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800fa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa06:	891a      	ldrh	r2, [r3, #8]
 800fa08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fa0a:	4413      	add	r3, r2
 800fa0c:	b29a      	uxth	r2, r3
 800fa0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa10:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800fa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d110      	bne.n	800fa3c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800fa1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1c:	685b      	ldr	r3, [r3, #4]
 800fa1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa20:	8952      	ldrh	r2, [r2, #10]
 800fa22:	4413      	add	r3, r2
 800fa24:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fa26:	68b9      	ldr	r1, [r7, #8]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f006 f818 	bl	8015a5e <memcpy>
        p->len += oversize_used;
 800fa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa30:	895a      	ldrh	r2, [r3, #10]
 800fa32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fa34:	4413      	add	r3, r2
 800fa36:	b29a      	uxth	r2, r3
 800fa38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800fa3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d1dd      	bne.n	800fa04 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800fa48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa4a:	891a      	ldrh	r2, [r3, #8]
 800fa4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fa4e:	4413      	add	r3, r2
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa54:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800fa56:	8a7a      	ldrh	r2, [r7, #18]
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800fa5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d018      	beq.n	800fa96 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800fa64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d106      	bne.n	800fa78 <tcp_write+0x508>
 800fa6a:	4b2a      	ldr	r3, [pc, #168]	; (800fb14 <tcp_write+0x5a4>)
 800fa6c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800fa70:	492d      	ldr	r1, [pc, #180]	; (800fb28 <tcp_write+0x5b8>)
 800fa72:	482a      	ldr	r0, [pc, #168]	; (800fb1c <tcp_write+0x5ac>)
 800fa74:	f005 fec0 	bl	80157f8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800fa78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7fb f926 	bl	800acd0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800fa84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa86:	891a      	ldrh	r2, [r3, #8]
 800fa88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa8a:	891b      	ldrh	r3, [r3, #8]
 800fa8c:	4413      	add	r3, r2
 800fa8e:	b29a      	uxth	r2, r3
 800fa90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa92:	811a      	strh	r2, [r3, #8]
 800fa94:	e037      	b.n	800fb06 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800fa96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d034      	beq.n	800fb06 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800fa9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d003      	beq.n	800faaa <tcp_write+0x53a>
 800faa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800faa4:	685b      	ldr	r3, [r3, #4]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d106      	bne.n	800fab8 <tcp_write+0x548>
 800faaa:	4b1a      	ldr	r3, [pc, #104]	; (800fb14 <tcp_write+0x5a4>)
 800faac:	f240 22e6 	movw	r2, #742	; 0x2e6
 800fab0:	491e      	ldr	r1, [pc, #120]	; (800fb2c <tcp_write+0x5bc>)
 800fab2:	481a      	ldr	r0, [pc, #104]	; (800fb1c <tcp_write+0x5ac>)
 800fab4:	f005 fea0 	bl	80157f8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	62bb      	str	r3, [r7, #40]	; 0x28
 800fabe:	e009      	b.n	800fad4 <tcp_write+0x564>
      p->tot_len += extendlen;
 800fac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac2:	891a      	ldrh	r2, [r3, #8]
 800fac4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fac6:	4413      	add	r3, r2
 800fac8:	b29a      	uxth	r2, r3
 800faca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800facc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800face:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	62bb      	str	r3, [r7, #40]	; 0x28
 800fad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d1f1      	bne.n	800fac0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800fadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fade:	891a      	ldrh	r2, [r3, #8]
 800fae0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fae2:	4413      	add	r3, r2
 800fae4:	b29a      	uxth	r2, r3
 800fae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800faea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faec:	895a      	ldrh	r2, [r3, #10]
 800faee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800faf0:	4413      	add	r3, r2
 800faf2:	b29a      	uxth	r2, r3
 800faf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800faf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fafa:	891a      	ldrh	r2, [r3, #8]
 800fafc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fafe:	4413      	add	r3, r2
 800fb00:	b29a      	uxth	r2, r3
 800fb02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb04:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800fb06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d111      	bne.n	800fb30 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb10:	66da      	str	r2, [r3, #108]	; 0x6c
 800fb12:	e010      	b.n	800fb36 <tcp_write+0x5c6>
 800fb14:	0801831c 	.word	0x0801831c
 800fb18:	080185bc 	.word	0x080185bc
 800fb1c:	08018370 	.word	0x08018370
 800fb20:	080185fc 	.word	0x080185fc
 800fb24:	0801860c 	.word	0x0801860c
 800fb28:	08018620 	.word	0x08018620
 800fb2c:	08018658 	.word	0x08018658
  } else {
    last_unsent->next = queue;
 800fb30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb34:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fb3a:	88fb      	ldrh	r3, [r7, #6]
 800fb3c:	441a      	add	r2, r3
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fb48:	88fb      	ldrh	r3, [r7, #6]
 800fb4a:	1ad3      	subs	r3, r2, r3
 800fb4c:	b29a      	uxth	r2, r3
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fb5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d00e      	beq.n	800fb86 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d10a      	bne.n	800fb86 <tcp_write+0x616>
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d106      	bne.n	800fb86 <tcp_write+0x616>
 800fb78:	4b2c      	ldr	r3, [pc, #176]	; (800fc2c <tcp_write+0x6bc>)
 800fb7a:	f240 3212 	movw	r2, #786	; 0x312
 800fb7e:	492c      	ldr	r1, [pc, #176]	; (800fc30 <tcp_write+0x6c0>)
 800fb80:	482c      	ldr	r0, [pc, #176]	; (800fc34 <tcp_write+0x6c4>)
 800fb82:	f005 fe39 	bl	80157f8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800fb86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d016      	beq.n	800fbba <tcp_write+0x64a>
 800fb8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb8e:	68db      	ldr	r3, [r3, #12]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d012      	beq.n	800fbba <tcp_write+0x64a>
 800fb94:	797b      	ldrb	r3, [r7, #5]
 800fb96:	f003 0302 	and.w	r3, r3, #2
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d10d      	bne.n	800fbba <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800fb9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fba0:	68db      	ldr	r3, [r3, #12]
 800fba2:	899b      	ldrh	r3, [r3, #12]
 800fba4:	b29c      	uxth	r4, r3
 800fba6:	2008      	movs	r0, #8
 800fba8:	f7f9 fc78 	bl	800949c <lwip_htons>
 800fbac:	4603      	mov	r3, r0
 800fbae:	461a      	mov	r2, r3
 800fbb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbb2:	68db      	ldr	r3, [r3, #12]
 800fbb4:	4322      	orrs	r2, r4
 800fbb6:	b292      	uxth	r2, r2
 800fbb8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	e031      	b.n	800fc22 <tcp_write+0x6b2>
          goto memerr;
 800fbbe:	bf00      	nop
 800fbc0:	e006      	b.n	800fbd0 <tcp_write+0x660>
            goto memerr;
 800fbc2:	bf00      	nop
 800fbc4:	e004      	b.n	800fbd0 <tcp_write+0x660>
        goto memerr;
 800fbc6:	bf00      	nop
 800fbc8:	e002      	b.n	800fbd0 <tcp_write+0x660>
        goto memerr;
 800fbca:	bf00      	nop
 800fbcc:	e000      	b.n	800fbd0 <tcp_write+0x660>
      goto memerr;
 800fbce:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	8b5b      	ldrh	r3, [r3, #26]
 800fbd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbd8:	b29a      	uxth	r2, r3
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800fbde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d002      	beq.n	800fbea <tcp_write+0x67a>
    pbuf_free(concat_p);
 800fbe4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fbe6:	f7fa ffb1 	bl	800ab4c <pbuf_free>
  }
  if (queue != NULL) {
 800fbea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d002      	beq.n	800fbf6 <tcp_write+0x686>
    tcp_segs_free(queue);
 800fbf0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fbf2:	f7fc fbc3 	bl	800c37c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d00e      	beq.n	800fc1e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d10a      	bne.n	800fc1e <tcp_write+0x6ae>
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d106      	bne.n	800fc1e <tcp_write+0x6ae>
 800fc10:	4b06      	ldr	r3, [pc, #24]	; (800fc2c <tcp_write+0x6bc>)
 800fc12:	f240 3227 	movw	r2, #807	; 0x327
 800fc16:	4906      	ldr	r1, [pc, #24]	; (800fc30 <tcp_write+0x6c0>)
 800fc18:	4806      	ldr	r0, [pc, #24]	; (800fc34 <tcp_write+0x6c4>)
 800fc1a:	f005 fded 	bl	80157f8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800fc1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	375c      	adds	r7, #92	; 0x5c
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd90      	pop	{r4, r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	0801831c 	.word	0x0801831c
 800fc30:	08018690 	.word	0x08018690
 800fc34:	08018370 	.word	0x08018370

0800fc38 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fc38:	b590      	push	{r4, r7, lr}
 800fc3a:	b08b      	sub	sp, #44	; 0x2c
 800fc3c:	af02      	add	r7, sp, #8
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	460b      	mov	r3, r1
 800fc42:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fc44:	2300      	movs	r3, #0
 800fc46:	61fb      	str	r3, [r7, #28]
 800fc48:	2300      	movs	r3, #0
 800fc4a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d106      	bne.n	800fc64 <tcp_split_unsent_seg+0x2c>
 800fc56:	4b95      	ldr	r3, [pc, #596]	; (800feac <tcp_split_unsent_seg+0x274>)
 800fc58:	f240 324b 	movw	r2, #843	; 0x34b
 800fc5c:	4994      	ldr	r1, [pc, #592]	; (800feb0 <tcp_split_unsent_seg+0x278>)
 800fc5e:	4895      	ldr	r0, [pc, #596]	; (800feb4 <tcp_split_unsent_seg+0x27c>)
 800fc60:	f005 fdca 	bl	80157f8 <iprintf>

  useg = pcb->unsent;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc68:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d102      	bne.n	800fc76 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fc70:	f04f 33ff 	mov.w	r3, #4294967295
 800fc74:	e116      	b.n	800fea4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fc76:	887b      	ldrh	r3, [r7, #2]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d109      	bne.n	800fc90 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fc7c:	4b8b      	ldr	r3, [pc, #556]	; (800feac <tcp_split_unsent_seg+0x274>)
 800fc7e:	f240 3253 	movw	r2, #851	; 0x353
 800fc82:	498d      	ldr	r1, [pc, #564]	; (800feb8 <tcp_split_unsent_seg+0x280>)
 800fc84:	488b      	ldr	r0, [pc, #556]	; (800feb4 <tcp_split_unsent_seg+0x27c>)
 800fc86:	f005 fdb7 	bl	80157f8 <iprintf>
    return ERR_VAL;
 800fc8a:	f06f 0305 	mvn.w	r3, #5
 800fc8e:	e109      	b.n	800fea4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	891b      	ldrh	r3, [r3, #8]
 800fc94:	887a      	ldrh	r2, [r7, #2]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d301      	bcc.n	800fc9e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	e102      	b.n	800fea4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fca2:	887a      	ldrh	r2, [r7, #2]
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d906      	bls.n	800fcb6 <tcp_split_unsent_seg+0x7e>
 800fca8:	4b80      	ldr	r3, [pc, #512]	; (800feac <tcp_split_unsent_seg+0x274>)
 800fcaa:	f240 325b 	movw	r2, #859	; 0x35b
 800fcae:	4983      	ldr	r1, [pc, #524]	; (800febc <tcp_split_unsent_seg+0x284>)
 800fcb0:	4880      	ldr	r0, [pc, #512]	; (800feb4 <tcp_split_unsent_seg+0x27c>)
 800fcb2:	f005 fda1 	bl	80157f8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	891b      	ldrh	r3, [r3, #8]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d106      	bne.n	800fccc <tcp_split_unsent_seg+0x94>
 800fcbe:	4b7b      	ldr	r3, [pc, #492]	; (800feac <tcp_split_unsent_seg+0x274>)
 800fcc0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800fcc4:	497e      	ldr	r1, [pc, #504]	; (800fec0 <tcp_split_unsent_seg+0x288>)
 800fcc6:	487b      	ldr	r0, [pc, #492]	; (800feb4 <tcp_split_unsent_seg+0x27c>)
 800fcc8:	f005 fd96 	bl	80157f8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	7a9b      	ldrb	r3, [r3, #10]
 800fcd0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fcd2:	7bfb      	ldrb	r3, [r7, #15]
 800fcd4:	009b      	lsls	r3, r3, #2
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	f003 0304 	and.w	r3, r3, #4
 800fcdc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	891a      	ldrh	r2, [r3, #8]
 800fce2:	887b      	ldrh	r3, [r7, #2]
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fce8:	7bbb      	ldrb	r3, [r7, #14]
 800fcea:	b29a      	uxth	r2, r3
 800fcec:	89bb      	ldrh	r3, [r7, #12]
 800fcee:	4413      	add	r3, r2
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	2036      	movs	r0, #54	; 0x36
 800fcfa:	f7fa fc43 	bl	800a584 <pbuf_alloc>
 800fcfe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f000 80b7 	beq.w	800fe76 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	891a      	ldrh	r2, [r3, #8]
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	891b      	ldrh	r3, [r3, #8]
 800fd12:	1ad3      	subs	r3, r2, r3
 800fd14:	b29a      	uxth	r2, r3
 800fd16:	887b      	ldrh	r3, [r7, #2]
 800fd18:	4413      	add	r3, r2
 800fd1a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	6858      	ldr	r0, [r3, #4]
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	685a      	ldr	r2, [r3, #4]
 800fd24:	7bbb      	ldrb	r3, [r7, #14]
 800fd26:	18d1      	adds	r1, r2, r3
 800fd28:	897b      	ldrh	r3, [r7, #10]
 800fd2a:	89ba      	ldrh	r2, [r7, #12]
 800fd2c:	f7fb f8f8 	bl	800af20 <pbuf_copy_partial>
 800fd30:	4603      	mov	r3, r0
 800fd32:	461a      	mov	r2, r3
 800fd34:	89bb      	ldrh	r3, [r7, #12]
 800fd36:	4293      	cmp	r3, r2
 800fd38:	f040 809f 	bne.w	800fe7a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	899b      	ldrh	r3, [r3, #12]
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7f9 fba9 	bl	800949c <lwip_htons>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	b2db      	uxtb	r3, r3
 800fd4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd52:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800fd54:	2300      	movs	r3, #0
 800fd56:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800fd58:	7efb      	ldrb	r3, [r7, #27]
 800fd5a:	f003 0308 	and.w	r3, r3, #8
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d007      	beq.n	800fd72 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800fd62:	7efb      	ldrb	r3, [r7, #27]
 800fd64:	f023 0308 	bic.w	r3, r3, #8
 800fd68:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800fd6a:	7ebb      	ldrb	r3, [r7, #26]
 800fd6c:	f043 0308 	orr.w	r3, r3, #8
 800fd70:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800fd72:	7efb      	ldrb	r3, [r7, #27]
 800fd74:	f003 0301 	and.w	r3, r3, #1
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d007      	beq.n	800fd8c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800fd7c:	7efb      	ldrb	r3, [r7, #27]
 800fd7e:	f023 0301 	bic.w	r3, r3, #1
 800fd82:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800fd84:	7ebb      	ldrb	r3, [r7, #26]
 800fd86:	f043 0301 	orr.w	r3, r3, #1
 800fd8a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7f9 fb97 	bl	80094c6 <lwip_htonl>
 800fd98:	4602      	mov	r2, r0
 800fd9a:	887b      	ldrh	r3, [r7, #2]
 800fd9c:	18d1      	adds	r1, r2, r3
 800fd9e:	7eba      	ldrb	r2, [r7, #26]
 800fda0:	7bfb      	ldrb	r3, [r7, #15]
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	460b      	mov	r3, r1
 800fda6:	6939      	ldr	r1, [r7, #16]
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f7ff fa4f 	bl	800f24c <tcp_create_segment>
 800fdae:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800fdb0:	69fb      	ldr	r3, [r7, #28]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d063      	beq.n	800fe7e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	685b      	ldr	r3, [r3, #4]
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fa ff4e 	bl	800ac5c <pbuf_clen>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fdca:	1a9b      	subs	r3, r3, r2
 800fdcc:	b29a      	uxth	r2, r3
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	6858      	ldr	r0, [r3, #4]
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	685b      	ldr	r3, [r3, #4]
 800fddc:	891a      	ldrh	r2, [r3, #8]
 800fdde:	89bb      	ldrh	r3, [r7, #12]
 800fde0:	1ad3      	subs	r3, r2, r3
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	4619      	mov	r1, r3
 800fde6:	f7fa fd2b 	bl	800a840 <pbuf_realloc>
  useg->len -= remainder;
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	891a      	ldrh	r2, [r3, #8]
 800fdee:	89bb      	ldrh	r3, [r7, #12]
 800fdf0:	1ad3      	subs	r3, r2, r3
 800fdf2:	b29a      	uxth	r2, r3
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	68db      	ldr	r3, [r3, #12]
 800fdfc:	899b      	ldrh	r3, [r3, #12]
 800fdfe:	b29c      	uxth	r4, r3
 800fe00:	7efb      	ldrb	r3, [r7, #27]
 800fe02:	b29b      	uxth	r3, r3
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7f9 fb49 	bl	800949c <lwip_htons>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	68db      	ldr	r3, [r3, #12]
 800fe12:	4322      	orrs	r2, r4
 800fe14:	b292      	uxth	r2, r2
 800fe16:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fa ff1d 	bl	800ac5c <pbuf_clen>
 800fe22:	4603      	mov	r3, r0
 800fe24:	461a      	mov	r2, r3
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe2c:	4413      	add	r3, r2
 800fe2e:	b29a      	uxth	r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fe36:	69fb      	ldr	r3, [r7, #28]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7fa ff0e 	bl	800ac5c <pbuf_clen>
 800fe40:	4603      	mov	r3, r0
 800fe42:	461a      	mov	r2, r3
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe4a:	4413      	add	r3, r2
 800fe4c:	b29a      	uxth	r2, r3
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	681a      	ldr	r2, [r3, #0]
 800fe58:	69fb      	ldr	r3, [r7, #28]
 800fe5a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	69fa      	ldr	r2, [r7, #28]
 800fe60:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800fe62:	69fb      	ldr	r3, [r7, #28]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d103      	bne.n	800fe72 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800fe72:	2300      	movs	r3, #0
 800fe74:	e016      	b.n	800fea4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800fe76:	bf00      	nop
 800fe78:	e002      	b.n	800fe80 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fe7a:	bf00      	nop
 800fe7c:	e000      	b.n	800fe80 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fe7e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800fe80:	69fb      	ldr	r3, [r7, #28]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d006      	beq.n	800fe94 <tcp_split_unsent_seg+0x25c>
 800fe86:	4b09      	ldr	r3, [pc, #36]	; (800feac <tcp_split_unsent_seg+0x274>)
 800fe88:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800fe8c:	490d      	ldr	r1, [pc, #52]	; (800fec4 <tcp_split_unsent_seg+0x28c>)
 800fe8e:	4809      	ldr	r0, [pc, #36]	; (800feb4 <tcp_split_unsent_seg+0x27c>)
 800fe90:	f005 fcb2 	bl	80157f8 <iprintf>
  if (p != NULL) {
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d002      	beq.n	800fea0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800fe9a:	6938      	ldr	r0, [r7, #16]
 800fe9c:	f7fa fe56 	bl	800ab4c <pbuf_free>
  }

  return ERR_MEM;
 800fea0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3724      	adds	r7, #36	; 0x24
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd90      	pop	{r4, r7, pc}
 800feac:	0801831c 	.word	0x0801831c
 800feb0:	080186b0 	.word	0x080186b0
 800feb4:	08018370 	.word	0x08018370
 800feb8:	080186d4 	.word	0x080186d4
 800febc:	080186f8 	.word	0x080186f8
 800fec0:	08018708 	.word	0x08018708
 800fec4:	08018718 	.word	0x08018718

0800fec8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800fec8:	b590      	push	{r4, r7, lr}
 800feca:	b085      	sub	sp, #20
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d106      	bne.n	800fee4 <tcp_send_fin+0x1c>
 800fed6:	4b21      	ldr	r3, [pc, #132]	; (800ff5c <tcp_send_fin+0x94>)
 800fed8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800fedc:	4920      	ldr	r1, [pc, #128]	; (800ff60 <tcp_send_fin+0x98>)
 800fede:	4821      	ldr	r0, [pc, #132]	; (800ff64 <tcp_send_fin+0x9c>)
 800fee0:	f005 fc8a 	bl	80157f8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d02e      	beq.n	800ff4a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fef0:	60fb      	str	r3, [r7, #12]
 800fef2:	e002      	b.n	800fefa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d1f8      	bne.n	800fef4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	68db      	ldr	r3, [r3, #12]
 800ff06:	899b      	ldrh	r3, [r3, #12]
 800ff08:	b29b      	uxth	r3, r3
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7f9 fac6 	bl	800949c <lwip_htons>
 800ff10:	4603      	mov	r3, r0
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	f003 0307 	and.w	r3, r3, #7
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d116      	bne.n	800ff4a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	899b      	ldrh	r3, [r3, #12]
 800ff22:	b29c      	uxth	r4, r3
 800ff24:	2001      	movs	r0, #1
 800ff26:	f7f9 fab9 	bl	800949c <lwip_htons>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	68db      	ldr	r3, [r3, #12]
 800ff32:	4322      	orrs	r2, r4
 800ff34:	b292      	uxth	r2, r2
 800ff36:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	8b5b      	ldrh	r3, [r3, #26]
 800ff3c:	f043 0320 	orr.w	r3, r3, #32
 800ff40:	b29a      	uxth	r2, r3
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ff46:	2300      	movs	r3, #0
 800ff48:	e004      	b.n	800ff54 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ff4a:	2101      	movs	r1, #1
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f000 f80b 	bl	800ff68 <tcp_enqueue_flags>
 800ff52:	4603      	mov	r3, r0
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	3714      	adds	r7, #20
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd90      	pop	{r4, r7, pc}
 800ff5c:	0801831c 	.word	0x0801831c
 800ff60:	08018724 	.word	0x08018724
 800ff64:	08018370 	.word	0x08018370

0800ff68 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b08a      	sub	sp, #40	; 0x28
 800ff6c:	af02      	add	r7, sp, #8
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	460b      	mov	r3, r1
 800ff72:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ff74:	2300      	movs	r3, #0
 800ff76:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ff7c:	78fb      	ldrb	r3, [r7, #3]
 800ff7e:	f003 0303 	and.w	r3, r3, #3
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d106      	bne.n	800ff94 <tcp_enqueue_flags+0x2c>
 800ff86:	4b67      	ldr	r3, [pc, #412]	; (8010124 <tcp_enqueue_flags+0x1bc>)
 800ff88:	f240 4211 	movw	r2, #1041	; 0x411
 800ff8c:	4966      	ldr	r1, [pc, #408]	; (8010128 <tcp_enqueue_flags+0x1c0>)
 800ff8e:	4867      	ldr	r0, [pc, #412]	; (801012c <tcp_enqueue_flags+0x1c4>)
 800ff90:	f005 fc32 	bl	80157f8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d106      	bne.n	800ffa8 <tcp_enqueue_flags+0x40>
 800ff9a:	4b62      	ldr	r3, [pc, #392]	; (8010124 <tcp_enqueue_flags+0x1bc>)
 800ff9c:	f240 4213 	movw	r2, #1043	; 0x413
 800ffa0:	4963      	ldr	r1, [pc, #396]	; (8010130 <tcp_enqueue_flags+0x1c8>)
 800ffa2:	4862      	ldr	r0, [pc, #392]	; (801012c <tcp_enqueue_flags+0x1c4>)
 800ffa4:	f005 fc28 	bl	80157f8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ffa8:	78fb      	ldrb	r3, [r7, #3]
 800ffaa:	f003 0302 	and.w	r3, r3, #2
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d001      	beq.n	800ffb6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ffb6:	7ffb      	ldrb	r3, [r7, #31]
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	b2db      	uxtb	r3, r3
 800ffbc:	f003 0304 	and.w	r3, r3, #4
 800ffc0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ffc2:	7dfb      	ldrb	r3, [r7, #23]
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ffca:	4619      	mov	r1, r3
 800ffcc:	2036      	movs	r0, #54	; 0x36
 800ffce:	f7fa fad9 	bl	800a584 <pbuf_alloc>
 800ffd2:	6138      	str	r0, [r7, #16]
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d109      	bne.n	800ffee <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	8b5b      	ldrh	r3, [r3, #26]
 800ffde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffe2:	b29a      	uxth	r2, r3
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ffe8:	f04f 33ff 	mov.w	r3, #4294967295
 800ffec:	e095      	b.n	801011a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	895a      	ldrh	r2, [r3, #10]
 800fff2:	7dfb      	ldrb	r3, [r7, #23]
 800fff4:	b29b      	uxth	r3, r3
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d206      	bcs.n	8010008 <tcp_enqueue_flags+0xa0>
 800fffa:	4b4a      	ldr	r3, [pc, #296]	; (8010124 <tcp_enqueue_flags+0x1bc>)
 800fffc:	f240 4239 	movw	r2, #1081	; 0x439
 8010000:	494c      	ldr	r1, [pc, #304]	; (8010134 <tcp_enqueue_flags+0x1cc>)
 8010002:	484a      	ldr	r0, [pc, #296]	; (801012c <tcp_enqueue_flags+0x1c4>)
 8010004:	f005 fbf8 	bl	80157f8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801000c:	78fa      	ldrb	r2, [r7, #3]
 801000e:	7ffb      	ldrb	r3, [r7, #31]
 8010010:	9300      	str	r3, [sp, #0]
 8010012:	460b      	mov	r3, r1
 8010014:	6939      	ldr	r1, [r7, #16]
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f7ff f918 	bl	800f24c <tcp_create_segment>
 801001c:	60f8      	str	r0, [r7, #12]
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d109      	bne.n	8010038 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	8b5b      	ldrh	r3, [r3, #26]
 8010028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801002c:	b29a      	uxth	r2, r3
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010032:	f04f 33ff 	mov.w	r3, #4294967295
 8010036:	e070      	b.n	801011a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	f003 0303 	and.w	r3, r3, #3
 8010040:	2b00      	cmp	r3, #0
 8010042:	d006      	beq.n	8010052 <tcp_enqueue_flags+0xea>
 8010044:	4b37      	ldr	r3, [pc, #220]	; (8010124 <tcp_enqueue_flags+0x1bc>)
 8010046:	f240 4242 	movw	r2, #1090	; 0x442
 801004a:	493b      	ldr	r1, [pc, #236]	; (8010138 <tcp_enqueue_flags+0x1d0>)
 801004c:	4837      	ldr	r0, [pc, #220]	; (801012c <tcp_enqueue_flags+0x1c4>)
 801004e:	f005 fbd3 	bl	80157f8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	891b      	ldrh	r3, [r3, #8]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d006      	beq.n	8010068 <tcp_enqueue_flags+0x100>
 801005a:	4b32      	ldr	r3, [pc, #200]	; (8010124 <tcp_enqueue_flags+0x1bc>)
 801005c:	f240 4243 	movw	r2, #1091	; 0x443
 8010060:	4936      	ldr	r1, [pc, #216]	; (801013c <tcp_enqueue_flags+0x1d4>)
 8010062:	4832      	ldr	r0, [pc, #200]	; (801012c <tcp_enqueue_flags+0x1c4>)
 8010064:	f005 fbc8 	bl	80157f8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801006c:	2b00      	cmp	r3, #0
 801006e:	d103      	bne.n	8010078 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	66da      	str	r2, [r3, #108]	; 0x6c
 8010076:	e00d      	b.n	8010094 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801007c:	61bb      	str	r3, [r7, #24]
 801007e:	e002      	b.n	8010086 <tcp_enqueue_flags+0x11e>
 8010080:	69bb      	ldr	r3, [r7, #24]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	61bb      	str	r3, [r7, #24]
 8010086:	69bb      	ldr	r3, [r7, #24]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d1f8      	bne.n	8010080 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801008e:	69bb      	ldr	r3, [r7, #24]
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2200      	movs	r2, #0
 8010098:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801009c:	78fb      	ldrb	r3, [r7, #3]
 801009e:	f003 0302 	and.w	r3, r3, #2
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d104      	bne.n	80100b0 <tcp_enqueue_flags+0x148>
 80100a6:	78fb      	ldrb	r3, [r7, #3]
 80100a8:	f003 0301 	and.w	r3, r3, #1
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d004      	beq.n	80100ba <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80100b4:	1c5a      	adds	r2, r3, #1
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80100ba:	78fb      	ldrb	r3, [r7, #3]
 80100bc:	f003 0301 	and.w	r3, r3, #1
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d006      	beq.n	80100d2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	8b5b      	ldrh	r3, [r3, #26]
 80100c8:	f043 0320 	orr.w	r3, r3, #32
 80100cc:	b29a      	uxth	r2, r3
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7fa fdc0 	bl	800ac5c <pbuf_clen>
 80100dc:	4603      	mov	r3, r0
 80100de:	461a      	mov	r2, r3
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80100e6:	4413      	add	r3, r2
 80100e8:	b29a      	uxth	r2, r3
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d00e      	beq.n	8010118 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d10a      	bne.n	8010118 <tcp_enqueue_flags+0x1b0>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010106:	2b00      	cmp	r3, #0
 8010108:	d106      	bne.n	8010118 <tcp_enqueue_flags+0x1b0>
 801010a:	4b06      	ldr	r3, [pc, #24]	; (8010124 <tcp_enqueue_flags+0x1bc>)
 801010c:	f240 4265 	movw	r2, #1125	; 0x465
 8010110:	490b      	ldr	r1, [pc, #44]	; (8010140 <tcp_enqueue_flags+0x1d8>)
 8010112:	4806      	ldr	r0, [pc, #24]	; (801012c <tcp_enqueue_flags+0x1c4>)
 8010114:	f005 fb70 	bl	80157f8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010118:	2300      	movs	r3, #0
}
 801011a:	4618      	mov	r0, r3
 801011c:	3720      	adds	r7, #32
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
 8010122:	bf00      	nop
 8010124:	0801831c 	.word	0x0801831c
 8010128:	08018740 	.word	0x08018740
 801012c:	08018370 	.word	0x08018370
 8010130:	08018798 	.word	0x08018798
 8010134:	080187b8 	.word	0x080187b8
 8010138:	080187f4 	.word	0x080187f4
 801013c:	0801880c 	.word	0x0801880c
 8010140:	08018838 	.word	0x08018838

08010144 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010144:	b5b0      	push	{r4, r5, r7, lr}
 8010146:	b08a      	sub	sp, #40	; 0x28
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d106      	bne.n	8010160 <tcp_output+0x1c>
 8010152:	4b8a      	ldr	r3, [pc, #552]	; (801037c <tcp_output+0x238>)
 8010154:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010158:	4989      	ldr	r1, [pc, #548]	; (8010380 <tcp_output+0x23c>)
 801015a:	488a      	ldr	r0, [pc, #552]	; (8010384 <tcp_output+0x240>)
 801015c:	f005 fb4c 	bl	80157f8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	7d1b      	ldrb	r3, [r3, #20]
 8010164:	2b01      	cmp	r3, #1
 8010166:	d106      	bne.n	8010176 <tcp_output+0x32>
 8010168:	4b84      	ldr	r3, [pc, #528]	; (801037c <tcp_output+0x238>)
 801016a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801016e:	4986      	ldr	r1, [pc, #536]	; (8010388 <tcp_output+0x244>)
 8010170:	4884      	ldr	r0, [pc, #528]	; (8010384 <tcp_output+0x240>)
 8010172:	f005 fb41 	bl	80157f8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010176:	4b85      	ldr	r3, [pc, #532]	; (801038c <tcp_output+0x248>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	687a      	ldr	r2, [r7, #4]
 801017c:	429a      	cmp	r2, r3
 801017e:	d101      	bne.n	8010184 <tcp_output+0x40>
    return ERR_OK;
 8010180:	2300      	movs	r3, #0
 8010182:	e1ce      	b.n	8010522 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010190:	4293      	cmp	r3, r2
 8010192:	bf28      	it	cs
 8010194:	4613      	movcs	r3, r2
 8010196:	b29b      	uxth	r3, r3
 8010198:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801019e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80101a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d10b      	bne.n	80101be <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	8b5b      	ldrh	r3, [r3, #26]
 80101aa:	f003 0302 	and.w	r3, r3, #2
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	f000 81aa 	beq.w	8010508 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f000 fdcb 	bl	8010d50 <tcp_send_empty_ack>
 80101ba:	4603      	mov	r3, r0
 80101bc:	e1b1      	b.n	8010522 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80101be:	6879      	ldr	r1, [r7, #4]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	3304      	adds	r3, #4
 80101c4:	461a      	mov	r2, r3
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f7ff f824 	bl	800f214 <tcp_route>
 80101cc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d102      	bne.n	80101da <tcp_output+0x96>
    return ERR_RTE;
 80101d4:	f06f 0303 	mvn.w	r3, #3
 80101d8:	e1a3      	b.n	8010522 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d003      	beq.n	80101e8 <tcp_output+0xa4>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d111      	bne.n	801020c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80101e8:	697b      	ldr	r3, [r7, #20]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d002      	beq.n	80101f4 <tcp_output+0xb0>
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	3304      	adds	r3, #4
 80101f2:	e000      	b.n	80101f6 <tcp_output+0xb2>
 80101f4:	2300      	movs	r3, #0
 80101f6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d102      	bne.n	8010204 <tcp_output+0xc0>
      return ERR_RTE;
 80101fe:	f06f 0303 	mvn.w	r3, #3
 8010202:	e18e      	b.n	8010522 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	681a      	ldr	r2, [r3, #0]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801020c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	4618      	mov	r0, r3
 8010214:	f7f9 f957 	bl	80094c6 <lwip_htonl>
 8010218:	4602      	mov	r2, r0
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801021e:	1ad3      	subs	r3, r2, r3
 8010220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010222:	8912      	ldrh	r2, [r2, #8]
 8010224:	4413      	add	r3, r2
 8010226:	69ba      	ldr	r2, [r7, #24]
 8010228:	429a      	cmp	r2, r3
 801022a:	d227      	bcs.n	801027c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010232:	461a      	mov	r2, r3
 8010234:	69bb      	ldr	r3, [r7, #24]
 8010236:	4293      	cmp	r3, r2
 8010238:	d114      	bne.n	8010264 <tcp_output+0x120>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801023e:	2b00      	cmp	r3, #0
 8010240:	d110      	bne.n	8010264 <tcp_output+0x120>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010248:	2b00      	cmp	r3, #0
 801024a:	d10b      	bne.n	8010264 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2200      	movs	r2, #0
 8010250:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2201      	movs	r2, #1
 8010258:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2200      	movs	r2, #0
 8010260:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	8b5b      	ldrh	r3, [r3, #26]
 8010268:	f003 0302 	and.w	r3, r3, #2
 801026c:	2b00      	cmp	r3, #0
 801026e:	f000 814d 	beq.w	801050c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f000 fd6c 	bl	8010d50 <tcp_send_empty_ack>
 8010278:	4603      	mov	r3, r0
 801027a:	e152      	b.n	8010522 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2200      	movs	r2, #0
 8010280:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010288:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801028a:	6a3b      	ldr	r3, [r7, #32]
 801028c:	2b00      	cmp	r3, #0
 801028e:	f000 811c 	beq.w	80104ca <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010292:	e002      	b.n	801029a <tcp_output+0x156>
 8010294:	6a3b      	ldr	r3, [r7, #32]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	623b      	str	r3, [r7, #32]
 801029a:	6a3b      	ldr	r3, [r7, #32]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d1f8      	bne.n	8010294 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80102a2:	e112      	b.n	80104ca <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80102a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a6:	68db      	ldr	r3, [r3, #12]
 80102a8:	899b      	ldrh	r3, [r3, #12]
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7f9 f8f5 	bl	800949c <lwip_htons>
 80102b2:	4603      	mov	r3, r0
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	f003 0304 	and.w	r3, r3, #4
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d006      	beq.n	80102cc <tcp_output+0x188>
 80102be:	4b2f      	ldr	r3, [pc, #188]	; (801037c <tcp_output+0x238>)
 80102c0:	f240 5236 	movw	r2, #1334	; 0x536
 80102c4:	4932      	ldr	r1, [pc, #200]	; (8010390 <tcp_output+0x24c>)
 80102c6:	482f      	ldr	r0, [pc, #188]	; (8010384 <tcp_output+0x240>)
 80102c8:	f005 fa96 	bl	80157f8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d01f      	beq.n	8010314 <tcp_output+0x1d0>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	8b5b      	ldrh	r3, [r3, #26]
 80102d8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d119      	bne.n	8010314 <tcp_output+0x1d0>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d00b      	beq.n	8010300 <tcp_output+0x1bc>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d110      	bne.n	8010314 <tcp_output+0x1d0>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102f6:	891a      	ldrh	r2, [r3, #8]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d209      	bcs.n	8010314 <tcp_output+0x1d0>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010306:	2b00      	cmp	r3, #0
 8010308:	d004      	beq.n	8010314 <tcp_output+0x1d0>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010310:	2b08      	cmp	r3, #8
 8010312:	d901      	bls.n	8010318 <tcp_output+0x1d4>
 8010314:	2301      	movs	r3, #1
 8010316:	e000      	b.n	801031a <tcp_output+0x1d6>
 8010318:	2300      	movs	r3, #0
 801031a:	2b00      	cmp	r3, #0
 801031c:	d106      	bne.n	801032c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	8b5b      	ldrh	r3, [r3, #26]
 8010322:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010326:	2b00      	cmp	r3, #0
 8010328:	f000 80e4 	beq.w	80104f4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	7d1b      	ldrb	r3, [r3, #20]
 8010330:	2b02      	cmp	r3, #2
 8010332:	d00d      	beq.n	8010350 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010336:	68db      	ldr	r3, [r3, #12]
 8010338:	899b      	ldrh	r3, [r3, #12]
 801033a:	b29c      	uxth	r4, r3
 801033c:	2010      	movs	r0, #16
 801033e:	f7f9 f8ad 	bl	800949c <lwip_htons>
 8010342:	4603      	mov	r3, r0
 8010344:	461a      	mov	r2, r3
 8010346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010348:	68db      	ldr	r3, [r3, #12]
 801034a:	4322      	orrs	r2, r4
 801034c:	b292      	uxth	r2, r2
 801034e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010350:	697a      	ldr	r2, [r7, #20]
 8010352:	6879      	ldr	r1, [r7, #4]
 8010354:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010356:	f000 f909 	bl	801056c <tcp_output_segment>
 801035a:	4603      	mov	r3, r0
 801035c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801035e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d016      	beq.n	8010394 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	8b5b      	ldrh	r3, [r3, #26]
 801036a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801036e:	b29a      	uxth	r2, r3
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	835a      	strh	r2, [r3, #26]
      return err;
 8010374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010378:	e0d3      	b.n	8010522 <tcp_output+0x3de>
 801037a:	bf00      	nop
 801037c:	0801831c 	.word	0x0801831c
 8010380:	08018860 	.word	0x08018860
 8010384:	08018370 	.word	0x08018370
 8010388:	08018878 	.word	0x08018878
 801038c:	2000e4e8 	.word	0x2000e4e8
 8010390:	080188a0 	.word	0x080188a0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010396:	681a      	ldr	r2, [r3, #0]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	7d1b      	ldrb	r3, [r3, #20]
 80103a0:	2b02      	cmp	r3, #2
 80103a2:	d006      	beq.n	80103b2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	8b5b      	ldrh	r3, [r3, #26]
 80103a8:	f023 0303 	bic.w	r3, r3, #3
 80103ac:	b29a      	uxth	r2, r3
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80103b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b4:	68db      	ldr	r3, [r3, #12]
 80103b6:	685b      	ldr	r3, [r3, #4]
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7f9 f884 	bl	80094c6 <lwip_htonl>
 80103be:	4604      	mov	r4, r0
 80103c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c2:	891b      	ldrh	r3, [r3, #8]
 80103c4:	461d      	mov	r5, r3
 80103c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c8:	68db      	ldr	r3, [r3, #12]
 80103ca:	899b      	ldrh	r3, [r3, #12]
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7f9 f864 	bl	800949c <lwip_htons>
 80103d4:	4603      	mov	r3, r0
 80103d6:	b2db      	uxtb	r3, r3
 80103d8:	f003 0303 	and.w	r3, r3, #3
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d001      	beq.n	80103e4 <tcp_output+0x2a0>
 80103e0:	2301      	movs	r3, #1
 80103e2:	e000      	b.n	80103e6 <tcp_output+0x2a2>
 80103e4:	2300      	movs	r3, #0
 80103e6:	442b      	add	r3, r5
 80103e8:	4423      	add	r3, r4
 80103ea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	1ad3      	subs	r3, r2, r3
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	da02      	bge.n	80103fe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	68ba      	ldr	r2, [r7, #8]
 80103fc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80103fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010400:	891b      	ldrh	r3, [r3, #8]
 8010402:	461c      	mov	r4, r3
 8010404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	899b      	ldrh	r3, [r3, #12]
 801040a:	b29b      	uxth	r3, r3
 801040c:	4618      	mov	r0, r3
 801040e:	f7f9 f845 	bl	800949c <lwip_htons>
 8010412:	4603      	mov	r3, r0
 8010414:	b2db      	uxtb	r3, r3
 8010416:	f003 0303 	and.w	r3, r3, #3
 801041a:	2b00      	cmp	r3, #0
 801041c:	d001      	beq.n	8010422 <tcp_output+0x2de>
 801041e:	2301      	movs	r3, #1
 8010420:	e000      	b.n	8010424 <tcp_output+0x2e0>
 8010422:	2300      	movs	r3, #0
 8010424:	4423      	add	r3, r4
 8010426:	2b00      	cmp	r3, #0
 8010428:	d049      	beq.n	80104be <tcp_output+0x37a>
      seg->next = NULL;
 801042a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042c:	2200      	movs	r2, #0
 801042e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010434:	2b00      	cmp	r3, #0
 8010436:	d105      	bne.n	8010444 <tcp_output+0x300>
        pcb->unacked = seg;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801043c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801043e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010440:	623b      	str	r3, [r7, #32]
 8010442:	e03f      	b.n	80104c4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	4618      	mov	r0, r3
 801044c:	f7f9 f83b 	bl	80094c6 <lwip_htonl>
 8010450:	4604      	mov	r4, r0
 8010452:	6a3b      	ldr	r3, [r7, #32]
 8010454:	68db      	ldr	r3, [r3, #12]
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	4618      	mov	r0, r3
 801045a:	f7f9 f834 	bl	80094c6 <lwip_htonl>
 801045e:	4603      	mov	r3, r0
 8010460:	1ae3      	subs	r3, r4, r3
 8010462:	2b00      	cmp	r3, #0
 8010464:	da24      	bge.n	80104b0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	3370      	adds	r3, #112	; 0x70
 801046a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801046c:	e002      	b.n	8010474 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801046e:	69fb      	ldr	r3, [r7, #28]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d011      	beq.n	80104a0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801047c:	69fb      	ldr	r3, [r7, #28]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	68db      	ldr	r3, [r3, #12]
 8010482:	685b      	ldr	r3, [r3, #4]
 8010484:	4618      	mov	r0, r3
 8010486:	f7f9 f81e 	bl	80094c6 <lwip_htonl>
 801048a:	4604      	mov	r4, r0
 801048c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048e:	68db      	ldr	r3, [r3, #12]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	4618      	mov	r0, r3
 8010494:	f7f9 f817 	bl	80094c6 <lwip_htonl>
 8010498:	4603      	mov	r3, r0
 801049a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801049c:	2b00      	cmp	r3, #0
 801049e:	dbe6      	blt.n	801046e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	681a      	ldr	r2, [r3, #0]
 80104a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80104a8:	69fb      	ldr	r3, [r7, #28]
 80104aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104ac:	601a      	str	r2, [r3, #0]
 80104ae:	e009      	b.n	80104c4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80104b0:	6a3b      	ldr	r3, [r7, #32]
 80104b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104b4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80104b6:	6a3b      	ldr	r3, [r7, #32]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	623b      	str	r3, [r7, #32]
 80104bc:	e002      	b.n	80104c4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80104be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104c0:	f7fb ff71 	bl	800c3a6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80104ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d012      	beq.n	80104f6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80104d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7f8 fff5 	bl	80094c6 <lwip_htonl>
 80104dc:	4602      	mov	r2, r0
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104e2:	1ad3      	subs	r3, r2, r3
 80104e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104e6:	8912      	ldrh	r2, [r2, #8]
 80104e8:	4413      	add	r3, r2
  while (seg != NULL &&
 80104ea:	69ba      	ldr	r2, [r7, #24]
 80104ec:	429a      	cmp	r2, r3
 80104ee:	f4bf aed9 	bcs.w	80102a4 <tcp_output+0x160>
 80104f2:	e000      	b.n	80104f6 <tcp_output+0x3b2>
      break;
 80104f4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d108      	bne.n	8010510 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2200      	movs	r2, #0
 8010502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010506:	e004      	b.n	8010512 <tcp_output+0x3ce>
    goto output_done;
 8010508:	bf00      	nop
 801050a:	e002      	b.n	8010512 <tcp_output+0x3ce>
    goto output_done;
 801050c:	bf00      	nop
 801050e:	e000      	b.n	8010512 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010510:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	8b5b      	ldrh	r3, [r3, #26]
 8010516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801051a:	b29a      	uxth	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010520:	2300      	movs	r3, #0
}
 8010522:	4618      	mov	r0, r3
 8010524:	3728      	adds	r7, #40	; 0x28
 8010526:	46bd      	mov	sp, r7
 8010528:	bdb0      	pop	{r4, r5, r7, pc}
 801052a:	bf00      	nop

0801052c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d106      	bne.n	8010548 <tcp_output_segment_busy+0x1c>
 801053a:	4b09      	ldr	r3, [pc, #36]	; (8010560 <tcp_output_segment_busy+0x34>)
 801053c:	f240 529a 	movw	r2, #1434	; 0x59a
 8010540:	4908      	ldr	r1, [pc, #32]	; (8010564 <tcp_output_segment_busy+0x38>)
 8010542:	4809      	ldr	r0, [pc, #36]	; (8010568 <tcp_output_segment_busy+0x3c>)
 8010544:	f005 f958 	bl	80157f8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	685b      	ldr	r3, [r3, #4]
 801054c:	7b9b      	ldrb	r3, [r3, #14]
 801054e:	2b01      	cmp	r3, #1
 8010550:	d001      	beq.n	8010556 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010552:	2301      	movs	r3, #1
 8010554:	e000      	b.n	8010558 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010556:	2300      	movs	r3, #0
}
 8010558:	4618      	mov	r0, r3
 801055a:	3708      	adds	r7, #8
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}
 8010560:	0801831c 	.word	0x0801831c
 8010564:	080188b8 	.word	0x080188b8
 8010568:	08018370 	.word	0x08018370

0801056c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801056c:	b5b0      	push	{r4, r5, r7, lr}
 801056e:	b08c      	sub	sp, #48	; 0x30
 8010570:	af04      	add	r7, sp, #16
 8010572:	60f8      	str	r0, [r7, #12]
 8010574:	60b9      	str	r1, [r7, #8]
 8010576:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d106      	bne.n	801058c <tcp_output_segment+0x20>
 801057e:	4b64      	ldr	r3, [pc, #400]	; (8010710 <tcp_output_segment+0x1a4>)
 8010580:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010584:	4963      	ldr	r1, [pc, #396]	; (8010714 <tcp_output_segment+0x1a8>)
 8010586:	4864      	ldr	r0, [pc, #400]	; (8010718 <tcp_output_segment+0x1ac>)
 8010588:	f005 f936 	bl	80157f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d106      	bne.n	80105a0 <tcp_output_segment+0x34>
 8010592:	4b5f      	ldr	r3, [pc, #380]	; (8010710 <tcp_output_segment+0x1a4>)
 8010594:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010598:	4960      	ldr	r1, [pc, #384]	; (801071c <tcp_output_segment+0x1b0>)
 801059a:	485f      	ldr	r0, [pc, #380]	; (8010718 <tcp_output_segment+0x1ac>)
 801059c:	f005 f92c 	bl	80157f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d106      	bne.n	80105b4 <tcp_output_segment+0x48>
 80105a6:	4b5a      	ldr	r3, [pc, #360]	; (8010710 <tcp_output_segment+0x1a4>)
 80105a8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80105ac:	495c      	ldr	r1, [pc, #368]	; (8010720 <tcp_output_segment+0x1b4>)
 80105ae:	485a      	ldr	r0, [pc, #360]	; (8010718 <tcp_output_segment+0x1ac>)
 80105b0:	f005 f922 	bl	80157f8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80105b4:	68f8      	ldr	r0, [r7, #12]
 80105b6:	f7ff ffb9 	bl	801052c <tcp_output_segment_busy>
 80105ba:	4603      	mov	r3, r0
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d001      	beq.n	80105c4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80105c0:	2300      	movs	r3, #0
 80105c2:	e0a1      	b.n	8010708 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	68dc      	ldr	r4, [r3, #12]
 80105cc:	4610      	mov	r0, r2
 80105ce:	f7f8 ff7a 	bl	80094c6 <lwip_htonl>
 80105d2:	4603      	mov	r3, r0
 80105d4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	68dc      	ldr	r4, [r3, #12]
 80105de:	4610      	mov	r0, r2
 80105e0:	f7f8 ff5c 	bl	800949c <lwip_htons>
 80105e4:	4603      	mov	r3, r0
 80105e6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ec:	68ba      	ldr	r2, [r7, #8]
 80105ee:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80105f0:	441a      	add	r2, r3
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	68db      	ldr	r3, [r3, #12]
 80105fa:	3314      	adds	r3, #20
 80105fc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	7a9b      	ldrb	r3, [r3, #10]
 8010602:	f003 0301 	and.w	r3, r3, #1
 8010606:	2b00      	cmp	r3, #0
 8010608:	d015      	beq.n	8010636 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	3304      	adds	r3, #4
 801060e:	461a      	mov	r2, r3
 8010610:	6879      	ldr	r1, [r7, #4]
 8010612:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010616:	f7fc fa33 	bl	800ca80 <tcp_eff_send_mss_netif>
 801061a:	4603      	mov	r3, r0
 801061c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801061e:	8b7b      	ldrh	r3, [r7, #26]
 8010620:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010624:	4618      	mov	r0, r3
 8010626:	f7f8 ff4e 	bl	80094c6 <lwip_htonl>
 801062a:	4602      	mov	r2, r0
 801062c:	69fb      	ldr	r3, [r7, #28]
 801062e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010630:	69fb      	ldr	r3, [r7, #28]
 8010632:	3304      	adds	r3, #4
 8010634:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801063c:	2b00      	cmp	r3, #0
 801063e:	da02      	bge.n	8010646 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	2200      	movs	r2, #0
 8010644:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801064a:	2b00      	cmp	r3, #0
 801064c:	d10c      	bne.n	8010668 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801064e:	4b35      	ldr	r3, [pc, #212]	; (8010724 <tcp_output_segment+0x1b8>)
 8010650:	681a      	ldr	r2, [r3, #0]
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	68db      	ldr	r3, [r3, #12]
 801065a:	685b      	ldr	r3, [r3, #4]
 801065c:	4618      	mov	r0, r3
 801065e:	f7f8 ff32 	bl	80094c6 <lwip_htonl>
 8010662:	4602      	mov	r2, r0
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	68da      	ldr	r2, [r3, #12]
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	685b      	ldr	r3, [r3, #4]
 8010672:	1ad3      	subs	r3, r2, r3
 8010674:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	685b      	ldr	r3, [r3, #4]
 801067a:	8959      	ldrh	r1, [r3, #10]
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	8b3a      	ldrh	r2, [r7, #24]
 8010682:	1a8a      	subs	r2, r1, r2
 8010684:	b292      	uxth	r2, r2
 8010686:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	685b      	ldr	r3, [r3, #4]
 801068c:	8919      	ldrh	r1, [r3, #8]
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	685b      	ldr	r3, [r3, #4]
 8010692:	8b3a      	ldrh	r2, [r7, #24]
 8010694:	1a8a      	subs	r2, r1, r2
 8010696:	b292      	uxth	r2, r2
 8010698:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	68fa      	ldr	r2, [r7, #12]
 80106a0:	68d2      	ldr	r2, [r2, #12]
 80106a2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	2200      	movs	r2, #0
 80106aa:	741a      	strb	r2, [r3, #16]
 80106ac:	2200      	movs	r2, #0
 80106ae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	68da      	ldr	r2, [r3, #12]
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	7a9b      	ldrb	r3, [r3, #10]
 80106b8:	f003 0301 	and.w	r3, r3, #1
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d001      	beq.n	80106c4 <tcp_output_segment+0x158>
 80106c0:	2318      	movs	r3, #24
 80106c2:	e000      	b.n	80106c6 <tcp_output_segment+0x15a>
 80106c4:	2314      	movs	r3, #20
 80106c6:	4413      	add	r3, r2
 80106c8:	69fa      	ldr	r2, [r7, #28]
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d006      	beq.n	80106dc <tcp_output_segment+0x170>
 80106ce:	4b10      	ldr	r3, [pc, #64]	; (8010710 <tcp_output_segment+0x1a4>)
 80106d0:	f240 621c 	movw	r2, #1564	; 0x61c
 80106d4:	4914      	ldr	r1, [pc, #80]	; (8010728 <tcp_output_segment+0x1bc>)
 80106d6:	4810      	ldr	r0, [pc, #64]	; (8010718 <tcp_output_segment+0x1ac>)
 80106d8:	f005 f88e 	bl	80157f8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	6858      	ldr	r0, [r3, #4]
 80106e0:	68b9      	ldr	r1, [r7, #8]
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	1d1c      	adds	r4, r3, #4
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	7add      	ldrb	r5, [r3, #11]
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	7a9b      	ldrb	r3, [r3, #10]
 80106ee:	687a      	ldr	r2, [r7, #4]
 80106f0:	9202      	str	r2, [sp, #8]
 80106f2:	2206      	movs	r2, #6
 80106f4:	9201      	str	r2, [sp, #4]
 80106f6:	9300      	str	r3, [sp, #0]
 80106f8:	462b      	mov	r3, r5
 80106fa:	4622      	mov	r2, r4
 80106fc:	f002 f870 	bl	80127e0 <ip4_output_if>
 8010700:	4603      	mov	r3, r0
 8010702:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010704:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010708:	4618      	mov	r0, r3
 801070a:	3720      	adds	r7, #32
 801070c:	46bd      	mov	sp, r7
 801070e:	bdb0      	pop	{r4, r5, r7, pc}
 8010710:	0801831c 	.word	0x0801831c
 8010714:	080188e0 	.word	0x080188e0
 8010718:	08018370 	.word	0x08018370
 801071c:	08018900 	.word	0x08018900
 8010720:	08018920 	.word	0x08018920
 8010724:	2000e49c 	.word	0x2000e49c
 8010728:	08018944 	.word	0x08018944

0801072c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801072c:	b5b0      	push	{r4, r5, r7, lr}
 801072e:	b084      	sub	sp, #16
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d106      	bne.n	8010748 <tcp_rexmit_rto_prepare+0x1c>
 801073a:	4b31      	ldr	r3, [pc, #196]	; (8010800 <tcp_rexmit_rto_prepare+0xd4>)
 801073c:	f240 6263 	movw	r2, #1635	; 0x663
 8010740:	4930      	ldr	r1, [pc, #192]	; (8010804 <tcp_rexmit_rto_prepare+0xd8>)
 8010742:	4831      	ldr	r0, [pc, #196]	; (8010808 <tcp_rexmit_rto_prepare+0xdc>)
 8010744:	f005 f858 	bl	80157f8 <iprintf>

  if (pcb->unacked == NULL) {
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801074c:	2b00      	cmp	r3, #0
 801074e:	d102      	bne.n	8010756 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010750:	f06f 0305 	mvn.w	r3, #5
 8010754:	e050      	b.n	80107f8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801075a:	60fb      	str	r3, [r7, #12]
 801075c:	e00b      	b.n	8010776 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801075e:	68f8      	ldr	r0, [r7, #12]
 8010760:	f7ff fee4 	bl	801052c <tcp_output_segment_busy>
 8010764:	4603      	mov	r3, r0
 8010766:	2b00      	cmp	r3, #0
 8010768:	d002      	beq.n	8010770 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801076a:	f06f 0305 	mvn.w	r3, #5
 801076e:	e043      	b.n	80107f8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	60fb      	str	r3, [r7, #12]
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d1ef      	bne.n	801075e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801077e:	68f8      	ldr	r0, [r7, #12]
 8010780:	f7ff fed4 	bl	801052c <tcp_output_segment_busy>
 8010784:	4603      	mov	r3, r0
 8010786:	2b00      	cmp	r3, #0
 8010788:	d002      	beq.n	8010790 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801078a:	f06f 0305 	mvn.w	r3, #5
 801078e:	e033      	b.n	80107f8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2200      	movs	r2, #0
 80107a4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	8b5b      	ldrh	r3, [r3, #26]
 80107aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80107ae:	b29a      	uxth	r2, r3
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	68db      	ldr	r3, [r3, #12]
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7f8 fe83 	bl	80094c6 <lwip_htonl>
 80107c0:	4604      	mov	r4, r0
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	891b      	ldrh	r3, [r3, #8]
 80107c6:	461d      	mov	r5, r3
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	68db      	ldr	r3, [r3, #12]
 80107cc:	899b      	ldrh	r3, [r3, #12]
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	4618      	mov	r0, r3
 80107d2:	f7f8 fe63 	bl	800949c <lwip_htons>
 80107d6:	4603      	mov	r3, r0
 80107d8:	b2db      	uxtb	r3, r3
 80107da:	f003 0303 	and.w	r3, r3, #3
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d001      	beq.n	80107e6 <tcp_rexmit_rto_prepare+0xba>
 80107e2:	2301      	movs	r3, #1
 80107e4:	e000      	b.n	80107e8 <tcp_rexmit_rto_prepare+0xbc>
 80107e6:	2300      	movs	r3, #0
 80107e8:	442b      	add	r3, r5
 80107ea:	18e2      	adds	r2, r4, r3
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2200      	movs	r2, #0
 80107f4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80107f6:	2300      	movs	r3, #0
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	3710      	adds	r7, #16
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bdb0      	pop	{r4, r5, r7, pc}
 8010800:	0801831c 	.word	0x0801831c
 8010804:	08018958 	.word	0x08018958
 8010808:	08018370 	.word	0x08018370

0801080c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d106      	bne.n	8010828 <tcp_rexmit_rto_commit+0x1c>
 801081a:	4b0d      	ldr	r3, [pc, #52]	; (8010850 <tcp_rexmit_rto_commit+0x44>)
 801081c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010820:	490c      	ldr	r1, [pc, #48]	; (8010854 <tcp_rexmit_rto_commit+0x48>)
 8010822:	480d      	ldr	r0, [pc, #52]	; (8010858 <tcp_rexmit_rto_commit+0x4c>)
 8010824:	f004 ffe8 	bl	80157f8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801082e:	2bff      	cmp	r3, #255	; 0xff
 8010830:	d007      	beq.n	8010842 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010838:	3301      	adds	r3, #1
 801083a:	b2da      	uxtb	r2, r3
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f7ff fc7e 	bl	8010144 <tcp_output>
}
 8010848:	bf00      	nop
 801084a:	3708      	adds	r7, #8
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}
 8010850:	0801831c 	.word	0x0801831c
 8010854:	0801897c 	.word	0x0801897c
 8010858:	08018370 	.word	0x08018370

0801085c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d106      	bne.n	8010878 <tcp_rexmit_rto+0x1c>
 801086a:	4b0a      	ldr	r3, [pc, #40]	; (8010894 <tcp_rexmit_rto+0x38>)
 801086c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010870:	4909      	ldr	r1, [pc, #36]	; (8010898 <tcp_rexmit_rto+0x3c>)
 8010872:	480a      	ldr	r0, [pc, #40]	; (801089c <tcp_rexmit_rto+0x40>)
 8010874:	f004 ffc0 	bl	80157f8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f7ff ff57 	bl	801072c <tcp_rexmit_rto_prepare>
 801087e:	4603      	mov	r3, r0
 8010880:	2b00      	cmp	r3, #0
 8010882:	d102      	bne.n	801088a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f7ff ffc1 	bl	801080c <tcp_rexmit_rto_commit>
  }
}
 801088a:	bf00      	nop
 801088c:	3708      	adds	r7, #8
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}
 8010892:	bf00      	nop
 8010894:	0801831c 	.word	0x0801831c
 8010898:	080189a0 	.word	0x080189a0
 801089c:	08018370 	.word	0x08018370

080108a0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80108a0:	b590      	push	{r4, r7, lr}
 80108a2:	b085      	sub	sp, #20
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d106      	bne.n	80108bc <tcp_rexmit+0x1c>
 80108ae:	4b2f      	ldr	r3, [pc, #188]	; (801096c <tcp_rexmit+0xcc>)
 80108b0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80108b4:	492e      	ldr	r1, [pc, #184]	; (8010970 <tcp_rexmit+0xd0>)
 80108b6:	482f      	ldr	r0, [pc, #188]	; (8010974 <tcp_rexmit+0xd4>)
 80108b8:	f004 ff9e 	bl	80157f8 <iprintf>

  if (pcb->unacked == NULL) {
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d102      	bne.n	80108ca <tcp_rexmit+0x2a>
    return ERR_VAL;
 80108c4:	f06f 0305 	mvn.w	r3, #5
 80108c8:	e04c      	b.n	8010964 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108ce:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80108d0:	68b8      	ldr	r0, [r7, #8]
 80108d2:	f7ff fe2b 	bl	801052c <tcp_output_segment_busy>
 80108d6:	4603      	mov	r3, r0
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d002      	beq.n	80108e2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80108dc:	f06f 0305 	mvn.w	r3, #5
 80108e0:	e040      	b.n	8010964 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	681a      	ldr	r2, [r3, #0]
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	336c      	adds	r3, #108	; 0x6c
 80108ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80108f0:	e002      	b.n	80108f8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d011      	beq.n	8010924 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	68db      	ldr	r3, [r3, #12]
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	4618      	mov	r0, r3
 801090a:	f7f8 fddc 	bl	80094c6 <lwip_htonl>
 801090e:	4604      	mov	r4, r0
 8010910:	68bb      	ldr	r3, [r7, #8]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	4618      	mov	r0, r3
 8010918:	f7f8 fdd5 	bl	80094c6 <lwip_htonl>
 801091c:	4603      	mov	r3, r0
 801091e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010920:	2b00      	cmp	r3, #0
 8010922:	dbe6      	blt.n	80108f2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	68ba      	ldr	r2, [r7, #8]
 8010930:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d103      	bne.n	8010942 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2200      	movs	r2, #0
 801093e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010948:	2bff      	cmp	r3, #255	; 0xff
 801094a:	d007      	beq.n	801095c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010952:	3301      	adds	r3, #1
 8010954:	b2da      	uxtb	r2, r3
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2200      	movs	r2, #0
 8010960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010962:	2300      	movs	r3, #0
}
 8010964:	4618      	mov	r0, r3
 8010966:	3714      	adds	r7, #20
 8010968:	46bd      	mov	sp, r7
 801096a:	bd90      	pop	{r4, r7, pc}
 801096c:	0801831c 	.word	0x0801831c
 8010970:	080189bc 	.word	0x080189bc
 8010974:	08018370 	.word	0x08018370

08010978 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d106      	bne.n	8010994 <tcp_rexmit_fast+0x1c>
 8010986:	4b2a      	ldr	r3, [pc, #168]	; (8010a30 <tcp_rexmit_fast+0xb8>)
 8010988:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801098c:	4929      	ldr	r1, [pc, #164]	; (8010a34 <tcp_rexmit_fast+0xbc>)
 801098e:	482a      	ldr	r0, [pc, #168]	; (8010a38 <tcp_rexmit_fast+0xc0>)
 8010990:	f004 ff32 	bl	80157f8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010998:	2b00      	cmp	r3, #0
 801099a:	d044      	beq.n	8010a26 <tcp_rexmit_fast+0xae>
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	8b5b      	ldrh	r3, [r3, #26]
 80109a0:	f003 0304 	and.w	r3, r3, #4
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d13e      	bne.n	8010a26 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f7ff ff79 	bl	80108a0 <tcp_rexmit>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d138      	bne.n	8010a26 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80109c0:	4293      	cmp	r3, r2
 80109c2:	bf28      	it	cs
 80109c4:	4613      	movcs	r3, r2
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	0fda      	lsrs	r2, r3, #31
 80109ca:	4413      	add	r3, r2
 80109cc:	105b      	asrs	r3, r3, #1
 80109ce:	b29a      	uxth	r2, r3
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80109dc:	461a      	mov	r2, r3
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109e2:	005b      	lsls	r3, r3, #1
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d206      	bcs.n	80109f6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109ec:	005b      	lsls	r3, r3, #1
 80109ee:	b29a      	uxth	r2, r3
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a00:	4619      	mov	r1, r3
 8010a02:	0049      	lsls	r1, r1, #1
 8010a04:	440b      	add	r3, r1
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	4413      	add	r3, r2
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	8b5b      	ldrh	r3, [r3, #26]
 8010a16:	f043 0304 	orr.w	r3, r3, #4
 8010a1a:	b29a      	uxth	r2, r3
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010a26:	bf00      	nop
 8010a28:	3708      	adds	r7, #8
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
 8010a2e:	bf00      	nop
 8010a30:	0801831c 	.word	0x0801831c
 8010a34:	080189d4 	.word	0x080189d4
 8010a38:	08018370 	.word	0x08018370

08010a3c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b086      	sub	sp, #24
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	607b      	str	r3, [r7, #4]
 8010a46:	460b      	mov	r3, r1
 8010a48:	817b      	strh	r3, [r7, #10]
 8010a4a:	4613      	mov	r3, r2
 8010a4c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010a4e:	897a      	ldrh	r2, [r7, #10]
 8010a50:	893b      	ldrh	r3, [r7, #8]
 8010a52:	4413      	add	r3, r2
 8010a54:	b29b      	uxth	r3, r3
 8010a56:	3314      	adds	r3, #20
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a5e:	4619      	mov	r1, r3
 8010a60:	2022      	movs	r0, #34	; 0x22
 8010a62:	f7f9 fd8f 	bl	800a584 <pbuf_alloc>
 8010a66:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d04d      	beq.n	8010b0a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010a6e:	897b      	ldrh	r3, [r7, #10]
 8010a70:	3313      	adds	r3, #19
 8010a72:	697a      	ldr	r2, [r7, #20]
 8010a74:	8952      	ldrh	r2, [r2, #10]
 8010a76:	4293      	cmp	r3, r2
 8010a78:	db06      	blt.n	8010a88 <tcp_output_alloc_header_common+0x4c>
 8010a7a:	4b26      	ldr	r3, [pc, #152]	; (8010b14 <tcp_output_alloc_header_common+0xd8>)
 8010a7c:	f240 7223 	movw	r2, #1827	; 0x723
 8010a80:	4925      	ldr	r1, [pc, #148]	; (8010b18 <tcp_output_alloc_header_common+0xdc>)
 8010a82:	4826      	ldr	r0, [pc, #152]	; (8010b1c <tcp_output_alloc_header_common+0xe0>)
 8010a84:	f004 feb8 	bl	80157f8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010a88:	697b      	ldr	r3, [r7, #20]
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010a8e:	8c3b      	ldrh	r3, [r7, #32]
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7f8 fd03 	bl	800949c <lwip_htons>
 8010a96:	4603      	mov	r3, r0
 8010a98:	461a      	mov	r2, r3
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7f8 fcfb 	bl	800949c <lwip_htons>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	693b      	ldr	r3, [r7, #16]
 8010aac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	687a      	ldr	r2, [r7, #4]
 8010ab2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010ab4:	68f8      	ldr	r0, [r7, #12]
 8010ab6:	f7f8 fd06 	bl	80094c6 <lwip_htonl>
 8010aba:	4602      	mov	r2, r0
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010ac0:	897b      	ldrh	r3, [r7, #10]
 8010ac2:	089b      	lsrs	r3, r3, #2
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	3305      	adds	r3, #5
 8010ac8:	b29b      	uxth	r3, r3
 8010aca:	031b      	lsls	r3, r3, #12
 8010acc:	b29a      	uxth	r2, r3
 8010ace:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	4313      	orrs	r3, r2
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7f8 fcdf 	bl	800949c <lwip_htons>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	461a      	mov	r2, r3
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010ae6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7f8 fcd7 	bl	800949c <lwip_htons>
 8010aee:	4603      	mov	r3, r0
 8010af0:	461a      	mov	r2, r3
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	2200      	movs	r2, #0
 8010afa:	741a      	strb	r2, [r3, #16]
 8010afc:	2200      	movs	r2, #0
 8010afe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	2200      	movs	r2, #0
 8010b04:	749a      	strb	r2, [r3, #18]
 8010b06:	2200      	movs	r2, #0
 8010b08:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010b0a:	697b      	ldr	r3, [r7, #20]
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3718      	adds	r7, #24
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}
 8010b14:	0801831c 	.word	0x0801831c
 8010b18:	080189f4 	.word	0x080189f4
 8010b1c:	08018370 	.word	0x08018370

08010b20 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010b20:	b5b0      	push	{r4, r5, r7, lr}
 8010b22:	b08a      	sub	sp, #40	; 0x28
 8010b24:	af04      	add	r7, sp, #16
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	607b      	str	r3, [r7, #4]
 8010b2a:	460b      	mov	r3, r1
 8010b2c:	817b      	strh	r3, [r7, #10]
 8010b2e:	4613      	mov	r3, r2
 8010b30:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d106      	bne.n	8010b46 <tcp_output_alloc_header+0x26>
 8010b38:	4b15      	ldr	r3, [pc, #84]	; (8010b90 <tcp_output_alloc_header+0x70>)
 8010b3a:	f240 7242 	movw	r2, #1858	; 0x742
 8010b3e:	4915      	ldr	r1, [pc, #84]	; (8010b94 <tcp_output_alloc_header+0x74>)
 8010b40:	4815      	ldr	r0, [pc, #84]	; (8010b98 <tcp_output_alloc_header+0x78>)
 8010b42:	f004 fe59 	bl	80157f8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	8adb      	ldrh	r3, [r3, #22]
 8010b4e:	68fa      	ldr	r2, [r7, #12]
 8010b50:	8b12      	ldrh	r2, [r2, #24]
 8010b52:	68f9      	ldr	r1, [r7, #12]
 8010b54:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010b56:	893d      	ldrh	r5, [r7, #8]
 8010b58:	897c      	ldrh	r4, [r7, #10]
 8010b5a:	9103      	str	r1, [sp, #12]
 8010b5c:	2110      	movs	r1, #16
 8010b5e:	9102      	str	r1, [sp, #8]
 8010b60:	9201      	str	r2, [sp, #4]
 8010b62:	9300      	str	r3, [sp, #0]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	462a      	mov	r2, r5
 8010b68:	4621      	mov	r1, r4
 8010b6a:	f7ff ff67 	bl	8010a3c <tcp_output_alloc_header_common>
 8010b6e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d006      	beq.n	8010b84 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b7a:	68fa      	ldr	r2, [r7, #12]
 8010b7c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010b7e:	441a      	add	r2, r3
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010b84:	697b      	ldr	r3, [r7, #20]
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3718      	adds	r7, #24
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	0801831c 	.word	0x0801831c
 8010b94:	08018a24 	.word	0x08018a24
 8010b98:	08018370 	.word	0x08018370

08010b9c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b088      	sub	sp, #32
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	60f8      	str	r0, [r7, #12]
 8010ba4:	60b9      	str	r1, [r7, #8]
 8010ba6:	4611      	mov	r1, r2
 8010ba8:	461a      	mov	r2, r3
 8010baa:	460b      	mov	r3, r1
 8010bac:	71fb      	strb	r3, [r7, #7]
 8010bae:	4613      	mov	r3, r2
 8010bb0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d106      	bne.n	8010bca <tcp_output_fill_options+0x2e>
 8010bbc:	4b12      	ldr	r3, [pc, #72]	; (8010c08 <tcp_output_fill_options+0x6c>)
 8010bbe:	f240 7256 	movw	r2, #1878	; 0x756
 8010bc2:	4912      	ldr	r1, [pc, #72]	; (8010c0c <tcp_output_fill_options+0x70>)
 8010bc4:	4812      	ldr	r0, [pc, #72]	; (8010c10 <tcp_output_fill_options+0x74>)
 8010bc6:	f004 fe17 	bl	80157f8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	685b      	ldr	r3, [r3, #4]
 8010bce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010bd0:	69bb      	ldr	r3, [r7, #24]
 8010bd2:	3314      	adds	r3, #20
 8010bd4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010bd6:	8bfb      	ldrh	r3, [r7, #30]
 8010bd8:	009b      	lsls	r3, r3, #2
 8010bda:	461a      	mov	r2, r3
 8010bdc:	79fb      	ldrb	r3, [r7, #7]
 8010bde:	009b      	lsls	r3, r3, #2
 8010be0:	f003 0304 	and.w	r3, r3, #4
 8010be4:	4413      	add	r3, r2
 8010be6:	3314      	adds	r3, #20
 8010be8:	69ba      	ldr	r2, [r7, #24]
 8010bea:	4413      	add	r3, r2
 8010bec:	697a      	ldr	r2, [r7, #20]
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d006      	beq.n	8010c00 <tcp_output_fill_options+0x64>
 8010bf2:	4b05      	ldr	r3, [pc, #20]	; (8010c08 <tcp_output_fill_options+0x6c>)
 8010bf4:	f240 7275 	movw	r2, #1909	; 0x775
 8010bf8:	4906      	ldr	r1, [pc, #24]	; (8010c14 <tcp_output_fill_options+0x78>)
 8010bfa:	4805      	ldr	r0, [pc, #20]	; (8010c10 <tcp_output_fill_options+0x74>)
 8010bfc:	f004 fdfc 	bl	80157f8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010c00:	bf00      	nop
 8010c02:	3720      	adds	r7, #32
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	0801831c 	.word	0x0801831c
 8010c0c:	08018a4c 	.word	0x08018a4c
 8010c10:	08018370 	.word	0x08018370
 8010c14:	08018944 	.word	0x08018944

08010c18 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b08a      	sub	sp, #40	; 0x28
 8010c1c:	af04      	add	r7, sp, #16
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	607a      	str	r2, [r7, #4]
 8010c24:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d106      	bne.n	8010c3a <tcp_output_control_segment+0x22>
 8010c2c:	4b1c      	ldr	r3, [pc, #112]	; (8010ca0 <tcp_output_control_segment+0x88>)
 8010c2e:	f240 7287 	movw	r2, #1927	; 0x787
 8010c32:	491c      	ldr	r1, [pc, #112]	; (8010ca4 <tcp_output_control_segment+0x8c>)
 8010c34:	481c      	ldr	r0, [pc, #112]	; (8010ca8 <tcp_output_control_segment+0x90>)
 8010c36:	f004 fddf 	bl	80157f8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010c3a:	683a      	ldr	r2, [r7, #0]
 8010c3c:	6879      	ldr	r1, [r7, #4]
 8010c3e:	68f8      	ldr	r0, [r7, #12]
 8010c40:	f7fe fae8 	bl	800f214 <tcp_route>
 8010c44:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010c46:	693b      	ldr	r3, [r7, #16]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d102      	bne.n	8010c52 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010c4c:	23fc      	movs	r3, #252	; 0xfc
 8010c4e:	75fb      	strb	r3, [r7, #23]
 8010c50:	e01c      	b.n	8010c8c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d006      	beq.n	8010c66 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	7adb      	ldrb	r3, [r3, #11]
 8010c5c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	7a9b      	ldrb	r3, [r3, #10]
 8010c62:	757b      	strb	r3, [r7, #21]
 8010c64:	e003      	b.n	8010c6e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010c66:	2340      	movs	r3, #64	; 0x40
 8010c68:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010c6e:	7dba      	ldrb	r2, [r7, #22]
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	9302      	str	r3, [sp, #8]
 8010c74:	2306      	movs	r3, #6
 8010c76:	9301      	str	r3, [sp, #4]
 8010c78:	7d7b      	ldrb	r3, [r7, #21]
 8010c7a:	9300      	str	r3, [sp, #0]
 8010c7c:	4613      	mov	r3, r2
 8010c7e:	683a      	ldr	r2, [r7, #0]
 8010c80:	6879      	ldr	r1, [r7, #4]
 8010c82:	68b8      	ldr	r0, [r7, #8]
 8010c84:	f001 fdac 	bl	80127e0 <ip4_output_if>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010c8c:	68b8      	ldr	r0, [r7, #8]
 8010c8e:	f7f9 ff5d 	bl	800ab4c <pbuf_free>
  return err;
 8010c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3718      	adds	r7, #24
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
 8010c9e:	bf00      	nop
 8010ca0:	0801831c 	.word	0x0801831c
 8010ca4:	08018a74 	.word	0x08018a74
 8010ca8:	08018370 	.word	0x08018370

08010cac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010cac:	b590      	push	{r4, r7, lr}
 8010cae:	b08b      	sub	sp, #44	; 0x2c
 8010cb0:	af04      	add	r7, sp, #16
 8010cb2:	60f8      	str	r0, [r7, #12]
 8010cb4:	60b9      	str	r1, [r7, #8]
 8010cb6:	607a      	str	r2, [r7, #4]
 8010cb8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d106      	bne.n	8010cce <tcp_rst+0x22>
 8010cc0:	4b1f      	ldr	r3, [pc, #124]	; (8010d40 <tcp_rst+0x94>)
 8010cc2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010cc6:	491f      	ldr	r1, [pc, #124]	; (8010d44 <tcp_rst+0x98>)
 8010cc8:	481f      	ldr	r0, [pc, #124]	; (8010d48 <tcp_rst+0x9c>)
 8010cca:	f004 fd95 	bl	80157f8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d106      	bne.n	8010ce2 <tcp_rst+0x36>
 8010cd4:	4b1a      	ldr	r3, [pc, #104]	; (8010d40 <tcp_rst+0x94>)
 8010cd6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010cda:	491c      	ldr	r1, [pc, #112]	; (8010d4c <tcp_rst+0xa0>)
 8010cdc:	481a      	ldr	r0, [pc, #104]	; (8010d48 <tcp_rst+0x9c>)
 8010cde:	f004 fd8b 	bl	80157f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010ce6:	f246 0308 	movw	r3, #24584	; 0x6008
 8010cea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010cec:	7dfb      	ldrb	r3, [r7, #23]
 8010cee:	b29c      	uxth	r4, r3
 8010cf0:	68b8      	ldr	r0, [r7, #8]
 8010cf2:	f7f8 fbe8 	bl	80094c6 <lwip_htonl>
 8010cf6:	4602      	mov	r2, r0
 8010cf8:	8abb      	ldrh	r3, [r7, #20]
 8010cfa:	9303      	str	r3, [sp, #12]
 8010cfc:	2314      	movs	r3, #20
 8010cfe:	9302      	str	r3, [sp, #8]
 8010d00:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010d02:	9301      	str	r3, [sp, #4]
 8010d04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010d06:	9300      	str	r3, [sp, #0]
 8010d08:	4613      	mov	r3, r2
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	4621      	mov	r1, r4
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f7ff fe94 	bl	8010a3c <tcp_output_alloc_header_common>
 8010d14:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d00c      	beq.n	8010d36 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010d1c:	7dfb      	ldrb	r3, [r7, #23]
 8010d1e:	2200      	movs	r2, #0
 8010d20:	6939      	ldr	r1, [r7, #16]
 8010d22:	68f8      	ldr	r0, [r7, #12]
 8010d24:	f7ff ff3a 	bl	8010b9c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2a:	683a      	ldr	r2, [r7, #0]
 8010d2c:	6939      	ldr	r1, [r7, #16]
 8010d2e:	68f8      	ldr	r0, [r7, #12]
 8010d30:	f7ff ff72 	bl	8010c18 <tcp_output_control_segment>
 8010d34:	e000      	b.n	8010d38 <tcp_rst+0x8c>
    return;
 8010d36:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010d38:	371c      	adds	r7, #28
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd90      	pop	{r4, r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	0801831c 	.word	0x0801831c
 8010d44:	08018aa0 	.word	0x08018aa0
 8010d48:	08018370 	.word	0x08018370
 8010d4c:	08018abc 	.word	0x08018abc

08010d50 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010d50:	b590      	push	{r4, r7, lr}
 8010d52:	b087      	sub	sp, #28
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d106      	bne.n	8010d74 <tcp_send_empty_ack+0x24>
 8010d66:	4b28      	ldr	r3, [pc, #160]	; (8010e08 <tcp_send_empty_ack+0xb8>)
 8010d68:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010d6c:	4927      	ldr	r1, [pc, #156]	; (8010e0c <tcp_send_empty_ack+0xbc>)
 8010d6e:	4828      	ldr	r0, [pc, #160]	; (8010e10 <tcp_send_empty_ack+0xc0>)
 8010d70:	f004 fd42 	bl	80157f8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010d74:	7dfb      	ldrb	r3, [r7, #23]
 8010d76:	009b      	lsls	r3, r3, #2
 8010d78:	b2db      	uxtb	r3, r3
 8010d7a:	f003 0304 	and.w	r3, r3, #4
 8010d7e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010d80:	7d7b      	ldrb	r3, [r7, #21]
 8010d82:	b29c      	uxth	r4, r3
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7f8 fb9c 	bl	80094c6 <lwip_htonl>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	2200      	movs	r2, #0
 8010d92:	4621      	mov	r1, r4
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f7ff fec3 	bl	8010b20 <tcp_output_alloc_header>
 8010d9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010d9c:	693b      	ldr	r3, [r7, #16]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d109      	bne.n	8010db6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	8b5b      	ldrh	r3, [r3, #26]
 8010da6:	f043 0303 	orr.w	r3, r3, #3
 8010daa:	b29a      	uxth	r2, r3
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010db0:	f06f 0301 	mvn.w	r3, #1
 8010db4:	e023      	b.n	8010dfe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010db6:	7dbb      	ldrb	r3, [r7, #22]
 8010db8:	7dfa      	ldrb	r2, [r7, #23]
 8010dba:	6939      	ldr	r1, [r7, #16]
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f7ff feed 	bl	8010b9c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010dc2:	687a      	ldr	r2, [r7, #4]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	3304      	adds	r3, #4
 8010dc8:	6939      	ldr	r1, [r7, #16]
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f7ff ff24 	bl	8010c18 <tcp_output_control_segment>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d007      	beq.n	8010dec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	8b5b      	ldrh	r3, [r3, #26]
 8010de0:	f043 0303 	orr.w	r3, r3, #3
 8010de4:	b29a      	uxth	r2, r3
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	835a      	strh	r2, [r3, #26]
 8010dea:	e006      	b.n	8010dfa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	8b5b      	ldrh	r3, [r3, #26]
 8010df0:	f023 0303 	bic.w	r3, r3, #3
 8010df4:	b29a      	uxth	r2, r3
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	371c      	adds	r7, #28
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd90      	pop	{r4, r7, pc}
 8010e06:	bf00      	nop
 8010e08:	0801831c 	.word	0x0801831c
 8010e0c:	08018ad8 	.word	0x08018ad8
 8010e10:	08018370 	.word	0x08018370

08010e14 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010e14:	b590      	push	{r4, r7, lr}
 8010e16:	b087      	sub	sp, #28
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d106      	bne.n	8010e34 <tcp_keepalive+0x20>
 8010e26:	4b18      	ldr	r3, [pc, #96]	; (8010e88 <tcp_keepalive+0x74>)
 8010e28:	f640 0224 	movw	r2, #2084	; 0x824
 8010e2c:	4917      	ldr	r1, [pc, #92]	; (8010e8c <tcp_keepalive+0x78>)
 8010e2e:	4818      	ldr	r0, [pc, #96]	; (8010e90 <tcp_keepalive+0x7c>)
 8010e30:	f004 fce2 	bl	80157f8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010e34:	7dfb      	ldrb	r3, [r7, #23]
 8010e36:	b29c      	uxth	r4, r3
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e3c:	3b01      	subs	r3, #1
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7f8 fb41 	bl	80094c6 <lwip_htonl>
 8010e44:	4603      	mov	r3, r0
 8010e46:	2200      	movs	r2, #0
 8010e48:	4621      	mov	r1, r4
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f7ff fe68 	bl	8010b20 <tcp_output_alloc_header>
 8010e50:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d102      	bne.n	8010e5e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010e58:	f04f 33ff 	mov.w	r3, #4294967295
 8010e5c:	e010      	b.n	8010e80 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010e5e:	7dfb      	ldrb	r3, [r7, #23]
 8010e60:	2200      	movs	r2, #0
 8010e62:	6939      	ldr	r1, [r7, #16]
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f7ff fe99 	bl	8010b9c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	3304      	adds	r3, #4
 8010e70:	6939      	ldr	r1, [r7, #16]
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f7ff fed0 	bl	8010c18 <tcp_output_control_segment>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	371c      	adds	r7, #28
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd90      	pop	{r4, r7, pc}
 8010e88:	0801831c 	.word	0x0801831c
 8010e8c:	08018af8 	.word	0x08018af8
 8010e90:	08018370 	.word	0x08018370

08010e94 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010e94:	b590      	push	{r4, r7, lr}
 8010e96:	b08b      	sub	sp, #44	; 0x2c
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d106      	bne.n	8010eb6 <tcp_zero_window_probe+0x22>
 8010ea8:	4b4c      	ldr	r3, [pc, #304]	; (8010fdc <tcp_zero_window_probe+0x148>)
 8010eaa:	f640 024f 	movw	r2, #2127	; 0x84f
 8010eae:	494c      	ldr	r1, [pc, #304]	; (8010fe0 <tcp_zero_window_probe+0x14c>)
 8010eb0:	484c      	ldr	r0, [pc, #304]	; (8010fe4 <tcp_zero_window_probe+0x150>)
 8010eb2:	f004 fca1 	bl	80157f8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010eba:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010ebc:	6a3b      	ldr	r3, [r7, #32]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d101      	bne.n	8010ec6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	e086      	b.n	8010fd4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010ecc:	2bff      	cmp	r3, #255	; 0xff
 8010ece:	d007      	beq.n	8010ee0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010ed6:	3301      	adds	r3, #1
 8010ed8:	b2da      	uxtb	r2, r3
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010ee0:	6a3b      	ldr	r3, [r7, #32]
 8010ee2:	68db      	ldr	r3, [r3, #12]
 8010ee4:	899b      	ldrh	r3, [r3, #12]
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7f8 fad7 	bl	800949c <lwip_htons>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	b2db      	uxtb	r3, r3
 8010ef2:	f003 0301 	and.w	r3, r3, #1
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d005      	beq.n	8010f06 <tcp_zero_window_probe+0x72>
 8010efa:	6a3b      	ldr	r3, [r7, #32]
 8010efc:	891b      	ldrh	r3, [r3, #8]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d101      	bne.n	8010f06 <tcp_zero_window_probe+0x72>
 8010f02:	2301      	movs	r3, #1
 8010f04:	e000      	b.n	8010f08 <tcp_zero_window_probe+0x74>
 8010f06:	2300      	movs	r3, #0
 8010f08:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010f0a:	7ffb      	ldrb	r3, [r7, #31]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	bf0c      	ite	eq
 8010f10:	2301      	moveq	r3, #1
 8010f12:	2300      	movne	r3, #0
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f1c:	b299      	uxth	r1, r3
 8010f1e:	6a3b      	ldr	r3, [r7, #32]
 8010f20:	68db      	ldr	r3, [r3, #12]
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	8bba      	ldrh	r2, [r7, #28]
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f7ff fdfa 	bl	8010b20 <tcp_output_alloc_header>
 8010f2c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010f2e:	69bb      	ldr	r3, [r7, #24]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d102      	bne.n	8010f3a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010f34:	f04f 33ff 	mov.w	r3, #4294967295
 8010f38:	e04c      	b.n	8010fd4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010f3a:	69bb      	ldr	r3, [r7, #24]
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010f40:	7ffb      	ldrb	r3, [r7, #31]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d011      	beq.n	8010f6a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	899b      	ldrh	r3, [r3, #12]
 8010f4a:	b29b      	uxth	r3, r3
 8010f4c:	b21b      	sxth	r3, r3
 8010f4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010f52:	b21c      	sxth	r4, r3
 8010f54:	2011      	movs	r0, #17
 8010f56:	f7f8 faa1 	bl	800949c <lwip_htons>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	b21b      	sxth	r3, r3
 8010f5e:	4323      	orrs	r3, r4
 8010f60:	b21b      	sxth	r3, r3
 8010f62:	b29a      	uxth	r2, r3
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	819a      	strh	r2, [r3, #12]
 8010f68:	e010      	b.n	8010f8c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010f6a:	69bb      	ldr	r3, [r7, #24]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	3314      	adds	r3, #20
 8010f70:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010f72:	6a3b      	ldr	r3, [r7, #32]
 8010f74:	6858      	ldr	r0, [r3, #4]
 8010f76:	6a3b      	ldr	r3, [r7, #32]
 8010f78:	685b      	ldr	r3, [r3, #4]
 8010f7a:	891a      	ldrh	r2, [r3, #8]
 8010f7c:	6a3b      	ldr	r3, [r7, #32]
 8010f7e:	891b      	ldrh	r3, [r3, #8]
 8010f80:	1ad3      	subs	r3, r2, r3
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	2201      	movs	r2, #1
 8010f86:	6939      	ldr	r1, [r7, #16]
 8010f88:	f7f9 ffca 	bl	800af20 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010f8c:	6a3b      	ldr	r3, [r7, #32]
 8010f8e:	68db      	ldr	r3, [r3, #12]
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7f8 fa97 	bl	80094c6 <lwip_htonl>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	3301      	adds	r3, #1
 8010f9c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	1ad3      	subs	r3, r2, r3
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	da02      	bge.n	8010fb0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	68fa      	ldr	r2, [r7, #12]
 8010fae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	69b9      	ldr	r1, [r7, #24]
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f7ff fdef 	bl	8010b9c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010fbe:	687a      	ldr	r2, [r7, #4]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	3304      	adds	r3, #4
 8010fc4:	69b9      	ldr	r1, [r7, #24]
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f7ff fe26 	bl	8010c18 <tcp_output_control_segment>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010fd0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	372c      	adds	r7, #44	; 0x2c
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd90      	pop	{r4, r7, pc}
 8010fdc:	0801831c 	.word	0x0801831c
 8010fe0:	08018b14 	.word	0x08018b14
 8010fe4:	08018370 	.word	0x08018370

08010fe8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010ff0:	f7fa f884 	bl	800b0fc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010ff4:	4b0a      	ldr	r3, [pc, #40]	; (8011020 <tcpip_tcp_timer+0x38>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d103      	bne.n	8011004 <tcpip_tcp_timer+0x1c>
 8010ffc:	4b09      	ldr	r3, [pc, #36]	; (8011024 <tcpip_tcp_timer+0x3c>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d005      	beq.n	8011010 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011004:	2200      	movs	r2, #0
 8011006:	4908      	ldr	r1, [pc, #32]	; (8011028 <tcpip_tcp_timer+0x40>)
 8011008:	20fa      	movs	r0, #250	; 0xfa
 801100a:	f000 f8f3 	bl	80111f4 <sys_timeout>
 801100e:	e003      	b.n	8011018 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011010:	4b06      	ldr	r3, [pc, #24]	; (801102c <tcpip_tcp_timer+0x44>)
 8011012:	2200      	movs	r2, #0
 8011014:	601a      	str	r2, [r3, #0]
  }
}
 8011016:	bf00      	nop
 8011018:	bf00      	nop
 801101a:	3708      	adds	r7, #8
 801101c:	46bd      	mov	sp, r7
 801101e:	bd80      	pop	{r7, pc}
 8011020:	2000e4a8 	.word	0x2000e4a8
 8011024:	2000e4ac 	.word	0x2000e4ac
 8011028:	08010fe9 	.word	0x08010fe9
 801102c:	2000e4f4 	.word	0x2000e4f4

08011030 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011034:	4b0a      	ldr	r3, [pc, #40]	; (8011060 <tcp_timer_needed+0x30>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d10f      	bne.n	801105c <tcp_timer_needed+0x2c>
 801103c:	4b09      	ldr	r3, [pc, #36]	; (8011064 <tcp_timer_needed+0x34>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d103      	bne.n	801104c <tcp_timer_needed+0x1c>
 8011044:	4b08      	ldr	r3, [pc, #32]	; (8011068 <tcp_timer_needed+0x38>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d007      	beq.n	801105c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801104c:	4b04      	ldr	r3, [pc, #16]	; (8011060 <tcp_timer_needed+0x30>)
 801104e:	2201      	movs	r2, #1
 8011050:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011052:	2200      	movs	r2, #0
 8011054:	4905      	ldr	r1, [pc, #20]	; (801106c <tcp_timer_needed+0x3c>)
 8011056:	20fa      	movs	r0, #250	; 0xfa
 8011058:	f000 f8cc 	bl	80111f4 <sys_timeout>
  }
}
 801105c:	bf00      	nop
 801105e:	bd80      	pop	{r7, pc}
 8011060:	2000e4f4 	.word	0x2000e4f4
 8011064:	2000e4a8 	.word	0x2000e4a8
 8011068:	2000e4ac 	.word	0x2000e4ac
 801106c:	08010fe9 	.word	0x08010fe9

08011070 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b086      	sub	sp, #24
 8011074:	af00      	add	r7, sp, #0
 8011076:	60f8      	str	r0, [r7, #12]
 8011078:	60b9      	str	r1, [r7, #8]
 801107a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801107c:	2005      	movs	r0, #5
 801107e:	f7f8 fe83 	bl	8009d88 <memp_malloc>
 8011082:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d109      	bne.n	801109e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d151      	bne.n	8011134 <sys_timeout_abs+0xc4>
 8011090:	4b2a      	ldr	r3, [pc, #168]	; (801113c <sys_timeout_abs+0xcc>)
 8011092:	22be      	movs	r2, #190	; 0xbe
 8011094:	492a      	ldr	r1, [pc, #168]	; (8011140 <sys_timeout_abs+0xd0>)
 8011096:	482b      	ldr	r0, [pc, #172]	; (8011144 <sys_timeout_abs+0xd4>)
 8011098:	f004 fbae 	bl	80157f8 <iprintf>
    return;
 801109c:	e04a      	b.n	8011134 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	2200      	movs	r2, #0
 80110a2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	68ba      	ldr	r2, [r7, #8]
 80110a8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	687a      	ldr	r2, [r7, #4]
 80110ae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	68fa      	ldr	r2, [r7, #12]
 80110b4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80110b6:	4b24      	ldr	r3, [pc, #144]	; (8011148 <sys_timeout_abs+0xd8>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d103      	bne.n	80110c6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80110be:	4a22      	ldr	r2, [pc, #136]	; (8011148 <sys_timeout_abs+0xd8>)
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	6013      	str	r3, [r2, #0]
    return;
 80110c4:	e037      	b.n	8011136 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80110c6:	693b      	ldr	r3, [r7, #16]
 80110c8:	685a      	ldr	r2, [r3, #4]
 80110ca:	4b1f      	ldr	r3, [pc, #124]	; (8011148 <sys_timeout_abs+0xd8>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	1ad3      	subs	r3, r2, r3
 80110d2:	0fdb      	lsrs	r3, r3, #31
 80110d4:	f003 0301 	and.w	r3, r3, #1
 80110d8:	b2db      	uxtb	r3, r3
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d007      	beq.n	80110ee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80110de:	4b1a      	ldr	r3, [pc, #104]	; (8011148 <sys_timeout_abs+0xd8>)
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80110e6:	4a18      	ldr	r2, [pc, #96]	; (8011148 <sys_timeout_abs+0xd8>)
 80110e8:	693b      	ldr	r3, [r7, #16]
 80110ea:	6013      	str	r3, [r2, #0]
 80110ec:	e023      	b.n	8011136 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80110ee:	4b16      	ldr	r3, [pc, #88]	; (8011148 <sys_timeout_abs+0xd8>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	617b      	str	r3, [r7, #20]
 80110f4:	e01a      	b.n	801112c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d00b      	beq.n	8011116 <sys_timeout_abs+0xa6>
 80110fe:	693b      	ldr	r3, [r7, #16]
 8011100:	685a      	ldr	r2, [r3, #4]
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	685b      	ldr	r3, [r3, #4]
 8011108:	1ad3      	subs	r3, r2, r3
 801110a:	0fdb      	lsrs	r3, r3, #31
 801110c:	f003 0301 	and.w	r3, r3, #1
 8011110:	b2db      	uxtb	r3, r3
 8011112:	2b00      	cmp	r3, #0
 8011114:	d007      	beq.n	8011126 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	693a      	ldr	r2, [r7, #16]
 8011122:	601a      	str	r2, [r3, #0]
        break;
 8011124:	e007      	b.n	8011136 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	617b      	str	r3, [r7, #20]
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d1e1      	bne.n	80110f6 <sys_timeout_abs+0x86>
 8011132:	e000      	b.n	8011136 <sys_timeout_abs+0xc6>
    return;
 8011134:	bf00      	nop
      }
    }
  }
}
 8011136:	3718      	adds	r7, #24
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}
 801113c:	08018b38 	.word	0x08018b38
 8011140:	08018b6c 	.word	0x08018b6c
 8011144:	08018bac 	.word	0x08018bac
 8011148:	2000e4ec 	.word	0x2000e4ec

0801114c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b086      	sub	sp, #24
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	4798      	blx	r3

  now = sys_now();
 801115e:	f7f7 ffa5 	bl	80090ac <sys_now>
 8011162:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	681a      	ldr	r2, [r3, #0]
 8011168:	4b0f      	ldr	r3, [pc, #60]	; (80111a8 <lwip_cyclic_timer+0x5c>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	4413      	add	r3, r2
 801116e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011170:	68fa      	ldr	r2, [r7, #12]
 8011172:	693b      	ldr	r3, [r7, #16]
 8011174:	1ad3      	subs	r3, r2, r3
 8011176:	0fdb      	lsrs	r3, r3, #31
 8011178:	f003 0301 	and.w	r3, r3, #1
 801117c:	b2db      	uxtb	r3, r3
 801117e:	2b00      	cmp	r3, #0
 8011180:	d009      	beq.n	8011196 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011182:	697b      	ldr	r3, [r7, #20]
 8011184:	681a      	ldr	r2, [r3, #0]
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	4413      	add	r3, r2
 801118a:	687a      	ldr	r2, [r7, #4]
 801118c:	4907      	ldr	r1, [pc, #28]	; (80111ac <lwip_cyclic_timer+0x60>)
 801118e:	4618      	mov	r0, r3
 8011190:	f7ff ff6e 	bl	8011070 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011194:	e004      	b.n	80111a0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	4904      	ldr	r1, [pc, #16]	; (80111ac <lwip_cyclic_timer+0x60>)
 801119a:	68f8      	ldr	r0, [r7, #12]
 801119c:	f7ff ff68 	bl	8011070 <sys_timeout_abs>
}
 80111a0:	bf00      	nop
 80111a2:	3718      	adds	r7, #24
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}
 80111a8:	2000e4f0 	.word	0x2000e4f0
 80111ac:	0801114d 	.word	0x0801114d

080111b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b082      	sub	sp, #8
 80111b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80111b6:	2301      	movs	r3, #1
 80111b8:	607b      	str	r3, [r7, #4]
 80111ba:	e00e      	b.n	80111da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80111bc:	4a0b      	ldr	r2, [pc, #44]	; (80111ec <sys_timeouts_init+0x3c>)
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	00db      	lsls	r3, r3, #3
 80111c8:	4a08      	ldr	r2, [pc, #32]	; (80111ec <sys_timeouts_init+0x3c>)
 80111ca:	4413      	add	r3, r2
 80111cc:	461a      	mov	r2, r3
 80111ce:	4908      	ldr	r1, [pc, #32]	; (80111f0 <sys_timeouts_init+0x40>)
 80111d0:	f000 f810 	bl	80111f4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	3301      	adds	r3, #1
 80111d8:	607b      	str	r3, [r7, #4]
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2b02      	cmp	r3, #2
 80111de:	d9ed      	bls.n	80111bc <sys_timeouts_init+0xc>
  }
}
 80111e0:	bf00      	nop
 80111e2:	bf00      	nop
 80111e4:	3708      	adds	r7, #8
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}
 80111ea:	bf00      	nop
 80111ec:	080197d8 	.word	0x080197d8
 80111f0:	0801114d 	.word	0x0801114d

080111f4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b086      	sub	sp, #24
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	60f8      	str	r0, [r7, #12]
 80111fc:	60b9      	str	r1, [r7, #8]
 80111fe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011206:	d306      	bcc.n	8011216 <sys_timeout+0x22>
 8011208:	4b0a      	ldr	r3, [pc, #40]	; (8011234 <sys_timeout+0x40>)
 801120a:	f240 1229 	movw	r2, #297	; 0x129
 801120e:	490a      	ldr	r1, [pc, #40]	; (8011238 <sys_timeout+0x44>)
 8011210:	480a      	ldr	r0, [pc, #40]	; (801123c <sys_timeout+0x48>)
 8011212:	f004 faf1 	bl	80157f8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011216:	f7f7 ff49 	bl	80090ac <sys_now>
 801121a:	4602      	mov	r2, r0
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	4413      	add	r3, r2
 8011220:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011222:	687a      	ldr	r2, [r7, #4]
 8011224:	68b9      	ldr	r1, [r7, #8]
 8011226:	6978      	ldr	r0, [r7, #20]
 8011228:	f7ff ff22 	bl	8011070 <sys_timeout_abs>
#endif
}
 801122c:	bf00      	nop
 801122e:	3718      	adds	r7, #24
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}
 8011234:	08018b38 	.word	0x08018b38
 8011238:	08018bd4 	.word	0x08018bd4
 801123c:	08018bac 	.word	0x08018bac

08011240 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b084      	sub	sp, #16
 8011244:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011246:	f7f7 ff31 	bl	80090ac <sys_now>
 801124a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 801124c:	4b1a      	ldr	r3, [pc, #104]	; (80112b8 <sys_check_timeouts+0x78>)
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	b2db      	uxtb	r3, r3
 8011252:	2b00      	cmp	r3, #0
 8011254:	d001      	beq.n	801125a <sys_check_timeouts+0x1a>
 8011256:	f7f9 f93f 	bl	800a4d8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801125a:	4b18      	ldr	r3, [pc, #96]	; (80112bc <sys_check_timeouts+0x7c>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d022      	beq.n	80112ac <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	685b      	ldr	r3, [r3, #4]
 801126a:	68fa      	ldr	r2, [r7, #12]
 801126c:	1ad3      	subs	r3, r2, r3
 801126e:	0fdb      	lsrs	r3, r3, #31
 8011270:	f003 0301 	and.w	r3, r3, #1
 8011274:	b2db      	uxtb	r3, r3
 8011276:	2b00      	cmp	r3, #0
 8011278:	d11a      	bne.n	80112b0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	4a0f      	ldr	r2, [pc, #60]	; (80112bc <sys_check_timeouts+0x7c>)
 8011280:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	689b      	ldr	r3, [r3, #8]
 8011286:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	68db      	ldr	r3, [r3, #12]
 801128c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	4a0b      	ldr	r2, [pc, #44]	; (80112c0 <sys_check_timeouts+0x80>)
 8011294:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011296:	68b9      	ldr	r1, [r7, #8]
 8011298:	2005      	movs	r0, #5
 801129a:	f7f8 fde5 	bl	8009e68 <memp_free>
    if (handler != NULL) {
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d0d3      	beq.n	801124c <sys_check_timeouts+0xc>
      handler(arg);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6838      	ldr	r0, [r7, #0]
 80112a8:	4798      	blx	r3
  do {
 80112aa:	e7cf      	b.n	801124c <sys_check_timeouts+0xc>
      return;
 80112ac:	bf00      	nop
 80112ae:	e000      	b.n	80112b2 <sys_check_timeouts+0x72>
      return;
 80112b0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80112b2:	3710      	adds	r7, #16
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	2000e499 	.word	0x2000e499
 80112bc:	2000e4ec 	.word	0x2000e4ec
 80112c0:	2000e4f0 	.word	0x2000e4f0

080112c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80112cc:	4915      	ldr	r1, [pc, #84]	; (8011324 <etharp_free_entry+0x60>)
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	4613      	mov	r3, r2
 80112d2:	005b      	lsls	r3, r3, #1
 80112d4:	4413      	add	r3, r2
 80112d6:	00db      	lsls	r3, r3, #3
 80112d8:	440b      	add	r3, r1
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d013      	beq.n	8011308 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80112e0:	4910      	ldr	r1, [pc, #64]	; (8011324 <etharp_free_entry+0x60>)
 80112e2:	687a      	ldr	r2, [r7, #4]
 80112e4:	4613      	mov	r3, r2
 80112e6:	005b      	lsls	r3, r3, #1
 80112e8:	4413      	add	r3, r2
 80112ea:	00db      	lsls	r3, r3, #3
 80112ec:	440b      	add	r3, r1
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7f9 fc2b 	bl	800ab4c <pbuf_free>
    arp_table[i].q = NULL;
 80112f6:	490b      	ldr	r1, [pc, #44]	; (8011324 <etharp_free_entry+0x60>)
 80112f8:	687a      	ldr	r2, [r7, #4]
 80112fa:	4613      	mov	r3, r2
 80112fc:	005b      	lsls	r3, r3, #1
 80112fe:	4413      	add	r3, r2
 8011300:	00db      	lsls	r3, r3, #3
 8011302:	440b      	add	r3, r1
 8011304:	2200      	movs	r2, #0
 8011306:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011308:	4906      	ldr	r1, [pc, #24]	; (8011324 <etharp_free_entry+0x60>)
 801130a:	687a      	ldr	r2, [r7, #4]
 801130c:	4613      	mov	r3, r2
 801130e:	005b      	lsls	r3, r3, #1
 8011310:	4413      	add	r3, r2
 8011312:	00db      	lsls	r3, r3, #3
 8011314:	440b      	add	r3, r1
 8011316:	3314      	adds	r3, #20
 8011318:	2200      	movs	r2, #0
 801131a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801131c:	bf00      	nop
 801131e:	3708      	adds	r7, #8
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}
 8011324:	2000e4f8 	.word	0x2000e4f8

08011328 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b082      	sub	sp, #8
 801132c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801132e:	2300      	movs	r3, #0
 8011330:	607b      	str	r3, [r7, #4]
 8011332:	e096      	b.n	8011462 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011334:	494f      	ldr	r1, [pc, #316]	; (8011474 <etharp_tmr+0x14c>)
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	4613      	mov	r3, r2
 801133a:	005b      	lsls	r3, r3, #1
 801133c:	4413      	add	r3, r2
 801133e:	00db      	lsls	r3, r3, #3
 8011340:	440b      	add	r3, r1
 8011342:	3314      	adds	r3, #20
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011348:	78fb      	ldrb	r3, [r7, #3]
 801134a:	2b00      	cmp	r3, #0
 801134c:	f000 8086 	beq.w	801145c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011350:	4948      	ldr	r1, [pc, #288]	; (8011474 <etharp_tmr+0x14c>)
 8011352:	687a      	ldr	r2, [r7, #4]
 8011354:	4613      	mov	r3, r2
 8011356:	005b      	lsls	r3, r3, #1
 8011358:	4413      	add	r3, r2
 801135a:	00db      	lsls	r3, r3, #3
 801135c:	440b      	add	r3, r1
 801135e:	3312      	adds	r3, #18
 8011360:	881b      	ldrh	r3, [r3, #0]
 8011362:	3301      	adds	r3, #1
 8011364:	b298      	uxth	r0, r3
 8011366:	4943      	ldr	r1, [pc, #268]	; (8011474 <etharp_tmr+0x14c>)
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	4613      	mov	r3, r2
 801136c:	005b      	lsls	r3, r3, #1
 801136e:	4413      	add	r3, r2
 8011370:	00db      	lsls	r3, r3, #3
 8011372:	440b      	add	r3, r1
 8011374:	3312      	adds	r3, #18
 8011376:	4602      	mov	r2, r0
 8011378:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801137a:	493e      	ldr	r1, [pc, #248]	; (8011474 <etharp_tmr+0x14c>)
 801137c:	687a      	ldr	r2, [r7, #4]
 801137e:	4613      	mov	r3, r2
 8011380:	005b      	lsls	r3, r3, #1
 8011382:	4413      	add	r3, r2
 8011384:	00db      	lsls	r3, r3, #3
 8011386:	440b      	add	r3, r1
 8011388:	3312      	adds	r3, #18
 801138a:	881b      	ldrh	r3, [r3, #0]
 801138c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011390:	d215      	bcs.n	80113be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011392:	4938      	ldr	r1, [pc, #224]	; (8011474 <etharp_tmr+0x14c>)
 8011394:	687a      	ldr	r2, [r7, #4]
 8011396:	4613      	mov	r3, r2
 8011398:	005b      	lsls	r3, r3, #1
 801139a:	4413      	add	r3, r2
 801139c:	00db      	lsls	r3, r3, #3
 801139e:	440b      	add	r3, r1
 80113a0:	3314      	adds	r3, #20
 80113a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80113a4:	2b01      	cmp	r3, #1
 80113a6:	d10e      	bne.n	80113c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80113a8:	4932      	ldr	r1, [pc, #200]	; (8011474 <etharp_tmr+0x14c>)
 80113aa:	687a      	ldr	r2, [r7, #4]
 80113ac:	4613      	mov	r3, r2
 80113ae:	005b      	lsls	r3, r3, #1
 80113b0:	4413      	add	r3, r2
 80113b2:	00db      	lsls	r3, r3, #3
 80113b4:	440b      	add	r3, r1
 80113b6:	3312      	adds	r3, #18
 80113b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80113ba:	2b04      	cmp	r3, #4
 80113bc:	d903      	bls.n	80113c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f7ff ff80 	bl	80112c4 <etharp_free_entry>
 80113c4:	e04a      	b.n	801145c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80113c6:	492b      	ldr	r1, [pc, #172]	; (8011474 <etharp_tmr+0x14c>)
 80113c8:	687a      	ldr	r2, [r7, #4]
 80113ca:	4613      	mov	r3, r2
 80113cc:	005b      	lsls	r3, r3, #1
 80113ce:	4413      	add	r3, r2
 80113d0:	00db      	lsls	r3, r3, #3
 80113d2:	440b      	add	r3, r1
 80113d4:	3314      	adds	r3, #20
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	2b03      	cmp	r3, #3
 80113da:	d10a      	bne.n	80113f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80113dc:	4925      	ldr	r1, [pc, #148]	; (8011474 <etharp_tmr+0x14c>)
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	4613      	mov	r3, r2
 80113e2:	005b      	lsls	r3, r3, #1
 80113e4:	4413      	add	r3, r2
 80113e6:	00db      	lsls	r3, r3, #3
 80113e8:	440b      	add	r3, r1
 80113ea:	3314      	adds	r3, #20
 80113ec:	2204      	movs	r2, #4
 80113ee:	701a      	strb	r2, [r3, #0]
 80113f0:	e034      	b.n	801145c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80113f2:	4920      	ldr	r1, [pc, #128]	; (8011474 <etharp_tmr+0x14c>)
 80113f4:	687a      	ldr	r2, [r7, #4]
 80113f6:	4613      	mov	r3, r2
 80113f8:	005b      	lsls	r3, r3, #1
 80113fa:	4413      	add	r3, r2
 80113fc:	00db      	lsls	r3, r3, #3
 80113fe:	440b      	add	r3, r1
 8011400:	3314      	adds	r3, #20
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	2b04      	cmp	r3, #4
 8011406:	d10a      	bne.n	801141e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011408:	491a      	ldr	r1, [pc, #104]	; (8011474 <etharp_tmr+0x14c>)
 801140a:	687a      	ldr	r2, [r7, #4]
 801140c:	4613      	mov	r3, r2
 801140e:	005b      	lsls	r3, r3, #1
 8011410:	4413      	add	r3, r2
 8011412:	00db      	lsls	r3, r3, #3
 8011414:	440b      	add	r3, r1
 8011416:	3314      	adds	r3, #20
 8011418:	2202      	movs	r2, #2
 801141a:	701a      	strb	r2, [r3, #0]
 801141c:	e01e      	b.n	801145c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801141e:	4915      	ldr	r1, [pc, #84]	; (8011474 <etharp_tmr+0x14c>)
 8011420:	687a      	ldr	r2, [r7, #4]
 8011422:	4613      	mov	r3, r2
 8011424:	005b      	lsls	r3, r3, #1
 8011426:	4413      	add	r3, r2
 8011428:	00db      	lsls	r3, r3, #3
 801142a:	440b      	add	r3, r1
 801142c:	3314      	adds	r3, #20
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	2b01      	cmp	r3, #1
 8011432:	d113      	bne.n	801145c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011434:	490f      	ldr	r1, [pc, #60]	; (8011474 <etharp_tmr+0x14c>)
 8011436:	687a      	ldr	r2, [r7, #4]
 8011438:	4613      	mov	r3, r2
 801143a:	005b      	lsls	r3, r3, #1
 801143c:	4413      	add	r3, r2
 801143e:	00db      	lsls	r3, r3, #3
 8011440:	440b      	add	r3, r1
 8011442:	3308      	adds	r3, #8
 8011444:	6818      	ldr	r0, [r3, #0]
 8011446:	687a      	ldr	r2, [r7, #4]
 8011448:	4613      	mov	r3, r2
 801144a:	005b      	lsls	r3, r3, #1
 801144c:	4413      	add	r3, r2
 801144e:	00db      	lsls	r3, r3, #3
 8011450:	4a08      	ldr	r2, [pc, #32]	; (8011474 <etharp_tmr+0x14c>)
 8011452:	4413      	add	r3, r2
 8011454:	3304      	adds	r3, #4
 8011456:	4619      	mov	r1, r3
 8011458:	f000 fe6e 	bl	8012138 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	3301      	adds	r3, #1
 8011460:	607b      	str	r3, [r7, #4]
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2b09      	cmp	r3, #9
 8011466:	f77f af65 	ble.w	8011334 <etharp_tmr+0xc>
      }
    }
  }
}
 801146a:	bf00      	nop
 801146c:	bf00      	nop
 801146e:	3708      	adds	r7, #8
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}
 8011474:	2000e4f8 	.word	0x2000e4f8

08011478 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b08a      	sub	sp, #40	; 0x28
 801147c:	af00      	add	r7, sp, #0
 801147e:	60f8      	str	r0, [r7, #12]
 8011480:	460b      	mov	r3, r1
 8011482:	607a      	str	r2, [r7, #4]
 8011484:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011486:	230a      	movs	r3, #10
 8011488:	84fb      	strh	r3, [r7, #38]	; 0x26
 801148a:	230a      	movs	r3, #10
 801148c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801148e:	230a      	movs	r3, #10
 8011490:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011492:	2300      	movs	r3, #0
 8011494:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011496:	230a      	movs	r3, #10
 8011498:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801149a:	2300      	movs	r3, #0
 801149c:	83bb      	strh	r3, [r7, #28]
 801149e:	2300      	movs	r3, #0
 80114a0:	837b      	strh	r3, [r7, #26]
 80114a2:	2300      	movs	r3, #0
 80114a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80114a6:	2300      	movs	r3, #0
 80114a8:	843b      	strh	r3, [r7, #32]
 80114aa:	e0ae      	b.n	801160a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80114ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80114b0:	49a6      	ldr	r1, [pc, #664]	; (801174c <etharp_find_entry+0x2d4>)
 80114b2:	4613      	mov	r3, r2
 80114b4:	005b      	lsls	r3, r3, #1
 80114b6:	4413      	add	r3, r2
 80114b8:	00db      	lsls	r3, r3, #3
 80114ba:	440b      	add	r3, r1
 80114bc:	3314      	adds	r3, #20
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80114c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80114c6:	2b0a      	cmp	r3, #10
 80114c8:	d105      	bne.n	80114d6 <etharp_find_entry+0x5e>
 80114ca:	7dfb      	ldrb	r3, [r7, #23]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d102      	bne.n	80114d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80114d0:	8c3b      	ldrh	r3, [r7, #32]
 80114d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80114d4:	e095      	b.n	8011602 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80114d6:	7dfb      	ldrb	r3, [r7, #23]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	f000 8092 	beq.w	8011602 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80114de:	7dfb      	ldrb	r3, [r7, #23]
 80114e0:	2b01      	cmp	r3, #1
 80114e2:	d009      	beq.n	80114f8 <etharp_find_entry+0x80>
 80114e4:	7dfb      	ldrb	r3, [r7, #23]
 80114e6:	2b01      	cmp	r3, #1
 80114e8:	d806      	bhi.n	80114f8 <etharp_find_entry+0x80>
 80114ea:	4b99      	ldr	r3, [pc, #612]	; (8011750 <etharp_find_entry+0x2d8>)
 80114ec:	f240 1223 	movw	r2, #291	; 0x123
 80114f0:	4998      	ldr	r1, [pc, #608]	; (8011754 <etharp_find_entry+0x2dc>)
 80114f2:	4899      	ldr	r0, [pc, #612]	; (8011758 <etharp_find_entry+0x2e0>)
 80114f4:	f004 f980 	bl	80157f8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d020      	beq.n	8011540 <etharp_find_entry+0xc8>
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	6819      	ldr	r1, [r3, #0]
 8011502:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011506:	4891      	ldr	r0, [pc, #580]	; (801174c <etharp_find_entry+0x2d4>)
 8011508:	4613      	mov	r3, r2
 801150a:	005b      	lsls	r3, r3, #1
 801150c:	4413      	add	r3, r2
 801150e:	00db      	lsls	r3, r3, #3
 8011510:	4403      	add	r3, r0
 8011512:	3304      	adds	r3, #4
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	4299      	cmp	r1, r3
 8011518:	d112      	bne.n	8011540 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d00c      	beq.n	801153a <etharp_find_entry+0xc2>
 8011520:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011524:	4989      	ldr	r1, [pc, #548]	; (801174c <etharp_find_entry+0x2d4>)
 8011526:	4613      	mov	r3, r2
 8011528:	005b      	lsls	r3, r3, #1
 801152a:	4413      	add	r3, r2
 801152c:	00db      	lsls	r3, r3, #3
 801152e:	440b      	add	r3, r1
 8011530:	3308      	adds	r3, #8
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	687a      	ldr	r2, [r7, #4]
 8011536:	429a      	cmp	r2, r3
 8011538:	d102      	bne.n	8011540 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801153a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801153e:	e100      	b.n	8011742 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011540:	7dfb      	ldrb	r3, [r7, #23]
 8011542:	2b01      	cmp	r3, #1
 8011544:	d140      	bne.n	80115c8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011546:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801154a:	4980      	ldr	r1, [pc, #512]	; (801174c <etharp_find_entry+0x2d4>)
 801154c:	4613      	mov	r3, r2
 801154e:	005b      	lsls	r3, r3, #1
 8011550:	4413      	add	r3, r2
 8011552:	00db      	lsls	r3, r3, #3
 8011554:	440b      	add	r3, r1
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d01a      	beq.n	8011592 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801155c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011560:	497a      	ldr	r1, [pc, #488]	; (801174c <etharp_find_entry+0x2d4>)
 8011562:	4613      	mov	r3, r2
 8011564:	005b      	lsls	r3, r3, #1
 8011566:	4413      	add	r3, r2
 8011568:	00db      	lsls	r3, r3, #3
 801156a:	440b      	add	r3, r1
 801156c:	3312      	adds	r3, #18
 801156e:	881b      	ldrh	r3, [r3, #0]
 8011570:	8bba      	ldrh	r2, [r7, #28]
 8011572:	429a      	cmp	r2, r3
 8011574:	d845      	bhi.n	8011602 <etharp_find_entry+0x18a>
            old_queue = i;
 8011576:	8c3b      	ldrh	r3, [r7, #32]
 8011578:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801157a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801157e:	4973      	ldr	r1, [pc, #460]	; (801174c <etharp_find_entry+0x2d4>)
 8011580:	4613      	mov	r3, r2
 8011582:	005b      	lsls	r3, r3, #1
 8011584:	4413      	add	r3, r2
 8011586:	00db      	lsls	r3, r3, #3
 8011588:	440b      	add	r3, r1
 801158a:	3312      	adds	r3, #18
 801158c:	881b      	ldrh	r3, [r3, #0]
 801158e:	83bb      	strh	r3, [r7, #28]
 8011590:	e037      	b.n	8011602 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011592:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011596:	496d      	ldr	r1, [pc, #436]	; (801174c <etharp_find_entry+0x2d4>)
 8011598:	4613      	mov	r3, r2
 801159a:	005b      	lsls	r3, r3, #1
 801159c:	4413      	add	r3, r2
 801159e:	00db      	lsls	r3, r3, #3
 80115a0:	440b      	add	r3, r1
 80115a2:	3312      	adds	r3, #18
 80115a4:	881b      	ldrh	r3, [r3, #0]
 80115a6:	8b7a      	ldrh	r2, [r7, #26]
 80115a8:	429a      	cmp	r2, r3
 80115aa:	d82a      	bhi.n	8011602 <etharp_find_entry+0x18a>
            old_pending = i;
 80115ac:	8c3b      	ldrh	r3, [r7, #32]
 80115ae:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80115b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80115b4:	4965      	ldr	r1, [pc, #404]	; (801174c <etharp_find_entry+0x2d4>)
 80115b6:	4613      	mov	r3, r2
 80115b8:	005b      	lsls	r3, r3, #1
 80115ba:	4413      	add	r3, r2
 80115bc:	00db      	lsls	r3, r3, #3
 80115be:	440b      	add	r3, r1
 80115c0:	3312      	adds	r3, #18
 80115c2:	881b      	ldrh	r3, [r3, #0]
 80115c4:	837b      	strh	r3, [r7, #26]
 80115c6:	e01c      	b.n	8011602 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80115c8:	7dfb      	ldrb	r3, [r7, #23]
 80115ca:	2b01      	cmp	r3, #1
 80115cc:	d919      	bls.n	8011602 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80115ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80115d2:	495e      	ldr	r1, [pc, #376]	; (801174c <etharp_find_entry+0x2d4>)
 80115d4:	4613      	mov	r3, r2
 80115d6:	005b      	lsls	r3, r3, #1
 80115d8:	4413      	add	r3, r2
 80115da:	00db      	lsls	r3, r3, #3
 80115dc:	440b      	add	r3, r1
 80115de:	3312      	adds	r3, #18
 80115e0:	881b      	ldrh	r3, [r3, #0]
 80115e2:	8b3a      	ldrh	r2, [r7, #24]
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d80c      	bhi.n	8011602 <etharp_find_entry+0x18a>
            old_stable = i;
 80115e8:	8c3b      	ldrh	r3, [r7, #32]
 80115ea:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80115ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80115f0:	4956      	ldr	r1, [pc, #344]	; (801174c <etharp_find_entry+0x2d4>)
 80115f2:	4613      	mov	r3, r2
 80115f4:	005b      	lsls	r3, r3, #1
 80115f6:	4413      	add	r3, r2
 80115f8:	00db      	lsls	r3, r3, #3
 80115fa:	440b      	add	r3, r1
 80115fc:	3312      	adds	r3, #18
 80115fe:	881b      	ldrh	r3, [r3, #0]
 8011600:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011602:	8c3b      	ldrh	r3, [r7, #32]
 8011604:	3301      	adds	r3, #1
 8011606:	b29b      	uxth	r3, r3
 8011608:	843b      	strh	r3, [r7, #32]
 801160a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801160e:	2b09      	cmp	r3, #9
 8011610:	f77f af4c 	ble.w	80114ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011614:	7afb      	ldrb	r3, [r7, #11]
 8011616:	f003 0302 	and.w	r3, r3, #2
 801161a:	2b00      	cmp	r3, #0
 801161c:	d108      	bne.n	8011630 <etharp_find_entry+0x1b8>
 801161e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011622:	2b0a      	cmp	r3, #10
 8011624:	d107      	bne.n	8011636 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011626:	7afb      	ldrb	r3, [r7, #11]
 8011628:	f003 0301 	and.w	r3, r3, #1
 801162c:	2b00      	cmp	r3, #0
 801162e:	d102      	bne.n	8011636 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011630:	f04f 33ff 	mov.w	r3, #4294967295
 8011634:	e085      	b.n	8011742 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011636:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801163a:	2b09      	cmp	r3, #9
 801163c:	dc02      	bgt.n	8011644 <etharp_find_entry+0x1cc>
    i = empty;
 801163e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011640:	843b      	strh	r3, [r7, #32]
 8011642:	e039      	b.n	80116b8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011644:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011648:	2b09      	cmp	r3, #9
 801164a:	dc14      	bgt.n	8011676 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801164c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801164e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011650:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011654:	493d      	ldr	r1, [pc, #244]	; (801174c <etharp_find_entry+0x2d4>)
 8011656:	4613      	mov	r3, r2
 8011658:	005b      	lsls	r3, r3, #1
 801165a:	4413      	add	r3, r2
 801165c:	00db      	lsls	r3, r3, #3
 801165e:	440b      	add	r3, r1
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d018      	beq.n	8011698 <etharp_find_entry+0x220>
 8011666:	4b3a      	ldr	r3, [pc, #232]	; (8011750 <etharp_find_entry+0x2d8>)
 8011668:	f240 126d 	movw	r2, #365	; 0x16d
 801166c:	493b      	ldr	r1, [pc, #236]	; (801175c <etharp_find_entry+0x2e4>)
 801166e:	483a      	ldr	r0, [pc, #232]	; (8011758 <etharp_find_entry+0x2e0>)
 8011670:	f004 f8c2 	bl	80157f8 <iprintf>
 8011674:	e010      	b.n	8011698 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011676:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801167a:	2b09      	cmp	r3, #9
 801167c:	dc02      	bgt.n	8011684 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801167e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011680:	843b      	strh	r3, [r7, #32]
 8011682:	e009      	b.n	8011698 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011684:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011688:	2b09      	cmp	r3, #9
 801168a:	dc02      	bgt.n	8011692 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801168c:	8bfb      	ldrh	r3, [r7, #30]
 801168e:	843b      	strh	r3, [r7, #32]
 8011690:	e002      	b.n	8011698 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011692:	f04f 33ff 	mov.w	r3, #4294967295
 8011696:	e054      	b.n	8011742 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011698:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801169c:	2b09      	cmp	r3, #9
 801169e:	dd06      	ble.n	80116ae <etharp_find_entry+0x236>
 80116a0:	4b2b      	ldr	r3, [pc, #172]	; (8011750 <etharp_find_entry+0x2d8>)
 80116a2:	f240 127f 	movw	r2, #383	; 0x17f
 80116a6:	492e      	ldr	r1, [pc, #184]	; (8011760 <etharp_find_entry+0x2e8>)
 80116a8:	482b      	ldr	r0, [pc, #172]	; (8011758 <etharp_find_entry+0x2e0>)
 80116aa:	f004 f8a5 	bl	80157f8 <iprintf>
    etharp_free_entry(i);
 80116ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7ff fe06 	bl	80112c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80116b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80116bc:	2b09      	cmp	r3, #9
 80116be:	dd06      	ble.n	80116ce <etharp_find_entry+0x256>
 80116c0:	4b23      	ldr	r3, [pc, #140]	; (8011750 <etharp_find_entry+0x2d8>)
 80116c2:	f240 1283 	movw	r2, #387	; 0x183
 80116c6:	4926      	ldr	r1, [pc, #152]	; (8011760 <etharp_find_entry+0x2e8>)
 80116c8:	4823      	ldr	r0, [pc, #140]	; (8011758 <etharp_find_entry+0x2e0>)
 80116ca:	f004 f895 	bl	80157f8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80116ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80116d2:	491e      	ldr	r1, [pc, #120]	; (801174c <etharp_find_entry+0x2d4>)
 80116d4:	4613      	mov	r3, r2
 80116d6:	005b      	lsls	r3, r3, #1
 80116d8:	4413      	add	r3, r2
 80116da:	00db      	lsls	r3, r3, #3
 80116dc:	440b      	add	r3, r1
 80116de:	3314      	adds	r3, #20
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d006      	beq.n	80116f4 <etharp_find_entry+0x27c>
 80116e6:	4b1a      	ldr	r3, [pc, #104]	; (8011750 <etharp_find_entry+0x2d8>)
 80116e8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80116ec:	491d      	ldr	r1, [pc, #116]	; (8011764 <etharp_find_entry+0x2ec>)
 80116ee:	481a      	ldr	r0, [pc, #104]	; (8011758 <etharp_find_entry+0x2e0>)
 80116f0:	f004 f882 	bl	80157f8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d00b      	beq.n	8011712 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80116fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	6819      	ldr	r1, [r3, #0]
 8011702:	4812      	ldr	r0, [pc, #72]	; (801174c <etharp_find_entry+0x2d4>)
 8011704:	4613      	mov	r3, r2
 8011706:	005b      	lsls	r3, r3, #1
 8011708:	4413      	add	r3, r2
 801170a:	00db      	lsls	r3, r3, #3
 801170c:	4403      	add	r3, r0
 801170e:	3304      	adds	r3, #4
 8011710:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011712:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011716:	490d      	ldr	r1, [pc, #52]	; (801174c <etharp_find_entry+0x2d4>)
 8011718:	4613      	mov	r3, r2
 801171a:	005b      	lsls	r3, r3, #1
 801171c:	4413      	add	r3, r2
 801171e:	00db      	lsls	r3, r3, #3
 8011720:	440b      	add	r3, r1
 8011722:	3312      	adds	r3, #18
 8011724:	2200      	movs	r2, #0
 8011726:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011728:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801172c:	4907      	ldr	r1, [pc, #28]	; (801174c <etharp_find_entry+0x2d4>)
 801172e:	4613      	mov	r3, r2
 8011730:	005b      	lsls	r3, r3, #1
 8011732:	4413      	add	r3, r2
 8011734:	00db      	lsls	r3, r3, #3
 8011736:	440b      	add	r3, r1
 8011738:	3308      	adds	r3, #8
 801173a:	687a      	ldr	r2, [r7, #4]
 801173c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801173e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011742:	4618      	mov	r0, r3
 8011744:	3728      	adds	r7, #40	; 0x28
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
 801174a:	bf00      	nop
 801174c:	2000e4f8 	.word	0x2000e4f8
 8011750:	08018c20 	.word	0x08018c20
 8011754:	08018c58 	.word	0x08018c58
 8011758:	08018c98 	.word	0x08018c98
 801175c:	08018cc0 	.word	0x08018cc0
 8011760:	08018cd8 	.word	0x08018cd8
 8011764:	08018cec 	.word	0x08018cec

08011768 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b088      	sub	sp, #32
 801176c:	af02      	add	r7, sp, #8
 801176e:	60f8      	str	r0, [r7, #12]
 8011770:	60b9      	str	r1, [r7, #8]
 8011772:	607a      	str	r2, [r7, #4]
 8011774:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801177c:	2b06      	cmp	r3, #6
 801177e:	d006      	beq.n	801178e <etharp_update_arp_entry+0x26>
 8011780:	4b48      	ldr	r3, [pc, #288]	; (80118a4 <etharp_update_arp_entry+0x13c>)
 8011782:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011786:	4948      	ldr	r1, [pc, #288]	; (80118a8 <etharp_update_arp_entry+0x140>)
 8011788:	4848      	ldr	r0, [pc, #288]	; (80118ac <etharp_update_arp_entry+0x144>)
 801178a:	f004 f835 	bl	80157f8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d012      	beq.n	80117ba <etharp_update_arp_entry+0x52>
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d00e      	beq.n	80117ba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	68f9      	ldr	r1, [r7, #12]
 80117a2:	4618      	mov	r0, r3
 80117a4:	f001 f8f4 	bl	8012990 <ip4_addr_isbroadcast_u32>
 80117a8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d105      	bne.n	80117ba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80117b6:	2be0      	cmp	r3, #224	; 0xe0
 80117b8:	d102      	bne.n	80117c0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80117ba:	f06f 030f 	mvn.w	r3, #15
 80117be:	e06c      	b.n	801189a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80117c0:	78fb      	ldrb	r3, [r7, #3]
 80117c2:	68fa      	ldr	r2, [r7, #12]
 80117c4:	4619      	mov	r1, r3
 80117c6:	68b8      	ldr	r0, [r7, #8]
 80117c8:	f7ff fe56 	bl	8011478 <etharp_find_entry>
 80117cc:	4603      	mov	r3, r0
 80117ce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80117d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	da02      	bge.n	80117de <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80117d8:	8afb      	ldrh	r3, [r7, #22]
 80117da:	b25b      	sxtb	r3, r3
 80117dc:	e05d      	b.n	801189a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80117de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80117e2:	4933      	ldr	r1, [pc, #204]	; (80118b0 <etharp_update_arp_entry+0x148>)
 80117e4:	4613      	mov	r3, r2
 80117e6:	005b      	lsls	r3, r3, #1
 80117e8:	4413      	add	r3, r2
 80117ea:	00db      	lsls	r3, r3, #3
 80117ec:	440b      	add	r3, r1
 80117ee:	3314      	adds	r3, #20
 80117f0:	2202      	movs	r2, #2
 80117f2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80117f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80117f8:	492d      	ldr	r1, [pc, #180]	; (80118b0 <etharp_update_arp_entry+0x148>)
 80117fa:	4613      	mov	r3, r2
 80117fc:	005b      	lsls	r3, r3, #1
 80117fe:	4413      	add	r3, r2
 8011800:	00db      	lsls	r3, r3, #3
 8011802:	440b      	add	r3, r1
 8011804:	3308      	adds	r3, #8
 8011806:	68fa      	ldr	r2, [r7, #12]
 8011808:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801180a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801180e:	4613      	mov	r3, r2
 8011810:	005b      	lsls	r3, r3, #1
 8011812:	4413      	add	r3, r2
 8011814:	00db      	lsls	r3, r3, #3
 8011816:	3308      	adds	r3, #8
 8011818:	4a25      	ldr	r2, [pc, #148]	; (80118b0 <etharp_update_arp_entry+0x148>)
 801181a:	4413      	add	r3, r2
 801181c:	3304      	adds	r3, #4
 801181e:	2206      	movs	r2, #6
 8011820:	6879      	ldr	r1, [r7, #4]
 8011822:	4618      	mov	r0, r3
 8011824:	f004 f91b 	bl	8015a5e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011828:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801182c:	4920      	ldr	r1, [pc, #128]	; (80118b0 <etharp_update_arp_entry+0x148>)
 801182e:	4613      	mov	r3, r2
 8011830:	005b      	lsls	r3, r3, #1
 8011832:	4413      	add	r3, r2
 8011834:	00db      	lsls	r3, r3, #3
 8011836:	440b      	add	r3, r1
 8011838:	3312      	adds	r3, #18
 801183a:	2200      	movs	r2, #0
 801183c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801183e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011842:	491b      	ldr	r1, [pc, #108]	; (80118b0 <etharp_update_arp_entry+0x148>)
 8011844:	4613      	mov	r3, r2
 8011846:	005b      	lsls	r3, r3, #1
 8011848:	4413      	add	r3, r2
 801184a:	00db      	lsls	r3, r3, #3
 801184c:	440b      	add	r3, r1
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d021      	beq.n	8011898 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011854:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011858:	4915      	ldr	r1, [pc, #84]	; (80118b0 <etharp_update_arp_entry+0x148>)
 801185a:	4613      	mov	r3, r2
 801185c:	005b      	lsls	r3, r3, #1
 801185e:	4413      	add	r3, r2
 8011860:	00db      	lsls	r3, r3, #3
 8011862:	440b      	add	r3, r1
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011868:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801186c:	4910      	ldr	r1, [pc, #64]	; (80118b0 <etharp_update_arp_entry+0x148>)
 801186e:	4613      	mov	r3, r2
 8011870:	005b      	lsls	r3, r3, #1
 8011872:	4413      	add	r3, r2
 8011874:	00db      	lsls	r3, r3, #3
 8011876:	440b      	add	r3, r1
 8011878:	2200      	movs	r2, #0
 801187a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011882:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011886:	9300      	str	r3, [sp, #0]
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6939      	ldr	r1, [r7, #16]
 801188c:	68f8      	ldr	r0, [r7, #12]
 801188e:	f001 ff8d 	bl	80137ac <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011892:	6938      	ldr	r0, [r7, #16]
 8011894:	f7f9 f95a 	bl	800ab4c <pbuf_free>
  }
  return ERR_OK;
 8011898:	2300      	movs	r3, #0
}
 801189a:	4618      	mov	r0, r3
 801189c:	3718      	adds	r7, #24
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	08018c20 	.word	0x08018c20
 80118a8:	08018d18 	.word	0x08018d18
 80118ac:	08018c98 	.word	0x08018c98
 80118b0:	2000e4f8 	.word	0x2000e4f8

080118b4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b084      	sub	sp, #16
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80118bc:	2300      	movs	r3, #0
 80118be:	60fb      	str	r3, [r7, #12]
 80118c0:	e01e      	b.n	8011900 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80118c2:	4913      	ldr	r1, [pc, #76]	; (8011910 <etharp_cleanup_netif+0x5c>)
 80118c4:	68fa      	ldr	r2, [r7, #12]
 80118c6:	4613      	mov	r3, r2
 80118c8:	005b      	lsls	r3, r3, #1
 80118ca:	4413      	add	r3, r2
 80118cc:	00db      	lsls	r3, r3, #3
 80118ce:	440b      	add	r3, r1
 80118d0:	3314      	adds	r3, #20
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80118d6:	7afb      	ldrb	r3, [r7, #11]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d00e      	beq.n	80118fa <etharp_cleanup_netif+0x46>
 80118dc:	490c      	ldr	r1, [pc, #48]	; (8011910 <etharp_cleanup_netif+0x5c>)
 80118de:	68fa      	ldr	r2, [r7, #12]
 80118e0:	4613      	mov	r3, r2
 80118e2:	005b      	lsls	r3, r3, #1
 80118e4:	4413      	add	r3, r2
 80118e6:	00db      	lsls	r3, r3, #3
 80118e8:	440b      	add	r3, r1
 80118ea:	3308      	adds	r3, #8
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d102      	bne.n	80118fa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80118f4:	68f8      	ldr	r0, [r7, #12]
 80118f6:	f7ff fce5 	bl	80112c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	3301      	adds	r3, #1
 80118fe:	60fb      	str	r3, [r7, #12]
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	2b09      	cmp	r3, #9
 8011904:	dddd      	ble.n	80118c2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011906:	bf00      	nop
 8011908:	bf00      	nop
 801190a:	3710      	adds	r7, #16
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}
 8011910:	2000e4f8 	.word	0x2000e4f8

08011914 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011914:	b5b0      	push	{r4, r5, r7, lr}
 8011916:	b08a      	sub	sp, #40	; 0x28
 8011918:	af04      	add	r7, sp, #16
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d107      	bne.n	8011934 <etharp_input+0x20>
 8011924:	4b3d      	ldr	r3, [pc, #244]	; (8011a1c <etharp_input+0x108>)
 8011926:	f240 228a 	movw	r2, #650	; 0x28a
 801192a:	493d      	ldr	r1, [pc, #244]	; (8011a20 <etharp_input+0x10c>)
 801192c:	483d      	ldr	r0, [pc, #244]	; (8011a24 <etharp_input+0x110>)
 801192e:	f003 ff63 	bl	80157f8 <iprintf>
 8011932:	e06f      	b.n	8011a14 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	881b      	ldrh	r3, [r3, #0]
 801193e:	b29b      	uxth	r3, r3
 8011940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011944:	d10c      	bne.n	8011960 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801194a:	2b06      	cmp	r3, #6
 801194c:	d108      	bne.n	8011960 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011952:	2b04      	cmp	r3, #4
 8011954:	d104      	bne.n	8011960 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011956:	693b      	ldr	r3, [r7, #16]
 8011958:	885b      	ldrh	r3, [r3, #2]
 801195a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801195c:	2b08      	cmp	r3, #8
 801195e:	d003      	beq.n	8011968 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f7f9 f8f3 	bl	800ab4c <pbuf_free>
    return;
 8011966:	e055      	b.n	8011a14 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011968:	693b      	ldr	r3, [r7, #16]
 801196a:	330e      	adds	r3, #14
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	3318      	adds	r3, #24
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	3304      	adds	r3, #4
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d102      	bne.n	8011988 <etharp_input+0x74>
    for_us = 0;
 8011982:	2300      	movs	r3, #0
 8011984:	75fb      	strb	r3, [r7, #23]
 8011986:	e009      	b.n	801199c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011988:	68ba      	ldr	r2, [r7, #8]
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	3304      	adds	r3, #4
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	429a      	cmp	r2, r3
 8011992:	bf0c      	ite	eq
 8011994:	2301      	moveq	r3, #1
 8011996:	2300      	movne	r3, #0
 8011998:	b2db      	uxtb	r3, r3
 801199a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	f103 0208 	add.w	r2, r3, #8
 80119a2:	7dfb      	ldrb	r3, [r7, #23]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d001      	beq.n	80119ac <etharp_input+0x98>
 80119a8:	2301      	movs	r3, #1
 80119aa:	e000      	b.n	80119ae <etharp_input+0x9a>
 80119ac:	2302      	movs	r3, #2
 80119ae:	f107 010c 	add.w	r1, r7, #12
 80119b2:	6838      	ldr	r0, [r7, #0]
 80119b4:	f7ff fed8 	bl	8011768 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	88db      	ldrh	r3, [r3, #6]
 80119bc:	b29b      	uxth	r3, r3
 80119be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119c2:	d003      	beq.n	80119cc <etharp_input+0xb8>
 80119c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119c8:	d01e      	beq.n	8011a08 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80119ca:	e020      	b.n	8011a0e <etharp_input+0xfa>
      if (for_us) {
 80119cc:	7dfb      	ldrb	r3, [r7, #23]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d01c      	beq.n	8011a0c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80119e8:	693a      	ldr	r2, [r7, #16]
 80119ea:	3208      	adds	r2, #8
        etharp_raw(netif,
 80119ec:	2102      	movs	r1, #2
 80119ee:	9103      	str	r1, [sp, #12]
 80119f0:	f107 010c 	add.w	r1, r7, #12
 80119f4:	9102      	str	r1, [sp, #8]
 80119f6:	9201      	str	r2, [sp, #4]
 80119f8:	9300      	str	r3, [sp, #0]
 80119fa:	462b      	mov	r3, r5
 80119fc:	4622      	mov	r2, r4
 80119fe:	4601      	mov	r1, r0
 8011a00:	6838      	ldr	r0, [r7, #0]
 8011a02:	f000 faeb 	bl	8011fdc <etharp_raw>
      break;
 8011a06:	e001      	b.n	8011a0c <etharp_input+0xf8>
      break;
 8011a08:	bf00      	nop
 8011a0a:	e000      	b.n	8011a0e <etharp_input+0xfa>
      break;
 8011a0c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f7f9 f89c 	bl	800ab4c <pbuf_free>
}
 8011a14:	3718      	adds	r7, #24
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bdb0      	pop	{r4, r5, r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	08018c20 	.word	0x08018c20
 8011a20:	08018d70 	.word	0x08018d70
 8011a24:	08018c98 	.word	0x08018c98

08011a28 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b086      	sub	sp, #24
 8011a2c:	af02      	add	r7, sp, #8
 8011a2e:	60f8      	str	r0, [r7, #12]
 8011a30:	60b9      	str	r1, [r7, #8]
 8011a32:	4613      	mov	r3, r2
 8011a34:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011a36:	79fa      	ldrb	r2, [r7, #7]
 8011a38:	4944      	ldr	r1, [pc, #272]	; (8011b4c <etharp_output_to_arp_index+0x124>)
 8011a3a:	4613      	mov	r3, r2
 8011a3c:	005b      	lsls	r3, r3, #1
 8011a3e:	4413      	add	r3, r2
 8011a40:	00db      	lsls	r3, r3, #3
 8011a42:	440b      	add	r3, r1
 8011a44:	3314      	adds	r3, #20
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	2b01      	cmp	r3, #1
 8011a4a:	d806      	bhi.n	8011a5a <etharp_output_to_arp_index+0x32>
 8011a4c:	4b40      	ldr	r3, [pc, #256]	; (8011b50 <etharp_output_to_arp_index+0x128>)
 8011a4e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011a52:	4940      	ldr	r1, [pc, #256]	; (8011b54 <etharp_output_to_arp_index+0x12c>)
 8011a54:	4840      	ldr	r0, [pc, #256]	; (8011b58 <etharp_output_to_arp_index+0x130>)
 8011a56:	f003 fecf 	bl	80157f8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011a5a:	79fa      	ldrb	r2, [r7, #7]
 8011a5c:	493b      	ldr	r1, [pc, #236]	; (8011b4c <etharp_output_to_arp_index+0x124>)
 8011a5e:	4613      	mov	r3, r2
 8011a60:	005b      	lsls	r3, r3, #1
 8011a62:	4413      	add	r3, r2
 8011a64:	00db      	lsls	r3, r3, #3
 8011a66:	440b      	add	r3, r1
 8011a68:	3314      	adds	r3, #20
 8011a6a:	781b      	ldrb	r3, [r3, #0]
 8011a6c:	2b02      	cmp	r3, #2
 8011a6e:	d153      	bne.n	8011b18 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011a70:	79fa      	ldrb	r2, [r7, #7]
 8011a72:	4936      	ldr	r1, [pc, #216]	; (8011b4c <etharp_output_to_arp_index+0x124>)
 8011a74:	4613      	mov	r3, r2
 8011a76:	005b      	lsls	r3, r3, #1
 8011a78:	4413      	add	r3, r2
 8011a7a:	00db      	lsls	r3, r3, #3
 8011a7c:	440b      	add	r3, r1
 8011a7e:	3312      	adds	r3, #18
 8011a80:	881b      	ldrh	r3, [r3, #0]
 8011a82:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011a86:	d919      	bls.n	8011abc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011a88:	79fa      	ldrb	r2, [r7, #7]
 8011a8a:	4613      	mov	r3, r2
 8011a8c:	005b      	lsls	r3, r3, #1
 8011a8e:	4413      	add	r3, r2
 8011a90:	00db      	lsls	r3, r3, #3
 8011a92:	4a2e      	ldr	r2, [pc, #184]	; (8011b4c <etharp_output_to_arp_index+0x124>)
 8011a94:	4413      	add	r3, r2
 8011a96:	3304      	adds	r3, #4
 8011a98:	4619      	mov	r1, r3
 8011a9a:	68f8      	ldr	r0, [r7, #12]
 8011a9c:	f000 fb4c 	bl	8012138 <etharp_request>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d138      	bne.n	8011b18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011aa6:	79fa      	ldrb	r2, [r7, #7]
 8011aa8:	4928      	ldr	r1, [pc, #160]	; (8011b4c <etharp_output_to_arp_index+0x124>)
 8011aaa:	4613      	mov	r3, r2
 8011aac:	005b      	lsls	r3, r3, #1
 8011aae:	4413      	add	r3, r2
 8011ab0:	00db      	lsls	r3, r3, #3
 8011ab2:	440b      	add	r3, r1
 8011ab4:	3314      	adds	r3, #20
 8011ab6:	2203      	movs	r2, #3
 8011ab8:	701a      	strb	r2, [r3, #0]
 8011aba:	e02d      	b.n	8011b18 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011abc:	79fa      	ldrb	r2, [r7, #7]
 8011abe:	4923      	ldr	r1, [pc, #140]	; (8011b4c <etharp_output_to_arp_index+0x124>)
 8011ac0:	4613      	mov	r3, r2
 8011ac2:	005b      	lsls	r3, r3, #1
 8011ac4:	4413      	add	r3, r2
 8011ac6:	00db      	lsls	r3, r3, #3
 8011ac8:	440b      	add	r3, r1
 8011aca:	3312      	adds	r3, #18
 8011acc:	881b      	ldrh	r3, [r3, #0]
 8011ace:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011ad2:	d321      	bcc.n	8011b18 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011ad4:	79fa      	ldrb	r2, [r7, #7]
 8011ad6:	4613      	mov	r3, r2
 8011ad8:	005b      	lsls	r3, r3, #1
 8011ada:	4413      	add	r3, r2
 8011adc:	00db      	lsls	r3, r3, #3
 8011ade:	4a1b      	ldr	r2, [pc, #108]	; (8011b4c <etharp_output_to_arp_index+0x124>)
 8011ae0:	4413      	add	r3, r2
 8011ae2:	1d19      	adds	r1, r3, #4
 8011ae4:	79fa      	ldrb	r2, [r7, #7]
 8011ae6:	4613      	mov	r3, r2
 8011ae8:	005b      	lsls	r3, r3, #1
 8011aea:	4413      	add	r3, r2
 8011aec:	00db      	lsls	r3, r3, #3
 8011aee:	3308      	adds	r3, #8
 8011af0:	4a16      	ldr	r2, [pc, #88]	; (8011b4c <etharp_output_to_arp_index+0x124>)
 8011af2:	4413      	add	r3, r2
 8011af4:	3304      	adds	r3, #4
 8011af6:	461a      	mov	r2, r3
 8011af8:	68f8      	ldr	r0, [r7, #12]
 8011afa:	f000 fafb 	bl	80120f4 <etharp_request_dst>
 8011afe:	4603      	mov	r3, r0
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d109      	bne.n	8011b18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011b04:	79fa      	ldrb	r2, [r7, #7]
 8011b06:	4911      	ldr	r1, [pc, #68]	; (8011b4c <etharp_output_to_arp_index+0x124>)
 8011b08:	4613      	mov	r3, r2
 8011b0a:	005b      	lsls	r3, r3, #1
 8011b0c:	4413      	add	r3, r2
 8011b0e:	00db      	lsls	r3, r3, #3
 8011b10:	440b      	add	r3, r1
 8011b12:	3314      	adds	r3, #20
 8011b14:	2203      	movs	r2, #3
 8011b16:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011b1e:	79fa      	ldrb	r2, [r7, #7]
 8011b20:	4613      	mov	r3, r2
 8011b22:	005b      	lsls	r3, r3, #1
 8011b24:	4413      	add	r3, r2
 8011b26:	00db      	lsls	r3, r3, #3
 8011b28:	3308      	adds	r3, #8
 8011b2a:	4a08      	ldr	r2, [pc, #32]	; (8011b4c <etharp_output_to_arp_index+0x124>)
 8011b2c:	4413      	add	r3, r2
 8011b2e:	3304      	adds	r3, #4
 8011b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b34:	9200      	str	r2, [sp, #0]
 8011b36:	460a      	mov	r2, r1
 8011b38:	68b9      	ldr	r1, [r7, #8]
 8011b3a:	68f8      	ldr	r0, [r7, #12]
 8011b3c:	f001 fe36 	bl	80137ac <ethernet_output>
 8011b40:	4603      	mov	r3, r0
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3710      	adds	r7, #16
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	2000e4f8 	.word	0x2000e4f8
 8011b50:	08018c20 	.word	0x08018c20
 8011b54:	08018d90 	.word	0x08018d90
 8011b58:	08018c98 	.word	0x08018c98

08011b5c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b08a      	sub	sp, #40	; 0x28
 8011b60:	af02      	add	r7, sp, #8
 8011b62:	60f8      	str	r0, [r7, #12]
 8011b64:	60b9      	str	r1, [r7, #8]
 8011b66:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d106      	bne.n	8011b80 <etharp_output+0x24>
 8011b72:	4b73      	ldr	r3, [pc, #460]	; (8011d40 <etharp_output+0x1e4>)
 8011b74:	f240 321e 	movw	r2, #798	; 0x31e
 8011b78:	4972      	ldr	r1, [pc, #456]	; (8011d44 <etharp_output+0x1e8>)
 8011b7a:	4873      	ldr	r0, [pc, #460]	; (8011d48 <etharp_output+0x1ec>)
 8011b7c:	f003 fe3c 	bl	80157f8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d106      	bne.n	8011b94 <etharp_output+0x38>
 8011b86:	4b6e      	ldr	r3, [pc, #440]	; (8011d40 <etharp_output+0x1e4>)
 8011b88:	f240 321f 	movw	r2, #799	; 0x31f
 8011b8c:	496f      	ldr	r1, [pc, #444]	; (8011d4c <etharp_output+0x1f0>)
 8011b8e:	486e      	ldr	r0, [pc, #440]	; (8011d48 <etharp_output+0x1ec>)
 8011b90:	f003 fe32 	bl	80157f8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d106      	bne.n	8011ba8 <etharp_output+0x4c>
 8011b9a:	4b69      	ldr	r3, [pc, #420]	; (8011d40 <etharp_output+0x1e4>)
 8011b9c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011ba0:	496b      	ldr	r1, [pc, #428]	; (8011d50 <etharp_output+0x1f4>)
 8011ba2:	4869      	ldr	r0, [pc, #420]	; (8011d48 <etharp_output+0x1ec>)
 8011ba4:	f003 fe28 	bl	80157f8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	68f9      	ldr	r1, [r7, #12]
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f000 feee 	bl	8012990 <ip4_addr_isbroadcast_u32>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d002      	beq.n	8011bc0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011bba:	4b66      	ldr	r3, [pc, #408]	; (8011d54 <etharp_output+0x1f8>)
 8011bbc:	61fb      	str	r3, [r7, #28]
 8011bbe:	e0af      	b.n	8011d20 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011bc8:	2be0      	cmp	r3, #224	; 0xe0
 8011bca:	d118      	bne.n	8011bfe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011bcc:	2301      	movs	r3, #1
 8011bce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011bd4:	235e      	movs	r3, #94	; 0x5e
 8011bd6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	3301      	adds	r3, #1
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011be2:	b2db      	uxtb	r3, r3
 8011be4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	3302      	adds	r3, #2
 8011bea:	781b      	ldrb	r3, [r3, #0]
 8011bec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	3303      	adds	r3, #3
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011bf6:	f107 0310 	add.w	r3, r7, #16
 8011bfa:	61fb      	str	r3, [r7, #28]
 8011bfc:	e090      	b.n	8011d20 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681a      	ldr	r2, [r3, #0]
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	3304      	adds	r3, #4
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	405a      	eors	r2, r3
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	3308      	adds	r3, #8
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	4013      	ands	r3, r2
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d012      	beq.n	8011c3c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011c1c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011c20:	4293      	cmp	r3, r2
 8011c22:	d00b      	beq.n	8011c3c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	330c      	adds	r3, #12
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d003      	beq.n	8011c36 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	330c      	adds	r3, #12
 8011c32:	61bb      	str	r3, [r7, #24]
 8011c34:	e002      	b.n	8011c3c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011c36:	f06f 0303 	mvn.w	r3, #3
 8011c3a:	e07d      	b.n	8011d38 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011c3c:	4b46      	ldr	r3, [pc, #280]	; (8011d58 <etharp_output+0x1fc>)
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	4619      	mov	r1, r3
 8011c42:	4a46      	ldr	r2, [pc, #280]	; (8011d5c <etharp_output+0x200>)
 8011c44:	460b      	mov	r3, r1
 8011c46:	005b      	lsls	r3, r3, #1
 8011c48:	440b      	add	r3, r1
 8011c4a:	00db      	lsls	r3, r3, #3
 8011c4c:	4413      	add	r3, r2
 8011c4e:	3314      	adds	r3, #20
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	2b01      	cmp	r3, #1
 8011c54:	d925      	bls.n	8011ca2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011c56:	4b40      	ldr	r3, [pc, #256]	; (8011d58 <etharp_output+0x1fc>)
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	4619      	mov	r1, r3
 8011c5c:	4a3f      	ldr	r2, [pc, #252]	; (8011d5c <etharp_output+0x200>)
 8011c5e:	460b      	mov	r3, r1
 8011c60:	005b      	lsls	r3, r3, #1
 8011c62:	440b      	add	r3, r1
 8011c64:	00db      	lsls	r3, r3, #3
 8011c66:	4413      	add	r3, r2
 8011c68:	3308      	adds	r3, #8
 8011c6a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011c6c:	68fa      	ldr	r2, [r7, #12]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d117      	bne.n	8011ca2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011c72:	69bb      	ldr	r3, [r7, #24]
 8011c74:	681a      	ldr	r2, [r3, #0]
 8011c76:	4b38      	ldr	r3, [pc, #224]	; (8011d58 <etharp_output+0x1fc>)
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	4937      	ldr	r1, [pc, #220]	; (8011d5c <etharp_output+0x200>)
 8011c7e:	4603      	mov	r3, r0
 8011c80:	005b      	lsls	r3, r3, #1
 8011c82:	4403      	add	r3, r0
 8011c84:	00db      	lsls	r3, r3, #3
 8011c86:	440b      	add	r3, r1
 8011c88:	3304      	adds	r3, #4
 8011c8a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011c8c:	429a      	cmp	r2, r3
 8011c8e:	d108      	bne.n	8011ca2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011c90:	4b31      	ldr	r3, [pc, #196]	; (8011d58 <etharp_output+0x1fc>)
 8011c92:	781b      	ldrb	r3, [r3, #0]
 8011c94:	461a      	mov	r2, r3
 8011c96:	68b9      	ldr	r1, [r7, #8]
 8011c98:	68f8      	ldr	r0, [r7, #12]
 8011c9a:	f7ff fec5 	bl	8011a28 <etharp_output_to_arp_index>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	e04a      	b.n	8011d38 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	75fb      	strb	r3, [r7, #23]
 8011ca6:	e031      	b.n	8011d0c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011ca8:	7dfa      	ldrb	r2, [r7, #23]
 8011caa:	492c      	ldr	r1, [pc, #176]	; (8011d5c <etharp_output+0x200>)
 8011cac:	4613      	mov	r3, r2
 8011cae:	005b      	lsls	r3, r3, #1
 8011cb0:	4413      	add	r3, r2
 8011cb2:	00db      	lsls	r3, r3, #3
 8011cb4:	440b      	add	r3, r1
 8011cb6:	3314      	adds	r3, #20
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	2b01      	cmp	r3, #1
 8011cbc:	d923      	bls.n	8011d06 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011cbe:	7dfa      	ldrb	r2, [r7, #23]
 8011cc0:	4926      	ldr	r1, [pc, #152]	; (8011d5c <etharp_output+0x200>)
 8011cc2:	4613      	mov	r3, r2
 8011cc4:	005b      	lsls	r3, r3, #1
 8011cc6:	4413      	add	r3, r2
 8011cc8:	00db      	lsls	r3, r3, #3
 8011cca:	440b      	add	r3, r1
 8011ccc:	3308      	adds	r3, #8
 8011cce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011cd0:	68fa      	ldr	r2, [r7, #12]
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d117      	bne.n	8011d06 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011cd6:	69bb      	ldr	r3, [r7, #24]
 8011cd8:	6819      	ldr	r1, [r3, #0]
 8011cda:	7dfa      	ldrb	r2, [r7, #23]
 8011cdc:	481f      	ldr	r0, [pc, #124]	; (8011d5c <etharp_output+0x200>)
 8011cde:	4613      	mov	r3, r2
 8011ce0:	005b      	lsls	r3, r3, #1
 8011ce2:	4413      	add	r3, r2
 8011ce4:	00db      	lsls	r3, r3, #3
 8011ce6:	4403      	add	r3, r0
 8011ce8:	3304      	adds	r3, #4
 8011cea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011cec:	4299      	cmp	r1, r3
 8011cee:	d10a      	bne.n	8011d06 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011cf0:	4a19      	ldr	r2, [pc, #100]	; (8011d58 <etharp_output+0x1fc>)
 8011cf2:	7dfb      	ldrb	r3, [r7, #23]
 8011cf4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011cf6:	7dfb      	ldrb	r3, [r7, #23]
 8011cf8:	461a      	mov	r2, r3
 8011cfa:	68b9      	ldr	r1, [r7, #8]
 8011cfc:	68f8      	ldr	r0, [r7, #12]
 8011cfe:	f7ff fe93 	bl	8011a28 <etharp_output_to_arp_index>
 8011d02:	4603      	mov	r3, r0
 8011d04:	e018      	b.n	8011d38 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011d06:	7dfb      	ldrb	r3, [r7, #23]
 8011d08:	3301      	adds	r3, #1
 8011d0a:	75fb      	strb	r3, [r7, #23]
 8011d0c:	7dfb      	ldrb	r3, [r7, #23]
 8011d0e:	2b09      	cmp	r3, #9
 8011d10:	d9ca      	bls.n	8011ca8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011d12:	68ba      	ldr	r2, [r7, #8]
 8011d14:	69b9      	ldr	r1, [r7, #24]
 8011d16:	68f8      	ldr	r0, [r7, #12]
 8011d18:	f000 f822 	bl	8011d60 <etharp_query>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	e00b      	b.n	8011d38 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011d2a:	9300      	str	r3, [sp, #0]
 8011d2c:	69fb      	ldr	r3, [r7, #28]
 8011d2e:	68b9      	ldr	r1, [r7, #8]
 8011d30:	68f8      	ldr	r0, [r7, #12]
 8011d32:	f001 fd3b 	bl	80137ac <ethernet_output>
 8011d36:	4603      	mov	r3, r0
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3720      	adds	r7, #32
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	08018c20 	.word	0x08018c20
 8011d44:	08018d70 	.word	0x08018d70
 8011d48:	08018c98 	.word	0x08018c98
 8011d4c:	08018dc0 	.word	0x08018dc0
 8011d50:	08018d60 	.word	0x08018d60
 8011d54:	080197f4 	.word	0x080197f4
 8011d58:	2000e5e8 	.word	0x2000e5e8
 8011d5c:	2000e4f8 	.word	0x2000e4f8

08011d60 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b08c      	sub	sp, #48	; 0x30
 8011d64:	af02      	add	r7, sp, #8
 8011d66:	60f8      	str	r0, [r7, #12]
 8011d68:	60b9      	str	r1, [r7, #8]
 8011d6a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	3326      	adds	r3, #38	; 0x26
 8011d70:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011d72:	23ff      	movs	r3, #255	; 0xff
 8011d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	68f9      	ldr	r1, [r7, #12]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f000 fe04 	bl	8012990 <ip4_addr_isbroadcast_u32>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d10c      	bne.n	8011da8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011d96:	2be0      	cmp	r3, #224	; 0xe0
 8011d98:	d006      	beq.n	8011da8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d003      	beq.n	8011da8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d102      	bne.n	8011dae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011da8:	f06f 030f 	mvn.w	r3, #15
 8011dac:	e101      	b.n	8011fb2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011dae:	68fa      	ldr	r2, [r7, #12]
 8011db0:	2101      	movs	r1, #1
 8011db2:	68b8      	ldr	r0, [r7, #8]
 8011db4:	f7ff fb60 	bl	8011478 <etharp_find_entry>
 8011db8:	4603      	mov	r3, r0
 8011dba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011dbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	da02      	bge.n	8011dca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011dc4:	8a7b      	ldrh	r3, [r7, #18]
 8011dc6:	b25b      	sxtb	r3, r3
 8011dc8:	e0f3      	b.n	8011fb2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011dca:	8a7b      	ldrh	r3, [r7, #18]
 8011dcc:	2b7e      	cmp	r3, #126	; 0x7e
 8011dce:	d906      	bls.n	8011dde <etharp_query+0x7e>
 8011dd0:	4b7a      	ldr	r3, [pc, #488]	; (8011fbc <etharp_query+0x25c>)
 8011dd2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8011dd6:	497a      	ldr	r1, [pc, #488]	; (8011fc0 <etharp_query+0x260>)
 8011dd8:	487a      	ldr	r0, [pc, #488]	; (8011fc4 <etharp_query+0x264>)
 8011dda:	f003 fd0d 	bl	80157f8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011dde:	8a7b      	ldrh	r3, [r7, #18]
 8011de0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011de2:	7c7a      	ldrb	r2, [r7, #17]
 8011de4:	4978      	ldr	r1, [pc, #480]	; (8011fc8 <etharp_query+0x268>)
 8011de6:	4613      	mov	r3, r2
 8011de8:	005b      	lsls	r3, r3, #1
 8011dea:	4413      	add	r3, r2
 8011dec:	00db      	lsls	r3, r3, #3
 8011dee:	440b      	add	r3, r1
 8011df0:	3314      	adds	r3, #20
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d115      	bne.n	8011e24 <etharp_query+0xc4>
    is_new_entry = 1;
 8011df8:	2301      	movs	r3, #1
 8011dfa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011dfc:	7c7a      	ldrb	r2, [r7, #17]
 8011dfe:	4972      	ldr	r1, [pc, #456]	; (8011fc8 <etharp_query+0x268>)
 8011e00:	4613      	mov	r3, r2
 8011e02:	005b      	lsls	r3, r3, #1
 8011e04:	4413      	add	r3, r2
 8011e06:	00db      	lsls	r3, r3, #3
 8011e08:	440b      	add	r3, r1
 8011e0a:	3314      	adds	r3, #20
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011e10:	7c7a      	ldrb	r2, [r7, #17]
 8011e12:	496d      	ldr	r1, [pc, #436]	; (8011fc8 <etharp_query+0x268>)
 8011e14:	4613      	mov	r3, r2
 8011e16:	005b      	lsls	r3, r3, #1
 8011e18:	4413      	add	r3, r2
 8011e1a:	00db      	lsls	r3, r3, #3
 8011e1c:	440b      	add	r3, r1
 8011e1e:	3308      	adds	r3, #8
 8011e20:	68fa      	ldr	r2, [r7, #12]
 8011e22:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011e24:	7c7a      	ldrb	r2, [r7, #17]
 8011e26:	4968      	ldr	r1, [pc, #416]	; (8011fc8 <etharp_query+0x268>)
 8011e28:	4613      	mov	r3, r2
 8011e2a:	005b      	lsls	r3, r3, #1
 8011e2c:	4413      	add	r3, r2
 8011e2e:	00db      	lsls	r3, r3, #3
 8011e30:	440b      	add	r3, r1
 8011e32:	3314      	adds	r3, #20
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	d011      	beq.n	8011e5e <etharp_query+0xfe>
 8011e3a:	7c7a      	ldrb	r2, [r7, #17]
 8011e3c:	4962      	ldr	r1, [pc, #392]	; (8011fc8 <etharp_query+0x268>)
 8011e3e:	4613      	mov	r3, r2
 8011e40:	005b      	lsls	r3, r3, #1
 8011e42:	4413      	add	r3, r2
 8011e44:	00db      	lsls	r3, r3, #3
 8011e46:	440b      	add	r3, r1
 8011e48:	3314      	adds	r3, #20
 8011e4a:	781b      	ldrb	r3, [r3, #0]
 8011e4c:	2b01      	cmp	r3, #1
 8011e4e:	d806      	bhi.n	8011e5e <etharp_query+0xfe>
 8011e50:	4b5a      	ldr	r3, [pc, #360]	; (8011fbc <etharp_query+0x25c>)
 8011e52:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011e56:	495d      	ldr	r1, [pc, #372]	; (8011fcc <etharp_query+0x26c>)
 8011e58:	485a      	ldr	r0, [pc, #360]	; (8011fc4 <etharp_query+0x264>)
 8011e5a:	f003 fccd 	bl	80157f8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011e5e:	6a3b      	ldr	r3, [r7, #32]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d102      	bne.n	8011e6a <etharp_query+0x10a>
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d10c      	bne.n	8011e84 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011e6a:	68b9      	ldr	r1, [r7, #8]
 8011e6c:	68f8      	ldr	r0, [r7, #12]
 8011e6e:	f000 f963 	bl	8012138 <etharp_request>
 8011e72:	4603      	mov	r3, r0
 8011e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d102      	bne.n	8011e84 <etharp_query+0x124>
      return result;
 8011e7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011e82:	e096      	b.n	8011fb2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d106      	bne.n	8011e98 <etharp_query+0x138>
 8011e8a:	4b4c      	ldr	r3, [pc, #304]	; (8011fbc <etharp_query+0x25c>)
 8011e8c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011e90:	494f      	ldr	r1, [pc, #316]	; (8011fd0 <etharp_query+0x270>)
 8011e92:	484c      	ldr	r0, [pc, #304]	; (8011fc4 <etharp_query+0x264>)
 8011e94:	f003 fcb0 	bl	80157f8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011e98:	7c7a      	ldrb	r2, [r7, #17]
 8011e9a:	494b      	ldr	r1, [pc, #300]	; (8011fc8 <etharp_query+0x268>)
 8011e9c:	4613      	mov	r3, r2
 8011e9e:	005b      	lsls	r3, r3, #1
 8011ea0:	4413      	add	r3, r2
 8011ea2:	00db      	lsls	r3, r3, #3
 8011ea4:	440b      	add	r3, r1
 8011ea6:	3314      	adds	r3, #20
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	2b01      	cmp	r3, #1
 8011eac:	d917      	bls.n	8011ede <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011eae:	4a49      	ldr	r2, [pc, #292]	; (8011fd4 <etharp_query+0x274>)
 8011eb0:	7c7b      	ldrb	r3, [r7, #17]
 8011eb2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011eb4:	7c7a      	ldrb	r2, [r7, #17]
 8011eb6:	4613      	mov	r3, r2
 8011eb8:	005b      	lsls	r3, r3, #1
 8011eba:	4413      	add	r3, r2
 8011ebc:	00db      	lsls	r3, r3, #3
 8011ebe:	3308      	adds	r3, #8
 8011ec0:	4a41      	ldr	r2, [pc, #260]	; (8011fc8 <etharp_query+0x268>)
 8011ec2:	4413      	add	r3, r2
 8011ec4:	3304      	adds	r3, #4
 8011ec6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011eca:	9200      	str	r2, [sp, #0]
 8011ecc:	697a      	ldr	r2, [r7, #20]
 8011ece:	6879      	ldr	r1, [r7, #4]
 8011ed0:	68f8      	ldr	r0, [r7, #12]
 8011ed2:	f001 fc6b 	bl	80137ac <ethernet_output>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011edc:	e067      	b.n	8011fae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011ede:	7c7a      	ldrb	r2, [r7, #17]
 8011ee0:	4939      	ldr	r1, [pc, #228]	; (8011fc8 <etharp_query+0x268>)
 8011ee2:	4613      	mov	r3, r2
 8011ee4:	005b      	lsls	r3, r3, #1
 8011ee6:	4413      	add	r3, r2
 8011ee8:	00db      	lsls	r3, r3, #3
 8011eea:	440b      	add	r3, r1
 8011eec:	3314      	adds	r3, #20
 8011eee:	781b      	ldrb	r3, [r3, #0]
 8011ef0:	2b01      	cmp	r3, #1
 8011ef2:	d15c      	bne.n	8011fae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011efc:	e01c      	b.n	8011f38 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011efe:	69fb      	ldr	r3, [r7, #28]
 8011f00:	895a      	ldrh	r2, [r3, #10]
 8011f02:	69fb      	ldr	r3, [r7, #28]
 8011f04:	891b      	ldrh	r3, [r3, #8]
 8011f06:	429a      	cmp	r2, r3
 8011f08:	d10a      	bne.n	8011f20 <etharp_query+0x1c0>
 8011f0a:	69fb      	ldr	r3, [r7, #28]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d006      	beq.n	8011f20 <etharp_query+0x1c0>
 8011f12:	4b2a      	ldr	r3, [pc, #168]	; (8011fbc <etharp_query+0x25c>)
 8011f14:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011f18:	492f      	ldr	r1, [pc, #188]	; (8011fd8 <etharp_query+0x278>)
 8011f1a:	482a      	ldr	r0, [pc, #168]	; (8011fc4 <etharp_query+0x264>)
 8011f1c:	f003 fc6c 	bl	80157f8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011f20:	69fb      	ldr	r3, [r7, #28]
 8011f22:	7b1b      	ldrb	r3, [r3, #12]
 8011f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d002      	beq.n	8011f32 <etharp_query+0x1d2>
        copy_needed = 1;
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	61bb      	str	r3, [r7, #24]
        break;
 8011f30:	e005      	b.n	8011f3e <etharp_query+0x1de>
      }
      p = p->next;
 8011f32:	69fb      	ldr	r3, [r7, #28]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011f38:	69fb      	ldr	r3, [r7, #28]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d1df      	bne.n	8011efe <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011f3e:	69bb      	ldr	r3, [r7, #24]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d007      	beq.n	8011f54 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011f44:	687a      	ldr	r2, [r7, #4]
 8011f46:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011f4a:	200e      	movs	r0, #14
 8011f4c:	f7f9 f85a 	bl	800b004 <pbuf_clone>
 8011f50:	61f8      	str	r0, [r7, #28]
 8011f52:	e004      	b.n	8011f5e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011f58:	69f8      	ldr	r0, [r7, #28]
 8011f5a:	f7f8 fe97 	bl	800ac8c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011f5e:	69fb      	ldr	r3, [r7, #28]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d021      	beq.n	8011fa8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011f64:	7c7a      	ldrb	r2, [r7, #17]
 8011f66:	4918      	ldr	r1, [pc, #96]	; (8011fc8 <etharp_query+0x268>)
 8011f68:	4613      	mov	r3, r2
 8011f6a:	005b      	lsls	r3, r3, #1
 8011f6c:	4413      	add	r3, r2
 8011f6e:	00db      	lsls	r3, r3, #3
 8011f70:	440b      	add	r3, r1
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d00a      	beq.n	8011f8e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011f78:	7c7a      	ldrb	r2, [r7, #17]
 8011f7a:	4913      	ldr	r1, [pc, #76]	; (8011fc8 <etharp_query+0x268>)
 8011f7c:	4613      	mov	r3, r2
 8011f7e:	005b      	lsls	r3, r3, #1
 8011f80:	4413      	add	r3, r2
 8011f82:	00db      	lsls	r3, r3, #3
 8011f84:	440b      	add	r3, r1
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7f8 fddf 	bl	800ab4c <pbuf_free>
      }
      arp_table[i].q = p;
 8011f8e:	7c7a      	ldrb	r2, [r7, #17]
 8011f90:	490d      	ldr	r1, [pc, #52]	; (8011fc8 <etharp_query+0x268>)
 8011f92:	4613      	mov	r3, r2
 8011f94:	005b      	lsls	r3, r3, #1
 8011f96:	4413      	add	r3, r2
 8011f98:	00db      	lsls	r3, r3, #3
 8011f9a:	440b      	add	r3, r1
 8011f9c:	69fa      	ldr	r2, [r7, #28]
 8011f9e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011fa6:	e002      	b.n	8011fae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011fa8:	23ff      	movs	r3, #255	; 0xff
 8011faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011fae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3728      	adds	r7, #40	; 0x28
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}
 8011fba:	bf00      	nop
 8011fbc:	08018c20 	.word	0x08018c20
 8011fc0:	08018dcc 	.word	0x08018dcc
 8011fc4:	08018c98 	.word	0x08018c98
 8011fc8:	2000e4f8 	.word	0x2000e4f8
 8011fcc:	08018ddc 	.word	0x08018ddc
 8011fd0:	08018dc0 	.word	0x08018dc0
 8011fd4:	2000e5e8 	.word	0x2000e5e8
 8011fd8:	08018e04 	.word	0x08018e04

08011fdc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b08a      	sub	sp, #40	; 0x28
 8011fe0:	af02      	add	r7, sp, #8
 8011fe2:	60f8      	str	r0, [r7, #12]
 8011fe4:	60b9      	str	r1, [r7, #8]
 8011fe6:	607a      	str	r2, [r7, #4]
 8011fe8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011fea:	2300      	movs	r3, #0
 8011fec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d106      	bne.n	8012002 <etharp_raw+0x26>
 8011ff4:	4b3a      	ldr	r3, [pc, #232]	; (80120e0 <etharp_raw+0x104>)
 8011ff6:	f240 4257 	movw	r2, #1111	; 0x457
 8011ffa:	493a      	ldr	r1, [pc, #232]	; (80120e4 <etharp_raw+0x108>)
 8011ffc:	483a      	ldr	r0, [pc, #232]	; (80120e8 <etharp_raw+0x10c>)
 8011ffe:	f003 fbfb 	bl	80157f8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012002:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012006:	211c      	movs	r1, #28
 8012008:	200e      	movs	r0, #14
 801200a:	f7f8 fabb 	bl	800a584 <pbuf_alloc>
 801200e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012010:	69bb      	ldr	r3, [r7, #24]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d102      	bne.n	801201c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012016:	f04f 33ff 	mov.w	r3, #4294967295
 801201a:	e05d      	b.n	80120d8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801201c:	69bb      	ldr	r3, [r7, #24]
 801201e:	895b      	ldrh	r3, [r3, #10]
 8012020:	2b1b      	cmp	r3, #27
 8012022:	d806      	bhi.n	8012032 <etharp_raw+0x56>
 8012024:	4b2e      	ldr	r3, [pc, #184]	; (80120e0 <etharp_raw+0x104>)
 8012026:	f240 4262 	movw	r2, #1122	; 0x462
 801202a:	4930      	ldr	r1, [pc, #192]	; (80120ec <etharp_raw+0x110>)
 801202c:	482e      	ldr	r0, [pc, #184]	; (80120e8 <etharp_raw+0x10c>)
 801202e:	f003 fbe3 	bl	80157f8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012032:	69bb      	ldr	r3, [r7, #24]
 8012034:	685b      	ldr	r3, [r3, #4]
 8012036:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012038:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801203a:	4618      	mov	r0, r3
 801203c:	f7f7 fa2e 	bl	800949c <lwip_htons>
 8012040:	4603      	mov	r3, r0
 8012042:	461a      	mov	r2, r3
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801204e:	2b06      	cmp	r3, #6
 8012050:	d006      	beq.n	8012060 <etharp_raw+0x84>
 8012052:	4b23      	ldr	r3, [pc, #140]	; (80120e0 <etharp_raw+0x104>)
 8012054:	f240 4269 	movw	r2, #1129	; 0x469
 8012058:	4925      	ldr	r1, [pc, #148]	; (80120f0 <etharp_raw+0x114>)
 801205a:	4823      	ldr	r0, [pc, #140]	; (80120e8 <etharp_raw+0x10c>)
 801205c:	f003 fbcc 	bl	80157f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	3308      	adds	r3, #8
 8012064:	2206      	movs	r2, #6
 8012066:	6839      	ldr	r1, [r7, #0]
 8012068:	4618      	mov	r0, r3
 801206a:	f003 fcf8 	bl	8015a5e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	3312      	adds	r3, #18
 8012072:	2206      	movs	r2, #6
 8012074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012076:	4618      	mov	r0, r3
 8012078:	f003 fcf1 	bl	8015a5e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	330e      	adds	r3, #14
 8012080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012082:	6812      	ldr	r2, [r2, #0]
 8012084:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012086:	697b      	ldr	r3, [r7, #20]
 8012088:	3318      	adds	r3, #24
 801208a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801208c:	6812      	ldr	r2, [r2, #0]
 801208e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	2200      	movs	r2, #0
 8012094:	701a      	strb	r2, [r3, #0]
 8012096:	2200      	movs	r2, #0
 8012098:	f042 0201 	orr.w	r2, r2, #1
 801209c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	2200      	movs	r2, #0
 80120a2:	f042 0208 	orr.w	r2, r2, #8
 80120a6:	709a      	strb	r2, [r3, #2]
 80120a8:	2200      	movs	r2, #0
 80120aa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	2206      	movs	r2, #6
 80120b0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	2204      	movs	r2, #4
 80120b6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80120b8:	f640 0306 	movw	r3, #2054	; 0x806
 80120bc:	9300      	str	r3, [sp, #0]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	68ba      	ldr	r2, [r7, #8]
 80120c2:	69b9      	ldr	r1, [r7, #24]
 80120c4:	68f8      	ldr	r0, [r7, #12]
 80120c6:	f001 fb71 	bl	80137ac <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80120ca:	69b8      	ldr	r0, [r7, #24]
 80120cc:	f7f8 fd3e 	bl	800ab4c <pbuf_free>
  p = NULL;
 80120d0:	2300      	movs	r3, #0
 80120d2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80120d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80120d8:	4618      	mov	r0, r3
 80120da:	3720      	adds	r7, #32
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}
 80120e0:	08018c20 	.word	0x08018c20
 80120e4:	08018d70 	.word	0x08018d70
 80120e8:	08018c98 	.word	0x08018c98
 80120ec:	08018e20 	.word	0x08018e20
 80120f0:	08018e54 	.word	0x08018e54

080120f4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b088      	sub	sp, #32
 80120f8:	af04      	add	r7, sp, #16
 80120fa:	60f8      	str	r0, [r7, #12]
 80120fc:	60b9      	str	r1, [r7, #8]
 80120fe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012110:	2201      	movs	r2, #1
 8012112:	9203      	str	r2, [sp, #12]
 8012114:	68ba      	ldr	r2, [r7, #8]
 8012116:	9202      	str	r2, [sp, #8]
 8012118:	4a06      	ldr	r2, [pc, #24]	; (8012134 <etharp_request_dst+0x40>)
 801211a:	9201      	str	r2, [sp, #4]
 801211c:	9300      	str	r3, [sp, #0]
 801211e:	4603      	mov	r3, r0
 8012120:	687a      	ldr	r2, [r7, #4]
 8012122:	68f8      	ldr	r0, [r7, #12]
 8012124:	f7ff ff5a 	bl	8011fdc <etharp_raw>
 8012128:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801212a:	4618      	mov	r0, r3
 801212c:	3710      	adds	r7, #16
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}
 8012132:	bf00      	nop
 8012134:	080197fc 	.word	0x080197fc

08012138 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012142:	4a05      	ldr	r2, [pc, #20]	; (8012158 <etharp_request+0x20>)
 8012144:	6839      	ldr	r1, [r7, #0]
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f7ff ffd4 	bl	80120f4 <etharp_request_dst>
 801214c:	4603      	mov	r3, r0
}
 801214e:	4618      	mov	r0, r3
 8012150:	3708      	adds	r7, #8
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}
 8012156:	bf00      	nop
 8012158:	080197f4 	.word	0x080197f4

0801215c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b08e      	sub	sp, #56	; 0x38
 8012160:	af04      	add	r7, sp, #16
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012166:	4b79      	ldr	r3, [pc, #484]	; (801234c <icmp_input+0x1f0>)
 8012168:	689b      	ldr	r3, [r3, #8]
 801216a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	f003 030f 	and.w	r3, r3, #15
 8012174:	b2db      	uxtb	r3, r3
 8012176:	009b      	lsls	r3, r3, #2
 8012178:	b2db      	uxtb	r3, r3
 801217a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801217c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801217e:	2b13      	cmp	r3, #19
 8012180:	f240 80cd 	bls.w	801231e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	895b      	ldrh	r3, [r3, #10]
 8012188:	2b03      	cmp	r3, #3
 801218a:	f240 80ca 	bls.w	8012322 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	781b      	ldrb	r3, [r3, #0]
 8012194:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012198:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801219c:	2b00      	cmp	r3, #0
 801219e:	f000 80b7 	beq.w	8012310 <icmp_input+0x1b4>
 80121a2:	2b08      	cmp	r3, #8
 80121a4:	f040 80b7 	bne.w	8012316 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80121a8:	4b69      	ldr	r3, [pc, #420]	; (8012350 <icmp_input+0x1f4>)
 80121aa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80121ac:	4b67      	ldr	r3, [pc, #412]	; (801234c <icmp_input+0x1f0>)
 80121ae:	695b      	ldr	r3, [r3, #20]
 80121b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80121b4:	2be0      	cmp	r3, #224	; 0xe0
 80121b6:	f000 80bb 	beq.w	8012330 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80121ba:	4b64      	ldr	r3, [pc, #400]	; (801234c <icmp_input+0x1f0>)
 80121bc:	695b      	ldr	r3, [r3, #20]
 80121be:	4a63      	ldr	r2, [pc, #396]	; (801234c <icmp_input+0x1f0>)
 80121c0:	6812      	ldr	r2, [r2, #0]
 80121c2:	4611      	mov	r1, r2
 80121c4:	4618      	mov	r0, r3
 80121c6:	f000 fbe3 	bl	8012990 <ip4_addr_isbroadcast_u32>
 80121ca:	4603      	mov	r3, r0
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	f040 80b1 	bne.w	8012334 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	891b      	ldrh	r3, [r3, #8]
 80121d6:	2b07      	cmp	r3, #7
 80121d8:	f240 80a5 	bls.w	8012326 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80121dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80121de:	330e      	adds	r3, #14
 80121e0:	4619      	mov	r1, r3
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f7f8 fc1c 	bl	800aa20 <pbuf_add_header>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d04b      	beq.n	8012286 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	891a      	ldrh	r2, [r3, #8]
 80121f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80121f4:	4413      	add	r3, r2
 80121f6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	891b      	ldrh	r3, [r3, #8]
 80121fc:	8b7a      	ldrh	r2, [r7, #26]
 80121fe:	429a      	cmp	r2, r3
 8012200:	f0c0 809a 	bcc.w	8012338 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012204:	8b7b      	ldrh	r3, [r7, #26]
 8012206:	f44f 7220 	mov.w	r2, #640	; 0x280
 801220a:	4619      	mov	r1, r3
 801220c:	200e      	movs	r0, #14
 801220e:	f7f8 f9b9 	bl	800a584 <pbuf_alloc>
 8012212:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	2b00      	cmp	r3, #0
 8012218:	f000 8090 	beq.w	801233c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	895b      	ldrh	r3, [r3, #10]
 8012220:	461a      	mov	r2, r3
 8012222:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012224:	3308      	adds	r3, #8
 8012226:	429a      	cmp	r2, r3
 8012228:	d203      	bcs.n	8012232 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801222a:	6978      	ldr	r0, [r7, #20]
 801222c:	f7f8 fc8e 	bl	800ab4c <pbuf_free>
          goto icmperr;
 8012230:	e085      	b.n	801233e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	685b      	ldr	r3, [r3, #4]
 8012236:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801223a:	4618      	mov	r0, r3
 801223c:	f003 fc0f 	bl	8015a5e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012240:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012242:	4619      	mov	r1, r3
 8012244:	6978      	ldr	r0, [r7, #20]
 8012246:	f7f8 fbfb 	bl	800aa40 <pbuf_remove_header>
 801224a:	4603      	mov	r3, r0
 801224c:	2b00      	cmp	r3, #0
 801224e:	d009      	beq.n	8012264 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012250:	4b40      	ldr	r3, [pc, #256]	; (8012354 <icmp_input+0x1f8>)
 8012252:	22b6      	movs	r2, #182	; 0xb6
 8012254:	4940      	ldr	r1, [pc, #256]	; (8012358 <icmp_input+0x1fc>)
 8012256:	4841      	ldr	r0, [pc, #260]	; (801235c <icmp_input+0x200>)
 8012258:	f003 face 	bl	80157f8 <iprintf>
          pbuf_free(r);
 801225c:	6978      	ldr	r0, [r7, #20]
 801225e:	f7f8 fc75 	bl	800ab4c <pbuf_free>
          goto icmperr;
 8012262:	e06c      	b.n	801233e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012264:	6879      	ldr	r1, [r7, #4]
 8012266:	6978      	ldr	r0, [r7, #20]
 8012268:	f7f8 fd88 	bl	800ad7c <pbuf_copy>
 801226c:	4603      	mov	r3, r0
 801226e:	2b00      	cmp	r3, #0
 8012270:	d003      	beq.n	801227a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012272:	6978      	ldr	r0, [r7, #20]
 8012274:	f7f8 fc6a 	bl	800ab4c <pbuf_free>
          goto icmperr;
 8012278:	e061      	b.n	801233e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f7f8 fc66 	bl	800ab4c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	607b      	str	r3, [r7, #4]
 8012284:	e00f      	b.n	80122a6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012286:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012288:	330e      	adds	r3, #14
 801228a:	4619      	mov	r1, r3
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f7f8 fbd7 	bl	800aa40 <pbuf_remove_header>
 8012292:	4603      	mov	r3, r0
 8012294:	2b00      	cmp	r3, #0
 8012296:	d006      	beq.n	80122a6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012298:	4b2e      	ldr	r3, [pc, #184]	; (8012354 <icmp_input+0x1f8>)
 801229a:	22c7      	movs	r2, #199	; 0xc7
 801229c:	4930      	ldr	r1, [pc, #192]	; (8012360 <icmp_input+0x204>)
 801229e:	482f      	ldr	r0, [pc, #188]	; (801235c <icmp_input+0x200>)
 80122a0:	f003 faaa 	bl	80157f8 <iprintf>
          goto icmperr;
 80122a4:	e04b      	b.n	801233e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	685b      	ldr	r3, [r3, #4]
 80122aa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80122ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80122ae:	4619      	mov	r1, r3
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f7f8 fbb5 	bl	800aa20 <pbuf_add_header>
 80122b6:	4603      	mov	r3, r0
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d12b      	bne.n	8012314 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80122c2:	69fb      	ldr	r3, [r7, #28]
 80122c4:	681a      	ldr	r2, [r3, #0]
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80122ca:	4b20      	ldr	r3, [pc, #128]	; (801234c <icmp_input+0x1f0>)
 80122cc:	691a      	ldr	r2, [r3, #16]
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	2200      	movs	r2, #0
 80122d6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80122d8:	693b      	ldr	r3, [r7, #16]
 80122da:	2200      	movs	r2, #0
 80122dc:	709a      	strb	r2, [r3, #2]
 80122de:	2200      	movs	r2, #0
 80122e0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	2240      	movs	r2, #64	; 0x40
 80122e6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	2200      	movs	r2, #0
 80122ec:	729a      	strb	r2, [r3, #10]
 80122ee:	2200      	movs	r2, #0
 80122f0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	9302      	str	r3, [sp, #8]
 80122f6:	2301      	movs	r3, #1
 80122f8:	9301      	str	r3, [sp, #4]
 80122fa:	2300      	movs	r3, #0
 80122fc:	9300      	str	r3, [sp, #0]
 80122fe:	2340      	movs	r3, #64	; 0x40
 8012300:	2200      	movs	r2, #0
 8012302:	69f9      	ldr	r1, [r7, #28]
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f000 fa6b 	bl	80127e0 <ip4_output_if>
 801230a:	4603      	mov	r3, r0
 801230c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801230e:	e001      	b.n	8012314 <icmp_input+0x1b8>
      break;
 8012310:	bf00      	nop
 8012312:	e000      	b.n	8012316 <icmp_input+0x1ba>
      break;
 8012314:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f7f8 fc18 	bl	800ab4c <pbuf_free>
  return;
 801231c:	e013      	b.n	8012346 <icmp_input+0x1ea>
    goto lenerr;
 801231e:	bf00      	nop
 8012320:	e002      	b.n	8012328 <icmp_input+0x1cc>
    goto lenerr;
 8012322:	bf00      	nop
 8012324:	e000      	b.n	8012328 <icmp_input+0x1cc>
        goto lenerr;
 8012326:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f7f8 fc0f 	bl	800ab4c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801232e:	e00a      	b.n	8012346 <icmp_input+0x1ea>
        goto icmperr;
 8012330:	bf00      	nop
 8012332:	e004      	b.n	801233e <icmp_input+0x1e2>
        goto icmperr;
 8012334:	bf00      	nop
 8012336:	e002      	b.n	801233e <icmp_input+0x1e2>
          goto icmperr;
 8012338:	bf00      	nop
 801233a:	e000      	b.n	801233e <icmp_input+0x1e2>
          goto icmperr;
 801233c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801233e:	6878      	ldr	r0, [r7, #4]
 8012340:	f7f8 fc04 	bl	800ab4c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012344:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012346:	3728      	adds	r7, #40	; 0x28
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}
 801234c:	20005550 	.word	0x20005550
 8012350:	20005564 	.word	0x20005564
 8012354:	08018e98 	.word	0x08018e98
 8012358:	08018ed0 	.word	0x08018ed0
 801235c:	08018f08 	.word	0x08018f08
 8012360:	08018f30 	.word	0x08018f30

08012364 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b082      	sub	sp, #8
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	460b      	mov	r3, r1
 801236e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012370:	78fb      	ldrb	r3, [r7, #3]
 8012372:	461a      	mov	r2, r3
 8012374:	2103      	movs	r1, #3
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f000 f814 	bl	80123a4 <icmp_send_response>
}
 801237c:	bf00      	nop
 801237e:	3708      	adds	r7, #8
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b082      	sub	sp, #8
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
 801238c:	460b      	mov	r3, r1
 801238e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012390:	78fb      	ldrb	r3, [r7, #3]
 8012392:	461a      	mov	r2, r3
 8012394:	210b      	movs	r1, #11
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f000 f804 	bl	80123a4 <icmp_send_response>
}
 801239c:	bf00      	nop
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b08c      	sub	sp, #48	; 0x30
 80123a8:	af04      	add	r7, sp, #16
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	460b      	mov	r3, r1
 80123ae:	70fb      	strb	r3, [r7, #3]
 80123b0:	4613      	mov	r3, r2
 80123b2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80123b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80123b8:	2124      	movs	r1, #36	; 0x24
 80123ba:	2022      	movs	r0, #34	; 0x22
 80123bc:	f7f8 f8e2 	bl	800a584 <pbuf_alloc>
 80123c0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80123c2:	69fb      	ldr	r3, [r7, #28]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d04c      	beq.n	8012462 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80123c8:	69fb      	ldr	r3, [r7, #28]
 80123ca:	895b      	ldrh	r3, [r3, #10]
 80123cc:	2b23      	cmp	r3, #35	; 0x23
 80123ce:	d806      	bhi.n	80123de <icmp_send_response+0x3a>
 80123d0:	4b26      	ldr	r3, [pc, #152]	; (801246c <icmp_send_response+0xc8>)
 80123d2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80123d6:	4926      	ldr	r1, [pc, #152]	; (8012470 <icmp_send_response+0xcc>)
 80123d8:	4826      	ldr	r0, [pc, #152]	; (8012474 <icmp_send_response+0xd0>)
 80123da:	f003 fa0d 	bl	80157f8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	685b      	ldr	r3, [r3, #4]
 80123e2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80123e4:	69fb      	ldr	r3, [r7, #28]
 80123e6:	685b      	ldr	r3, [r3, #4]
 80123e8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	78fa      	ldrb	r2, [r7, #3]
 80123ee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80123f0:	697b      	ldr	r3, [r7, #20]
 80123f2:	78ba      	ldrb	r2, [r7, #2]
 80123f4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80123f6:	697b      	ldr	r3, [r7, #20]
 80123f8:	2200      	movs	r2, #0
 80123fa:	711a      	strb	r2, [r3, #4]
 80123fc:	2200      	movs	r2, #0
 80123fe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	2200      	movs	r2, #0
 8012404:	719a      	strb	r2, [r3, #6]
 8012406:	2200      	movs	r2, #0
 8012408:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801240a:	69fb      	ldr	r3, [r7, #28]
 801240c:	685b      	ldr	r3, [r3, #4]
 801240e:	f103 0008 	add.w	r0, r3, #8
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	685b      	ldr	r3, [r3, #4]
 8012416:	221c      	movs	r2, #28
 8012418:	4619      	mov	r1, r3
 801241a:	f003 fb20 	bl	8015a5e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801241e:	69bb      	ldr	r3, [r7, #24]
 8012420:	68db      	ldr	r3, [r3, #12]
 8012422:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012424:	f107 030c 	add.w	r3, r7, #12
 8012428:	4618      	mov	r0, r3
 801242a:	f000 f825 	bl	8012478 <ip4_route>
 801242e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d011      	beq.n	801245a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012436:	697b      	ldr	r3, [r7, #20]
 8012438:	2200      	movs	r2, #0
 801243a:	709a      	strb	r2, [r3, #2]
 801243c:	2200      	movs	r2, #0
 801243e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012440:	f107 020c 	add.w	r2, r7, #12
 8012444:	693b      	ldr	r3, [r7, #16]
 8012446:	9302      	str	r3, [sp, #8]
 8012448:	2301      	movs	r3, #1
 801244a:	9301      	str	r3, [sp, #4]
 801244c:	2300      	movs	r3, #0
 801244e:	9300      	str	r3, [sp, #0]
 8012450:	2340      	movs	r3, #64	; 0x40
 8012452:	2100      	movs	r1, #0
 8012454:	69f8      	ldr	r0, [r7, #28]
 8012456:	f000 f9c3 	bl	80127e0 <ip4_output_if>
  }
  pbuf_free(q);
 801245a:	69f8      	ldr	r0, [r7, #28]
 801245c:	f7f8 fb76 	bl	800ab4c <pbuf_free>
 8012460:	e000      	b.n	8012464 <icmp_send_response+0xc0>
    return;
 8012462:	bf00      	nop
}
 8012464:	3720      	adds	r7, #32
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	08018e98 	.word	0x08018e98
 8012470:	08018f64 	.word	0x08018f64
 8012474:	08018f08 	.word	0x08018f08

08012478 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012478:	b480      	push	{r7}
 801247a:	b085      	sub	sp, #20
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012480:	4b33      	ldr	r3, [pc, #204]	; (8012550 <ip4_route+0xd8>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	60fb      	str	r3, [r7, #12]
 8012486:	e036      	b.n	80124f6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801248e:	f003 0301 	and.w	r3, r3, #1
 8012492:	b2db      	uxtb	r3, r3
 8012494:	2b00      	cmp	r3, #0
 8012496:	d02b      	beq.n	80124f0 <ip4_route+0x78>
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801249e:	089b      	lsrs	r3, r3, #2
 80124a0:	f003 0301 	and.w	r3, r3, #1
 80124a4:	b2db      	uxtb	r3, r3
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d022      	beq.n	80124f0 <ip4_route+0x78>
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	3304      	adds	r3, #4
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d01d      	beq.n	80124f0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681a      	ldr	r2, [r3, #0]
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	3304      	adds	r3, #4
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	405a      	eors	r2, r3
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	3308      	adds	r3, #8
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	4013      	ands	r3, r2
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d101      	bne.n	80124d0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	e038      	b.n	8012542 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80124d6:	f003 0302 	and.w	r3, r3, #2
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d108      	bne.n	80124f0 <ip4_route+0x78>
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	681a      	ldr	r2, [r3, #0]
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	330c      	adds	r3, #12
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d101      	bne.n	80124f0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	e028      	b.n	8012542 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	60fb      	str	r3, [r7, #12]
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d1c5      	bne.n	8012488 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80124fc:	4b15      	ldr	r3, [pc, #84]	; (8012554 <ip4_route+0xdc>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d01a      	beq.n	801253a <ip4_route+0xc2>
 8012504:	4b13      	ldr	r3, [pc, #76]	; (8012554 <ip4_route+0xdc>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801250c:	f003 0301 	and.w	r3, r3, #1
 8012510:	2b00      	cmp	r3, #0
 8012512:	d012      	beq.n	801253a <ip4_route+0xc2>
 8012514:	4b0f      	ldr	r3, [pc, #60]	; (8012554 <ip4_route+0xdc>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801251c:	f003 0304 	and.w	r3, r3, #4
 8012520:	2b00      	cmp	r3, #0
 8012522:	d00a      	beq.n	801253a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012524:	4b0b      	ldr	r3, [pc, #44]	; (8012554 <ip4_route+0xdc>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	3304      	adds	r3, #4
 801252a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801252c:	2b00      	cmp	r3, #0
 801252e:	d004      	beq.n	801253a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	b2db      	uxtb	r3, r3
 8012536:	2b7f      	cmp	r3, #127	; 0x7f
 8012538:	d101      	bne.n	801253e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801253a:	2300      	movs	r3, #0
 801253c:	e001      	b.n	8012542 <ip4_route+0xca>
  }

  return netif_default;
 801253e:	4b05      	ldr	r3, [pc, #20]	; (8012554 <ip4_route+0xdc>)
 8012540:	681b      	ldr	r3, [r3, #0]
}
 8012542:	4618      	mov	r0, r3
 8012544:	3714      	adds	r7, #20
 8012546:	46bd      	mov	sp, r7
 8012548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254c:	4770      	bx	lr
 801254e:	bf00      	nop
 8012550:	2000e490 	.word	0x2000e490
 8012554:	2000e494 	.word	0x2000e494

08012558 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b082      	sub	sp, #8
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012566:	f003 0301 	and.w	r3, r3, #1
 801256a:	b2db      	uxtb	r3, r3
 801256c:	2b00      	cmp	r3, #0
 801256e:	d016      	beq.n	801259e <ip4_input_accept+0x46>
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	3304      	adds	r3, #4
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d011      	beq.n	801259e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801257a:	4b0b      	ldr	r3, [pc, #44]	; (80125a8 <ip4_input_accept+0x50>)
 801257c:	695a      	ldr	r2, [r3, #20]
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	3304      	adds	r3, #4
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	429a      	cmp	r2, r3
 8012586:	d008      	beq.n	801259a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012588:	4b07      	ldr	r3, [pc, #28]	; (80125a8 <ip4_input_accept+0x50>)
 801258a:	695b      	ldr	r3, [r3, #20]
 801258c:	6879      	ldr	r1, [r7, #4]
 801258e:	4618      	mov	r0, r3
 8012590:	f000 f9fe 	bl	8012990 <ip4_addr_isbroadcast_u32>
 8012594:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012596:	2b00      	cmp	r3, #0
 8012598:	d001      	beq.n	801259e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801259a:	2301      	movs	r3, #1
 801259c:	e000      	b.n	80125a0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801259e:	2300      	movs	r3, #0
}
 80125a0:	4618      	mov	r0, r3
 80125a2:	3708      	adds	r7, #8
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bd80      	pop	{r7, pc}
 80125a8:	20005550 	.word	0x20005550

080125ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b086      	sub	sp, #24
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	781b      	ldrb	r3, [r3, #0]
 80125c0:	091b      	lsrs	r3, r3, #4
 80125c2:	b2db      	uxtb	r3, r3
 80125c4:	2b04      	cmp	r3, #4
 80125c6:	d004      	beq.n	80125d2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	f7f8 fabf 	bl	800ab4c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80125ce:	2300      	movs	r3, #0
 80125d0:	e0fd      	b.n	80127ce <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80125d2:	697b      	ldr	r3, [r7, #20]
 80125d4:	781b      	ldrb	r3, [r3, #0]
 80125d6:	f003 030f 	and.w	r3, r3, #15
 80125da:	b2db      	uxtb	r3, r3
 80125dc:	009b      	lsls	r3, r3, #2
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80125e2:	697b      	ldr	r3, [r7, #20]
 80125e4:	885b      	ldrh	r3, [r3, #2]
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7f6 ff57 	bl	800949c <lwip_htons>
 80125ee:	4603      	mov	r3, r0
 80125f0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	891b      	ldrh	r3, [r3, #8]
 80125f6:	89ba      	ldrh	r2, [r7, #12]
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d204      	bcs.n	8012606 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80125fc:	89bb      	ldrh	r3, [r7, #12]
 80125fe:	4619      	mov	r1, r3
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f7f8 f91d 	bl	800a840 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	895b      	ldrh	r3, [r3, #10]
 801260a:	89fa      	ldrh	r2, [r7, #14]
 801260c:	429a      	cmp	r2, r3
 801260e:	d807      	bhi.n	8012620 <ip4_input+0x74>
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	891b      	ldrh	r3, [r3, #8]
 8012614:	89ba      	ldrh	r2, [r7, #12]
 8012616:	429a      	cmp	r2, r3
 8012618:	d802      	bhi.n	8012620 <ip4_input+0x74>
 801261a:	89fb      	ldrh	r3, [r7, #14]
 801261c:	2b13      	cmp	r3, #19
 801261e:	d804      	bhi.n	801262a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f7f8 fa93 	bl	800ab4c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012626:	2300      	movs	r3, #0
 8012628:	e0d1      	b.n	80127ce <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	691b      	ldr	r3, [r3, #16]
 801262e:	4a6a      	ldr	r2, [pc, #424]	; (80127d8 <ip4_input+0x22c>)
 8012630:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	68db      	ldr	r3, [r3, #12]
 8012636:	4a68      	ldr	r2, [pc, #416]	; (80127d8 <ip4_input+0x22c>)
 8012638:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801263a:	4b67      	ldr	r3, [pc, #412]	; (80127d8 <ip4_input+0x22c>)
 801263c:	695b      	ldr	r3, [r3, #20]
 801263e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012642:	2be0      	cmp	r3, #224	; 0xe0
 8012644:	d112      	bne.n	801266c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801264c:	f003 0301 	and.w	r3, r3, #1
 8012650:	b2db      	uxtb	r3, r3
 8012652:	2b00      	cmp	r3, #0
 8012654:	d007      	beq.n	8012666 <ip4_input+0xba>
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	3304      	adds	r3, #4
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d002      	beq.n	8012666 <ip4_input+0xba>
      netif = inp;
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	613b      	str	r3, [r7, #16]
 8012664:	e02a      	b.n	80126bc <ip4_input+0x110>
    } else {
      netif = NULL;
 8012666:	2300      	movs	r3, #0
 8012668:	613b      	str	r3, [r7, #16]
 801266a:	e027      	b.n	80126bc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801266c:	6838      	ldr	r0, [r7, #0]
 801266e:	f7ff ff73 	bl	8012558 <ip4_input_accept>
 8012672:	4603      	mov	r3, r0
 8012674:	2b00      	cmp	r3, #0
 8012676:	d002      	beq.n	801267e <ip4_input+0xd2>
      netif = inp;
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	613b      	str	r3, [r7, #16]
 801267c:	e01e      	b.n	80126bc <ip4_input+0x110>
    } else {
      netif = NULL;
 801267e:	2300      	movs	r3, #0
 8012680:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012682:	4b55      	ldr	r3, [pc, #340]	; (80127d8 <ip4_input+0x22c>)
 8012684:	695b      	ldr	r3, [r3, #20]
 8012686:	b2db      	uxtb	r3, r3
 8012688:	2b7f      	cmp	r3, #127	; 0x7f
 801268a:	d017      	beq.n	80126bc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801268c:	4b53      	ldr	r3, [pc, #332]	; (80127dc <ip4_input+0x230>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	613b      	str	r3, [r7, #16]
 8012692:	e00e      	b.n	80126b2 <ip4_input+0x106>
          if (netif == inp) {
 8012694:	693a      	ldr	r2, [r7, #16]
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	429a      	cmp	r2, r3
 801269a:	d006      	beq.n	80126aa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801269c:	6938      	ldr	r0, [r7, #16]
 801269e:	f7ff ff5b 	bl	8012558 <ip4_input_accept>
 80126a2:	4603      	mov	r3, r0
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d108      	bne.n	80126ba <ip4_input+0x10e>
 80126a8:	e000      	b.n	80126ac <ip4_input+0x100>
            continue;
 80126aa:	bf00      	nop
        NETIF_FOREACH(netif) {
 80126ac:	693b      	ldr	r3, [r7, #16]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	613b      	str	r3, [r7, #16]
 80126b2:	693b      	ldr	r3, [r7, #16]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d1ed      	bne.n	8012694 <ip4_input+0xe8>
 80126b8:	e000      	b.n	80126bc <ip4_input+0x110>
            break;
 80126ba:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80126bc:	4b46      	ldr	r3, [pc, #280]	; (80127d8 <ip4_input+0x22c>)
 80126be:	691b      	ldr	r3, [r3, #16]
 80126c0:	6839      	ldr	r1, [r7, #0]
 80126c2:	4618      	mov	r0, r3
 80126c4:	f000 f964 	bl	8012990 <ip4_addr_isbroadcast_u32>
 80126c8:	4603      	mov	r3, r0
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d105      	bne.n	80126da <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80126ce:	4b42      	ldr	r3, [pc, #264]	; (80127d8 <ip4_input+0x22c>)
 80126d0:	691b      	ldr	r3, [r3, #16]
 80126d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80126d6:	2be0      	cmp	r3, #224	; 0xe0
 80126d8:	d104      	bne.n	80126e4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f7f8 fa36 	bl	800ab4c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80126e0:	2300      	movs	r3, #0
 80126e2:	e074      	b.n	80127ce <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80126e4:	693b      	ldr	r3, [r7, #16]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d104      	bne.n	80126f4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f7f8 fa2e 	bl	800ab4c <pbuf_free>
    return ERR_OK;
 80126f0:	2300      	movs	r3, #0
 80126f2:	e06c      	b.n	80127ce <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	88db      	ldrh	r3, [r3, #6]
 80126f8:	b29b      	uxth	r3, r3
 80126fa:	461a      	mov	r2, r3
 80126fc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012700:	4013      	ands	r3, r2
 8012702:	2b00      	cmp	r3, #0
 8012704:	d00b      	beq.n	801271e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f000 fc88 	bl	801301c <ip4_reass>
 801270c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d101      	bne.n	8012718 <ip4_input+0x16c>
      return ERR_OK;
 8012714:	2300      	movs	r3, #0
 8012716:	e05a      	b.n	80127ce <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	685b      	ldr	r3, [r3, #4]
 801271c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801271e:	4a2e      	ldr	r2, [pc, #184]	; (80127d8 <ip4_input+0x22c>)
 8012720:	693b      	ldr	r3, [r7, #16]
 8012722:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012724:	4a2c      	ldr	r2, [pc, #176]	; (80127d8 <ip4_input+0x22c>)
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801272a:	4a2b      	ldr	r2, [pc, #172]	; (80127d8 <ip4_input+0x22c>)
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	f003 030f 	and.w	r3, r3, #15
 8012738:	b2db      	uxtb	r3, r3
 801273a:	009b      	lsls	r3, r3, #2
 801273c:	b2db      	uxtb	r3, r3
 801273e:	b29a      	uxth	r2, r3
 8012740:	4b25      	ldr	r3, [pc, #148]	; (80127d8 <ip4_input+0x22c>)
 8012742:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012744:	89fb      	ldrh	r3, [r7, #14]
 8012746:	4619      	mov	r1, r3
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	f7f8 f979 	bl	800aa40 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	7a5b      	ldrb	r3, [r3, #9]
 8012752:	2b01      	cmp	r3, #1
 8012754:	d006      	beq.n	8012764 <ip4_input+0x1b8>
 8012756:	2b06      	cmp	r3, #6
 8012758:	d109      	bne.n	801276e <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801275a:	6839      	ldr	r1, [r7, #0]
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f7fa fa4d 	bl	800cbfc <tcp_input>
        break;
 8012762:	e021      	b.n	80127a8 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012764:	6839      	ldr	r1, [r7, #0]
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f7ff fcf8 	bl	801215c <icmp_input>
        break;
 801276c:	e01c      	b.n	80127a8 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801276e:	4b1a      	ldr	r3, [pc, #104]	; (80127d8 <ip4_input+0x22c>)
 8012770:	695b      	ldr	r3, [r3, #20]
 8012772:	6939      	ldr	r1, [r7, #16]
 8012774:	4618      	mov	r0, r3
 8012776:	f000 f90b 	bl	8012990 <ip4_addr_isbroadcast_u32>
 801277a:	4603      	mov	r3, r0
 801277c:	2b00      	cmp	r3, #0
 801277e:	d10f      	bne.n	80127a0 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012780:	4b15      	ldr	r3, [pc, #84]	; (80127d8 <ip4_input+0x22c>)
 8012782:	695b      	ldr	r3, [r3, #20]
 8012784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012788:	2be0      	cmp	r3, #224	; 0xe0
 801278a:	d009      	beq.n	80127a0 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801278c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012790:	4619      	mov	r1, r3
 8012792:	6878      	ldr	r0, [r7, #4]
 8012794:	f7f8 f9c7 	bl	800ab26 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012798:	2102      	movs	r1, #2
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f7ff fde2 	bl	8012364 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f7f8 f9d3 	bl	800ab4c <pbuf_free>
        break;
 80127a6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80127a8:	4b0b      	ldr	r3, [pc, #44]	; (80127d8 <ip4_input+0x22c>)
 80127aa:	2200      	movs	r2, #0
 80127ac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80127ae:	4b0a      	ldr	r3, [pc, #40]	; (80127d8 <ip4_input+0x22c>)
 80127b0:	2200      	movs	r2, #0
 80127b2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80127b4:	4b08      	ldr	r3, [pc, #32]	; (80127d8 <ip4_input+0x22c>)
 80127b6:	2200      	movs	r2, #0
 80127b8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80127ba:	4b07      	ldr	r3, [pc, #28]	; (80127d8 <ip4_input+0x22c>)
 80127bc:	2200      	movs	r2, #0
 80127be:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80127c0:	4b05      	ldr	r3, [pc, #20]	; (80127d8 <ip4_input+0x22c>)
 80127c2:	2200      	movs	r2, #0
 80127c4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80127c6:	4b04      	ldr	r3, [pc, #16]	; (80127d8 <ip4_input+0x22c>)
 80127c8:	2200      	movs	r2, #0
 80127ca:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80127cc:	2300      	movs	r3, #0
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3718      	adds	r7, #24
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}
 80127d6:	bf00      	nop
 80127d8:	20005550 	.word	0x20005550
 80127dc:	2000e490 	.word	0x2000e490

080127e0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b08a      	sub	sp, #40	; 0x28
 80127e4:	af04      	add	r7, sp, #16
 80127e6:	60f8      	str	r0, [r7, #12]
 80127e8:	60b9      	str	r1, [r7, #8]
 80127ea:	607a      	str	r2, [r7, #4]
 80127ec:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d009      	beq.n	801280c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d003      	beq.n	8012806 <ip4_output_if+0x26>
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d102      	bne.n	801280c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012808:	3304      	adds	r3, #4
 801280a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801280c:	78fa      	ldrb	r2, [r7, #3]
 801280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012810:	9302      	str	r3, [sp, #8]
 8012812:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012816:	9301      	str	r3, [sp, #4]
 8012818:	f897 3020 	ldrb.w	r3, [r7, #32]
 801281c:	9300      	str	r3, [sp, #0]
 801281e:	4613      	mov	r3, r2
 8012820:	687a      	ldr	r2, [r7, #4]
 8012822:	6979      	ldr	r1, [r7, #20]
 8012824:	68f8      	ldr	r0, [r7, #12]
 8012826:	f000 f805 	bl	8012834 <ip4_output_if_src>
 801282a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801282c:	4618      	mov	r0, r3
 801282e:	3718      	adds	r7, #24
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}

08012834 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b088      	sub	sp, #32
 8012838:	af00      	add	r7, sp, #0
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	60b9      	str	r1, [r7, #8]
 801283e:	607a      	str	r2, [r7, #4]
 8012840:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	7b9b      	ldrb	r3, [r3, #14]
 8012846:	2b01      	cmp	r3, #1
 8012848:	d006      	beq.n	8012858 <ip4_output_if_src+0x24>
 801284a:	4b4b      	ldr	r3, [pc, #300]	; (8012978 <ip4_output_if_src+0x144>)
 801284c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012850:	494a      	ldr	r1, [pc, #296]	; (801297c <ip4_output_if_src+0x148>)
 8012852:	484b      	ldr	r0, [pc, #300]	; (8012980 <ip4_output_if_src+0x14c>)
 8012854:	f002 ffd0 	bl	80157f8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d060      	beq.n	8012920 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801285e:	2314      	movs	r3, #20
 8012860:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012862:	2114      	movs	r1, #20
 8012864:	68f8      	ldr	r0, [r7, #12]
 8012866:	f7f8 f8db 	bl	800aa20 <pbuf_add_header>
 801286a:	4603      	mov	r3, r0
 801286c:	2b00      	cmp	r3, #0
 801286e:	d002      	beq.n	8012876 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012870:	f06f 0301 	mvn.w	r3, #1
 8012874:	e07c      	b.n	8012970 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	895b      	ldrh	r3, [r3, #10]
 8012880:	2b13      	cmp	r3, #19
 8012882:	d806      	bhi.n	8012892 <ip4_output_if_src+0x5e>
 8012884:	4b3c      	ldr	r3, [pc, #240]	; (8012978 <ip4_output_if_src+0x144>)
 8012886:	f44f 7262 	mov.w	r2, #904	; 0x388
 801288a:	493e      	ldr	r1, [pc, #248]	; (8012984 <ip4_output_if_src+0x150>)
 801288c:	483c      	ldr	r0, [pc, #240]	; (8012980 <ip4_output_if_src+0x14c>)
 801288e:	f002 ffb3 	bl	80157f8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012892:	69fb      	ldr	r3, [r7, #28]
 8012894:	78fa      	ldrb	r2, [r7, #3]
 8012896:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012898:	69fb      	ldr	r3, [r7, #28]
 801289a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801289e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681a      	ldr	r2, [r3, #0]
 80128a4:	69fb      	ldr	r3, [r7, #28]
 80128a6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80128a8:	8b7b      	ldrh	r3, [r7, #26]
 80128aa:	089b      	lsrs	r3, r3, #2
 80128ac:	b29b      	uxth	r3, r3
 80128ae:	b2db      	uxtb	r3, r3
 80128b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128b4:	b2da      	uxtb	r2, r3
 80128b6:	69fb      	ldr	r3, [r7, #28]
 80128b8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80128ba:	69fb      	ldr	r3, [r7, #28]
 80128bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80128c0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	891b      	ldrh	r3, [r3, #8]
 80128c6:	4618      	mov	r0, r3
 80128c8:	f7f6 fde8 	bl	800949c <lwip_htons>
 80128cc:	4603      	mov	r3, r0
 80128ce:	461a      	mov	r2, r3
 80128d0:	69fb      	ldr	r3, [r7, #28]
 80128d2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80128d4:	69fb      	ldr	r3, [r7, #28]
 80128d6:	2200      	movs	r2, #0
 80128d8:	719a      	strb	r2, [r3, #6]
 80128da:	2200      	movs	r2, #0
 80128dc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80128de:	4b2a      	ldr	r3, [pc, #168]	; (8012988 <ip4_output_if_src+0x154>)
 80128e0:	881b      	ldrh	r3, [r3, #0]
 80128e2:	4618      	mov	r0, r3
 80128e4:	f7f6 fdda 	bl	800949c <lwip_htons>
 80128e8:	4603      	mov	r3, r0
 80128ea:	461a      	mov	r2, r3
 80128ec:	69fb      	ldr	r3, [r7, #28]
 80128ee:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80128f0:	4b25      	ldr	r3, [pc, #148]	; (8012988 <ip4_output_if_src+0x154>)
 80128f2:	881b      	ldrh	r3, [r3, #0]
 80128f4:	3301      	adds	r3, #1
 80128f6:	b29a      	uxth	r2, r3
 80128f8:	4b23      	ldr	r3, [pc, #140]	; (8012988 <ip4_output_if_src+0x154>)
 80128fa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d104      	bne.n	801290c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012902:	4b22      	ldr	r3, [pc, #136]	; (801298c <ip4_output_if_src+0x158>)
 8012904:	681a      	ldr	r2, [r3, #0]
 8012906:	69fb      	ldr	r3, [r7, #28]
 8012908:	60da      	str	r2, [r3, #12]
 801290a:	e003      	b.n	8012914 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	681a      	ldr	r2, [r3, #0]
 8012910:	69fb      	ldr	r3, [r7, #28]
 8012912:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012914:	69fb      	ldr	r3, [r7, #28]
 8012916:	2200      	movs	r2, #0
 8012918:	729a      	strb	r2, [r3, #10]
 801291a:	2200      	movs	r2, #0
 801291c:	72da      	strb	r2, [r3, #11]
 801291e:	e00f      	b.n	8012940 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	895b      	ldrh	r3, [r3, #10]
 8012924:	2b13      	cmp	r3, #19
 8012926:	d802      	bhi.n	801292e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012928:	f06f 0301 	mvn.w	r3, #1
 801292c:	e020      	b.n	8012970 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	685b      	ldr	r3, [r3, #4]
 8012932:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012934:	69fb      	ldr	r3, [r7, #28]
 8012936:	691b      	ldr	r3, [r3, #16]
 8012938:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801293a:	f107 0314 	add.w	r3, r7, #20
 801293e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012942:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012944:	2b00      	cmp	r3, #0
 8012946:	d00c      	beq.n	8012962 <ip4_output_if_src+0x12e>
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	891a      	ldrh	r2, [r3, #8]
 801294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801294e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012950:	429a      	cmp	r2, r3
 8012952:	d906      	bls.n	8012962 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012954:	687a      	ldr	r2, [r7, #4]
 8012956:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012958:	68f8      	ldr	r0, [r7, #12]
 801295a:	f000 fd53 	bl	8013404 <ip4_frag>
 801295e:	4603      	mov	r3, r0
 8012960:	e006      	b.n	8012970 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012964:	695b      	ldr	r3, [r3, #20]
 8012966:	687a      	ldr	r2, [r7, #4]
 8012968:	68f9      	ldr	r1, [r7, #12]
 801296a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801296c:	4798      	blx	r3
 801296e:	4603      	mov	r3, r0
}
 8012970:	4618      	mov	r0, r3
 8012972:	3720      	adds	r7, #32
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}
 8012978:	08018f90 	.word	0x08018f90
 801297c:	08018fc4 	.word	0x08018fc4
 8012980:	08018fd0 	.word	0x08018fd0
 8012984:	08018ff8 	.word	0x08018ff8
 8012988:	2000e5ea 	.word	0x2000e5ea
 801298c:	080197f0 	.word	0x080197f0

08012990 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012990:	b480      	push	{r7}
 8012992:	b085      	sub	sp, #20
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129a4:	d002      	beq.n	80129ac <ip4_addr_isbroadcast_u32+0x1c>
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d101      	bne.n	80129b0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80129ac:	2301      	movs	r3, #1
 80129ae:	e02a      	b.n	8012a06 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129b6:	f003 0302 	and.w	r3, r3, #2
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d101      	bne.n	80129c2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80129be:	2300      	movs	r3, #0
 80129c0:	e021      	b.n	8012a06 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	3304      	adds	r3, #4
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	687a      	ldr	r2, [r7, #4]
 80129ca:	429a      	cmp	r2, r3
 80129cc:	d101      	bne.n	80129d2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80129ce:	2300      	movs	r3, #0
 80129d0:	e019      	b.n	8012a06 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80129d2:	68fa      	ldr	r2, [r7, #12]
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	3304      	adds	r3, #4
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	405a      	eors	r2, r3
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	3308      	adds	r3, #8
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	4013      	ands	r3, r2
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d10d      	bne.n	8012a04 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	3308      	adds	r3, #8
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	43da      	mvns	r2, r3
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	3308      	adds	r3, #8
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d101      	bne.n	8012a04 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012a00:	2301      	movs	r3, #1
 8012a02:	e000      	b.n	8012a06 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012a04:	2300      	movs	r3, #0
  }
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3714      	adds	r7, #20
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a10:	4770      	bx	lr
	...

08012a14 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b084      	sub	sp, #16
 8012a18:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012a1e:	4b12      	ldr	r3, [pc, #72]	; (8012a68 <ip_reass_tmr+0x54>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012a24:	e018      	b.n	8012a58 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	7fdb      	ldrb	r3, [r3, #31]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d00b      	beq.n	8012a46 <ip_reass_tmr+0x32>
      r->timer--;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	7fdb      	ldrb	r3, [r3, #31]
 8012a32:	3b01      	subs	r3, #1
 8012a34:	b2da      	uxtb	r2, r3
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	60fb      	str	r3, [r7, #12]
 8012a44:	e008      	b.n	8012a58 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012a50:	68b9      	ldr	r1, [r7, #8]
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f000 f80a 	bl	8012a6c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d1e3      	bne.n	8012a26 <ip_reass_tmr+0x12>
    }
  }
}
 8012a5e:	bf00      	nop
 8012a60:	bf00      	nop
 8012a62:	3710      	adds	r7, #16
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}
 8012a68:	2000e5ec 	.word	0x2000e5ec

08012a6c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b088      	sub	sp, #32
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012a76:	2300      	movs	r3, #0
 8012a78:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012a7a:	683a      	ldr	r2, [r7, #0]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d105      	bne.n	8012a8e <ip_reass_free_complete_datagram+0x22>
 8012a82:	4b45      	ldr	r3, [pc, #276]	; (8012b98 <ip_reass_free_complete_datagram+0x12c>)
 8012a84:	22ab      	movs	r2, #171	; 0xab
 8012a86:	4945      	ldr	r1, [pc, #276]	; (8012b9c <ip_reass_free_complete_datagram+0x130>)
 8012a88:	4845      	ldr	r0, [pc, #276]	; (8012ba0 <ip_reass_free_complete_datagram+0x134>)
 8012a8a:	f002 feb5 	bl	80157f8 <iprintf>
  if (prev != NULL) {
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d00a      	beq.n	8012aaa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	687a      	ldr	r2, [r7, #4]
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	d005      	beq.n	8012aaa <ip_reass_free_complete_datagram+0x3e>
 8012a9e:	4b3e      	ldr	r3, [pc, #248]	; (8012b98 <ip_reass_free_complete_datagram+0x12c>)
 8012aa0:	22ad      	movs	r2, #173	; 0xad
 8012aa2:	4940      	ldr	r1, [pc, #256]	; (8012ba4 <ip_reass_free_complete_datagram+0x138>)
 8012aa4:	483e      	ldr	r0, [pc, #248]	; (8012ba0 <ip_reass_free_complete_datagram+0x134>)
 8012aa6:	f002 fea7 	bl	80157f8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	685b      	ldr	r3, [r3, #4]
 8012aae:	685b      	ldr	r3, [r3, #4]
 8012ab0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	889b      	ldrh	r3, [r3, #4]
 8012ab6:	b29b      	uxth	r3, r3
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d12a      	bne.n	8012b12 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	685b      	ldr	r3, [r3, #4]
 8012ac0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	681a      	ldr	r2, [r3, #0]
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012aca:	69bb      	ldr	r3, [r7, #24]
 8012acc:	6858      	ldr	r0, [r3, #4]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	3308      	adds	r3, #8
 8012ad2:	2214      	movs	r2, #20
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	f002 ffc2 	bl	8015a5e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012ada:	2101      	movs	r1, #1
 8012adc:	69b8      	ldr	r0, [r7, #24]
 8012ade:	f7ff fc51 	bl	8012384 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012ae2:	69b8      	ldr	r0, [r7, #24]
 8012ae4:	f7f8 f8ba 	bl	800ac5c <pbuf_clen>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012aec:	8bfa      	ldrh	r2, [r7, #30]
 8012aee:	8a7b      	ldrh	r3, [r7, #18]
 8012af0:	4413      	add	r3, r2
 8012af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012af6:	db05      	blt.n	8012b04 <ip_reass_free_complete_datagram+0x98>
 8012af8:	4b27      	ldr	r3, [pc, #156]	; (8012b98 <ip_reass_free_complete_datagram+0x12c>)
 8012afa:	22bc      	movs	r2, #188	; 0xbc
 8012afc:	492a      	ldr	r1, [pc, #168]	; (8012ba8 <ip_reass_free_complete_datagram+0x13c>)
 8012afe:	4828      	ldr	r0, [pc, #160]	; (8012ba0 <ip_reass_free_complete_datagram+0x134>)
 8012b00:	f002 fe7a 	bl	80157f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012b04:	8bfa      	ldrh	r2, [r7, #30]
 8012b06:	8a7b      	ldrh	r3, [r7, #18]
 8012b08:	4413      	add	r3, r2
 8012b0a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012b0c:	69b8      	ldr	r0, [r7, #24]
 8012b0e:	f7f8 f81d 	bl	800ab4c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	685b      	ldr	r3, [r3, #4]
 8012b16:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012b18:	e01f      	b.n	8012b5a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012b1a:	69bb      	ldr	r3, [r7, #24]
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012b20:	69bb      	ldr	r3, [r7, #24]
 8012b22:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012b2a:	68f8      	ldr	r0, [r7, #12]
 8012b2c:	f7f8 f896 	bl	800ac5c <pbuf_clen>
 8012b30:	4603      	mov	r3, r0
 8012b32:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012b34:	8bfa      	ldrh	r2, [r7, #30]
 8012b36:	8a7b      	ldrh	r3, [r7, #18]
 8012b38:	4413      	add	r3, r2
 8012b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b3e:	db05      	blt.n	8012b4c <ip_reass_free_complete_datagram+0xe0>
 8012b40:	4b15      	ldr	r3, [pc, #84]	; (8012b98 <ip_reass_free_complete_datagram+0x12c>)
 8012b42:	22cc      	movs	r2, #204	; 0xcc
 8012b44:	4918      	ldr	r1, [pc, #96]	; (8012ba8 <ip_reass_free_complete_datagram+0x13c>)
 8012b46:	4816      	ldr	r0, [pc, #88]	; (8012ba0 <ip_reass_free_complete_datagram+0x134>)
 8012b48:	f002 fe56 	bl	80157f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012b4c:	8bfa      	ldrh	r2, [r7, #30]
 8012b4e:	8a7b      	ldrh	r3, [r7, #18]
 8012b50:	4413      	add	r3, r2
 8012b52:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012b54:	68f8      	ldr	r0, [r7, #12]
 8012b56:	f7f7 fff9 	bl	800ab4c <pbuf_free>
  while (p != NULL) {
 8012b5a:	69bb      	ldr	r3, [r7, #24]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d1dc      	bne.n	8012b1a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012b60:	6839      	ldr	r1, [r7, #0]
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f000 f8c2 	bl	8012cec <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012b68:	4b10      	ldr	r3, [pc, #64]	; (8012bac <ip_reass_free_complete_datagram+0x140>)
 8012b6a:	881b      	ldrh	r3, [r3, #0]
 8012b6c:	8bfa      	ldrh	r2, [r7, #30]
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d905      	bls.n	8012b7e <ip_reass_free_complete_datagram+0x112>
 8012b72:	4b09      	ldr	r3, [pc, #36]	; (8012b98 <ip_reass_free_complete_datagram+0x12c>)
 8012b74:	22d2      	movs	r2, #210	; 0xd2
 8012b76:	490e      	ldr	r1, [pc, #56]	; (8012bb0 <ip_reass_free_complete_datagram+0x144>)
 8012b78:	4809      	ldr	r0, [pc, #36]	; (8012ba0 <ip_reass_free_complete_datagram+0x134>)
 8012b7a:	f002 fe3d 	bl	80157f8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012b7e:	4b0b      	ldr	r3, [pc, #44]	; (8012bac <ip_reass_free_complete_datagram+0x140>)
 8012b80:	881a      	ldrh	r2, [r3, #0]
 8012b82:	8bfb      	ldrh	r3, [r7, #30]
 8012b84:	1ad3      	subs	r3, r2, r3
 8012b86:	b29a      	uxth	r2, r3
 8012b88:	4b08      	ldr	r3, [pc, #32]	; (8012bac <ip_reass_free_complete_datagram+0x140>)
 8012b8a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012b8c:	8bfb      	ldrh	r3, [r7, #30]
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	3720      	adds	r7, #32
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}
 8012b96:	bf00      	nop
 8012b98:	08019028 	.word	0x08019028
 8012b9c:	08019064 	.word	0x08019064
 8012ba0:	08019070 	.word	0x08019070
 8012ba4:	08019098 	.word	0x08019098
 8012ba8:	080190ac 	.word	0x080190ac
 8012bac:	2000e5f0 	.word	0x2000e5f0
 8012bb0:	080190cc 	.word	0x080190cc

08012bb4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b08a      	sub	sp, #40	; 0x28
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012bca:	2300      	movs	r3, #0
 8012bcc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012bd2:	4b28      	ldr	r3, [pc, #160]	; (8012c74 <ip_reass_remove_oldest_datagram+0xc0>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012bd8:	e030      	b.n	8012c3c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bdc:	695a      	ldr	r2, [r3, #20]
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	68db      	ldr	r3, [r3, #12]
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d10c      	bne.n	8012c00 <ip_reass_remove_oldest_datagram+0x4c>
 8012be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be8:	699a      	ldr	r2, [r3, #24]
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	691b      	ldr	r3, [r3, #16]
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	d106      	bne.n	8012c00 <ip_reass_remove_oldest_datagram+0x4c>
 8012bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf4:	899a      	ldrh	r2, [r3, #12]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	889b      	ldrh	r3, [r3, #4]
 8012bfa:	b29b      	uxth	r3, r3
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d014      	beq.n	8012c2a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012c00:	693b      	ldr	r3, [r7, #16]
 8012c02:	3301      	adds	r3, #1
 8012c04:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012c06:	6a3b      	ldr	r3, [r7, #32]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d104      	bne.n	8012c16 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	61bb      	str	r3, [r7, #24]
 8012c14:	e009      	b.n	8012c2a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c18:	7fda      	ldrb	r2, [r3, #31]
 8012c1a:	6a3b      	ldr	r3, [r7, #32]
 8012c1c:	7fdb      	ldrb	r3, [r3, #31]
 8012c1e:	429a      	cmp	r2, r3
 8012c20:	d803      	bhi.n	8012c2a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c24:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012c26:	69fb      	ldr	r3, [r7, #28]
 8012c28:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d001      	beq.n	8012c36 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c34:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d1cb      	bne.n	8012bda <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012c42:	6a3b      	ldr	r3, [r7, #32]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d008      	beq.n	8012c5a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012c48:	69b9      	ldr	r1, [r7, #24]
 8012c4a:	6a38      	ldr	r0, [r7, #32]
 8012c4c:	f7ff ff0e 	bl	8012a6c <ip_reass_free_complete_datagram>
 8012c50:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012c52:	697a      	ldr	r2, [r7, #20]
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	4413      	add	r3, r2
 8012c58:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012c5a:	697a      	ldr	r2, [r7, #20]
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	da02      	bge.n	8012c68 <ip_reass_remove_oldest_datagram+0xb4>
 8012c62:	693b      	ldr	r3, [r7, #16]
 8012c64:	2b01      	cmp	r3, #1
 8012c66:	dcac      	bgt.n	8012bc2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012c68:	697b      	ldr	r3, [r7, #20]
}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	3728      	adds	r7, #40	; 0x28
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	bf00      	nop
 8012c74:	2000e5ec 	.word	0x2000e5ec

08012c78 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b084      	sub	sp, #16
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
 8012c80:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012c82:	2003      	movs	r0, #3
 8012c84:	f7f7 f880 	bl	8009d88 <memp_malloc>
 8012c88:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d110      	bne.n	8012cb2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012c90:	6839      	ldr	r1, [r7, #0]
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f7ff ff8e 	bl	8012bb4 <ip_reass_remove_oldest_datagram>
 8012c98:	4602      	mov	r2, r0
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	4293      	cmp	r3, r2
 8012c9e:	dc03      	bgt.n	8012ca8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012ca0:	2003      	movs	r0, #3
 8012ca2:	f7f7 f871 	bl	8009d88 <memp_malloc>
 8012ca6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d101      	bne.n	8012cb2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	e016      	b.n	8012ce0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012cb2:	2220      	movs	r2, #32
 8012cb4:	2100      	movs	r1, #0
 8012cb6:	68f8      	ldr	r0, [r7, #12]
 8012cb8:	f002 fe5c 	bl	8015974 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	220f      	movs	r2, #15
 8012cc0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012cc2:	4b09      	ldr	r3, [pc, #36]	; (8012ce8 <ip_reass_enqueue_new_datagram+0x70>)
 8012cc4:	681a      	ldr	r2, [r3, #0]
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012cca:	4a07      	ldr	r2, [pc, #28]	; (8012ce8 <ip_reass_enqueue_new_datagram+0x70>)
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	3308      	adds	r3, #8
 8012cd4:	2214      	movs	r2, #20
 8012cd6:	6879      	ldr	r1, [r7, #4]
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f002 fec0 	bl	8015a5e <memcpy>
  return ipr;
 8012cde:	68fb      	ldr	r3, [r7, #12]
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3710      	adds	r7, #16
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}
 8012ce8:	2000e5ec 	.word	0x2000e5ec

08012cec <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b082      	sub	sp, #8
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012cf6:	4b10      	ldr	r3, [pc, #64]	; (8012d38 <ip_reass_dequeue_datagram+0x4c>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	687a      	ldr	r2, [r7, #4]
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	d104      	bne.n	8012d0a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	4a0c      	ldr	r2, [pc, #48]	; (8012d38 <ip_reass_dequeue_datagram+0x4c>)
 8012d06:	6013      	str	r3, [r2, #0]
 8012d08:	e00d      	b.n	8012d26 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d106      	bne.n	8012d1e <ip_reass_dequeue_datagram+0x32>
 8012d10:	4b0a      	ldr	r3, [pc, #40]	; (8012d3c <ip_reass_dequeue_datagram+0x50>)
 8012d12:	f240 1245 	movw	r2, #325	; 0x145
 8012d16:	490a      	ldr	r1, [pc, #40]	; (8012d40 <ip_reass_dequeue_datagram+0x54>)
 8012d18:	480a      	ldr	r0, [pc, #40]	; (8012d44 <ip_reass_dequeue_datagram+0x58>)
 8012d1a:	f002 fd6d 	bl	80157f8 <iprintf>
    prev->next = ipr->next;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681a      	ldr	r2, [r3, #0]
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012d26:	6879      	ldr	r1, [r7, #4]
 8012d28:	2003      	movs	r0, #3
 8012d2a:	f7f7 f89d 	bl	8009e68 <memp_free>
}
 8012d2e:	bf00      	nop
 8012d30:	3708      	adds	r7, #8
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}
 8012d36:	bf00      	nop
 8012d38:	2000e5ec 	.word	0x2000e5ec
 8012d3c:	08019028 	.word	0x08019028
 8012d40:	080190f0 	.word	0x080190f0
 8012d44:	08019070 	.word	0x08019070

08012d48 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b08c      	sub	sp, #48	; 0x30
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	60f8      	str	r0, [r7, #12]
 8012d50:	60b9      	str	r1, [r7, #8]
 8012d52:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012d54:	2300      	movs	r3, #0
 8012d56:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012d58:	2301      	movs	r3, #1
 8012d5a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012d62:	69fb      	ldr	r3, [r7, #28]
 8012d64:	885b      	ldrh	r3, [r3, #2]
 8012d66:	b29b      	uxth	r3, r3
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f7f6 fb97 	bl	800949c <lwip_htons>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012d72:	69fb      	ldr	r3, [r7, #28]
 8012d74:	781b      	ldrb	r3, [r3, #0]
 8012d76:	f003 030f 	and.w	r3, r3, #15
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	009b      	lsls	r3, r3, #2
 8012d7e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012d80:	7e7b      	ldrb	r3, [r7, #25]
 8012d82:	b29b      	uxth	r3, r3
 8012d84:	8b7a      	ldrh	r2, [r7, #26]
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d202      	bcs.n	8012d90 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8012d8e:	e135      	b.n	8012ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012d90:	7e7b      	ldrb	r3, [r7, #25]
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	8b7a      	ldrh	r2, [r7, #26]
 8012d96:	1ad3      	subs	r3, r2, r3
 8012d98:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012d9a:	69fb      	ldr	r3, [r7, #28]
 8012d9c:	88db      	ldrh	r3, [r3, #6]
 8012d9e:	b29b      	uxth	r3, r3
 8012da0:	4618      	mov	r0, r3
 8012da2:	f7f6 fb7b 	bl	800949c <lwip_htons>
 8012da6:	4603      	mov	r3, r0
 8012da8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012dac:	b29b      	uxth	r3, r3
 8012dae:	00db      	lsls	r3, r3, #3
 8012db0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	685b      	ldr	r3, [r3, #4]
 8012db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dba:	2200      	movs	r2, #0
 8012dbc:	701a      	strb	r2, [r3, #0]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	705a      	strb	r2, [r3, #1]
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	709a      	strb	r2, [r3, #2]
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dcc:	8afa      	ldrh	r2, [r7, #22]
 8012dce:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012dd0:	8afa      	ldrh	r2, [r7, #22]
 8012dd2:	8b7b      	ldrh	r3, [r7, #26]
 8012dd4:	4413      	add	r3, r2
 8012dd6:	b29a      	uxth	r2, r3
 8012dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dda:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dde:	88db      	ldrh	r3, [r3, #6]
 8012de0:	b29b      	uxth	r3, r3
 8012de2:	8afa      	ldrh	r2, [r7, #22]
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d902      	bls.n	8012dee <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012de8:	f04f 33ff 	mov.w	r3, #4294967295
 8012dec:	e106      	b.n	8012ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	685b      	ldr	r3, [r3, #4]
 8012df2:	627b      	str	r3, [r7, #36]	; 0x24
 8012df4:	e068      	b.n	8012ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df8:	685b      	ldr	r3, [r3, #4]
 8012dfa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfe:	889b      	ldrh	r3, [r3, #4]
 8012e00:	b29a      	uxth	r2, r3
 8012e02:	693b      	ldr	r3, [r7, #16]
 8012e04:	889b      	ldrh	r3, [r3, #4]
 8012e06:	b29b      	uxth	r3, r3
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d235      	bcs.n	8012e78 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e10:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d020      	beq.n	8012e5a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e1a:	889b      	ldrh	r3, [r3, #4]
 8012e1c:	b29a      	uxth	r2, r3
 8012e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e20:	88db      	ldrh	r3, [r3, #6]
 8012e22:	b29b      	uxth	r3, r3
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d307      	bcc.n	8012e38 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e2a:	88db      	ldrh	r3, [r3, #6]
 8012e2c:	b29a      	uxth	r2, r3
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	889b      	ldrh	r3, [r3, #4]
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d902      	bls.n	8012e3e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012e38:	f04f 33ff 	mov.w	r3, #4294967295
 8012e3c:	e0de      	b.n	8012ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e40:	68ba      	ldr	r2, [r7, #8]
 8012e42:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e46:	88db      	ldrh	r3, [r3, #6]
 8012e48:	b29a      	uxth	r2, r3
 8012e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e4c:	889b      	ldrh	r3, [r3, #4]
 8012e4e:	b29b      	uxth	r3, r3
 8012e50:	429a      	cmp	r2, r3
 8012e52:	d03d      	beq.n	8012ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012e54:	2300      	movs	r3, #0
 8012e56:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012e58:	e03a      	b.n	8012ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e5c:	88db      	ldrh	r3, [r3, #6]
 8012e5e:	b29a      	uxth	r2, r3
 8012e60:	693b      	ldr	r3, [r7, #16]
 8012e62:	889b      	ldrh	r3, [r3, #4]
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d902      	bls.n	8012e70 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8012e6e:	e0c5      	b.n	8012ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	68ba      	ldr	r2, [r7, #8]
 8012e74:	605a      	str	r2, [r3, #4]
      break;
 8012e76:	e02b      	b.n	8012ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e7a:	889b      	ldrh	r3, [r3, #4]
 8012e7c:	b29a      	uxth	r2, r3
 8012e7e:	693b      	ldr	r3, [r7, #16]
 8012e80:	889b      	ldrh	r3, [r3, #4]
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d102      	bne.n	8012e8e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012e88:	f04f 33ff 	mov.w	r3, #4294967295
 8012e8c:	e0b6      	b.n	8012ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e90:	889b      	ldrh	r3, [r3, #4]
 8012e92:	b29a      	uxth	r2, r3
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	88db      	ldrh	r3, [r3, #6]
 8012e98:	b29b      	uxth	r3, r3
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	d202      	bcs.n	8012ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8012ea2:	e0ab      	b.n	8012ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d009      	beq.n	8012ebe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eac:	88db      	ldrh	r3, [r3, #6]
 8012eae:	b29a      	uxth	r2, r3
 8012eb0:	693b      	ldr	r3, [r7, #16]
 8012eb2:	889b      	ldrh	r3, [r3, #4]
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d001      	beq.n	8012ebe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012ebe:	693b      	ldr	r3, [r7, #16]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012ec4:	693b      	ldr	r3, [r7, #16]
 8012ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d193      	bne.n	8012df6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012ece:	e000      	b.n	8012ed2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012ed0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d12d      	bne.n	8012f34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d01c      	beq.n	8012f18 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee0:	88db      	ldrh	r3, [r3, #6]
 8012ee2:	b29a      	uxth	r2, r3
 8012ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ee6:	889b      	ldrh	r3, [r3, #4]
 8012ee8:	b29b      	uxth	r3, r3
 8012eea:	429a      	cmp	r2, r3
 8012eec:	d906      	bls.n	8012efc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012eee:	4b45      	ldr	r3, [pc, #276]	; (8013004 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012ef0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012ef4:	4944      	ldr	r1, [pc, #272]	; (8013008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012ef6:	4845      	ldr	r0, [pc, #276]	; (801300c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012ef8:	f002 fc7e 	bl	80157f8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012efe:	68ba      	ldr	r2, [r7, #8]
 8012f00:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f04:	88db      	ldrh	r3, [r3, #6]
 8012f06:	b29a      	uxth	r2, r3
 8012f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f0a:	889b      	ldrh	r3, [r3, #4]
 8012f0c:	b29b      	uxth	r3, r3
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d010      	beq.n	8012f34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012f12:	2300      	movs	r3, #0
 8012f14:	623b      	str	r3, [r7, #32]
 8012f16:	e00d      	b.n	8012f34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d006      	beq.n	8012f2e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012f20:	4b38      	ldr	r3, [pc, #224]	; (8013004 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012f22:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012f26:	493a      	ldr	r1, [pc, #232]	; (8013010 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012f28:	4838      	ldr	r0, [pc, #224]	; (801300c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012f2a:	f002 fc65 	bl	80157f8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	68ba      	ldr	r2, [r7, #8]
 8012f32:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d105      	bne.n	8012f46 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	7f9b      	ldrb	r3, [r3, #30]
 8012f3e:	f003 0301 	and.w	r3, r3, #1
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d059      	beq.n	8012ffa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012f46:	6a3b      	ldr	r3, [r7, #32]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d04f      	beq.n	8012fec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	685b      	ldr	r3, [r3, #4]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d006      	beq.n	8012f62 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	685b      	ldr	r3, [r3, #4]
 8012f58:	685b      	ldr	r3, [r3, #4]
 8012f5a:	889b      	ldrh	r3, [r3, #4]
 8012f5c:	b29b      	uxth	r3, r3
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d002      	beq.n	8012f68 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012f62:	2300      	movs	r3, #0
 8012f64:	623b      	str	r3, [r7, #32]
 8012f66:	e041      	b.n	8012fec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f6a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012f72:	e012      	b.n	8012f9a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f76:	685b      	ldr	r3, [r3, #4]
 8012f78:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f7c:	88db      	ldrh	r3, [r3, #6]
 8012f7e:	b29a      	uxth	r2, r3
 8012f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f82:	889b      	ldrh	r3, [r3, #4]
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	429a      	cmp	r2, r3
 8012f88:	d002      	beq.n	8012f90 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	623b      	str	r3, [r7, #32]
            break;
 8012f8e:	e007      	b.n	8012fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f92:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d1e9      	bne.n	8012f74 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012fa0:	6a3b      	ldr	r3, [r7, #32]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d022      	beq.n	8012fec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d106      	bne.n	8012fbc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012fae:	4b15      	ldr	r3, [pc, #84]	; (8013004 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012fb0:	f240 12df 	movw	r2, #479	; 0x1df
 8012fb4:	4917      	ldr	r1, [pc, #92]	; (8013014 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012fb6:	4815      	ldr	r0, [pc, #84]	; (801300c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012fb8:	f002 fc1e 	bl	80157f8 <iprintf>
          LWIP_ASSERT("sanity check",
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	685b      	ldr	r3, [r3, #4]
 8012fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d106      	bne.n	8012fd6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012fc8:	4b0e      	ldr	r3, [pc, #56]	; (8013004 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012fca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012fce:	4911      	ldr	r1, [pc, #68]	; (8013014 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012fd0:	480e      	ldr	r0, [pc, #56]	; (801300c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012fd2:	f002 fc11 	bl	80157f8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d006      	beq.n	8012fec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012fde:	4b09      	ldr	r3, [pc, #36]	; (8013004 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012fe0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012fe4:	490c      	ldr	r1, [pc, #48]	; (8013018 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012fe6:	4809      	ldr	r0, [pc, #36]	; (801300c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012fe8:	f002 fc06 	bl	80157f8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012fec:	6a3b      	ldr	r3, [r7, #32]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	bf14      	ite	ne
 8012ff2:	2301      	movne	r3, #1
 8012ff4:	2300      	moveq	r3, #0
 8012ff6:	b2db      	uxtb	r3, r3
 8012ff8:	e000      	b.n	8012ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012ffa:	2300      	movs	r3, #0
}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3730      	adds	r7, #48	; 0x30
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}
 8013004:	08019028 	.word	0x08019028
 8013008:	0801910c 	.word	0x0801910c
 801300c:	08019070 	.word	0x08019070
 8013010:	0801912c 	.word	0x0801912c
 8013014:	08019164 	.word	0x08019164
 8013018:	08019174 	.word	0x08019174

0801301c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b08e      	sub	sp, #56	; 0x38
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	685b      	ldr	r3, [r3, #4]
 8013028:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801302c:	781b      	ldrb	r3, [r3, #0]
 801302e:	f003 030f 	and.w	r3, r3, #15
 8013032:	b2db      	uxtb	r3, r3
 8013034:	009b      	lsls	r3, r3, #2
 8013036:	b2db      	uxtb	r3, r3
 8013038:	2b14      	cmp	r3, #20
 801303a:	f040 8171 	bne.w	8013320 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013040:	88db      	ldrh	r3, [r3, #6]
 8013042:	b29b      	uxth	r3, r3
 8013044:	4618      	mov	r0, r3
 8013046:	f7f6 fa29 	bl	800949c <lwip_htons>
 801304a:	4603      	mov	r3, r0
 801304c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013050:	b29b      	uxth	r3, r3
 8013052:	00db      	lsls	r3, r3, #3
 8013054:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013058:	885b      	ldrh	r3, [r3, #2]
 801305a:	b29b      	uxth	r3, r3
 801305c:	4618      	mov	r0, r3
 801305e:	f7f6 fa1d 	bl	800949c <lwip_htons>
 8013062:	4603      	mov	r3, r0
 8013064:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013068:	781b      	ldrb	r3, [r3, #0]
 801306a:	f003 030f 	and.w	r3, r3, #15
 801306e:	b2db      	uxtb	r3, r3
 8013070:	009b      	lsls	r3, r3, #2
 8013072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013076:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801307a:	b29b      	uxth	r3, r3
 801307c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801307e:	429a      	cmp	r2, r3
 8013080:	f0c0 8150 	bcc.w	8013324 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013084:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013088:	b29b      	uxth	r3, r3
 801308a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801308c:	1ad3      	subs	r3, r2, r3
 801308e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f7f7 fde3 	bl	800ac5c <pbuf_clen>
 8013096:	4603      	mov	r3, r0
 8013098:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801309a:	4b8c      	ldr	r3, [pc, #560]	; (80132cc <ip4_reass+0x2b0>)
 801309c:	881b      	ldrh	r3, [r3, #0]
 801309e:	461a      	mov	r2, r3
 80130a0:	8c3b      	ldrh	r3, [r7, #32]
 80130a2:	4413      	add	r3, r2
 80130a4:	2b0a      	cmp	r3, #10
 80130a6:	dd10      	ble.n	80130ca <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80130a8:	8c3b      	ldrh	r3, [r7, #32]
 80130aa:	4619      	mov	r1, r3
 80130ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130ae:	f7ff fd81 	bl	8012bb4 <ip_reass_remove_oldest_datagram>
 80130b2:	4603      	mov	r3, r0
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	f000 8137 	beq.w	8013328 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80130ba:	4b84      	ldr	r3, [pc, #528]	; (80132cc <ip4_reass+0x2b0>)
 80130bc:	881b      	ldrh	r3, [r3, #0]
 80130be:	461a      	mov	r2, r3
 80130c0:	8c3b      	ldrh	r3, [r7, #32]
 80130c2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80130c4:	2b0a      	cmp	r3, #10
 80130c6:	f300 812f 	bgt.w	8013328 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80130ca:	4b81      	ldr	r3, [pc, #516]	; (80132d0 <ip4_reass+0x2b4>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	633b      	str	r3, [r7, #48]	; 0x30
 80130d0:	e015      	b.n	80130fe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80130d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d4:	695a      	ldr	r2, [r3, #20]
 80130d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130d8:	68db      	ldr	r3, [r3, #12]
 80130da:	429a      	cmp	r2, r3
 80130dc:	d10c      	bne.n	80130f8 <ip4_reass+0xdc>
 80130de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e0:	699a      	ldr	r2, [r3, #24]
 80130e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130e4:	691b      	ldr	r3, [r3, #16]
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d106      	bne.n	80130f8 <ip4_reass+0xdc>
 80130ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ec:	899a      	ldrh	r2, [r3, #12]
 80130ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f0:	889b      	ldrh	r3, [r3, #4]
 80130f2:	b29b      	uxth	r3, r3
 80130f4:	429a      	cmp	r2, r3
 80130f6:	d006      	beq.n	8013106 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80130f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	633b      	str	r3, [r7, #48]	; 0x30
 80130fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013100:	2b00      	cmp	r3, #0
 8013102:	d1e6      	bne.n	80130d2 <ip4_reass+0xb6>
 8013104:	e000      	b.n	8013108 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013106:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801310a:	2b00      	cmp	r3, #0
 801310c:	d109      	bne.n	8013122 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801310e:	8c3b      	ldrh	r3, [r7, #32]
 8013110:	4619      	mov	r1, r3
 8013112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013114:	f7ff fdb0 	bl	8012c78 <ip_reass_enqueue_new_datagram>
 8013118:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801311c:	2b00      	cmp	r3, #0
 801311e:	d11c      	bne.n	801315a <ip4_reass+0x13e>
      goto nullreturn;
 8013120:	e105      	b.n	801332e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013124:	88db      	ldrh	r3, [r3, #6]
 8013126:	b29b      	uxth	r3, r3
 8013128:	4618      	mov	r0, r3
 801312a:	f7f6 f9b7 	bl	800949c <lwip_htons>
 801312e:	4603      	mov	r3, r0
 8013130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013134:	2b00      	cmp	r3, #0
 8013136:	d110      	bne.n	801315a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313a:	89db      	ldrh	r3, [r3, #14]
 801313c:	4618      	mov	r0, r3
 801313e:	f7f6 f9ad 	bl	800949c <lwip_htons>
 8013142:	4603      	mov	r3, r0
 8013144:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013148:	2b00      	cmp	r3, #0
 801314a:	d006      	beq.n	801315a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801314e:	3308      	adds	r3, #8
 8013150:	2214      	movs	r2, #20
 8013152:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013154:	4618      	mov	r0, r3
 8013156:	f002 fc82 	bl	8015a5e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801315c:	88db      	ldrh	r3, [r3, #6]
 801315e:	b29b      	uxth	r3, r3
 8013160:	f003 0320 	and.w	r3, r3, #32
 8013164:	2b00      	cmp	r3, #0
 8013166:	bf0c      	ite	eq
 8013168:	2301      	moveq	r3, #1
 801316a:	2300      	movne	r3, #0
 801316c:	b2db      	uxtb	r3, r3
 801316e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013170:	69fb      	ldr	r3, [r7, #28]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d00e      	beq.n	8013194 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013176:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801317a:	4413      	add	r3, r2
 801317c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801317e:	8b7a      	ldrh	r2, [r7, #26]
 8013180:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013182:	429a      	cmp	r2, r3
 8013184:	f0c0 80a0 	bcc.w	80132c8 <ip4_reass+0x2ac>
 8013188:	8b7b      	ldrh	r3, [r7, #26]
 801318a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801318e:	4293      	cmp	r3, r2
 8013190:	f200 809a 	bhi.w	80132c8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013194:	69fa      	ldr	r2, [r7, #28]
 8013196:	6879      	ldr	r1, [r7, #4]
 8013198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801319a:	f7ff fdd5 	bl	8012d48 <ip_reass_chain_frag_into_datagram_and_validate>
 801319e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131a6:	f000 809b 	beq.w	80132e0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80131aa:	4b48      	ldr	r3, [pc, #288]	; (80132cc <ip4_reass+0x2b0>)
 80131ac:	881a      	ldrh	r2, [r3, #0]
 80131ae:	8c3b      	ldrh	r3, [r7, #32]
 80131b0:	4413      	add	r3, r2
 80131b2:	b29a      	uxth	r2, r3
 80131b4:	4b45      	ldr	r3, [pc, #276]	; (80132cc <ip4_reass+0x2b0>)
 80131b6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80131b8:	69fb      	ldr	r3, [r7, #28]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d00d      	beq.n	80131da <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80131be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80131c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131c2:	4413      	add	r3, r2
 80131c4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80131c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c8:	8a7a      	ldrh	r2, [r7, #18]
 80131ca:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80131cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ce:	7f9b      	ldrb	r3, [r3, #30]
 80131d0:	f043 0301 	orr.w	r3, r3, #1
 80131d4:	b2da      	uxtb	r2, r3
 80131d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	2b01      	cmp	r3, #1
 80131de:	d171      	bne.n	80132c4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80131e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e2:	8b9b      	ldrh	r3, [r3, #28]
 80131e4:	3314      	adds	r3, #20
 80131e6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80131e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ea:	685b      	ldr	r3, [r3, #4]
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80131f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f4:	685b      	ldr	r3, [r3, #4]
 80131f6:	685b      	ldr	r3, [r3, #4]
 80131f8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80131fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131fc:	3308      	adds	r3, #8
 80131fe:	2214      	movs	r2, #20
 8013200:	4619      	mov	r1, r3
 8013202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013204:	f002 fc2b 	bl	8015a5e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013208:	8a3b      	ldrh	r3, [r7, #16]
 801320a:	4618      	mov	r0, r3
 801320c:	f7f6 f946 	bl	800949c <lwip_htons>
 8013210:	4603      	mov	r3, r0
 8013212:	461a      	mov	r2, r3
 8013214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013216:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801321a:	2200      	movs	r2, #0
 801321c:	719a      	strb	r2, [r3, #6]
 801321e:	2200      	movs	r2, #0
 8013220:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013224:	2200      	movs	r2, #0
 8013226:	729a      	strb	r2, [r3, #10]
 8013228:	2200      	movs	r2, #0
 801322a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801322e:	685b      	ldr	r3, [r3, #4]
 8013230:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013232:	e00d      	b.n	8013250 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013236:	685b      	ldr	r3, [r3, #4]
 8013238:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801323a:	2114      	movs	r1, #20
 801323c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801323e:	f7f7 fbff 	bl	800aa40 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013242:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f7f7 fd43 	bl	800acd0 <pbuf_cat>
      r = iprh->next_pbuf;
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013252:	2b00      	cmp	r3, #0
 8013254:	d1ee      	bne.n	8013234 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013256:	4b1e      	ldr	r3, [pc, #120]	; (80132d0 <ip4_reass+0x2b4>)
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801325c:	429a      	cmp	r2, r3
 801325e:	d102      	bne.n	8013266 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013260:	2300      	movs	r3, #0
 8013262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013264:	e010      	b.n	8013288 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013266:	4b1a      	ldr	r3, [pc, #104]	; (80132d0 <ip4_reass+0x2b4>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801326c:	e007      	b.n	801327e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013274:	429a      	cmp	r2, r3
 8013276:	d006      	beq.n	8013286 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013280:	2b00      	cmp	r3, #0
 8013282:	d1f4      	bne.n	801326e <ip4_reass+0x252>
 8013284:	e000      	b.n	8013288 <ip4_reass+0x26c>
          break;
 8013286:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013288:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801328a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801328c:	f7ff fd2e 	bl	8012cec <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	f7f7 fce3 	bl	800ac5c <pbuf_clen>
 8013296:	4603      	mov	r3, r0
 8013298:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801329a:	4b0c      	ldr	r3, [pc, #48]	; (80132cc <ip4_reass+0x2b0>)
 801329c:	881b      	ldrh	r3, [r3, #0]
 801329e:	8c3a      	ldrh	r2, [r7, #32]
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d906      	bls.n	80132b2 <ip4_reass+0x296>
 80132a4:	4b0b      	ldr	r3, [pc, #44]	; (80132d4 <ip4_reass+0x2b8>)
 80132a6:	f240 229b 	movw	r2, #667	; 0x29b
 80132aa:	490b      	ldr	r1, [pc, #44]	; (80132d8 <ip4_reass+0x2bc>)
 80132ac:	480b      	ldr	r0, [pc, #44]	; (80132dc <ip4_reass+0x2c0>)
 80132ae:	f002 faa3 	bl	80157f8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80132b2:	4b06      	ldr	r3, [pc, #24]	; (80132cc <ip4_reass+0x2b0>)
 80132b4:	881a      	ldrh	r2, [r3, #0]
 80132b6:	8c3b      	ldrh	r3, [r7, #32]
 80132b8:	1ad3      	subs	r3, r2, r3
 80132ba:	b29a      	uxth	r2, r3
 80132bc:	4b03      	ldr	r3, [pc, #12]	; (80132cc <ip4_reass+0x2b0>)
 80132be:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	e038      	b.n	8013336 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80132c4:	2300      	movs	r3, #0
 80132c6:	e036      	b.n	8013336 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80132c8:	bf00      	nop
 80132ca:	e00a      	b.n	80132e2 <ip4_reass+0x2c6>
 80132cc:	2000e5f0 	.word	0x2000e5f0
 80132d0:	2000e5ec 	.word	0x2000e5ec
 80132d4:	08019028 	.word	0x08019028
 80132d8:	08019198 	.word	0x08019198
 80132dc:	08019070 	.word	0x08019070
    goto nullreturn_ipr;
 80132e0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80132e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d106      	bne.n	80132f6 <ip4_reass+0x2da>
 80132e8:	4b15      	ldr	r3, [pc, #84]	; (8013340 <ip4_reass+0x324>)
 80132ea:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80132ee:	4915      	ldr	r1, [pc, #84]	; (8013344 <ip4_reass+0x328>)
 80132f0:	4815      	ldr	r0, [pc, #84]	; (8013348 <ip4_reass+0x32c>)
 80132f2:	f002 fa81 	bl	80157f8 <iprintf>
  if (ipr->p == NULL) {
 80132f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f8:	685b      	ldr	r3, [r3, #4]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d116      	bne.n	801332c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80132fe:	4b13      	ldr	r3, [pc, #76]	; (801334c <ip4_reass+0x330>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013304:	429a      	cmp	r2, r3
 8013306:	d006      	beq.n	8013316 <ip4_reass+0x2fa>
 8013308:	4b0d      	ldr	r3, [pc, #52]	; (8013340 <ip4_reass+0x324>)
 801330a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801330e:	4910      	ldr	r1, [pc, #64]	; (8013350 <ip4_reass+0x334>)
 8013310:	480d      	ldr	r0, [pc, #52]	; (8013348 <ip4_reass+0x32c>)
 8013312:	f002 fa71 	bl	80157f8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013316:	2100      	movs	r1, #0
 8013318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801331a:	f7ff fce7 	bl	8012cec <ip_reass_dequeue_datagram>
 801331e:	e006      	b.n	801332e <ip4_reass+0x312>
    goto nullreturn;
 8013320:	bf00      	nop
 8013322:	e004      	b.n	801332e <ip4_reass+0x312>
    goto nullreturn;
 8013324:	bf00      	nop
 8013326:	e002      	b.n	801332e <ip4_reass+0x312>
      goto nullreturn;
 8013328:	bf00      	nop
 801332a:	e000      	b.n	801332e <ip4_reass+0x312>
  }

nullreturn:
 801332c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801332e:	6878      	ldr	r0, [r7, #4]
 8013330:	f7f7 fc0c 	bl	800ab4c <pbuf_free>
  return NULL;
 8013334:	2300      	movs	r3, #0
}
 8013336:	4618      	mov	r0, r3
 8013338:	3738      	adds	r7, #56	; 0x38
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
 801333e:	bf00      	nop
 8013340:	08019028 	.word	0x08019028
 8013344:	080191b4 	.word	0x080191b4
 8013348:	08019070 	.word	0x08019070
 801334c:	2000e5ec 	.word	0x2000e5ec
 8013350:	080191c0 	.word	0x080191c0

08013354 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013358:	2004      	movs	r0, #4
 801335a:	f7f6 fd15 	bl	8009d88 <memp_malloc>
 801335e:	4603      	mov	r3, r0
}
 8013360:	4618      	mov	r0, r3
 8013362:	bd80      	pop	{r7, pc}

08013364 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b082      	sub	sp, #8
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d106      	bne.n	8013380 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013372:	4b07      	ldr	r3, [pc, #28]	; (8013390 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013374:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013378:	4906      	ldr	r1, [pc, #24]	; (8013394 <ip_frag_free_pbuf_custom_ref+0x30>)
 801337a:	4807      	ldr	r0, [pc, #28]	; (8013398 <ip_frag_free_pbuf_custom_ref+0x34>)
 801337c:	f002 fa3c 	bl	80157f8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013380:	6879      	ldr	r1, [r7, #4]
 8013382:	2004      	movs	r0, #4
 8013384:	f7f6 fd70 	bl	8009e68 <memp_free>
}
 8013388:	bf00      	nop
 801338a:	3708      	adds	r7, #8
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}
 8013390:	08019028 	.word	0x08019028
 8013394:	080191e0 	.word	0x080191e0
 8013398:	08019070 	.word	0x08019070

0801339c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b084      	sub	sp, #16
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d106      	bne.n	80133bc <ipfrag_free_pbuf_custom+0x20>
 80133ae:	4b11      	ldr	r3, [pc, #68]	; (80133f4 <ipfrag_free_pbuf_custom+0x58>)
 80133b0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80133b4:	4910      	ldr	r1, [pc, #64]	; (80133f8 <ipfrag_free_pbuf_custom+0x5c>)
 80133b6:	4811      	ldr	r0, [pc, #68]	; (80133fc <ipfrag_free_pbuf_custom+0x60>)
 80133b8:	f002 fa1e 	bl	80157f8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80133bc:	68fa      	ldr	r2, [r7, #12]
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d006      	beq.n	80133d2 <ipfrag_free_pbuf_custom+0x36>
 80133c4:	4b0b      	ldr	r3, [pc, #44]	; (80133f4 <ipfrag_free_pbuf_custom+0x58>)
 80133c6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80133ca:	490d      	ldr	r1, [pc, #52]	; (8013400 <ipfrag_free_pbuf_custom+0x64>)
 80133cc:	480b      	ldr	r0, [pc, #44]	; (80133fc <ipfrag_free_pbuf_custom+0x60>)
 80133ce:	f002 fa13 	bl	80157f8 <iprintf>
  if (pcr->original != NULL) {
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	695b      	ldr	r3, [r3, #20]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d004      	beq.n	80133e4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	695b      	ldr	r3, [r3, #20]
 80133de:	4618      	mov	r0, r3
 80133e0:	f7f7 fbb4 	bl	800ab4c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80133e4:	68f8      	ldr	r0, [r7, #12]
 80133e6:	f7ff ffbd 	bl	8013364 <ip_frag_free_pbuf_custom_ref>
}
 80133ea:	bf00      	nop
 80133ec:	3710      	adds	r7, #16
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	bf00      	nop
 80133f4:	08019028 	.word	0x08019028
 80133f8:	080191ec 	.word	0x080191ec
 80133fc:	08019070 	.word	0x08019070
 8013400:	080191f8 	.word	0x080191f8

08013404 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b094      	sub	sp, #80	; 0x50
 8013408:	af02      	add	r7, sp, #8
 801340a:	60f8      	str	r0, [r7, #12]
 801340c:	60b9      	str	r1, [r7, #8]
 801340e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013410:	2300      	movs	r3, #0
 8013412:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801341a:	3b14      	subs	r3, #20
 801341c:	2b00      	cmp	r3, #0
 801341e:	da00      	bge.n	8013422 <ip4_frag+0x1e>
 8013420:	3307      	adds	r3, #7
 8013422:	10db      	asrs	r3, r3, #3
 8013424:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013426:	2314      	movs	r3, #20
 8013428:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	685b      	ldr	r3, [r3, #4]
 801342e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013432:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	f003 030f 	and.w	r3, r3, #15
 801343c:	b2db      	uxtb	r3, r3
 801343e:	009b      	lsls	r3, r3, #2
 8013440:	b2db      	uxtb	r3, r3
 8013442:	2b14      	cmp	r3, #20
 8013444:	d002      	beq.n	801344c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013446:	f06f 0305 	mvn.w	r3, #5
 801344a:	e110      	b.n	801366e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	895b      	ldrh	r3, [r3, #10]
 8013450:	2b13      	cmp	r3, #19
 8013452:	d809      	bhi.n	8013468 <ip4_frag+0x64>
 8013454:	4b88      	ldr	r3, [pc, #544]	; (8013678 <ip4_frag+0x274>)
 8013456:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801345a:	4988      	ldr	r1, [pc, #544]	; (801367c <ip4_frag+0x278>)
 801345c:	4888      	ldr	r0, [pc, #544]	; (8013680 <ip4_frag+0x27c>)
 801345e:	f002 f9cb 	bl	80157f8 <iprintf>
 8013462:	f06f 0305 	mvn.w	r3, #5
 8013466:	e102      	b.n	801366e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801346a:	88db      	ldrh	r3, [r3, #6]
 801346c:	b29b      	uxth	r3, r3
 801346e:	4618      	mov	r0, r3
 8013470:	f7f6 f814 	bl	800949c <lwip_htons>
 8013474:	4603      	mov	r3, r0
 8013476:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013478:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801347a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801347e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013482:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013488:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	891b      	ldrh	r3, [r3, #8]
 801348e:	3b14      	subs	r3, #20
 8013490:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013494:	e0e1      	b.n	801365a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013496:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013498:	00db      	lsls	r3, r3, #3
 801349a:	b29b      	uxth	r3, r3
 801349c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80134a0:	4293      	cmp	r3, r2
 80134a2:	bf28      	it	cs
 80134a4:	4613      	movcs	r3, r2
 80134a6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80134a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134ac:	2114      	movs	r1, #20
 80134ae:	200e      	movs	r0, #14
 80134b0:	f7f7 f868 	bl	800a584 <pbuf_alloc>
 80134b4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80134b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	f000 80d5 	beq.w	8013668 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80134be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c0:	895b      	ldrh	r3, [r3, #10]
 80134c2:	2b13      	cmp	r3, #19
 80134c4:	d806      	bhi.n	80134d4 <ip4_frag+0xd0>
 80134c6:	4b6c      	ldr	r3, [pc, #432]	; (8013678 <ip4_frag+0x274>)
 80134c8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80134cc:	496d      	ldr	r1, [pc, #436]	; (8013684 <ip4_frag+0x280>)
 80134ce:	486c      	ldr	r0, [pc, #432]	; (8013680 <ip4_frag+0x27c>)
 80134d0:	f002 f992 	bl	80157f8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80134d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d6:	685b      	ldr	r3, [r3, #4]
 80134d8:	2214      	movs	r2, #20
 80134da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80134dc:	4618      	mov	r0, r3
 80134de:	f002 fabe 	bl	8015a5e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80134e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80134e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80134ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80134ee:	e064      	b.n	80135ba <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	895a      	ldrh	r2, [r3, #10]
 80134f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80134f6:	1ad3      	subs	r3, r2, r3
 80134f8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	895b      	ldrh	r3, [r3, #10]
 80134fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013500:	429a      	cmp	r2, r3
 8013502:	d906      	bls.n	8013512 <ip4_frag+0x10e>
 8013504:	4b5c      	ldr	r3, [pc, #368]	; (8013678 <ip4_frag+0x274>)
 8013506:	f240 322d 	movw	r2, #813	; 0x32d
 801350a:	495f      	ldr	r1, [pc, #380]	; (8013688 <ip4_frag+0x284>)
 801350c:	485c      	ldr	r0, [pc, #368]	; (8013680 <ip4_frag+0x27c>)
 801350e:	f002 f973 	bl	80157f8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013512:	8bfa      	ldrh	r2, [r7, #30]
 8013514:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013518:	4293      	cmp	r3, r2
 801351a:	bf28      	it	cs
 801351c:	4613      	movcs	r3, r2
 801351e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013522:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013526:	2b00      	cmp	r3, #0
 8013528:	d105      	bne.n	8013536 <ip4_frag+0x132>
        poff = 0;
 801352a:	2300      	movs	r3, #0
 801352c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	60fb      	str	r3, [r7, #12]
        continue;
 8013534:	e041      	b.n	80135ba <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013536:	f7ff ff0d 	bl	8013354 <ip_frag_alloc_pbuf_custom_ref>
 801353a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801353c:	69bb      	ldr	r3, [r7, #24]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d103      	bne.n	801354a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013542:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013544:	f7f7 fb02 	bl	800ab4c <pbuf_free>
        goto memerr;
 8013548:	e08f      	b.n	801366a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801354a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013550:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013552:	4413      	add	r3, r2
 8013554:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013558:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801355c:	9201      	str	r2, [sp, #4]
 801355e:	9300      	str	r3, [sp, #0]
 8013560:	4603      	mov	r3, r0
 8013562:	2241      	movs	r2, #65	; 0x41
 8013564:	2000      	movs	r0, #0
 8013566:	f7f7 f937 	bl	800a7d8 <pbuf_alloced_custom>
 801356a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d106      	bne.n	8013580 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013572:	69b8      	ldr	r0, [r7, #24]
 8013574:	f7ff fef6 	bl	8013364 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013578:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801357a:	f7f7 fae7 	bl	800ab4c <pbuf_free>
        goto memerr;
 801357e:	e074      	b.n	801366a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013580:	68f8      	ldr	r0, [r7, #12]
 8013582:	f7f7 fb83 	bl	800ac8c <pbuf_ref>
      pcr->original = p;
 8013586:	69bb      	ldr	r3, [r7, #24]
 8013588:	68fa      	ldr	r2, [r7, #12]
 801358a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801358c:	69bb      	ldr	r3, [r7, #24]
 801358e:	4a3f      	ldr	r2, [pc, #252]	; (801368c <ip4_frag+0x288>)
 8013590:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013592:	6979      	ldr	r1, [r7, #20]
 8013594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013596:	f7f7 fb9b 	bl	800acd0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801359a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801359e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80135a2:	1ad3      	subs	r3, r2, r3
 80135a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80135a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d004      	beq.n	80135ba <ip4_frag+0x1b6>
        poff = 0;
 80135b0:	2300      	movs	r3, #0
 80135b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80135ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d196      	bne.n	80134f0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80135c2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80135c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80135c8:	4413      	add	r3, r2
 80135ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80135d0:	f1a3 0213 	sub.w	r2, r3, #19
 80135d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135d8:	429a      	cmp	r2, r3
 80135da:	bfcc      	ite	gt
 80135dc:	2301      	movgt	r3, #1
 80135de:	2300      	movle	r3, #0
 80135e0:	b2db      	uxtb	r3, r3
 80135e2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80135e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80135e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80135ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80135ee:	6a3b      	ldr	r3, [r7, #32]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d002      	beq.n	80135fa <ip4_frag+0x1f6>
 80135f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d003      	beq.n	8013602 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80135fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80135fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013600:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013602:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013604:	4618      	mov	r0, r3
 8013606:	f7f5 ff49 	bl	800949c <lwip_htons>
 801360a:	4603      	mov	r3, r0
 801360c:	461a      	mov	r2, r3
 801360e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013610:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013612:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013614:	3314      	adds	r3, #20
 8013616:	b29b      	uxth	r3, r3
 8013618:	4618      	mov	r0, r3
 801361a:	f7f5 ff3f 	bl	800949c <lwip_htons>
 801361e:	4603      	mov	r3, r0
 8013620:	461a      	mov	r2, r3
 8013622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013624:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013628:	2200      	movs	r2, #0
 801362a:	729a      	strb	r2, [r3, #10]
 801362c:	2200      	movs	r2, #0
 801362e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	695b      	ldr	r3, [r3, #20]
 8013634:	687a      	ldr	r2, [r7, #4]
 8013636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013638:	68b8      	ldr	r0, [r7, #8]
 801363a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801363c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801363e:	f7f7 fa85 	bl	800ab4c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013642:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013646:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013648:	1ad3      	subs	r3, r2, r3
 801364a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801364e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013652:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013654:	4413      	add	r3, r2
 8013656:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801365a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801365e:	2b00      	cmp	r3, #0
 8013660:	f47f af19 	bne.w	8013496 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013664:	2300      	movs	r3, #0
 8013666:	e002      	b.n	801366e <ip4_frag+0x26a>
      goto memerr;
 8013668:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801366a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801366e:	4618      	mov	r0, r3
 8013670:	3748      	adds	r7, #72	; 0x48
 8013672:	46bd      	mov	sp, r7
 8013674:	bd80      	pop	{r7, pc}
 8013676:	bf00      	nop
 8013678:	08019028 	.word	0x08019028
 801367c:	08019204 	.word	0x08019204
 8013680:	08019070 	.word	0x08019070
 8013684:	08019220 	.word	0x08019220
 8013688:	08019240 	.word	0x08019240
 801368c:	0801339d 	.word	0x0801339d

08013690 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b086      	sub	sp, #24
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
 8013698:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801369a:	230e      	movs	r3, #14
 801369c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	895b      	ldrh	r3, [r3, #10]
 80136a2:	2b0e      	cmp	r3, #14
 80136a4:	d96e      	bls.n	8013784 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	7bdb      	ldrb	r3, [r3, #15]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d106      	bne.n	80136bc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80136b4:	3301      	adds	r3, #1
 80136b6:	b2da      	uxtb	r2, r3
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	685b      	ldr	r3, [r3, #4]
 80136c0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80136c2:	693b      	ldr	r3, [r7, #16]
 80136c4:	7b1a      	ldrb	r2, [r3, #12]
 80136c6:	7b5b      	ldrb	r3, [r3, #13]
 80136c8:	021b      	lsls	r3, r3, #8
 80136ca:	4313      	orrs	r3, r2
 80136cc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	781b      	ldrb	r3, [r3, #0]
 80136d2:	f003 0301 	and.w	r3, r3, #1
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d023      	beq.n	8013722 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	2b01      	cmp	r3, #1
 80136e0:	d10f      	bne.n	8013702 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80136e2:	693b      	ldr	r3, [r7, #16]
 80136e4:	785b      	ldrb	r3, [r3, #1]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d11b      	bne.n	8013722 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80136ee:	2b5e      	cmp	r3, #94	; 0x5e
 80136f0:	d117      	bne.n	8013722 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	7b5b      	ldrb	r3, [r3, #13]
 80136f6:	f043 0310 	orr.w	r3, r3, #16
 80136fa:	b2da      	uxtb	r2, r3
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	735a      	strb	r2, [r3, #13]
 8013700:	e00f      	b.n	8013722 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013702:	693b      	ldr	r3, [r7, #16]
 8013704:	2206      	movs	r2, #6
 8013706:	4928      	ldr	r1, [pc, #160]	; (80137a8 <ethernet_input+0x118>)
 8013708:	4618      	mov	r0, r3
 801370a:	f002 f909 	bl	8015920 <memcmp>
 801370e:	4603      	mov	r3, r0
 8013710:	2b00      	cmp	r3, #0
 8013712:	d106      	bne.n	8013722 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	7b5b      	ldrb	r3, [r3, #13]
 8013718:	f043 0308 	orr.w	r3, r3, #8
 801371c:	b2da      	uxtb	r2, r3
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013722:	89fb      	ldrh	r3, [r7, #14]
 8013724:	2b08      	cmp	r3, #8
 8013726:	d003      	beq.n	8013730 <ethernet_input+0xa0>
 8013728:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801372c:	d014      	beq.n	8013758 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801372e:	e032      	b.n	8013796 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013736:	f003 0308 	and.w	r3, r3, #8
 801373a:	2b00      	cmp	r3, #0
 801373c:	d024      	beq.n	8013788 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801373e:	8afb      	ldrh	r3, [r7, #22]
 8013740:	4619      	mov	r1, r3
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	f7f7 f97c 	bl	800aa40 <pbuf_remove_header>
 8013748:	4603      	mov	r3, r0
 801374a:	2b00      	cmp	r3, #0
 801374c:	d11e      	bne.n	801378c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801374e:	6839      	ldr	r1, [r7, #0]
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f7fe ff2b 	bl	80125ac <ip4_input>
      break;
 8013756:	e013      	b.n	8013780 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801375e:	f003 0308 	and.w	r3, r3, #8
 8013762:	2b00      	cmp	r3, #0
 8013764:	d014      	beq.n	8013790 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013766:	8afb      	ldrh	r3, [r7, #22]
 8013768:	4619      	mov	r1, r3
 801376a:	6878      	ldr	r0, [r7, #4]
 801376c:	f7f7 f968 	bl	800aa40 <pbuf_remove_header>
 8013770:	4603      	mov	r3, r0
 8013772:	2b00      	cmp	r3, #0
 8013774:	d10e      	bne.n	8013794 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013776:	6839      	ldr	r1, [r7, #0]
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f7fe f8cb 	bl	8011914 <etharp_input>
      break;
 801377e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013780:	2300      	movs	r3, #0
 8013782:	e00c      	b.n	801379e <ethernet_input+0x10e>
    goto free_and_return;
 8013784:	bf00      	nop
 8013786:	e006      	b.n	8013796 <ethernet_input+0x106>
        goto free_and_return;
 8013788:	bf00      	nop
 801378a:	e004      	b.n	8013796 <ethernet_input+0x106>
        goto free_and_return;
 801378c:	bf00      	nop
 801378e:	e002      	b.n	8013796 <ethernet_input+0x106>
        goto free_and_return;
 8013790:	bf00      	nop
 8013792:	e000      	b.n	8013796 <ethernet_input+0x106>
        goto free_and_return;
 8013794:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f7f7 f9d8 	bl	800ab4c <pbuf_free>
  return ERR_OK;
 801379c:	2300      	movs	r3, #0
}
 801379e:	4618      	mov	r0, r3
 80137a0:	3718      	adds	r7, #24
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}
 80137a6:	bf00      	nop
 80137a8:	080197f4 	.word	0x080197f4

080137ac <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b086      	sub	sp, #24
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	60b9      	str	r1, [r7, #8]
 80137b6:	607a      	str	r2, [r7, #4]
 80137b8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80137ba:	8c3b      	ldrh	r3, [r7, #32]
 80137bc:	4618      	mov	r0, r3
 80137be:	f7f5 fe6d 	bl	800949c <lwip_htons>
 80137c2:	4603      	mov	r3, r0
 80137c4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80137c6:	210e      	movs	r1, #14
 80137c8:	68b8      	ldr	r0, [r7, #8]
 80137ca:	f7f7 f929 	bl	800aa20 <pbuf_add_header>
 80137ce:	4603      	mov	r3, r0
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d125      	bne.n	8013820 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	685b      	ldr	r3, [r3, #4]
 80137d8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	8afa      	ldrh	r2, [r7, #22]
 80137de:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80137e0:	693b      	ldr	r3, [r7, #16]
 80137e2:	2206      	movs	r2, #6
 80137e4:	6839      	ldr	r1, [r7, #0]
 80137e6:	4618      	mov	r0, r3
 80137e8:	f002 f939 	bl	8015a5e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80137ec:	693b      	ldr	r3, [r7, #16]
 80137ee:	3306      	adds	r3, #6
 80137f0:	2206      	movs	r2, #6
 80137f2:	6879      	ldr	r1, [r7, #4]
 80137f4:	4618      	mov	r0, r3
 80137f6:	f002 f932 	bl	8015a5e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013800:	2b06      	cmp	r3, #6
 8013802:	d006      	beq.n	8013812 <ethernet_output+0x66>
 8013804:	4b0a      	ldr	r3, [pc, #40]	; (8013830 <ethernet_output+0x84>)
 8013806:	f44f 7299 	mov.w	r2, #306	; 0x132
 801380a:	490a      	ldr	r1, [pc, #40]	; (8013834 <ethernet_output+0x88>)
 801380c:	480a      	ldr	r0, [pc, #40]	; (8013838 <ethernet_output+0x8c>)
 801380e:	f001 fff3 	bl	80157f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	699b      	ldr	r3, [r3, #24]
 8013816:	68b9      	ldr	r1, [r7, #8]
 8013818:	68f8      	ldr	r0, [r7, #12]
 801381a:	4798      	blx	r3
 801381c:	4603      	mov	r3, r0
 801381e:	e002      	b.n	8013826 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013820:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013822:	f06f 0301 	mvn.w	r3, #1
}
 8013826:	4618      	mov	r0, r3
 8013828:	3718      	adds	r7, #24
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}
 801382e:	bf00      	nop
 8013830:	08019250 	.word	0x08019250
 8013834:	08019288 	.word	0x08019288
 8013838:	080192bc 	.word	0x080192bc

0801383c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

void MX_ADC1_Init(void)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b084      	sub	sp, #16
 8013840:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8013842:	463b      	mov	r3, r7
 8013844:	2200      	movs	r2, #0
 8013846:	601a      	str	r2, [r3, #0]
 8013848:	605a      	str	r2, [r3, #4]
 801384a:	609a      	str	r2, [r3, #8]
 801384c:	60da      	str	r2, [r3, #12]
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 801384e:	4b21      	ldr	r3, [pc, #132]	; (80138d4 <MX_ADC1_Init+0x98>)
 8013850:	4a21      	ldr	r2, [pc, #132]	; (80138d8 <MX_ADC1_Init+0x9c>)
 8013852:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8013854:	4b1f      	ldr	r3, [pc, #124]	; (80138d4 <MX_ADC1_Init+0x98>)
 8013856:	2200      	movs	r2, #0
 8013858:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801385a:	4b1e      	ldr	r3, [pc, #120]	; (80138d4 <MX_ADC1_Init+0x98>)
 801385c:	2200      	movs	r2, #0
 801385e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8013860:	4b1c      	ldr	r3, [pc, #112]	; (80138d4 <MX_ADC1_Init+0x98>)
 8013862:	2200      	movs	r2, #0
 8013864:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8013866:	4b1b      	ldr	r3, [pc, #108]	; (80138d4 <MX_ADC1_Init+0x98>)
 8013868:	2200      	movs	r2, #0
 801386a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801386c:	4b19      	ldr	r3, [pc, #100]	; (80138d4 <MX_ADC1_Init+0x98>)
 801386e:	2200      	movs	r2, #0
 8013870:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8013874:	4b17      	ldr	r3, [pc, #92]	; (80138d4 <MX_ADC1_Init+0x98>)
 8013876:	2200      	movs	r2, #0
 8013878:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801387a:	4b16      	ldr	r3, [pc, #88]	; (80138d4 <MX_ADC1_Init+0x98>)
 801387c:	4a17      	ldr	r2, [pc, #92]	; (80138dc <MX_ADC1_Init+0xa0>)
 801387e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8013880:	4b14      	ldr	r3, [pc, #80]	; (80138d4 <MX_ADC1_Init+0x98>)
 8013882:	2200      	movs	r2, #0
 8013884:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8013886:	4b13      	ldr	r3, [pc, #76]	; (80138d4 <MX_ADC1_Init+0x98>)
 8013888:	2201      	movs	r2, #1
 801388a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801388c:	4b11      	ldr	r3, [pc, #68]	; (80138d4 <MX_ADC1_Init+0x98>)
 801388e:	2200      	movs	r2, #0
 8013890:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8013894:	4b0f      	ldr	r3, [pc, #60]	; (80138d4 <MX_ADC1_Init+0x98>)
 8013896:	2201      	movs	r2, #1
 8013898:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801389a:	480e      	ldr	r0, [pc, #56]	; (80138d4 <MX_ADC1_Init+0x98>)
 801389c:	f7f0 fc78 	bl	8004190 <HAL_ADC_Init>
 80138a0:	4603      	mov	r3, r0
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d001      	beq.n	80138aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80138a6:	f000 fee9 	bl	801467c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80138aa:	2308      	movs	r3, #8
 80138ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80138ae:	2301      	movs	r3, #1
 80138b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80138b2:	2307      	movs	r3, #7
 80138b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80138b6:	463b      	mov	r3, r7
 80138b8:	4619      	mov	r1, r3
 80138ba:	4806      	ldr	r0, [pc, #24]	; (80138d4 <MX_ADC1_Init+0x98>)
 80138bc:	f7f0 fe16 	bl	80044ec <HAL_ADC_ConfigChannel>
 80138c0:	4603      	mov	r3, r0
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d001      	beq.n	80138ca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80138c6:	f000 fed9 	bl	801467c <Error_Handler>
  }
}
 80138ca:	bf00      	nop
 80138cc:	3710      	adds	r7, #16
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bd80      	pop	{r7, pc}
 80138d2:	bf00      	nop
 80138d4:	2000e5f4 	.word	0x2000e5f4
 80138d8:	40012000 	.word	0x40012000
 80138dc:	0f000001 	.word	0x0f000001

080138e0 <MX_ADC2_Init>:

void MX_ADC2_Init(void)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b084      	sub	sp, #16
 80138e4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80138e6:	463b      	mov	r3, r7
 80138e8:	2200      	movs	r2, #0
 80138ea:	601a      	str	r2, [r3, #0]
 80138ec:	605a      	str	r2, [r3, #4]
 80138ee:	609a      	str	r2, [r3, #8]
 80138f0:	60da      	str	r2, [r3, #12]
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80138f2:	4b21      	ldr	r3, [pc, #132]	; (8013978 <MX_ADC2_Init+0x98>)
 80138f4:	4a21      	ldr	r2, [pc, #132]	; (801397c <MX_ADC2_Init+0x9c>)
 80138f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80138f8:	4b1f      	ldr	r3, [pc, #124]	; (8013978 <MX_ADC2_Init+0x98>)
 80138fa:	2200      	movs	r2, #0
 80138fc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80138fe:	4b1e      	ldr	r3, [pc, #120]	; (8013978 <MX_ADC2_Init+0x98>)
 8013900:	2200      	movs	r2, #0
 8013902:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8013904:	4b1c      	ldr	r3, [pc, #112]	; (8013978 <MX_ADC2_Init+0x98>)
 8013906:	2200      	movs	r2, #0
 8013908:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 801390a:	4b1b      	ldr	r3, [pc, #108]	; (8013978 <MX_ADC2_Init+0x98>)
 801390c:	2200      	movs	r2, #0
 801390e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8013910:	4b19      	ldr	r3, [pc, #100]	; (8013978 <MX_ADC2_Init+0x98>)
 8013912:	2200      	movs	r2, #0
 8013914:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8013918:	4b17      	ldr	r3, [pc, #92]	; (8013978 <MX_ADC2_Init+0x98>)
 801391a:	2200      	movs	r2, #0
 801391c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801391e:	4b16      	ldr	r3, [pc, #88]	; (8013978 <MX_ADC2_Init+0x98>)
 8013920:	4a17      	ldr	r2, [pc, #92]	; (8013980 <MX_ADC2_Init+0xa0>)
 8013922:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8013924:	4b14      	ldr	r3, [pc, #80]	; (8013978 <MX_ADC2_Init+0x98>)
 8013926:	2200      	movs	r2, #0
 8013928:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 801392a:	4b13      	ldr	r3, [pc, #76]	; (8013978 <MX_ADC2_Init+0x98>)
 801392c:	2201      	movs	r2, #1
 801392e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8013930:	4b11      	ldr	r3, [pc, #68]	; (8013978 <MX_ADC2_Init+0x98>)
 8013932:	2200      	movs	r2, #0
 8013934:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8013938:	4b0f      	ldr	r3, [pc, #60]	; (8013978 <MX_ADC2_Init+0x98>)
 801393a:	2201      	movs	r2, #1
 801393c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 801393e:	480e      	ldr	r0, [pc, #56]	; (8013978 <MX_ADC2_Init+0x98>)
 8013940:	f7f0 fc26 	bl	8004190 <HAL_ADC_Init>
 8013944:	4603      	mov	r3, r0
 8013946:	2b00      	cmp	r3, #0
 8013948:	d001      	beq.n	801394e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 801394a:	f000 fe97 	bl	801467c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 801394e:	2309      	movs	r3, #9
 8013950:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8013952:	2301      	movs	r3, #1
 8013954:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8013956:	2300      	movs	r3, #0
 8013958:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 801395a:	463b      	mov	r3, r7
 801395c:	4619      	mov	r1, r3
 801395e:	4806      	ldr	r0, [pc, #24]	; (8013978 <MX_ADC2_Init+0x98>)
 8013960:	f7f0 fdc4 	bl	80044ec <HAL_ADC_ConfigChannel>
 8013964:	4603      	mov	r3, r0
 8013966:	2b00      	cmp	r3, #0
 8013968:	d001      	beq.n	801396e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 801396a:	f000 fe87 	bl	801467c <Error_Handler>
  }
}
 801396e:	bf00      	nop
 8013970:	3710      	adds	r7, #16
 8013972:	46bd      	mov	sp, r7
 8013974:	bd80      	pop	{r7, pc}
 8013976:	bf00      	nop
 8013978:	2000e63c 	.word	0x2000e63c
 801397c:	40012100 	.word	0x40012100
 8013980:	0f000001 	.word	0x0f000001

08013984 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b08c      	sub	sp, #48	; 0x30
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801398c:	f107 031c 	add.w	r3, r7, #28
 8013990:	2200      	movs	r2, #0
 8013992:	601a      	str	r2, [r3, #0]
 8013994:	605a      	str	r2, [r3, #4]
 8013996:	609a      	str	r2, [r3, #8]
 8013998:	60da      	str	r2, [r3, #12]
 801399a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	4a2e      	ldr	r2, [pc, #184]	; (8013a5c <HAL_ADC_MspInit+0xd8>)
 80139a2:	4293      	cmp	r3, r2
 80139a4:	d128      	bne.n	80139f8 <HAL_ADC_MspInit+0x74>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80139a6:	2300      	movs	r3, #0
 80139a8:	61bb      	str	r3, [r7, #24]
 80139aa:	4b2d      	ldr	r3, [pc, #180]	; (8013a60 <HAL_ADC_MspInit+0xdc>)
 80139ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139ae:	4a2c      	ldr	r2, [pc, #176]	; (8013a60 <HAL_ADC_MspInit+0xdc>)
 80139b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80139b4:	6453      	str	r3, [r2, #68]	; 0x44
 80139b6:	4b2a      	ldr	r3, [pc, #168]	; (8013a60 <HAL_ADC_MspInit+0xdc>)
 80139b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139be:	61bb      	str	r3, [r7, #24]
 80139c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80139c2:	2300      	movs	r3, #0
 80139c4:	617b      	str	r3, [r7, #20]
 80139c6:	4b26      	ldr	r3, [pc, #152]	; (8013a60 <HAL_ADC_MspInit+0xdc>)
 80139c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139ca:	4a25      	ldr	r2, [pc, #148]	; (8013a60 <HAL_ADC_MspInit+0xdc>)
 80139cc:	f043 0302 	orr.w	r3, r3, #2
 80139d0:	6313      	str	r3, [r2, #48]	; 0x30
 80139d2:	4b23      	ldr	r3, [pc, #140]	; (8013a60 <HAL_ADC_MspInit+0xdc>)
 80139d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139d6:	f003 0302 	and.w	r3, r3, #2
 80139da:	617b      	str	r3, [r7, #20]
 80139dc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC1_PIN;
 80139de:	2301      	movs	r3, #1
 80139e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80139e2:	2303      	movs	r3, #3
 80139e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139e6:	2300      	movs	r3, #0
 80139e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC1_PORT, &GPIO_InitStruct);
 80139ea:	f107 031c 	add.w	r3, r7, #28
 80139ee:	4619      	mov	r1, r3
 80139f0:	481c      	ldr	r0, [pc, #112]	; (8013a64 <HAL_ADC_MspInit+0xe0>)
 80139f2:	f7f2 fa3f 	bl	8005e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ADC2_PORT, &GPIO_InitStruct);

  }

}
 80139f6:	e02c      	b.n	8013a52 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	4a1a      	ldr	r2, [pc, #104]	; (8013a68 <HAL_ADC_MspInit+0xe4>)
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d127      	bne.n	8013a52 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8013a02:	2300      	movs	r3, #0
 8013a04:	613b      	str	r3, [r7, #16]
 8013a06:	4b16      	ldr	r3, [pc, #88]	; (8013a60 <HAL_ADC_MspInit+0xdc>)
 8013a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a0a:	4a15      	ldr	r2, [pc, #84]	; (8013a60 <HAL_ADC_MspInit+0xdc>)
 8013a0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013a10:	6453      	str	r3, [r2, #68]	; 0x44
 8013a12:	4b13      	ldr	r3, [pc, #76]	; (8013a60 <HAL_ADC_MspInit+0xdc>)
 8013a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013a1a:	613b      	str	r3, [r7, #16]
 8013a1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013a1e:	2300      	movs	r3, #0
 8013a20:	60fb      	str	r3, [r7, #12]
 8013a22:	4b0f      	ldr	r3, [pc, #60]	; (8013a60 <HAL_ADC_MspInit+0xdc>)
 8013a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a26:	4a0e      	ldr	r2, [pc, #56]	; (8013a60 <HAL_ADC_MspInit+0xdc>)
 8013a28:	f043 0302 	orr.w	r3, r3, #2
 8013a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8013a2e:	4b0c      	ldr	r3, [pc, #48]	; (8013a60 <HAL_ADC_MspInit+0xdc>)
 8013a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a32:	f003 0302 	and.w	r3, r3, #2
 8013a36:	60fb      	str	r3, [r7, #12]
 8013a38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC2_PIN;
 8013a3a:	2302      	movs	r3, #2
 8013a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8013a3e:	2303      	movs	r3, #3
 8013a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a42:	2300      	movs	r3, #0
 8013a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC2_PORT, &GPIO_InitStruct);
 8013a46:	f107 031c 	add.w	r3, r7, #28
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	4805      	ldr	r0, [pc, #20]	; (8013a64 <HAL_ADC_MspInit+0xe0>)
 8013a4e:	f7f2 fa11 	bl	8005e74 <HAL_GPIO_Init>
}
 8013a52:	bf00      	nop
 8013a54:	3730      	adds	r7, #48	; 0x30
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}
 8013a5a:	bf00      	nop
 8013a5c:	40012000 	.word	0x40012000
 8013a60:	40023800 	.word	0x40023800
 8013a64:	40020400 	.word	0x40020400
 8013a68:	40012100 	.word	0x40012100

08013a6c <SystemClock_Config>:
  }
}
#endif
#ifdef USE_L6470
void SystemClock_Config(void)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b094      	sub	sp, #80	; 0x50
 8013a70:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 8013a72:	2300      	movs	r3, #0
 8013a74:	60bb      	str	r3, [r7, #8]
 8013a76:	4b23      	ldr	r3, [pc, #140]	; (8013b04 <SystemClock_Config+0x98>)
 8013a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a7a:	4a22      	ldr	r2, [pc, #136]	; (8013b04 <SystemClock_Config+0x98>)
 8013a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a80:	6413      	str	r3, [r2, #64]	; 0x40
 8013a82:	4b20      	ldr	r3, [pc, #128]	; (8013b04 <SystemClock_Config+0x98>)
 8013a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013a8a:	60bb      	str	r3, [r7, #8]
 8013a8c:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8013a8e:	2300      	movs	r3, #0
 8013a90:	607b      	str	r3, [r7, #4]
 8013a92:	4b1d      	ldr	r3, [pc, #116]	; (8013b08 <SystemClock_Config+0x9c>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	4a1c      	ldr	r2, [pc, #112]	; (8013b08 <SystemClock_Config+0x9c>)
 8013a98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013a9c:	6013      	str	r3, [r2, #0]
 8013a9e:	4b1a      	ldr	r3, [pc, #104]	; (8013b08 <SystemClock_Config+0x9c>)
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013aa6:	607b      	str	r3, [r7, #4]
 8013aa8:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8013aaa:	2302      	movs	r3, #2
 8013aac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8013aae:	2301      	movs	r3, #1
 8013ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8013ab2:	2310      	movs	r3, #16
 8013ab4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013ab6:	2302      	movs	r3, #2
 8013ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8013aba:	2300      	movs	r3, #0
 8013abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8013abe:	2310      	movs	r3, #16
 8013ac0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8013ac2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8013ac6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8013ac8:	2304      	movs	r3, #4
 8013aca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8013acc:	2307      	movs	r3, #7
 8013ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8013ad0:	f107 0320 	add.w	r3, r7, #32
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7f3 f82f 	bl	8006b38 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 8013ada:	2305      	movs	r3, #5
 8013adc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013ade:	2302      	movs	r3, #2
 8013ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8013ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013aea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8013aec:	2300      	movs	r3, #0
 8013aee:	61fb      	str	r3, [r7, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8013af0:	f107 030c 	add.w	r3, r7, #12
 8013af4:	2102      	movs	r1, #2
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7f3 fa96 	bl	8007028 <HAL_RCC_ClockConfig>

}
 8013afc:	bf00      	nop
 8013afe:	3750      	adds	r7, #80	; 0x50
 8013b00:	46bd      	mov	sp, r7
 8013b02:	bd80      	pop	{r7, pc}
 8013b04:	40023800 	.word	0x40023800
 8013b08:	40007000 	.word	0x40007000

08013b0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8013b10:	4b12      	ldr	r3, [pc, #72]	; (8013b5c <MX_I2C1_Init+0x50>)
 8013b12:	4a13      	ldr	r2, [pc, #76]	; (8013b60 <MX_I2C1_Init+0x54>)
 8013b14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8013b16:	4b11      	ldr	r3, [pc, #68]	; (8013b5c <MX_I2C1_Init+0x50>)
 8013b18:	4a12      	ldr	r2, [pc, #72]	; (8013b64 <MX_I2C1_Init+0x58>)
 8013b1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8013b1c:	4b0f      	ldr	r3, [pc, #60]	; (8013b5c <MX_I2C1_Init+0x50>)
 8013b1e:	2200      	movs	r2, #0
 8013b20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8013b22:	4b0e      	ldr	r3, [pc, #56]	; (8013b5c <MX_I2C1_Init+0x50>)
 8013b24:	2200      	movs	r2, #0
 8013b26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013b28:	4b0c      	ldr	r3, [pc, #48]	; (8013b5c <MX_I2C1_Init+0x50>)
 8013b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8013b2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013b30:	4b0a      	ldr	r3, [pc, #40]	; (8013b5c <MX_I2C1_Init+0x50>)
 8013b32:	2200      	movs	r2, #0
 8013b34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8013b36:	4b09      	ldr	r3, [pc, #36]	; (8013b5c <MX_I2C1_Init+0x50>)
 8013b38:	2200      	movs	r2, #0
 8013b3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013b3c:	4b07      	ldr	r3, [pc, #28]	; (8013b5c <MX_I2C1_Init+0x50>)
 8013b3e:	2200      	movs	r2, #0
 8013b40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013b42:	4b06      	ldr	r3, [pc, #24]	; (8013b5c <MX_I2C1_Init+0x50>)
 8013b44:	2200      	movs	r2, #0
 8013b46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8013b48:	4804      	ldr	r0, [pc, #16]	; (8013b5c <MX_I2C1_Init+0x50>)
 8013b4a:	f7f2 fb93 	bl	8006274 <HAL_I2C_Init>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d001      	beq.n	8013b58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8013b54:	f000 fd92 	bl	801467c <Error_Handler>
  }
}
 8013b58:	bf00      	nop
 8013b5a:	bd80      	pop	{r7, pc}
 8013b5c:	2000e684 	.word	0x2000e684
 8013b60:	40005400 	.word	0x40005400
 8013b64:	000186a0 	.word	0x000186a0

08013b68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b08a      	sub	sp, #40	; 0x28
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013b70:	f107 0314 	add.w	r3, r7, #20
 8013b74:	2200      	movs	r2, #0
 8013b76:	601a      	str	r2, [r3, #0]
 8013b78:	605a      	str	r2, [r3, #4]
 8013b7a:	609a      	str	r2, [r3, #8]
 8013b7c:	60da      	str	r2, [r3, #12]
 8013b7e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	4a19      	ldr	r2, [pc, #100]	; (8013bec <HAL_I2C_MspInit+0x84>)
 8013b86:	4293      	cmp	r3, r2
 8013b88:	d12c      	bne.n	8013be4 <HAL_I2C_MspInit+0x7c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	613b      	str	r3, [r7, #16]
 8013b8e:	4b18      	ldr	r3, [pc, #96]	; (8013bf0 <HAL_I2C_MspInit+0x88>)
 8013b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b92:	4a17      	ldr	r2, [pc, #92]	; (8013bf0 <HAL_I2C_MspInit+0x88>)
 8013b94:	f043 0302 	orr.w	r3, r3, #2
 8013b98:	6313      	str	r3, [r2, #48]	; 0x30
 8013b9a:	4b15      	ldr	r3, [pc, #84]	; (8013bf0 <HAL_I2C_MspInit+0x88>)
 8013b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b9e:	f003 0302 	and.w	r3, r3, #2
 8013ba2:	613b      	str	r3, [r7, #16]
 8013ba4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8013ba6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013bac:	2312      	movs	r3, #18
 8013bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8013bb8:	2304      	movs	r3, #4
 8013bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OLED_SDA_GPIO_Port, &GPIO_InitStruct);
 8013bbc:	f107 0314 	add.w	r3, r7, #20
 8013bc0:	4619      	mov	r1, r3
 8013bc2:	480c      	ldr	r0, [pc, #48]	; (8013bf4 <HAL_I2C_MspInit+0x8c>)
 8013bc4:	f7f2 f956 	bl	8005e74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8013bc8:	2300      	movs	r3, #0
 8013bca:	60fb      	str	r3, [r7, #12]
 8013bcc:	4b08      	ldr	r3, [pc, #32]	; (8013bf0 <HAL_I2C_MspInit+0x88>)
 8013bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bd0:	4a07      	ldr	r2, [pc, #28]	; (8013bf0 <HAL_I2C_MspInit+0x88>)
 8013bd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8013bd8:	4b05      	ldr	r3, [pc, #20]	; (8013bf0 <HAL_I2C_MspInit+0x88>)
 8013bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013be0:	60fb      	str	r3, [r7, #12]
 8013be2:	68fb      	ldr	r3, [r7, #12]
  }
}
 8013be4:	bf00      	nop
 8013be6:	3728      	adds	r7, #40	; 0x28
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}
 8013bec:	40005400 	.word	0x40005400
 8013bf0:	40023800 	.word	0x40023800
 8013bf4:	40020400 	.word	0x40020400

08013bf8 <main>:
StepperMotorBoardHandle_t *StepperMotorBoardHandle;
MotorParameterData_t *MotorParameterDataGlobal, *MotorParameterDataSingle;
#endif

int main(void)
{
 8013bf8:	b590      	push	{r4, r7, lr}
 8013bfa:	b083      	sub	sp, #12
 8013bfc:	af00      	add	r7, sp, #0
  /* STM32F4xx HAL library initialization */
  HAL_Init();
 8013bfe:	f7f0 fa31 	bl	8004064 <HAL_Init>
  
  /* Configure the system clock */
  SystemClock_Config();
 8013c02:	f7ff ff33 	bl	8013a6c <SystemClock_Config>
  
  /*Initialize pin used for Roplus*/
  Roplus_Pin_Init();
 8013c06:	f000 fb63 	bl	80142d0 <Roplus_Pin_Init>
  
  /*UART initialization, used for debug*/
  MX_USART1_Init();
 8013c0a:	f001 fb5b 	bl	80152c4 <MX_USART1_Init>
  Uart_Send("UART OK!\n");
 8013c0e:	48b3      	ldr	r0, [pc, #716]	; (8013edc <main+0x2e4>)
 8013c10:	f001 fbf2 	bl	80153f8 <Uart_Send>
  HAL_Delay(100);
 8013c14:	2064      	movs	r0, #100	; 0x64
 8013c16:	f7f0 fa97 	bl	8004148 <HAL_Delay>

  //Modbus initialization
  MX_LWIP_Init();
 8013c1a:	f7f4 ff53 	bl	8008ac4 <MX_LWIP_Init>
  ModbusTCPInit();
 8013c1e:	f7ee ff35 	bl	8002a8c <ModbusTCPInit>
  Uart_Send("Modbus OK!\n");
 8013c22:	48af      	ldr	r0, [pc, #700]	; (8013ee0 <main+0x2e8>)
 8013c24:	f001 fbe8 	bl	80153f8 <Uart_Send>
  HAL_Delay(100);
 8013c28:	2064      	movs	r0, #100	; 0x64
 8013c2a:	f7f0 fa8d 	bl	8004148 <HAL_Delay>

  //ADC initialization
  MX_ADC1_Init();
 8013c2e:	f7ff fe05 	bl	801383c <MX_ADC1_Init>
  MX_ADC2_Init();
 8013c32:	f7ff fe55 	bl	80138e0 <MX_ADC2_Init>
  Uart_Send("ADC OK!\n");
 8013c36:	48ab      	ldr	r0, [pc, #684]	; (8013ee4 <main+0x2ec>)
 8013c38:	f001 fbde 	bl	80153f8 <Uart_Send>
  HAL_Delay(100);
 8013c3c:	2064      	movs	r0, #100	; 0x64
 8013c3e:	f7f0 fa83 	bl	8004148 <HAL_Delay>

  #ifdef USE_L6470
    /*Initialize the SPI used by the X-NUCLEO-IMH02A1*/
    MX_SPI_Init();
 8013c42:	f7ee fe5a 	bl	80028fa <MX_SPI_Init>
    // HAL_Delay(100);
    Uart_Send("SPI-L6470 OK!\n");
 8013c46:	48a8      	ldr	r0, [pc, #672]	; (8013ee8 <main+0x2f0>)
 8013c48:	f001 fbd6 	bl	80153f8 <Uart_Send>
    HAL_Delay(100);
 8013c4c:	2064      	movs	r0, #100	; 0x64
 8013c4e:	f7f0 fa7b 	bl	8004148 <HAL_Delay>
    /* X-NUCLEO-IHM02A1 initialization */
    BSP_Init();
 8013c52:	f7ee fd2d 	bl	80026b0 <BSP_Init>
    Uart_Send("BSP-L6470 OK!\n");
 8013c56:	48a5      	ldr	r0, [pc, #660]	; (8013eec <main+0x2f4>)
 8013c58:	f001 fbce 	bl	80153f8 <Uart_Send>
  #endif

  /*LED screen initialization*/
  MX_I2C1_Init();
 8013c5c:	f7ff ff56 	bl	8013b0c <MX_I2C1_Init>
  ssd1306_Init();
 8013c60:	f000 fec8 	bl	80149f4 <ssd1306_Init>
  Uart_Send("LED OK!\n");
 8013c64:	48a2      	ldr	r0, [pc, #648]	; (8013ef0 <main+0x2f8>)
 8013c66:	f001 fbc7 	bl	80153f8 <Uart_Send>
  /*Encoder Init*/
  //MX_TIM2_Init();
  //Uart_Send("TIM OK!\n");

  /*Indicator to show all initialization have been done, if done, turn on the DIAG1 led*/
  HAL_GPIO_WritePin(LED_DIAG_PORT,LED_DIAG1_PIN,GPIO_PIN_SET);
 8013c6a:	2201      	movs	r2, #1
 8013c6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013c70:	48a0      	ldr	r0, [pc, #640]	; (8013ef4 <main+0x2fc>)
 8013c72:	f7f2 fab3 	bl	80061dc <HAL_GPIO_WritePin>

  /*show screen*/
  showscreen();
 8013c76:	f000 fa8d 	bl	8014194 <showscreen>
  BufferInit((uint8_t *) Rx_Buffer,(uint8_t *) Rx_Buffer_former,"Tian",RX_BUFFERSIZE);
 8013c7a:	2308      	movs	r3, #8
 8013c7c:	4a9e      	ldr	r2, [pc, #632]	; (8013ef8 <main+0x300>)
 8013c7e:	499f      	ldr	r1, [pc, #636]	; (8013efc <main+0x304>)
 8013c80:	489f      	ldr	r0, [pc, #636]	; (8013f00 <main+0x308>)
 8013c82:	f001 fbcf 	bl	8015424 <BufferInit>
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) Rx_Buffer, RX_BUFFERSIZE);
 8013c86:	2208      	movs	r2, #8
 8013c88:	499d      	ldr	r1, [pc, #628]	; (8013f00 <main+0x308>)
 8013c8a:	489e      	ldr	r0, [pc, #632]	; (8013f04 <main+0x30c>)
 8013c8c:	f7f4 f8eb 	bl	8007e66 <HAL_UART_Transmit_IT>
  HAL_Delay(100);
 8013c90:	2064      	movs	r0, #100	; 0x64
 8013c92:	f7f0 fa59 	bl	8004148 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) Rx_Buffer_former, RX_BUFFERSIZE);
 8013c96:	2208      	movs	r2, #8
 8013c98:	4998      	ldr	r1, [pc, #608]	; (8013efc <main+0x304>)
 8013c9a:	489a      	ldr	r0, [pc, #616]	; (8013f04 <main+0x30c>)
 8013c9c:	f7f4 f8e3 	bl	8007e66 <HAL_UART_Transmit_IT>
  //show screen menu, indicate the homing process
  clearscreen();
 8013ca0:	f000 faba 	bl	8014218 <clearscreen>
  eth_status = DetectEthernetCable();
 8013ca4:	f000 fcce 	bl	8014644 <DetectEthernetCable>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	461a      	mov	r2, r3
 8013cac:	4b96      	ldr	r3, [pc, #600]	; (8013f08 <main+0x310>)
 8013cae:	701a      	strb	r2, [r3, #0]
  eth_status_former = eth_status;
 8013cb0:	4b95      	ldr	r3, [pc, #596]	; (8013f08 <main+0x310>)
 8013cb2:	781a      	ldrb	r2, [r3, #0]
 8013cb4:	4b95      	ldr	r3, [pc, #596]	; (8013f0c <main+0x314>)
 8013cb6:	701a      	strb	r2, [r3, #0]
  Update_Eth_Status_Led();
 8013cb8:	f000 fdde 	bl	8014878 <Update_Eth_Status_Led>
  screenmenu();
 8013cbc:	f000 fc68 	bl	8014590 <screenmenu>
  /*execute home process, for L6470 & POWERSTEP respectively*/
  #ifdef USE_L6470
    uint8_t id;
    
    /*Get parameters*/
    MotorParameterDataGlobal = GetMotorParameterInitData();
 8013cc0:	f000 fe54 	bl	801496c <GetMotorParameterInitData>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	4a92      	ldr	r2, [pc, #584]	; (8013f10 <main+0x318>)
 8013cc8:	6013      	str	r3, [r2, #0]
    /*Set Paeameters*/
    for (id = 0; id < EXPBRD_MOUNTED_NR; id++)
 8013cca:	2300      	movs	r3, #0
 8013ccc:	71fb      	strb	r3, [r7, #7]
 8013cce:	e01d      	b.n	8013d0c <main+0x114>
      {
        /*Get board handler, 1 board in default*/
        StepperMotorBoardHandle = BSP_GetExpansionBoardHandle(EXPBRD_ID(id));
 8013cd0:	79fb      	ldrb	r3, [r7, #7]
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	f7ee fca4 	bl	8002620 <EXPBRD_ID>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f7ee fdb8 	bl	8002850 <BSP_GetExpansionBoardHandle>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	4a8c      	ldr	r2, [pc, #560]	; (8013f14 <main+0x31c>)
 8013ce4:	6013      	str	r3, [r2, #0]
        MotorParameterDataSingle = MotorParameterDataGlobal+(id*L6470DAISYCHAINSIZE);
 8013ce6:	4b8a      	ldr	r3, [pc, #552]	; (8013f10 <main+0x318>)
 8013ce8:	681a      	ldr	r2, [r3, #0]
 8013cea:	79fb      	ldrb	r3, [r7, #7]
 8013cec:	2158      	movs	r1, #88	; 0x58
 8013cee:	fb01 f303 	mul.w	r3, r1, r3
 8013cf2:	4413      	add	r3, r2
 8013cf4:	4a88      	ldr	r2, [pc, #544]	; (8013f18 <main+0x320>)
 8013cf6:	6013      	str	r3, [r2, #0]
        StepperMotorBoardHandle->Config(MotorParameterDataSingle);
 8013cf8:	4b86      	ldr	r3, [pc, #536]	; (8013f14 <main+0x31c>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	685b      	ldr	r3, [r3, #4]
 8013cfe:	4a86      	ldr	r2, [pc, #536]	; (8013f18 <main+0x320>)
 8013d00:	6812      	ldr	r2, [r2, #0]
 8013d02:	4610      	mov	r0, r2
 8013d04:	4798      	blx	r3
    for (id = 0; id < EXPBRD_MOUNTED_NR; id++)
 8013d06:	79fb      	ldrb	r3, [r7, #7]
 8013d08:	3301      	adds	r3, #1
 8013d0a:	71fb      	strb	r3, [r7, #7]
 8013d0c:	79fb      	ldrb	r3, [r7, #7]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d0de      	beq.n	8013cd0 <main+0xd8>
      }  
    /*Select 1st board and get handler*/
    board = EXPBRD_ID(0);
 8013d12:	2000      	movs	r0, #0
 8013d14:	f7ee fc84 	bl	8002620 <EXPBRD_ID>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	461a      	mov	r2, r3
 8013d1c:	4b7f      	ldr	r3, [pc, #508]	; (8013f1c <main+0x324>)
 8013d1e:	701a      	strb	r2, [r3, #0]
    StepperMotorBoardHandle = BSP_GetExpansionBoardHandle(board);
 8013d20:	4b7e      	ldr	r3, [pc, #504]	; (8013f1c <main+0x324>)
 8013d22:	781b      	ldrb	r3, [r3, #0]
 8013d24:	4618      	mov	r0, r3
 8013d26:	f7ee fd93 	bl	8002850 <BSP_GetExpansionBoardHandle>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	4a79      	ldr	r2, [pc, #484]	; (8013f14 <main+0x31c>)
 8013d2e:	6013      	str	r3, [r2, #0]

    /*DRIVER_0 GRIPPER MOTOR*/
    gripper_motor = L6470_ID(0);
 8013d30:	2000      	movs	r0, #0
 8013d32:	f7ed fd41 	bl	80017b8 <L6470_ID>
 8013d36:	4603      	mov	r3, r0
 8013d38:	461a      	mov	r2, r3
 8013d3a:	4b79      	ldr	r3, [pc, #484]	; (8013f20 <main+0x328>)
 8013d3c:	701a      	strb	r2, [r3, #0]
    /*DRIVER_1 TEST MOTOR*/
    test_motor =L6470_ID(1);
 8013d3e:	2001      	movs	r0, #1
 8013d40:	f7ed fd3a 	bl	80017b8 <L6470_ID>
 8013d44:	4603      	mov	r3, r0
 8013d46:	461a      	mov	r2, r3
 8013d48:	4b76      	ldr	r3, [pc, #472]	; (8013f24 <main+0x32c>)
 8013d4a:	701a      	strb	r2, [r3, #0]

    /*Go Home, Test needed to define the right rotation direction*/
    Motor_Find_Home(gripper_motor,L6470_DIR_REV_ID,Step_s_2_Speed(MOTOR_HOME_SPEED));
 8013d4c:	4b74      	ldr	r3, [pc, #464]	; (8013f20 <main+0x328>)
 8013d4e:	781c      	ldrb	r4, [r3, #0]
 8013d50:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8013f28 <main+0x330>
 8013d54:	f7ec feae 	bl	8000ab4 <Step_s_2_Speed>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	461a      	mov	r2, r3
 8013d5c:	2100      	movs	r1, #0
 8013d5e:	4620      	mov	r0, r4
 8013d60:	f000 fbc4 	bl	80144ec <Motor_Find_Home>
    //find home, RED led blinking
    Motor_Find_Home(0,BACKWARD,15000); 
    //Motor_Find_Upper_Position(0,FORWARD,10000);
  #endif
    /*DIAG2 LED solid on to indicate initialize compeleted*/
    HAL_GPIO_WritePin(LED_DIAG_PORT,LED_DIAG2_PIN,GPIO_PIN_SET);
 8013d64:	2201      	movs	r2, #1
 8013d66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013d6a:	4862      	ldr	r0, [pc, #392]	; (8013ef4 <main+0x2fc>)
 8013d6c:	f7f2 fa36 	bl	80061dc <HAL_GPIO_WritePin>
    
  while(1)
  {
    //Get Modbus data
    MX_LWIP_Process();
 8013d70:	f7f4 ffe8 	bl	8008d44 <MX_LWIP_Process>
	  ModbusTCPMain();
 8013d74:	f7ee fe9c 	bl	8002ab0 <ModbusTCPMain>
    if (ps_error)
 8013d78:	4b6c      	ldr	r3, [pc, #432]	; (8013f2c <main+0x334>)
 8013d7a:	781b      	ldrb	r3, [r3, #0]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	f040 810c 	bne.w	8013f9a <main+0x3a2>
    {
      continue;
    }
    
    //If the first bit of REG_COILS_BUF is 1 or the UR_IO_ENABLE_PIN is high, means the robot arm is moving, or the ps_error is set, so just skip the loop
    if(REG_COILS_BUF[0] ==1 || (HAL_GPIO_ReadPin(UR_IO_PORT,UR_IO_ENABLE_PIN)==GPIO_PIN_RESET))
 8013d82:	4b6b      	ldr	r3, [pc, #428]	; (8013f30 <main+0x338>)
 8013d84:	781b      	ldrb	r3, [r3, #0]
 8013d86:	2b01      	cmp	r3, #1
 8013d88:	d006      	beq.n	8013d98 <main+0x1a0>
 8013d8a:	2104      	movs	r1, #4
 8013d8c:	4869      	ldr	r0, [pc, #420]	; (8013f34 <main+0x33c>)
 8013d8e:	f7f2 fa0d 	bl	80061ac <HAL_GPIO_ReadPin>
 8013d92:	4603      	mov	r3, r0
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d119      	bne.n	8013dcc <main+0x1d4>
      // if (HAL_GPIO_ReadPin(UR_IO_PORT,UR_IO_ENABLE_PIN)==GPIO_PIN_SET)
      // {
      //   Uart_Send("I/O high\n");
      // }
      //Blink the COMM LED to indicate the error
      HAL_GPIO_TogglePin(LED_STATUS_PORT,LED_COMM_PIN);
 8013d98:	2102      	movs	r1, #2
 8013d9a:	4866      	ldr	r0, [pc, #408]	; (8013f34 <main+0x33c>)
 8013d9c:	f7f2 fa37 	bl	800620e <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8013da0:	2064      	movs	r0, #100	; 0x64
 8013da2:	f7f0 f9d1 	bl	8004148 <HAL_Delay>
      if (cleared ==FALSE)
 8013da6:	4b64      	ldr	r3, [pc, #400]	; (8013f38 <main+0x340>)
 8013da8:	781b      	ldrb	r3, [r3, #0]
 8013daa:	f083 0301 	eor.w	r3, r3, #1
 8013dae:	b2db      	uxtb	r3, r3
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d002      	beq.n	8013dba <main+0x1c2>
      {
        cleared = TRUE;
 8013db4:	4b60      	ldr	r3, [pc, #384]	; (8013f38 <main+0x340>)
 8013db6:	2201      	movs	r2, #1
 8013db8:	701a      	strb	r2, [r3, #0]
      }
      REG_DISC_BUF[0]=0;
 8013dba:	4b60      	ldr	r3, [pc, #384]	; (8013f3c <main+0x344>)
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(MOTOR_READY_DIGITAL_OUTPUT_PORT,MOTOR_READY_DIGITAL_OUTPUT_PIN,GPIO_PIN_RESET);
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	2140      	movs	r1, #64	; 0x40
 8013dc4:	485e      	ldr	r0, [pc, #376]	; (8013f40 <main+0x348>)
 8013dc6:	f7f2 fa09 	bl	80061dc <HAL_GPIO_WritePin>
      continue;
 8013dca:	e0eb      	b.n	8013fa4 <main+0x3ac>
    else
    {
      // first get desired position from uart, to check if a msg come and modified the desired position
      #ifdef USE_L6470
      //Receive Motor Running Cmd Using Uart
        HAL_UART_Receive_IT(&huart1, (uint8_t *)Rx_Buffer,RX_BUFFERSIZE);
 8013dcc:	2208      	movs	r2, #8
 8013dce:	494c      	ldr	r1, [pc, #304]	; (8013f00 <main+0x308>)
 8013dd0:	484c      	ldr	r0, [pc, #304]	; (8013f04 <main+0x30c>)
 8013dd2:	f7f4 f88d 	bl	8007ef0 <HAL_UART_Receive_IT>
      #endif

      #ifdef USE_POWERSTEP
      Pull_And_Run_Motor();
      #endif
      if(cleared == FALSE)
 8013dd6:	4b58      	ldr	r3, [pc, #352]	; (8013f38 <main+0x340>)
 8013dd8:	781b      	ldrb	r3, [r3, #0]
 8013dda:	f083 0301 	eor.w	r3, r3, #1
 8013dde:	b2db      	uxtb	r3, r3
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	f040 80dc 	bne.w	8013f9e <main+0x3a6>
      {
        continue;
      }
      //Then we check the UR IO combine with the modbus and move the motor
      Update_gear_buf();
 8013de6:	f000 fcbb 	bl	8014760 <Update_gear_buf>
      //if the bits have changed, we need to run the motor
      if(Buffercmp((uint8_t *) gear_buff,(uint8_t *)gear_buff_former,2) != 0)
 8013dea:	2202      	movs	r2, #2
 8013dec:	4955      	ldr	r1, [pc, #340]	; (8013f44 <main+0x34c>)
 8013dee:	4856      	ldr	r0, [pc, #344]	; (8013f48 <main+0x350>)
 8013df0:	f001 fbb5 	bl	801555e <Buffercmp>
 8013df4:	4603      	mov	r3, r0
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d049      	beq.n	8013e8e <main+0x296>
      {
        uint8_t gear  = gear_buff[0]*2+gear_buff[1]*1;
 8013dfa:	4b53      	ldr	r3, [pc, #332]	; (8013f48 <main+0x350>)
 8013dfc:	781b      	ldrb	r3, [r3, #0]
 8013dfe:	005b      	lsls	r3, r3, #1
 8013e00:	b2da      	uxtb	r2, r3
 8013e02:	4b51      	ldr	r3, [pc, #324]	; (8013f48 <main+0x350>)
 8013e04:	785b      	ldrb	r3, [r3, #1]
 8013e06:	4413      	add	r3, r2
 8013e08:	71bb      	strb	r3, [r7, #6]
        Desired_Pos = Gear_To_Position(gear);
 8013e0a:	79bb      	ldrb	r3, [r7, #6]
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f000 fd6b 	bl	80148e8 <Gear_To_Position>
 8013e12:	4603      	mov	r3, r0
 8013e14:	4a4d      	ldr	r2, [pc, #308]	; (8013f4c <main+0x354>)
 8013e16:	6013      	str	r3, [r2, #0]
        if(Desired_Pos == -1)
 8013e18:	4b4c      	ldr	r3, [pc, #304]	; (8013f4c <main+0x354>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e20:	f000 80bf 	beq.w	8013fa2 <main+0x3aa>
        {
          continue;
        }
        Desired_Pos = Pos_Saturate(Desired_Pos);
 8013e24:	4b49      	ldr	r3, [pc, #292]	; (8013f4c <main+0x354>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f000 fd81 	bl	8014930 <Pos_Saturate>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	4a46      	ldr	r2, [pc, #280]	; (8013f4c <main+0x354>)
 8013e32:	6013      	str	r3, [r2, #0]
        Rotate_Motor(Desired_Pos);
 8013e34:	4b45      	ldr	r3, [pc, #276]	; (8013f4c <main+0x354>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f000 fc39 	bl	80146b0 <Rotate_Motor>
        REG_DISC_BUF[0]=1;
 8013e3e:	4b3f      	ldr	r3, [pc, #252]	; (8013f3c <main+0x344>)
 8013e40:	2201      	movs	r2, #1
 8013e42:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(MOTOR_READY_DIGITAL_OUTPUT_PORT,MOTOR_READY_DIGITAL_OUTPUT_PIN,GPIO_PIN_SET);
 8013e44:	2201      	movs	r2, #1
 8013e46:	2140      	movs	r1, #64	; 0x40
 8013e48:	483d      	ldr	r0, [pc, #244]	; (8013f40 <main+0x348>)
 8013e4a:	f7f2 f9c7 	bl	80061dc <HAL_GPIO_WritePin>
        gear_status[0] = gear/10+'0';
 8013e4e:	79bb      	ldrb	r3, [r7, #6]
 8013e50:	4a3f      	ldr	r2, [pc, #252]	; (8013f50 <main+0x358>)
 8013e52:	fba2 2303 	umull	r2, r3, r2, r3
 8013e56:	08db      	lsrs	r3, r3, #3
 8013e58:	b2db      	uxtb	r3, r3
 8013e5a:	3330      	adds	r3, #48	; 0x30
 8013e5c:	b2da      	uxtb	r2, r3
 8013e5e:	4b3d      	ldr	r3, [pc, #244]	; (8013f54 <main+0x35c>)
 8013e60:	701a      	strb	r2, [r3, #0]
        gear_status[1] = gear%10+'0';
 8013e62:	79ba      	ldrb	r2, [r7, #6]
 8013e64:	4b3a      	ldr	r3, [pc, #232]	; (8013f50 <main+0x358>)
 8013e66:	fba3 1302 	umull	r1, r3, r3, r2
 8013e6a:	08d9      	lsrs	r1, r3, #3
 8013e6c:	460b      	mov	r3, r1
 8013e6e:	009b      	lsls	r3, r3, #2
 8013e70:	440b      	add	r3, r1
 8013e72:	005b      	lsls	r3, r3, #1
 8013e74:	1ad3      	subs	r3, r2, r3
 8013e76:	b2db      	uxtb	r3, r3
 8013e78:	3330      	adds	r3, #48	; 0x30
 8013e7a:	b2da      	uxtb	r2, r3
 8013e7c:	4b35      	ldr	r3, [pc, #212]	; (8013f54 <main+0x35c>)
 8013e7e:	705a      	strb	r2, [r3, #1]
        Update_Gear_Status();
 8013e80:	f000 fa12 	bl	80142a8 <Update_Gear_Status>
        BufferCopy((uint8_t *) gear_buff,(uint8_t *)gear_buff_former,2); 
 8013e84:	2202      	movs	r2, #2
 8013e86:	492f      	ldr	r1, [pc, #188]	; (8013f44 <main+0x34c>)
 8013e88:	482f      	ldr	r0, [pc, #188]	; (8013f48 <main+0x350>)
 8013e8a:	f001 fb06 	bl	801549a <BufferCopy>
      }
    }
    //suction can be triggered at any time, as long as there's no error from thr pressure sensor
    suction_bit = (REG_COILS_BUF[3]==1) || (HAL_GPIO_ReadPin(UR_IO_PORT,UR_IO_SUCTION_PIN)== GPIO_PIN_RESET);
 8013e8e:	4b28      	ldr	r3, [pc, #160]	; (8013f30 <main+0x338>)
 8013e90:	78db      	ldrb	r3, [r3, #3]
 8013e92:	2b01      	cmp	r3, #1
 8013e94:	d006      	beq.n	8013ea4 <main+0x2ac>
 8013e96:	2180      	movs	r1, #128	; 0x80
 8013e98:	4826      	ldr	r0, [pc, #152]	; (8013f34 <main+0x33c>)
 8013e9a:	f7f2 f987 	bl	80061ac <HAL_GPIO_ReadPin>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d101      	bne.n	8013ea8 <main+0x2b0>
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	e000      	b.n	8013eaa <main+0x2b2>
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	b2da      	uxtb	r2, r3
 8013eac:	4b2a      	ldr	r3, [pc, #168]	; (8013f58 <main+0x360>)
 8013eae:	701a      	strb	r2, [r3, #0]
    if(suction_bit !=suction_bit_former)
 8013eb0:	4b29      	ldr	r3, [pc, #164]	; (8013f58 <main+0x360>)
 8013eb2:	781a      	ldrb	r2, [r3, #0]
 8013eb4:	4b29      	ldr	r3, [pc, #164]	; (8013f5c <main+0x364>)
 8013eb6:	781b      	ldrb	r3, [r3, #0]
 8013eb8:	429a      	cmp	r2, r3
 8013eba:	d053      	beq.n	8013f64 <main+0x36c>
    {
      suction();
 8013ebc:	f000 fc7c 	bl	80147b8 <suction>
      if(!ps_error)
 8013ec0:	4b1a      	ldr	r3, [pc, #104]	; (8013f2c <main+0x334>)
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	f083 0301 	eor.w	r3, r3, #1
 8013ec8:	b2db      	uxtb	r3, r3
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d048      	beq.n	8013f60 <main+0x368>
      {
        suction_bit_former = suction_bit;
 8013ece:	4b22      	ldr	r3, [pc, #136]	; (8013f58 <main+0x360>)
 8013ed0:	781a      	ldrb	r2, [r3, #0]
 8013ed2:	4b22      	ldr	r3, [pc, #136]	; (8013f5c <main+0x364>)
 8013ed4:	701a      	strb	r2, [r3, #0]
        Update_Suction_Status_Led();
 8013ed6:	f000 fcab 	bl	8014830 <Update_Suction_Status_Led>
 8013eda:	e043      	b.n	8013f64 <main+0x36c>
 8013edc:	080192e4 	.word	0x080192e4
 8013ee0:	080192f0 	.word	0x080192f0
 8013ee4:	080192fc 	.word	0x080192fc
 8013ee8:	08019308 	.word	0x08019308
 8013eec:	08019318 	.word	0x08019318
 8013ef0:	08019328 	.word	0x08019328
 8013ef4:	40020800 	.word	0x40020800
 8013ef8:	08019334 	.word	0x08019334
 8013efc:	2000e6f8 	.word	0x2000e6f8
 8013f00:	2000e6f0 	.word	0x2000e6f0
 8013f04:	2000eb90 	.word	0x2000eb90
 8013f08:	2000e71c 	.word	0x2000e71c
 8013f0c:	2000e71d 	.word	0x2000e71d
 8013f10:	2000e734 	.word	0x2000e734
 8013f14:	2000e730 	.word	0x2000e730
 8013f18:	2000e738 	.word	0x2000e738
 8013f1c:	2000e700 	.word	0x2000e700
 8013f20:	2000e701 	.word	0x2000e701
 8013f24:	2000e702 	.word	0x2000e702
 8013f28:	466a6000 	.word	0x466a6000
 8013f2c:	2000e72c 	.word	0x2000e72c
 8013f30:	2000e710 	.word	0x2000e710
 8013f34:	40021000 	.word	0x40021000
 8013f38:	20000474 	.word	0x20000474
 8013f3c:	2000e704 	.word	0x2000e704
 8013f40:	40020400 	.word	0x40020400
 8013f44:	2000e720 	.word	0x2000e720
 8013f48:	2000e724 	.word	0x2000e724
 8013f4c:	2000e6e0 	.word	0x2000e6e0
 8013f50:	cccccccd 	.word	0xcccccccd
 8013f54:	2000e6e4 	.word	0x2000e6e4
 8013f58:	2000e71a 	.word	0x2000e71a
 8013f5c:	2000e71b 	.word	0x2000e71b
      }
      else
      {
        Show_Err_Led();
 8013f60:	f000 fcae 	bl	80148c0 <Show_Err_Led>
      }
    }
    //Update Ethernet status
    eth_status = DetectEthernetCable();
 8013f64:	f000 fb6e 	bl	8014644 <DetectEthernetCable>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	461a      	mov	r2, r3
 8013f6c:	4b0e      	ldr	r3, [pc, #56]	; (8013fa8 <main+0x3b0>)
 8013f6e:	701a      	strb	r2, [r3, #0]
    if(eth_status!=eth_status_former)
 8013f70:	4b0d      	ldr	r3, [pc, #52]	; (8013fa8 <main+0x3b0>)
 8013f72:	781a      	ldrb	r2, [r3, #0]
 8013f74:	4b0d      	ldr	r3, [pc, #52]	; (8013fac <main+0x3b4>)
 8013f76:	781b      	ldrb	r3, [r3, #0]
 8013f78:	429a      	cmp	r2, r3
 8013f7a:	d005      	beq.n	8013f88 <main+0x390>
    {
      Update_Eth_Status_Led();
 8013f7c:	f000 fc7c 	bl	8014878 <Update_Eth_Status_Led>
      eth_status_former = eth_status;
 8013f80:	4b09      	ldr	r3, [pc, #36]	; (8013fa8 <main+0x3b0>)
 8013f82:	781a      	ldrb	r2, [r3, #0]
 8013f84:	4b09      	ldr	r3, [pc, #36]	; (8013fac <main+0x3b4>)
 8013f86:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(100);
 8013f88:	2064      	movs	r0, #100	; 0x64
 8013f8a:	f7f0 f8dd 	bl	8004148 <HAL_Delay>
    /*whiting for control input, DIAG1 led blinking*/
    HAL_GPIO_TogglePin(LED_DIAG_PORT,LED_DIAG1_PIN);
 8013f8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013f92:	4807      	ldr	r0, [pc, #28]	; (8013fb0 <main+0x3b8>)
 8013f94:	f7f2 f93b 	bl	800620e <HAL_GPIO_TogglePin>
 8013f98:	e6ea      	b.n	8013d70 <main+0x178>
      continue;
 8013f9a:	bf00      	nop
 8013f9c:	e6e8      	b.n	8013d70 <main+0x178>
        continue;
 8013f9e:	bf00      	nop
 8013fa0:	e6e6      	b.n	8013d70 <main+0x178>
          continue;
 8013fa2:	bf00      	nop
  {
 8013fa4:	e6e4      	b.n	8013d70 <main+0x178>
 8013fa6:	bf00      	nop
 8013fa8:	2000e71c 	.word	0x2000e71c
 8013fac:	2000e71d 	.word	0x2000e71d
 8013fb0:	40020800 	.word	0x40020800

08013fb4 <HAL_UART_RxCpltCallback>:
}


//Receive process finished
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b084      	sub	sp, #16
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
  /*Received, toggle COMM LED*/
  HAL_GPIO_TogglePin(LED_STATUS_PORT,LED_COMM_PIN);
 8013fbc:	2102      	movs	r1, #2
 8013fbe:	4869      	ldr	r0, [pc, #420]	; (8014164 <HAL_UART_RxCpltCallback+0x1b0>)
 8013fc0:	f7f2 f925 	bl	800620e <HAL_GPIO_TogglePin>
  //Different Msg Received
  if(Buffercmp((uint8_t *) Rx_Buffer,(uint8_t *)Rx_Buffer_former,RX_BUFFERSIZE) != 0)
 8013fc4:	2208      	movs	r2, #8
 8013fc6:	4968      	ldr	r1, [pc, #416]	; (8014168 <HAL_UART_RxCpltCallback+0x1b4>)
 8013fc8:	4868      	ldr	r0, [pc, #416]	; (801416c <HAL_UART_RxCpltCallback+0x1b8>)
 8013fca:	f001 fac8 	bl	801555e <Buffercmp>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d074      	beq.n	80140be <HAL_UART_RxCpltCallback+0x10a>
  {
    //HAL_USART_Transmit_IT(&huart5, (uint8_t *) Rx_Buffer, RX_BUFFERSIZE);
    if(Rx_Buffer[0] != 'A')
 8013fd4:	4b65      	ldr	r3, [pc, #404]	; (801416c <HAL_UART_RxCpltCallback+0x1b8>)
 8013fd6:	781b      	ldrb	r3, [r3, #0]
 8013fd8:	2b41      	cmp	r3, #65	; 0x41
 8013fda:	f040 80ba 	bne.w	8014152 <HAL_UART_RxCpltCallback+0x19e>
    }
    /*Parse the string and get the desired motor position*/
    else
    {
      //The arm is running, so cannot response, just skip
      if(REG_COILS_BUF[0]==1)
 8013fde:	4b64      	ldr	r3, [pc, #400]	; (8014170 <HAL_UART_RxCpltCallback+0x1bc>)
 8013fe0:	781b      	ldrb	r3, [r3, #0]
 8013fe2:	2b01      	cmp	r3, #1
 8013fe4:	f000 80b7 	beq.w	8014156 <HAL_UART_RxCpltCallback+0x1a2>
      {
        return;
      }
      BufferCopy((uint8_t *) Rx_Buffer,(uint8_t *)Rx_Buffer_former,RX_BUFFERSIZE);
 8013fe8:	2208      	movs	r2, #8
 8013fea:	495f      	ldr	r1, [pc, #380]	; (8014168 <HAL_UART_RxCpltCallback+0x1b4>)
 8013fec:	485f      	ldr	r0, [pc, #380]	; (801416c <HAL_UART_RxCpltCallback+0x1b8>)
 8013fee:	f001 fa54 	bl	801549a <BufferCopy>
      //HAL_USART_Transmit_IT(&huart5, (uint8_t *) Rx_Buffer_former, RX_BUFFERSIZE);
      
      //Get Desired Pos
      Desired_Pos = BufferParse((uint8_t *) Rx_Buffer);
 8013ff2:	485e      	ldr	r0, [pc, #376]	; (801416c <HAL_UART_RxCpltCallback+0x1b8>)
 8013ff4:	f001 fa6f 	bl	80154d6 <BufferParse>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	4a5e      	ldr	r2, [pc, #376]	; (8014174 <HAL_UART_RxCpltCallback+0x1c0>)
 8013ffc:	6013      	str	r3, [r2, #0]
      // if(Desired_Pos == -1)
      // {
      //   Uart_Send("inp");
      // }
      /*Successful parsed*/
      if(Desired_Pos != -1)
 8013ffe:	4b5d      	ldr	r3, [pc, #372]	; (8014174 <HAL_UART_RxCpltCallback+0x1c0>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014006:	f000 80a9 	beq.w	801415c <HAL_UART_RxCpltCallback+0x1a8>
      {
        if(Desired_Pos!=cur_pos)
 801400a:	4b5a      	ldr	r3, [pc, #360]	; (8014174 <HAL_UART_RxCpltCallback+0x1c0>)
 801400c:	681a      	ldr	r2, [r3, #0]
 801400e:	4b5a      	ldr	r3, [pc, #360]	; (8014178 <HAL_UART_RxCpltCallback+0x1c4>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	429a      	cmp	r2, r3
 8014014:	f000 80a2 	beq.w	801415c <HAL_UART_RxCpltCallback+0x1a8>
        {
          /*Double check the range*/
          Desired_Pos=Pos_Saturate(Desired_Pos);
 8014018:	4b56      	ldr	r3, [pc, #344]	; (8014174 <HAL_UART_RxCpltCallback+0x1c0>)
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	4618      	mov	r0, r3
 801401e:	f000 fc87 	bl	8014930 <Pos_Saturate>
 8014022:	4603      	mov	r3, r0
 8014024:	4a53      	ldr	r2, [pc, #332]	; (8014174 <HAL_UART_RxCpltCallback+0x1c0>)
 8014026:	6013      	str	r3, [r2, #0]
          /*One Direction*/
          Rotate_Motor(Desired_Pos);
 8014028:	4b52      	ldr	r3, [pc, #328]	; (8014174 <HAL_UART_RxCpltCallback+0x1c0>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	4618      	mov	r0, r3
 801402e:	f000 fb3f 	bl	80146b0 <Rotate_Motor>
          REG_DISC_BUF[0]=1;
 8014032:	4b52      	ldr	r3, [pc, #328]	; (801417c <HAL_UART_RxCpltCallback+0x1c8>)
 8014034:	2201      	movs	r2, #1
 8014036:	701a      	strb	r2, [r3, #0]
          HAL_GPIO_WritePin(MOTOR_READY_DIGITAL_OUTPUT_PORT,MOTOR_READY_DIGITAL_OUTPUT_PIN,GPIO_PIN_SET);
 8014038:	2201      	movs	r2, #1
 801403a:	2140      	movs	r1, #64	; 0x40
 801403c:	4850      	ldr	r0, [pc, #320]	; (8014180 <HAL_UART_RxCpltCallback+0x1cc>)
 801403e:	f7f2 f8cd 	bl	80061dc <HAL_GPIO_WritePin>
          uint8_t gear = (Rx_Buffer[7]-48)*1+(Rx_Buffer[6]-48)*2+(Rx_Buffer[5]-48)*4+(Rx_Buffer[4]-48)*8;
 8014042:	4b4a      	ldr	r3, [pc, #296]	; (801416c <HAL_UART_RxCpltCallback+0x1b8>)
 8014044:	79da      	ldrb	r2, [r3, #7]
 8014046:	4b49      	ldr	r3, [pc, #292]	; (801416c <HAL_UART_RxCpltCallback+0x1b8>)
 8014048:	799b      	ldrb	r3, [r3, #6]
 801404a:	3b30      	subs	r3, #48	; 0x30
 801404c:	b2db      	uxtb	r3, r3
 801404e:	005b      	lsls	r3, r3, #1
 8014050:	b2db      	uxtb	r3, r3
 8014052:	4413      	add	r3, r2
 8014054:	b2da      	uxtb	r2, r3
 8014056:	4b45      	ldr	r3, [pc, #276]	; (801416c <HAL_UART_RxCpltCallback+0x1b8>)
 8014058:	795b      	ldrb	r3, [r3, #5]
 801405a:	3b30      	subs	r3, #48	; 0x30
 801405c:	b2db      	uxtb	r3, r3
 801405e:	009b      	lsls	r3, r3, #2
 8014060:	b2db      	uxtb	r3, r3
 8014062:	4413      	add	r3, r2
 8014064:	b2da      	uxtb	r2, r3
 8014066:	4b41      	ldr	r3, [pc, #260]	; (801416c <HAL_UART_RxCpltCallback+0x1b8>)
 8014068:	791b      	ldrb	r3, [r3, #4]
 801406a:	3b30      	subs	r3, #48	; 0x30
 801406c:	b2db      	uxtb	r3, r3
 801406e:	00db      	lsls	r3, r3, #3
 8014070:	b2db      	uxtb	r3, r3
 8014072:	4413      	add	r3, r2
 8014074:	b2db      	uxtb	r3, r3
 8014076:	3b30      	subs	r3, #48	; 0x30
 8014078:	73bb      	strb	r3, [r7, #14]
          gear_status[0] = gear/10+'0';
 801407a:	7bbb      	ldrb	r3, [r7, #14]
 801407c:	4a41      	ldr	r2, [pc, #260]	; (8014184 <HAL_UART_RxCpltCallback+0x1d0>)
 801407e:	fba2 2303 	umull	r2, r3, r2, r3
 8014082:	08db      	lsrs	r3, r3, #3
 8014084:	b2db      	uxtb	r3, r3
 8014086:	3330      	adds	r3, #48	; 0x30
 8014088:	b2da      	uxtb	r2, r3
 801408a:	4b3f      	ldr	r3, [pc, #252]	; (8014188 <HAL_UART_RxCpltCallback+0x1d4>)
 801408c:	701a      	strb	r2, [r3, #0]
          gear_status[1] = gear%10+'0';
 801408e:	7bba      	ldrb	r2, [r7, #14]
 8014090:	4b3c      	ldr	r3, [pc, #240]	; (8014184 <HAL_UART_RxCpltCallback+0x1d0>)
 8014092:	fba3 1302 	umull	r1, r3, r3, r2
 8014096:	08d9      	lsrs	r1, r3, #3
 8014098:	460b      	mov	r3, r1
 801409a:	009b      	lsls	r3, r3, #2
 801409c:	440b      	add	r3, r1
 801409e:	005b      	lsls	r3, r3, #1
 80140a0:	1ad3      	subs	r3, r2, r3
 80140a2:	b2db      	uxtb	r3, r3
 80140a4:	3330      	adds	r3, #48	; 0x30
 80140a6:	b2da      	uxtb	r2, r3
 80140a8:	4b37      	ldr	r3, [pc, #220]	; (8014188 <HAL_UART_RxCpltCallback+0x1d4>)
 80140aa:	705a      	strb	r2, [r3, #1]
          Update_Gear_Status();          
 80140ac:	f000 f8fc 	bl	80142a8 <Update_Gear_Status>
          cleared = FALSE; 
 80140b0:	4b36      	ldr	r3, [pc, #216]	; (801418c <HAL_UART_RxCpltCallback+0x1d8>)
 80140b2:	2200      	movs	r2, #0
 80140b4:	701a      	strb	r2, [r3, #0]
          Uart_Send("M");
 80140b6:	4836      	ldr	r0, [pc, #216]	; (8014190 <HAL_UART_RxCpltCallback+0x1dc>)
 80140b8:	f001 f99e 	bl	80153f8 <Uart_Send>
 80140bc:	e04e      	b.n	801415c <HAL_UART_RxCpltCallback+0x1a8>
  //Same Msg Received, the motor shouldn't move, but we need to move the robot arm
  else
  {
    /*Same buffer, so no need to check whether the first byte is equal to 'A'*/
    //The arm is running, so cannot response, just skip
    if(REG_COILS_BUF[0]==1)
 80140be:	4b2c      	ldr	r3, [pc, #176]	; (8014170 <HAL_UART_RxCpltCallback+0x1bc>)
 80140c0:	781b      	ldrb	r3, [r3, #0]
 80140c2:	2b01      	cmp	r3, #1
 80140c4:	d049      	beq.n	801415a <HAL_UART_RxCpltCallback+0x1a6>
    {
      return;
    }
    //Get Desired Pos
    //Desired_Pos = BufferParse((uint8_t *) Rx_Buffer);
    REG_DISC_BUF[0]=1;
 80140c6:	4b2d      	ldr	r3, [pc, #180]	; (801417c <HAL_UART_RxCpltCallback+0x1c8>)
 80140c8:	2201      	movs	r2, #1
 80140ca:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(MOTOR_READY_DIGITAL_OUTPUT_PORT,MOTOR_READY_DIGITAL_OUTPUT_PIN,GPIO_PIN_SET);
 80140cc:	2201      	movs	r2, #1
 80140ce:	2140      	movs	r1, #64	; 0x40
 80140d0:	482b      	ldr	r0, [pc, #172]	; (8014180 <HAL_UART_RxCpltCallback+0x1cc>)
 80140d2:	f7f2 f883 	bl	80061dc <HAL_GPIO_WritePin>
    uint8_t gear = (Rx_Buffer[7]-48)*1+(Rx_Buffer[6]-48)*2+(Rx_Buffer[5]-48)*4+(Rx_Buffer[4]-48)*8;
 80140d6:	4b25      	ldr	r3, [pc, #148]	; (801416c <HAL_UART_RxCpltCallback+0x1b8>)
 80140d8:	79da      	ldrb	r2, [r3, #7]
 80140da:	4b24      	ldr	r3, [pc, #144]	; (801416c <HAL_UART_RxCpltCallback+0x1b8>)
 80140dc:	799b      	ldrb	r3, [r3, #6]
 80140de:	3b30      	subs	r3, #48	; 0x30
 80140e0:	b2db      	uxtb	r3, r3
 80140e2:	005b      	lsls	r3, r3, #1
 80140e4:	b2db      	uxtb	r3, r3
 80140e6:	4413      	add	r3, r2
 80140e8:	b2da      	uxtb	r2, r3
 80140ea:	4b20      	ldr	r3, [pc, #128]	; (801416c <HAL_UART_RxCpltCallback+0x1b8>)
 80140ec:	795b      	ldrb	r3, [r3, #5]
 80140ee:	3b30      	subs	r3, #48	; 0x30
 80140f0:	b2db      	uxtb	r3, r3
 80140f2:	009b      	lsls	r3, r3, #2
 80140f4:	b2db      	uxtb	r3, r3
 80140f6:	4413      	add	r3, r2
 80140f8:	b2da      	uxtb	r2, r3
 80140fa:	4b1c      	ldr	r3, [pc, #112]	; (801416c <HAL_UART_RxCpltCallback+0x1b8>)
 80140fc:	791b      	ldrb	r3, [r3, #4]
 80140fe:	3b30      	subs	r3, #48	; 0x30
 8014100:	b2db      	uxtb	r3, r3
 8014102:	00db      	lsls	r3, r3, #3
 8014104:	b2db      	uxtb	r3, r3
 8014106:	4413      	add	r3, r2
 8014108:	b2db      	uxtb	r3, r3
 801410a:	3b30      	subs	r3, #48	; 0x30
 801410c:	73fb      	strb	r3, [r7, #15]
    gear_status[0] = gear/10+'0';
 801410e:	7bfb      	ldrb	r3, [r7, #15]
 8014110:	4a1c      	ldr	r2, [pc, #112]	; (8014184 <HAL_UART_RxCpltCallback+0x1d0>)
 8014112:	fba2 2303 	umull	r2, r3, r2, r3
 8014116:	08db      	lsrs	r3, r3, #3
 8014118:	b2db      	uxtb	r3, r3
 801411a:	3330      	adds	r3, #48	; 0x30
 801411c:	b2da      	uxtb	r2, r3
 801411e:	4b1a      	ldr	r3, [pc, #104]	; (8014188 <HAL_UART_RxCpltCallback+0x1d4>)
 8014120:	701a      	strb	r2, [r3, #0]
    gear_status[1] = gear%10+'0';
 8014122:	7bfa      	ldrb	r2, [r7, #15]
 8014124:	4b17      	ldr	r3, [pc, #92]	; (8014184 <HAL_UART_RxCpltCallback+0x1d0>)
 8014126:	fba3 1302 	umull	r1, r3, r3, r2
 801412a:	08d9      	lsrs	r1, r3, #3
 801412c:	460b      	mov	r3, r1
 801412e:	009b      	lsls	r3, r3, #2
 8014130:	440b      	add	r3, r1
 8014132:	005b      	lsls	r3, r3, #1
 8014134:	1ad3      	subs	r3, r2, r3
 8014136:	b2db      	uxtb	r3, r3
 8014138:	3330      	adds	r3, #48	; 0x30
 801413a:	b2da      	uxtb	r2, r3
 801413c:	4b12      	ldr	r3, [pc, #72]	; (8014188 <HAL_UART_RxCpltCallback+0x1d4>)
 801413e:	705a      	strb	r2, [r3, #1]
    Update_Gear_Status();
 8014140:	f000 f8b2 	bl	80142a8 <Update_Gear_Status>
    cleared = FALSE;
 8014144:	4b11      	ldr	r3, [pc, #68]	; (801418c <HAL_UART_RxCpltCallback+0x1d8>)
 8014146:	2200      	movs	r2, #0
 8014148:	701a      	strb	r2, [r3, #0]
    Uart_Send("M");
 801414a:	4811      	ldr	r0, [pc, #68]	; (8014190 <HAL_UART_RxCpltCallback+0x1dc>)
 801414c:	f001 f954 	bl	80153f8 <Uart_Send>
 8014150:	e004      	b.n	801415c <HAL_UART_RxCpltCallback+0x1a8>
      return;
 8014152:	bf00      	nop
 8014154:	e002      	b.n	801415c <HAL_UART_RxCpltCallback+0x1a8>
        return;
 8014156:	bf00      	nop
 8014158:	e000      	b.n	801415c <HAL_UART_RxCpltCallback+0x1a8>
      return;
 801415a:	bf00      	nop
  }
}
 801415c:	3710      	adds	r7, #16
 801415e:	46bd      	mov	sp, r7
 8014160:	bd80      	pop	{r7, pc}
 8014162:	bf00      	nop
 8014164:	40021000 	.word	0x40021000
 8014168:	2000e6f8 	.word	0x2000e6f8
 801416c:	2000e6f0 	.word	0x2000e6f0
 8014170:	2000e710 	.word	0x2000e710
 8014174:	2000e6e0 	.word	0x2000e6e0
 8014178:	2000e6dc 	.word	0x2000e6dc
 801417c:	2000e704 	.word	0x2000e704
 8014180:	40020400 	.word	0x40020400
 8014184:	cccccccd 	.word	0xcccccccd
 8014188:	2000e6e4 	.word	0x2000e6e4
 801418c:	20000474 	.word	0x20000474
 8014190:	0801933c 	.word	0x0801933c

08014194 <showscreen>:

void showscreen(void){
 8014194:	b580      	push	{r7, lr}
 8014196:	b082      	sub	sp, #8
 8014198:	af02      	add	r7, sp, #8
    ssd1306_Line(0,0,0,63,White);
 801419a:	2301      	movs	r3, #1
 801419c:	9300      	str	r3, [sp, #0]
 801419e:	233f      	movs	r3, #63	; 0x3f
 80141a0:	2200      	movs	r2, #0
 80141a2:	2100      	movs	r1, #0
 80141a4:	2000      	movs	r0, #0
 80141a6:	f000 fde9 	bl	8014d7c <ssd1306_Line>
    ssd1306_Line(1,0,127,0,White);
 80141aa:	2301      	movs	r3, #1
 80141ac:	9300      	str	r3, [sp, #0]
 80141ae:	2300      	movs	r3, #0
 80141b0:	227f      	movs	r2, #127	; 0x7f
 80141b2:	2100      	movs	r1, #0
 80141b4:	2001      	movs	r0, #1
 80141b6:	f000 fde1 	bl	8014d7c <ssd1306_Line>
    ssd1306_Line(127,1,127,63,White);
 80141ba:	2301      	movs	r3, #1
 80141bc:	9300      	str	r3, [sp, #0]
 80141be:	233f      	movs	r3, #63	; 0x3f
 80141c0:	227f      	movs	r2, #127	; 0x7f
 80141c2:	2101      	movs	r1, #1
 80141c4:	207f      	movs	r0, #127	; 0x7f
 80141c6:	f000 fdd9 	bl	8014d7c <ssd1306_Line>
    ssd1306_Line(1,63,126,63,White);
 80141ca:	2301      	movs	r3, #1
 80141cc:	9300      	str	r3, [sp, #0]
 80141ce:	233f      	movs	r3, #63	; 0x3f
 80141d0:	227e      	movs	r2, #126	; 0x7e
 80141d2:	213f      	movs	r1, #63	; 0x3f
 80141d4:	2001      	movs	r0, #1
 80141d6:	f000 fdd1 	bl	8014d7c <ssd1306_Line>
    ssd1306_SetCursor(1,3);
 80141da:	2103      	movs	r1, #3
 80141dc:	2001      	movs	r0, #1
 80141de:	f000 fdb5 	bl	8014d4c <ssd1306_SetCursor>
    ssd1306_WriteString("      Roplus      ", Font_7x10, White);
 80141e2:	4a0a      	ldr	r2, [pc, #40]	; (801420c <showscreen+0x78>)
 80141e4:	2301      	movs	r3, #1
 80141e6:	ca06      	ldmia	r2, {r1, r2}
 80141e8:	4809      	ldr	r0, [pc, #36]	; (8014210 <showscreen+0x7c>)
 80141ea:	f000 fd89 	bl	8014d00 <ssd1306_WriteString>
    ssd1306_SetCursor(1,20);
 80141ee:	2114      	movs	r1, #20
 80141f0:	2001      	movs	r0, #1
 80141f2:	f000 fdab 	bl	8014d4c <ssd1306_SetCursor>
    ssd1306_WriteString("   Initializing    ", Font_7x10, White);
 80141f6:	4a05      	ldr	r2, [pc, #20]	; (801420c <showscreen+0x78>)
 80141f8:	2301      	movs	r3, #1
 80141fa:	ca06      	ldmia	r2, {r1, r2}
 80141fc:	4805      	ldr	r0, [pc, #20]	; (8014214 <showscreen+0x80>)
 80141fe:	f000 fd7f 	bl	8014d00 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8014202:	f000 fc79 	bl	8014af8 <ssd1306_UpdateScreen>
    //HAL_Delay(200);
}
 8014206:	bf00      	nop
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}
 801420c:	20000478 	.word	0x20000478
 8014210:	08019340 	.word	0x08019340
 8014214:	08019354 	.word	0x08019354

08014218 <clearscreen>:

void clearscreen(void){
 8014218:	b580      	push	{r7, lr}
 801421a:	af00      	add	r7, sp, #0
  ssd1306_Fill( Black );
 801421c:	2000      	movs	r0, #0
 801421e:	f000 fc53 	bl	8014ac8 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8014222:	f000 fc69 	bl	8014af8 <ssd1306_UpdateScreen>
}
 8014226:	bf00      	nop
 8014228:	bd80      	pop	{r7, pc}
	...

0801422c <Update_Home_Status>:

void Update_Home_Status()
{
 801422c:	b580      	push	{r7, lr}
 801422e:	af00      	add	r7, sp, #0
  ssd1306_SetCursor(56,53);
 8014230:	2135      	movs	r1, #53	; 0x35
 8014232:	2038      	movs	r0, #56	; 0x38
 8014234:	f000 fd8a 	bl	8014d4c <ssd1306_SetCursor>
  if(is_home ==FALSE)
 8014238:	4b0a      	ldr	r3, [pc, #40]	; (8014264 <Update_Home_Status+0x38>)
 801423a:	781b      	ldrb	r3, [r3, #0]
 801423c:	f083 0301 	eor.w	r3, r3, #1
 8014240:	b2db      	uxtb	r3, r3
 8014242:	2b00      	cmp	r3, #0
 8014244:	d006      	beq.n	8014254 <Update_Home_Status+0x28>
  {
    ssd1306_WriteString("F",Font_7x10, White);
 8014246:	4a08      	ldr	r2, [pc, #32]	; (8014268 <Update_Home_Status+0x3c>)
 8014248:	2301      	movs	r3, #1
 801424a:	ca06      	ldmia	r2, {r1, r2}
 801424c:	4807      	ldr	r0, [pc, #28]	; (801426c <Update_Home_Status+0x40>)
 801424e:	f000 fd57 	bl	8014d00 <ssd1306_WriteString>
  }
  else
  {
    ssd1306_WriteString("T",Font_7x10, White);
  }
}
 8014252:	e005      	b.n	8014260 <Update_Home_Status+0x34>
    ssd1306_WriteString("T",Font_7x10, White);
 8014254:	4a04      	ldr	r2, [pc, #16]	; (8014268 <Update_Home_Status+0x3c>)
 8014256:	2301      	movs	r3, #1
 8014258:	ca06      	ldmia	r2, {r1, r2}
 801425a:	4805      	ldr	r0, [pc, #20]	; (8014270 <Update_Home_Status+0x44>)
 801425c:	f000 fd50 	bl	8014d00 <ssd1306_WriteString>
}
 8014260:	bf00      	nop
 8014262:	bd80      	pop	{r7, pc}
 8014264:	2000e6d8 	.word	0x2000e6d8
 8014268:	20000478 	.word	0x20000478
 801426c:	08019368 	.word	0x08019368
 8014270:	0801936c 	.word	0x0801936c

08014274 <Update_Motor_Pos>:
     /* To be customized (for example Switch off a LED) */
   }
}
#endif
void Update_Motor_Pos()
{
 8014274:	b580      	push	{r7, lr}
 8014276:	af00      	add	r7, sp, #0
  // ssd1306_SetCursor(43,27);
  #ifdef USE_POWERSTEP
  cur_pos = BSP_MotorControl_GetPosition(0);
  #endif
  #ifdef USE_L6470
  cur_pos = (int32_t)StepperMotorBoardHandle->Command->GetParam(board, gripper_motor, L6470_ABS_POS_ID);
 8014278:	4b07      	ldr	r3, [pc, #28]	; (8014298 <Update_Motor_Pos+0x24>)
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	689b      	ldr	r3, [r3, #8]
 801427e:	685b      	ldr	r3, [r3, #4]
 8014280:	4a06      	ldr	r2, [pc, #24]	; (801429c <Update_Motor_Pos+0x28>)
 8014282:	7810      	ldrb	r0, [r2, #0]
 8014284:	4a06      	ldr	r2, [pc, #24]	; (80142a0 <Update_Motor_Pos+0x2c>)
 8014286:	7811      	ldrb	r1, [r2, #0]
 8014288:	2200      	movs	r2, #0
 801428a:	4798      	blx	r3
 801428c:	4603      	mov	r3, r0
 801428e:	461a      	mov	r2, r3
 8014290:	4b04      	ldr	r3, [pc, #16]	; (80142a4 <Update_Motor_Pos+0x30>)
 8014292:	601a      	str	r2, [r3, #0]
  #endif
  // char position[11];
  // sprintf(position, "%ld", cur_pos);
  // ssd1306_WriteString(position, Font_7x10, White);    
  // ssd1306_UpdateScreen();
}
 8014294:	bf00      	nop
 8014296:	bd80      	pop	{r7, pc}
 8014298:	2000e730 	.word	0x2000e730
 801429c:	2000e700 	.word	0x2000e700
 80142a0:	2000e701 	.word	0x2000e701
 80142a4:	2000e6dc 	.word	0x2000e6dc

080142a8 <Update_Gear_Status>:

void Update_Gear_Status()
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	af00      	add	r7, sp, #0
  ssd1306_SetCursor(112,53);
 80142ac:	2135      	movs	r1, #53	; 0x35
 80142ae:	2070      	movs	r0, #112	; 0x70
 80142b0:	f000 fd4c 	bl	8014d4c <ssd1306_SetCursor>
  ssd1306_WriteString(gear_status,Font_7x10,White);
 80142b4:	4a04      	ldr	r2, [pc, #16]	; (80142c8 <Update_Gear_Status+0x20>)
 80142b6:	2301      	movs	r3, #1
 80142b8:	ca06      	ldmia	r2, {r1, r2}
 80142ba:	4804      	ldr	r0, [pc, #16]	; (80142cc <Update_Gear_Status+0x24>)
 80142bc:	f000 fd20 	bl	8014d00 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80142c0:	f000 fc1a 	bl	8014af8 <ssd1306_UpdateScreen>
}
 80142c4:	bf00      	nop
 80142c6:	bd80      	pop	{r7, pc}
 80142c8:	20000478 	.word	0x20000478
 80142cc:	2000e6e4 	.word	0x2000e6e4

080142d0 <Roplus_Pin_Init>:
  }
}
#endif

void Roplus_Pin_Init()
{ 
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b08a      	sub	sp, #40	; 0x28
 80142d4:	af00      	add	r7, sp, #0
  //Enable GPIO Clock
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80142d6:	2300      	movs	r3, #0
 80142d8:	613b      	str	r3, [r7, #16]
 80142da:	4b6c      	ldr	r3, [pc, #432]	; (801448c <Roplus_Pin_Init+0x1bc>)
 80142dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142de:	4a6b      	ldr	r2, [pc, #428]	; (801448c <Roplus_Pin_Init+0x1bc>)
 80142e0:	f043 0301 	orr.w	r3, r3, #1
 80142e4:	6313      	str	r3, [r2, #48]	; 0x30
 80142e6:	4b69      	ldr	r3, [pc, #420]	; (801448c <Roplus_Pin_Init+0x1bc>)
 80142e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142ea:	f003 0301 	and.w	r3, r3, #1
 80142ee:	613b      	str	r3, [r7, #16]
 80142f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80142f2:	2300      	movs	r3, #0
 80142f4:	60fb      	str	r3, [r7, #12]
 80142f6:	4b65      	ldr	r3, [pc, #404]	; (801448c <Roplus_Pin_Init+0x1bc>)
 80142f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142fa:	4a64      	ldr	r2, [pc, #400]	; (801448c <Roplus_Pin_Init+0x1bc>)
 80142fc:	f043 0302 	orr.w	r3, r3, #2
 8014300:	6313      	str	r3, [r2, #48]	; 0x30
 8014302:	4b62      	ldr	r3, [pc, #392]	; (801448c <Roplus_Pin_Init+0x1bc>)
 8014304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014306:	f003 0302 	and.w	r3, r3, #2
 801430a:	60fb      	str	r3, [r7, #12]
 801430c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801430e:	2300      	movs	r3, #0
 8014310:	60bb      	str	r3, [r7, #8]
 8014312:	4b5e      	ldr	r3, [pc, #376]	; (801448c <Roplus_Pin_Init+0x1bc>)
 8014314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014316:	4a5d      	ldr	r2, [pc, #372]	; (801448c <Roplus_Pin_Init+0x1bc>)
 8014318:	f043 0304 	orr.w	r3, r3, #4
 801431c:	6313      	str	r3, [r2, #48]	; 0x30
 801431e:	4b5b      	ldr	r3, [pc, #364]	; (801448c <Roplus_Pin_Init+0x1bc>)
 8014320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014322:	f003 0304 	and.w	r3, r3, #4
 8014326:	60bb      	str	r3, [r7, #8]
 8014328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801432a:	2300      	movs	r3, #0
 801432c:	607b      	str	r3, [r7, #4]
 801432e:	4b57      	ldr	r3, [pc, #348]	; (801448c <Roplus_Pin_Init+0x1bc>)
 8014330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014332:	4a56      	ldr	r2, [pc, #344]	; (801448c <Roplus_Pin_Init+0x1bc>)
 8014334:	f043 0308 	orr.w	r3, r3, #8
 8014338:	6313      	str	r3, [r2, #48]	; 0x30
 801433a:	4b54      	ldr	r3, [pc, #336]	; (801448c <Roplus_Pin_Init+0x1bc>)
 801433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801433e:	f003 0308 	and.w	r3, r3, #8
 8014342:	607b      	str	r3, [r7, #4]
 8014344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8014346:	2300      	movs	r3, #0
 8014348:	603b      	str	r3, [r7, #0]
 801434a:	4b50      	ldr	r3, [pc, #320]	; (801448c <Roplus_Pin_Init+0x1bc>)
 801434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801434e:	4a4f      	ldr	r2, [pc, #316]	; (801448c <Roplus_Pin_Init+0x1bc>)
 8014350:	f043 0310 	orr.w	r3, r3, #16
 8014354:	6313      	str	r3, [r2, #48]	; 0x30
 8014356:	4b4d      	ldr	r3, [pc, #308]	; (801448c <Roplus_Pin_Init+0x1bc>)
 8014358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801435a:	f003 0310 	and.w	r3, r3, #16
 801435e:	603b      	str	r3, [r7, #0]
 8014360:	683b      	ldr	r3, [r7, #0]
  //Sensor Pin Init
  GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = SENSOR_EXTI_PIN;
 8014362:	2301      	movs	r3, #1
 8014364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014366:	2300      	movs	r3, #0
 8014368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801436a:	2300      	movs	r3, #0
 801436c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 801436e:	2301      	movs	r3, #1
 8014370:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SENSOR_EXTI_PORT, &GPIO_InitStruct);
 8014372:	f107 0314 	add.w	r3, r7, #20
 8014376:	4619      	mov	r1, r3
 8014378:	4845      	ldr	r0, [pc, #276]	; (8014490 <Roplus_Pin_Init+0x1c0>)
 801437a:	f7f1 fd7b 	bl	8005e74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SENSOR_EXTI_PIN_UPPER;
 801437e:	2308      	movs	r3, #8
 8014380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014382:	2300      	movs	r3, #0
 8014384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014386:	2300      	movs	r3, #0
 8014388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 801438a:	2301      	movs	r3, #1
 801438c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SENSOR_EXTI_PORT, &GPIO_InitStruct);
 801438e:	f107 0314 	add.w	r3, r7, #20
 8014392:	4619      	mov	r1, r3
 8014394:	483e      	ldr	r0, [pc, #248]	; (8014490 <Roplus_Pin_Init+0x1c0>)
 8014396:	f7f1 fd6d 	bl	8005e74 <HAL_GPIO_Init>

  //Reset all values
  HAL_GPIO_WritePin(VALVE_PORT,VALVE_BENDING_C_PIN,GPIO_PIN_RESET);
 801439a:	2200      	movs	r2, #0
 801439c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80143a0:	483c      	ldr	r0, [pc, #240]	; (8014494 <Roplus_Pin_Init+0x1c4>)
 80143a2:	f7f1 ff1b 	bl	80061dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VALVE_PORT,VALVE_SUCTION_PIN,GPIO_PIN_RESET);
 80143a6:	2200      	movs	r2, #0
 80143a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80143ac:	4839      	ldr	r0, [pc, #228]	; (8014494 <Roplus_Pin_Init+0x1c4>)
 80143ae:	f7f1 ff15 	bl	80061dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VALVE_PORT,VALVE_JAMMING_PIN,GPIO_PIN_RESET);
 80143b2:	2200      	movs	r2, #0
 80143b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80143b8:	4836      	ldr	r0, [pc, #216]	; (8014494 <Roplus_Pin_Init+0x1c4>)
 80143ba:	f7f1 ff0f 	bl	80061dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VALVE_PORT_BENDING,VALVE_BENDING_O_PIN,GPIO_PIN_RESET);
 80143be:	2200      	movs	r2, #0
 80143c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80143c4:	4834      	ldr	r0, [pc, #208]	; (8014498 <Roplus_Pin_Init+0x1c8>)
 80143c6:	f7f1 ff09 	bl	80061dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_READY_DIGITAL_OUTPUT_PORT,MOTOR_READY_DIGITAL_OUTPUT_PIN,GPIO_PIN_RESET);
 80143ca:	2200      	movs	r2, #0
 80143cc:	2140      	movs	r1, #64	; 0x40
 80143ce:	4833      	ldr	r0, [pc, #204]	; (801449c <Roplus_Pin_Init+0x1cc>)
 80143d0:	f7f1 ff04 	bl	80061dc <HAL_GPIO_WritePin>
  // Valves Pin init,
  GPIO_InitStruct.Pin = VALVE_BENDING_C_PIN|VALVE_SUCTION_PIN|VALVE_JAMMING_PIN;
 80143d4:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 80143d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80143da:	2301      	movs	r3, #1
 80143dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143de:	2300      	movs	r3, #0
 80143e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80143e2:	2300      	movs	r3, #0
 80143e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VALVE_PORT, &GPIO_InitStruct);
 80143e6:	f107 0314 	add.w	r3, r7, #20
 80143ea:	4619      	mov	r1, r3
 80143ec:	4829      	ldr	r0, [pc, #164]	; (8014494 <Roplus_Pin_Init+0x1c4>)
 80143ee:	f7f1 fd41 	bl	8005e74 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = VALVE_BENDING_O_PIN;
 80143f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80143f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80143f8:	2301      	movs	r3, #1
 80143fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143fc:	2300      	movs	r3, #0
 80143fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014400:	2300      	movs	r3, #0
 8014402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VALVE_PORT_BENDING, &GPIO_InitStruct);
 8014404:	f107 0314 	add.w	r3, r7, #20
 8014408:	4619      	mov	r1, r3
 801440a:	4823      	ldr	r0, [pc, #140]	; (8014498 <Roplus_Pin_Init+0x1c8>)
 801440c:	f7f1 fd32 	bl	8005e74 <HAL_GPIO_Init>

  //Motor Ready Pin init
  GPIO_InitStruct.Pin = MOTOR_READY_DIGITAL_OUTPUT_PIN;
 8014410:	2340      	movs	r3, #64	; 0x40
 8014412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014414:	2301      	movs	r3, #1
 8014416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014418:	2300      	movs	r3, #0
 801441a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801441c:	2300      	movs	r3, #0
 801441e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_READY_DIGITAL_OUTPUT_PORT, &GPIO_InitStruct);
 8014420:	f107 0314 	add.w	r3, r7, #20
 8014424:	4619      	mov	r1, r3
 8014426:	481d      	ldr	r0, [pc, #116]	; (801449c <Roplus_Pin_Init+0x1cc>)
 8014428:	f7f1 fd24 	bl	8005e74 <HAL_GPIO_Init>

  //UR input Pin init, no  pull  mode
  GPIO_InitStruct.Pin = UR_IO_ENABLE_PIN|UR_IO_PIN1|UR_IO_PIN2|UR_IO_PIN3|UR_IO_PIN4|UR_IO_SUCTION_PIN;
 801442c:	23dc      	movs	r3, #220	; 0xdc
 801442e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014430:	2300      	movs	r3, #0
 8014432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014434:	2300      	movs	r3, #0
 8014436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8014438:	2301      	movs	r3, #1
 801443a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UR_IO_PORT, &GPIO_InitStruct);
 801443c:	f107 0314 	add.w	r3, r7, #20
 8014440:	4619      	mov	r1, r3
 8014442:	4815      	ldr	r0, [pc, #84]	; (8014498 <Roplus_Pin_Init+0x1c8>)
 8014444:	f7f1 fd16 	bl	8005e74 <HAL_GPIO_Init>

  //LED Pin Init
  GPIO_InitStruct.Pin = LED_DIAG2_PIN|LED_DIAG1_PIN;
 8014448:	f44f 7340 	mov.w	r3, #768	; 0x300
 801444c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801444e:	2301      	movs	r3, #1
 8014450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014452:	2300      	movs	r3, #0
 8014454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014456:	2300      	movs	r3, #0
 8014458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_DIAG_PORT, &GPIO_InitStruct);
 801445a:	f107 0314 	add.w	r3, r7, #20
 801445e:	4619      	mov	r1, r3
 8014460:	480f      	ldr	r0, [pc, #60]	; (80144a0 <Roplus_Pin_Init+0x1d0>)
 8014462:	f7f1 fd07 	bl	8005e74 <HAL_GPIO_Init>

  //LED Pin Init
  GPIO_InitStruct.Pin = LED_RUN_PIN|LED_COMM_PIN;
 8014466:	2303      	movs	r3, #3
 8014468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801446a:	2301      	movs	r3, #1
 801446c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801446e:	2300      	movs	r3, #0
 8014470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014472:	2300      	movs	r3, #0
 8014474:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_STATUS_PORT, &GPIO_InitStruct);
 8014476:	f107 0314 	add.w	r3, r7, #20
 801447a:	4619      	mov	r1, r3
 801447c:	4806      	ldr	r0, [pc, #24]	; (8014498 <Roplus_Pin_Init+0x1c8>)
 801447e:	f7f1 fcf9 	bl	8005e74 <HAL_GPIO_Init>
}
 8014482:	bf00      	nop
 8014484:	3728      	adds	r7, #40	; 0x28
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}
 801448a:	bf00      	nop
 801448c:	40023800 	.word	0x40023800
 8014490:	40020000 	.word	0x40020000
 8014494:	40020c00 	.word	0x40020c00
 8014498:	40021000 	.word	0x40021000
 801449c:	40020400 	.word	0x40020400
 80144a0:	40020800 	.word	0x40020800

080144a4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80144a4:	b480      	push	{r7}
 80144a6:	b083      	sub	sp, #12
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144b2:	4a0b      	ldr	r2, [pc, #44]	; (80144e0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80144b4:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 80144b6:	4b0a      	ldr	r3, [pc, #40]	; (80144e0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	b21a      	sxth	r2, r3
 80144bc:	4b09      	ldr	r3, [pc, #36]	; (80144e4 <HAL_TIM_IC_CaptureCallback+0x40>)
 80144be:	801a      	strh	r2, [r3, #0]
	position = count/4;
 80144c0:	4b08      	ldr	r3, [pc, #32]	; (80144e4 <HAL_TIM_IC_CaptureCallback+0x40>)
 80144c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	da00      	bge.n	80144cc <HAL_TIM_IC_CaptureCallback+0x28>
 80144ca:	3303      	adds	r3, #3
 80144cc:	109b      	asrs	r3, r3, #2
 80144ce:	b21a      	sxth	r2, r3
 80144d0:	4b05      	ldr	r3, [pc, #20]	; (80144e8 <HAL_TIM_IC_CaptureCallback+0x44>)
 80144d2:	801a      	strh	r2, [r3, #0]
}
 80144d4:	bf00      	nop
 80144d6:	370c      	adds	r7, #12
 80144d8:	46bd      	mov	sp, r7
 80144da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144de:	4770      	bx	lr
 80144e0:	2000e6e8 	.word	0x2000e6e8
 80144e4:	2000e6ec 	.word	0x2000e6ec
 80144e8:	2000e6ee 	.word	0x2000e6ee

080144ec <Motor_Find_Home>:
}
#endif

#ifdef USE_L6470
void Motor_Find_Home(uint8_t deviceId,eL6470_DirId_t dir, uint32_t speed)
{
 80144ec:	b590      	push	{r4, r7, lr}
 80144ee:	b083      	sub	sp, #12
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	4603      	mov	r3, r0
 80144f4:	603a      	str	r2, [r7, #0]
 80144f6:	71fb      	strb	r3, [r7, #7]
 80144f8:	460b      	mov	r3, r1
 80144fa:	71bb      	strb	r3, [r7, #6]
   StepperMotorBoardHandle->Command->Run(board, deviceId, dir, speed);
 80144fc:	4b1e      	ldr	r3, [pc, #120]	; (8014578 <Motor_Find_Home+0x8c>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	689b      	ldr	r3, [r3, #8]
 8014502:	689c      	ldr	r4, [r3, #8]
 8014504:	4b1d      	ldr	r3, [pc, #116]	; (801457c <Motor_Find_Home+0x90>)
 8014506:	7818      	ldrb	r0, [r3, #0]
 8014508:	79ba      	ldrb	r2, [r7, #6]
 801450a:	79f9      	ldrb	r1, [r7, #7]
 801450c:	683b      	ldr	r3, [r7, #0]
 801450e:	47a0      	blx	r4
   while(HAL_GPIO_ReadPin(SENSOR_EXTI_PORT,SENSOR_EXTI_PIN)==GPIO_PIN_SET)
 8014510:	e007      	b.n	8014522 <Motor_Find_Home+0x36>
    {
      //Blinking DIAG2 while finfing home
      HAL_GPIO_TogglePin(LED_DIAG_PORT,LED_DIAG2_PIN);
 8014512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014516:	481a      	ldr	r0, [pc, #104]	; (8014580 <Motor_Find_Home+0x94>)
 8014518:	f7f1 fe79 	bl	800620e <HAL_GPIO_TogglePin>
      HAL_Delay(200);
 801451c:	20c8      	movs	r0, #200	; 0xc8
 801451e:	f7ef fe13 	bl	8004148 <HAL_Delay>
   while(HAL_GPIO_ReadPin(SENSOR_EXTI_PORT,SENSOR_EXTI_PIN)==GPIO_PIN_SET)
 8014522:	2101      	movs	r1, #1
 8014524:	4817      	ldr	r0, [pc, #92]	; (8014584 <Motor_Find_Home+0x98>)
 8014526:	f7f1 fe41 	bl	80061ac <HAL_GPIO_ReadPin>
 801452a:	4603      	mov	r3, r0
 801452c:	2b01      	cmp	r3, #1
 801452e:	d0f0      	beq.n	8014512 <Motor_Find_Home+0x26>
    }
    //Stop motor & set current position as home
    StepperMotorBoardHandle->Command->HardStop(board,deviceId);
 8014530:	4b11      	ldr	r3, [pc, #68]	; (8014578 <Motor_Find_Home+0x8c>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	689b      	ldr	r3, [r3, #8]
 8014536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014538:	4a10      	ldr	r2, [pc, #64]	; (801457c <Motor_Find_Home+0x90>)
 801453a:	7812      	ldrb	r2, [r2, #0]
 801453c:	79f9      	ldrb	r1, [r7, #7]
 801453e:	4610      	mov	r0, r2
 8014540:	4798      	blx	r3
    is_home = TRUE;
 8014542:	4b11      	ldr	r3, [pc, #68]	; (8014588 <Motor_Find_Home+0x9c>)
 8014544:	2201      	movs	r2, #1
 8014546:	701a      	strb	r2, [r3, #0]
    StepperMotorBoardHandle->Command->ResetPos(board,deviceId);
 8014548:	4b0b      	ldr	r3, [pc, #44]	; (8014578 <Motor_Find_Home+0x8c>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	689b      	ldr	r3, [r3, #8]
 801454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014550:	4a0a      	ldr	r2, [pc, #40]	; (801457c <Motor_Find_Home+0x90>)
 8014552:	7812      	ldrb	r2, [r2, #0]
 8014554:	79f9      	ldrb	r1, [r7, #7]
 8014556:	4610      	mov	r0, r2
 8014558:	4798      	blx	r3
    Update_Home_Status();
 801455a:	f7ff fe67 	bl	801422c <Update_Home_Status>
    gear_status[0] = 'H';
 801455e:	4b0b      	ldr	r3, [pc, #44]	; (801458c <Motor_Find_Home+0xa0>)
 8014560:	2248      	movs	r2, #72	; 0x48
 8014562:	701a      	strb	r2, [r3, #0]
    gear_status[1] = ' ';
 8014564:	4b09      	ldr	r3, [pc, #36]	; (801458c <Motor_Find_Home+0xa0>)
 8014566:	2220      	movs	r2, #32
 8014568:	705a      	strb	r2, [r3, #1]
    Update_Gear_Status();
 801456a:	f7ff fe9d 	bl	80142a8 <Update_Gear_Status>
}
 801456e:	bf00      	nop
 8014570:	370c      	adds	r7, #12
 8014572:	46bd      	mov	sp, r7
 8014574:	bd90      	pop	{r4, r7, pc}
 8014576:	bf00      	nop
 8014578:	2000e730 	.word	0x2000e730
 801457c:	2000e700 	.word	0x2000e700
 8014580:	40020800 	.word	0x40020800
 8014584:	40020000 	.word	0x40020000
 8014588:	2000e6d8 	.word	0x2000e6d8
 801458c:	2000e6e4 	.word	0x2000e6e4

08014590 <screenmenu>:
  Update_Motor_Pos();
}



void screenmenu(void){
 8014590:	b580      	push	{r7, lr}
 8014592:	af00      	add	r7, sp, #0
  ssd1306_SetCursor(1,17);
 8014594:	2111      	movs	r1, #17
 8014596:	2001      	movs	r0, #1
 8014598:	f000 fbd8 	bl	8014d4c <ssd1306_SetCursor>
  ssd1306_WriteString(" SUCTION    ", Font_7x10, White);
 801459c:	4a22      	ldr	r2, [pc, #136]	; (8014628 <screenmenu+0x98>)
 801459e:	2301      	movs	r3, #1
 80145a0:	ca06      	ldmia	r2, {r1, r2}
 80145a2:	4822      	ldr	r0, [pc, #136]	; (801462c <screenmenu+0x9c>)
 80145a4:	f000 fbac 	bl	8014d00 <ssd1306_WriteString>
  ssd1306_SetCursor(1,29);
 80145a8:	211d      	movs	r1, #29
 80145aa:	2001      	movs	r0, #1
 80145ac:	f000 fbce 	bl	8014d4c <ssd1306_SetCursor>
  ssd1306_WriteString(" JAMMING    ", Font_7x10, White);
 80145b0:	4a1d      	ldr	r2, [pc, #116]	; (8014628 <screenmenu+0x98>)
 80145b2:	2301      	movs	r3, #1
 80145b4:	ca06      	ldmia	r2, {r1, r2}
 80145b6:	481e      	ldr	r0, [pc, #120]	; (8014630 <screenmenu+0xa0>)
 80145b8:	f000 fba2 	bl	8014d00 <ssd1306_WriteString>
  ssd1306_SetCursor(1,41);
 80145bc:	2129      	movs	r1, #41	; 0x29
 80145be:	2001      	movs	r0, #1
 80145c0:	f000 fbc4 	bl	8014d4c <ssd1306_SetCursor>
  ssd1306_WriteString(" BENDING    ", Font_7x10, White);
 80145c4:	4a18      	ldr	r2, [pc, #96]	; (8014628 <screenmenu+0x98>)
 80145c6:	2301      	movs	r3, #1
 80145c8:	ca06      	ldmia	r2, {r1, r2}
 80145ca:	481a      	ldr	r0, [pc, #104]	; (8014634 <screenmenu+0xa4>)
 80145cc:	f000 fb98 	bl	8014d00 <ssd1306_WriteString>
  ssd1306_SetCursor(80,17);
 80145d0:	2111      	movs	r1, #17
 80145d2:	2050      	movs	r0, #80	; 0x50
 80145d4:	f000 fbba 	bl	8014d4c <ssd1306_SetCursor>
  ssd1306_WriteString(" OFF   ", Font_7x10, White);
 80145d8:	4a13      	ldr	r2, [pc, #76]	; (8014628 <screenmenu+0x98>)
 80145da:	2301      	movs	r3, #1
 80145dc:	ca06      	ldmia	r2, {r1, r2}
 80145de:	4816      	ldr	r0, [pc, #88]	; (8014638 <screenmenu+0xa8>)
 80145e0:	f000 fb8e 	bl	8014d00 <ssd1306_WriteString>
  ssd1306_SetCursor(80,41);
 80145e4:	2129      	movs	r1, #41	; 0x29
 80145e6:	2050      	movs	r0, #80	; 0x50
 80145e8:	f000 fbb0 	bl	8014d4c <ssd1306_SetCursor>
  ssd1306_WriteString(" ---    ", Font_7x10, White);
 80145ec:	4a0e      	ldr	r2, [pc, #56]	; (8014628 <screenmenu+0x98>)
 80145ee:	2301      	movs	r3, #1
 80145f0:	ca06      	ldmia	r2, {r1, r2}
 80145f2:	4812      	ldr	r0, [pc, #72]	; (801463c <screenmenu+0xac>)
 80145f4:	f000 fb84 	bl	8014d00 <ssd1306_WriteString>
  ssd1306_SetCursor(80,29);
 80145f8:	211d      	movs	r1, #29
 80145fa:	2050      	movs	r0, #80	; 0x50
 80145fc:	f000 fba6 	bl	8014d4c <ssd1306_SetCursor>
  ssd1306_WriteString(" ---    ", Font_7x10, White);
 8014600:	4a09      	ldr	r2, [pc, #36]	; (8014628 <screenmenu+0x98>)
 8014602:	2301      	movs	r3, #1
 8014604:	ca06      	ldmia	r2, {r1, r2}
 8014606:	480d      	ldr	r0, [pc, #52]	; (801463c <screenmenu+0xac>)
 8014608:	f000 fb7a 	bl	8014d00 <ssd1306_WriteString>
  ssd1306_SetCursor(1,53);
 801460c:	2135      	movs	r1, #53	; 0x35
 801460e:	2001      	movs	r0, #1
 8014610:	f000 fb9c 	bl	8014d4c <ssd1306_SetCursor>
  ssd1306_WriteString(" MOTOR: F  GEAR: A", Font_7x10, White);
 8014614:	4a04      	ldr	r2, [pc, #16]	; (8014628 <screenmenu+0x98>)
 8014616:	2301      	movs	r3, #1
 8014618:	ca06      	ldmia	r2, {r1, r2}
 801461a:	4809      	ldr	r0, [pc, #36]	; (8014640 <screenmenu+0xb0>)
 801461c:	f000 fb70 	bl	8014d00 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8014620:	f000 fa6a 	bl	8014af8 <ssd1306_UpdateScreen>
}
 8014624:	bf00      	nop
 8014626:	bd80      	pop	{r7, pc}
 8014628:	20000478 	.word	0x20000478
 801462c:	08019370 	.word	0x08019370
 8014630:	08019380 	.word	0x08019380
 8014634:	08019390 	.word	0x08019390
 8014638:	080193a0 	.word	0x080193a0
 801463c:	080193a8 	.word	0x080193a8
 8014640:	080193b4 	.word	0x080193b4

08014644 <DetectEthernetCable>:

uint8_t DetectEthernetCable(void) {
 8014644:	b580      	push	{r7, lr}
 8014646:	b082      	sub	sp, #8
 8014648:	af00      	add	r7, sp, #0
  uint32_t phyRegValue = 0;
 801464a:	2300      	movs	r3, #0
 801464c:	607b      	str	r3, [r7, #4]

  if (HAL_ETH_ReadPHYRegister(&heth, 0x01, PHY_BSR, &phyRegValue) == HAL_OK) {
 801464e:	1d3b      	adds	r3, r7, #4
 8014650:	2201      	movs	r2, #1
 8014652:	2101      	movs	r1, #1
 8014654:	4808      	ldr	r0, [pc, #32]	; (8014678 <DetectEthernetCable+0x34>)
 8014656:	f7f0 fe19 	bl	800528c <HAL_ETH_ReadPHYRegister>
 801465a:	4603      	mov	r3, r0
 801465c:	2b00      	cmp	r3, #0
 801465e:	d106      	bne.n	801466e <DetectEthernetCable+0x2a>
      // Link Status
      if (phyRegValue & PHY_LINK_STATUS) {
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	f003 0304 	and.w	r3, r3, #4
 8014666:	2b00      	cmp	r3, #0
 8014668:	d001      	beq.n	801466e <DetectEthernetCable+0x2a>
          return 1;  // connected
 801466a:	2301      	movs	r3, #1
 801466c:	e000      	b.n	8014670 <DetectEthernetCable+0x2c>
      }
  }

  return 0;  // no connection
 801466e:	2300      	movs	r3, #0
}
 8014670:	4618      	mov	r0, r3
 8014672:	3708      	adds	r7, #8
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}
 8014678:	20005448 	.word	0x20005448

0801467c <Error_Handler>:

void Error_Handler()
{
 801467c:	b580      	push	{r7, lr}
 801467e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8014680:	b672      	cpsid	i
}
 8014682:	bf00      	nop
  __disable_irq();
  while (1)
  {
    //BLINKE DIAG2 LED
    HAL_GPIO_WritePin(LED_DIAG_PORT,LED_DIAG2_PIN,GPIO_PIN_SET);
 8014684:	2201      	movs	r2, #1
 8014686:	f44f 7180 	mov.w	r1, #256	; 0x100
 801468a:	4808      	ldr	r0, [pc, #32]	; (80146ac <Error_Handler+0x30>)
 801468c:	f7f1 fda6 	bl	80061dc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8014690:	2064      	movs	r0, #100	; 0x64
 8014692:	f7ef fd59 	bl	8004148 <HAL_Delay>
    HAL_GPIO_WritePin(LED_DIAG_PORT,LED_DIAG2_PIN,GPIO_PIN_RESET);
 8014696:	2200      	movs	r2, #0
 8014698:	f44f 7180 	mov.w	r1, #256	; 0x100
 801469c:	4803      	ldr	r0, [pc, #12]	; (80146ac <Error_Handler+0x30>)
 801469e:	f7f1 fd9d 	bl	80061dc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80146a2:	2064      	movs	r0, #100	; 0x64
 80146a4:	f7ef fd50 	bl	8004148 <HAL_Delay>
    HAL_GPIO_WritePin(LED_DIAG_PORT,LED_DIAG2_PIN,GPIO_PIN_SET);
 80146a8:	e7ec      	b.n	8014684 <Error_Handler+0x8>
 80146aa:	bf00      	nop
 80146ac:	40020800 	.word	0x40020800

080146b0 <Rotate_Motor>:
  }
}

void Rotate_Motor(int32_t d_Pos)
{
 80146b0:	b590      	push	{r4, r7, lr}
 80146b2:	b083      	sub	sp, #12
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
  if(d_Pos>cur_pos)
 80146b8:	4b25      	ldr	r3, [pc, #148]	; (8014750 <Rotate_Motor+0xa0>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	687a      	ldr	r2, [r7, #4]
 80146be:	429a      	cmp	r2, r3
 80146c0:	dd1e      	ble.n	8014700 <Rotate_Motor+0x50>
    {
      StepperMotorBoardHandle->Command->GoToDir(board, gripper_motor, L6470_DIR_FWD_ID, d_Pos);
 80146c2:	4b24      	ldr	r3, [pc, #144]	; (8014754 <Rotate_Motor+0xa4>)
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	689b      	ldr	r3, [r3, #8]
 80146c8:	699c      	ldr	r4, [r3, #24]
 80146ca:	4b23      	ldr	r3, [pc, #140]	; (8014758 <Rotate_Motor+0xa8>)
 80146cc:	7818      	ldrb	r0, [r3, #0]
 80146ce:	4b23      	ldr	r3, [pc, #140]	; (801475c <Rotate_Motor+0xac>)
 80146d0:	7819      	ldrb	r1, [r3, #0]
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2201      	movs	r2, #1
 80146d6:	47a0      	blx	r4
      while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, gripper_motor, BUSY_ID) == 0)
 80146d8:	e003      	b.n	80146e2 <Rotate_Motor+0x32>
      {
          //Just in case the motor reach upper limit
          MX_LWIP_Process();
 80146da:	f7f4 fb33 	bl	8008d44 <MX_LWIP_Process>
          ModbusTCPMain();
 80146de:	f7ee f9e7 	bl	8002ab0 <ModbusTCPMain>
      while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, gripper_motor, BUSY_ID) == 0)
 80146e2:	4b1c      	ldr	r3, [pc, #112]	; (8014754 <Rotate_Motor+0xa4>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	689b      	ldr	r3, [r3, #8]
 80146e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80146ea:	4a1b      	ldr	r2, [pc, #108]	; (8014758 <Rotate_Motor+0xa8>)
 80146ec:	7810      	ldrb	r0, [r2, #0]
 80146ee:	4a1b      	ldr	r2, [pc, #108]	; (801475c <Rotate_Motor+0xac>)
 80146f0:	7811      	ldrb	r1, [r2, #0]
 80146f2:	2201      	movs	r2, #1
 80146f4:	4798      	blx	r3
 80146f6:	4603      	mov	r3, r0
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d0ee      	beq.n	80146da <Rotate_Motor+0x2a>
      }
      //Update cur_pos
      Update_Motor_Pos();
 80146fc:	f7ff fdba 	bl	8014274 <Update_Motor_Pos>
    }
    /*Annother Direction*/
    if(d_Pos<cur_pos)
 8014700:	4b13      	ldr	r3, [pc, #76]	; (8014750 <Rotate_Motor+0xa0>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	687a      	ldr	r2, [r7, #4]
 8014706:	429a      	cmp	r2, r3
 8014708:	da1e      	bge.n	8014748 <Rotate_Motor+0x98>
    {
      StepperMotorBoardHandle->Command->GoToDir(board, gripper_motor, L6470_DIR_REV_ID, d_Pos);
 801470a:	4b12      	ldr	r3, [pc, #72]	; (8014754 <Rotate_Motor+0xa4>)
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	689b      	ldr	r3, [r3, #8]
 8014710:	699c      	ldr	r4, [r3, #24]
 8014712:	4b11      	ldr	r3, [pc, #68]	; (8014758 <Rotate_Motor+0xa8>)
 8014714:	7818      	ldrb	r0, [r3, #0]
 8014716:	4b11      	ldr	r3, [pc, #68]	; (801475c <Rotate_Motor+0xac>)
 8014718:	7819      	ldrb	r1, [r3, #0]
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	2200      	movs	r2, #0
 801471e:	47a0      	blx	r4
      while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, gripper_motor, BUSY_ID) == 0)
 8014720:	e003      	b.n	801472a <Rotate_Motor+0x7a>
      {
        //Just in case the motor reach lower limit
        MX_LWIP_Process();
 8014722:	f7f4 fb0f 	bl	8008d44 <MX_LWIP_Process>
        ModbusTCPMain();
 8014726:	f7ee f9c3 	bl	8002ab0 <ModbusTCPMain>
      while(StepperMotorBoardHandle->Command->CheckStatusRegisterFlag(board, gripper_motor, BUSY_ID) == 0)
 801472a:	4b0a      	ldr	r3, [pc, #40]	; (8014754 <Rotate_Motor+0xa4>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	689b      	ldr	r3, [r3, #8]
 8014730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014732:	4a09      	ldr	r2, [pc, #36]	; (8014758 <Rotate_Motor+0xa8>)
 8014734:	7810      	ldrb	r0, [r2, #0]
 8014736:	4a09      	ldr	r2, [pc, #36]	; (801475c <Rotate_Motor+0xac>)
 8014738:	7811      	ldrb	r1, [r2, #0]
 801473a:	2201      	movs	r2, #1
 801473c:	4798      	blx	r3
 801473e:	4603      	mov	r3, r0
 8014740:	2b00      	cmp	r3, #0
 8014742:	d0ee      	beq.n	8014722 <Rotate_Motor+0x72>
      }
      Update_Motor_Pos();
 8014744:	f7ff fd96 	bl	8014274 <Update_Motor_Pos>
    }
}
 8014748:	bf00      	nop
 801474a:	370c      	adds	r7, #12
 801474c:	46bd      	mov	sp, r7
 801474e:	bd90      	pop	{r4, r7, pc}
 8014750:	2000e6dc 	.word	0x2000e6dc
 8014754:	2000e730 	.word	0x2000e730
 8014758:	2000e700 	.word	0x2000e700
 801475c:	2000e701 	.word	0x2000e701

08014760 <Update_gear_buf>:

void Update_gear_buf()
{
 8014760:	b580      	push	{r7, lr}
 8014762:	af00      	add	r7, sp, #0
  gear_buff[0] = (REG_COILS_BUF[1]==1) || (HAL_GPIO_ReadPin(UR_IO_PORT,UR_IO_PIN1)== GPIO_PIN_RESET);
 8014764:	4b11      	ldr	r3, [pc, #68]	; (80147ac <Update_gear_buf+0x4c>)
 8014766:	785b      	ldrb	r3, [r3, #1]
 8014768:	2b01      	cmp	r3, #1
 801476a:	d006      	beq.n	801477a <Update_gear_buf+0x1a>
 801476c:	2108      	movs	r1, #8
 801476e:	4810      	ldr	r0, [pc, #64]	; (80147b0 <Update_gear_buf+0x50>)
 8014770:	f7f1 fd1c 	bl	80061ac <HAL_GPIO_ReadPin>
 8014774:	4603      	mov	r3, r0
 8014776:	2b00      	cmp	r3, #0
 8014778:	d101      	bne.n	801477e <Update_gear_buf+0x1e>
 801477a:	2301      	movs	r3, #1
 801477c:	e000      	b.n	8014780 <Update_gear_buf+0x20>
 801477e:	2300      	movs	r3, #0
 8014780:	b2da      	uxtb	r2, r3
 8014782:	4b0c      	ldr	r3, [pc, #48]	; (80147b4 <Update_gear_buf+0x54>)
 8014784:	701a      	strb	r2, [r3, #0]
  gear_buff[1] = (REG_COILS_BUF[2]==1) || (HAL_GPIO_ReadPin(UR_IO_PORT,UR_IO_PIN2)== GPIO_PIN_RESET);
 8014786:	4b09      	ldr	r3, [pc, #36]	; (80147ac <Update_gear_buf+0x4c>)
 8014788:	789b      	ldrb	r3, [r3, #2]
 801478a:	2b01      	cmp	r3, #1
 801478c:	d006      	beq.n	801479c <Update_gear_buf+0x3c>
 801478e:	2110      	movs	r1, #16
 8014790:	4807      	ldr	r0, [pc, #28]	; (80147b0 <Update_gear_buf+0x50>)
 8014792:	f7f1 fd0b 	bl	80061ac <HAL_GPIO_ReadPin>
 8014796:	4603      	mov	r3, r0
 8014798:	2b00      	cmp	r3, #0
 801479a:	d101      	bne.n	80147a0 <Update_gear_buf+0x40>
 801479c:	2301      	movs	r3, #1
 801479e:	e000      	b.n	80147a2 <Update_gear_buf+0x42>
 80147a0:	2300      	movs	r3, #0
 80147a2:	b2da      	uxtb	r2, r3
 80147a4:	4b03      	ldr	r3, [pc, #12]	; (80147b4 <Update_gear_buf+0x54>)
 80147a6:	705a      	strb	r2, [r3, #1]
}
 80147a8:	bf00      	nop
 80147aa:	bd80      	pop	{r7, pc}
 80147ac:	2000e710 	.word	0x2000e710
 80147b0:	40021000 	.word	0x40021000
 80147b4:	2000e724 	.word	0x2000e724

080147b8 <suction>:

void suction() {  //suction
 80147b8:	b580      	push	{r7, lr}
 80147ba:	af00      	add	r7, sp, #0
  if (suction_bit) {
 80147bc:	4b17      	ldr	r3, [pc, #92]	; (801481c <suction+0x64>)
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d020      	beq.n	8014806 <suction+0x4e>
    HAL_GPIO_WritePin(VALVE_PORT, VALVE_SUCTION_PIN, GPIO_PIN_SET);
 80147c4:	2201      	movs	r2, #1
 80147c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80147ca:	4815      	ldr	r0, [pc, #84]	; (8014820 <suction+0x68>)
 80147cc:	f7f1 fd06 	bl	80061dc <HAL_GPIO_WritePin>
      HAL_ADC_Start(&hadc1);
 80147d0:	4814      	ldr	r0, [pc, #80]	; (8014824 <suction+0x6c>)
 80147d2:	f7ef fd21 	bl	8004218 <HAL_ADC_Start>
   	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80147d6:	f04f 31ff 	mov.w	r1, #4294967295
 80147da:	4812      	ldr	r0, [pc, #72]	; (8014824 <suction+0x6c>)
 80147dc:	f7ef fdee 	bl	80043bc <HAL_ADC_PollForConversion>
   	  Vacuum_ADCvalues=HAL_ADC_GetValue(&hadc1);//read suction adc value
 80147e0:	4810      	ldr	r0, [pc, #64]	; (8014824 <suction+0x6c>)
 80147e2:	f7ef fe76 	bl	80044d2 <HAL_ADC_GetValue>
 80147e6:	4603      	mov	r3, r0
 80147e8:	4a0f      	ldr	r2, [pc, #60]	; (8014828 <suction+0x70>)
 80147ea:	6013      	str	r3, [r2, #0]
    if(Vacuum_ADCvalues > 1800)
 80147ec:	4b0e      	ldr	r3, [pc, #56]	; (8014828 <suction+0x70>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80147f4:	d903      	bls.n	80147fe <suction+0x46>
       {
    	REG_DISC_BUF[5]=1;
 80147f6:	4b0d      	ldr	r3, [pc, #52]	; (801482c <suction+0x74>)
 80147f8:	2201      	movs	r2, #1
 80147fa:	715a      	strb	r2, [r3, #5]
    }
  } else {
	HAL_GPIO_WritePin(VALVE_PORT, VALVE_SUCTION_PIN, GPIO_PIN_RESET);
	REG_DISC_BUF[5]=0;
  }
}
 80147fc:	e00c      	b.n	8014818 <suction+0x60>
    	REG_DISC_BUF[5]=0;//this is suction engaged bit in modbus buffer, used for ensuring safely suction
 80147fe:	4b0b      	ldr	r3, [pc, #44]	; (801482c <suction+0x74>)
 8014800:	2200      	movs	r2, #0
 8014802:	715a      	strb	r2, [r3, #5]
}
 8014804:	e008      	b.n	8014818 <suction+0x60>
	HAL_GPIO_WritePin(VALVE_PORT, VALVE_SUCTION_PIN, GPIO_PIN_RESET);
 8014806:	2200      	movs	r2, #0
 8014808:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801480c:	4804      	ldr	r0, [pc, #16]	; (8014820 <suction+0x68>)
 801480e:	f7f1 fce5 	bl	80061dc <HAL_GPIO_WritePin>
	REG_DISC_BUF[5]=0;
 8014812:	4b06      	ldr	r3, [pc, #24]	; (801482c <suction+0x74>)
 8014814:	2200      	movs	r2, #0
 8014816:	715a      	strb	r2, [r3, #5]
}
 8014818:	bf00      	nop
 801481a:	bd80      	pop	{r7, pc}
 801481c:	2000e71a 	.word	0x2000e71a
 8014820:	40020c00 	.word	0x40020c00
 8014824:	2000e5f4 	.word	0x2000e5f4
 8014828:	2000e728 	.word	0x2000e728
 801482c:	2000e704 	.word	0x2000e704

08014830 <Update_Suction_Status_Led>:

void Update_Suction_Status_Led()
{
 8014830:	b580      	push	{r7, lr}
 8014832:	af00      	add	r7, sp, #0
  ssd1306_SetCursor(80,17);
 8014834:	2111      	movs	r1, #17
 8014836:	2050      	movs	r0, #80	; 0x50
 8014838:	f000 fa88 	bl	8014d4c <ssd1306_SetCursor>
  if (suction_bit==1){
 801483c:	4b0a      	ldr	r3, [pc, #40]	; (8014868 <Update_Suction_Status_Led+0x38>)
 801483e:	781b      	ldrb	r3, [r3, #0]
 8014840:	2b01      	cmp	r3, #1
 8014842:	d106      	bne.n	8014852 <Update_Suction_Status_Led+0x22>
    ssd1306_WriteString(" ON    ", Font_7x10, White);
 8014844:	4a09      	ldr	r2, [pc, #36]	; (801486c <Update_Suction_Status_Led+0x3c>)
 8014846:	2301      	movs	r3, #1
 8014848:	ca06      	ldmia	r2, {r1, r2}
 801484a:	4809      	ldr	r0, [pc, #36]	; (8014870 <Update_Suction_Status_Led+0x40>)
 801484c:	f000 fa58 	bl	8014d00 <ssd1306_WriteString>
 8014850:	e005      	b.n	801485e <Update_Suction_Status_Led+0x2e>
  }
  else{
  ssd1306_WriteString(" OFF   ", Font_7x10, White);
 8014852:	4a06      	ldr	r2, [pc, #24]	; (801486c <Update_Suction_Status_Led+0x3c>)
 8014854:	2301      	movs	r3, #1
 8014856:	ca06      	ldmia	r2, {r1, r2}
 8014858:	4806      	ldr	r0, [pc, #24]	; (8014874 <Update_Suction_Status_Led+0x44>)
 801485a:	f000 fa51 	bl	8014d00 <ssd1306_WriteString>
  }
  ssd1306_UpdateScreen();
 801485e:	f000 f94b 	bl	8014af8 <ssd1306_UpdateScreen>
}
 8014862:	bf00      	nop
 8014864:	bd80      	pop	{r7, pc}
 8014866:	bf00      	nop
 8014868:	2000e71a 	.word	0x2000e71a
 801486c:	20000478 	.word	0x20000478
 8014870:	080193c8 	.word	0x080193c8
 8014874:	080193a0 	.word	0x080193a0

08014878 <Update_Eth_Status_Led>:

void Update_Eth_Status_Led()
{
 8014878:	b580      	push	{r7, lr}
 801487a:	af00      	add	r7, sp, #0
  ssd1306_SetCursor(1,3);
 801487c:	2103      	movs	r1, #3
 801487e:	2001      	movs	r0, #1
 8014880:	f000 fa64 	bl	8014d4c <ssd1306_SetCursor>
  if (eth_status ==1)
 8014884:	4b0a      	ldr	r3, [pc, #40]	; (80148b0 <Update_Eth_Status_Led+0x38>)
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	2b01      	cmp	r3, #1
 801488a:	d106      	bne.n	801489a <Update_Eth_Status_Led+0x22>
  {
    ssd1306_WriteString(" MODBUS IO MODE     ", Font_7x10, White);
 801488c:	4a09      	ldr	r2, [pc, #36]	; (80148b4 <Update_Eth_Status_Led+0x3c>)
 801488e:	2301      	movs	r3, #1
 8014890:	ca06      	ldmia	r2, {r1, r2}
 8014892:	4809      	ldr	r0, [pc, #36]	; (80148b8 <Update_Eth_Status_Led+0x40>)
 8014894:	f000 fa34 	bl	8014d00 <ssd1306_WriteString>
 8014898:	e005      	b.n	80148a6 <Update_Eth_Status_Led+0x2e>
  }
  else
  {
    ssd1306_WriteString(" IO ONLY MODE     ", Font_7x10, White);
 801489a:	4a06      	ldr	r2, [pc, #24]	; (80148b4 <Update_Eth_Status_Led+0x3c>)
 801489c:	2301      	movs	r3, #1
 801489e:	ca06      	ldmia	r2, {r1, r2}
 80148a0:	4806      	ldr	r0, [pc, #24]	; (80148bc <Update_Eth_Status_Led+0x44>)
 80148a2:	f000 fa2d 	bl	8014d00 <ssd1306_WriteString>
  }
  ssd1306_UpdateScreen();
 80148a6:	f000 f927 	bl	8014af8 <ssd1306_UpdateScreen>
}
 80148aa:	bf00      	nop
 80148ac:	bd80      	pop	{r7, pc}
 80148ae:	bf00      	nop
 80148b0:	2000e71c 	.word	0x2000e71c
 80148b4:	20000478 	.word	0x20000478
 80148b8:	080193d0 	.word	0x080193d0
 80148bc:	080193e8 	.word	0x080193e8

080148c0 <Show_Err_Led>:

void Show_Err_Led()
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	af00      	add	r7, sp, #0
  ssd1306_SetCursor(80,17);
 80148c4:	2111      	movs	r1, #17
 80148c6:	2050      	movs	r0, #80	; 0x50
 80148c8:	f000 fa40 	bl	8014d4c <ssd1306_SetCursor>
  ssd1306_WriteString(" ERR   ", Font_7x10, White);
 80148cc:	4a04      	ldr	r2, [pc, #16]	; (80148e0 <Show_Err_Led+0x20>)
 80148ce:	2301      	movs	r3, #1
 80148d0:	ca06      	ldmia	r2, {r1, r2}
 80148d2:	4804      	ldr	r0, [pc, #16]	; (80148e4 <Show_Err_Led+0x24>)
 80148d4:	f000 fa14 	bl	8014d00 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80148d8:	f000 f90e 	bl	8014af8 <ssd1306_UpdateScreen>
}
 80148dc:	bf00      	nop
 80148de:	bd80      	pop	{r7, pc}
 80148e0:	20000478 	.word	0x20000478
 80148e4:	080193fc 	.word	0x080193fc

080148e8 <Gear_To_Position>:

//gear value is from 1 - 3
int32_t Gear_To_Position(uint8_t gear)
{
 80148e8:	b480      	push	{r7}
 80148ea:	b083      	sub	sp, #12
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	4603      	mov	r3, r0
 80148f0:	71fb      	strb	r3, [r7, #7]
  switch (gear)
 80148f2:	79fb      	ldrb	r3, [r7, #7]
 80148f4:	2b03      	cmp	r3, #3
 80148f6:	d00a      	beq.n	801490e <Gear_To_Position+0x26>
 80148f8:	2b03      	cmp	r3, #3
 80148fa:	dc0a      	bgt.n	8014912 <Gear_To_Position+0x2a>
 80148fc:	2b01      	cmp	r3, #1
 80148fe:	d002      	beq.n	8014906 <Gear_To_Position+0x1e>
 8014900:	2b02      	cmp	r3, #2
 8014902:	d002      	beq.n	801490a <Gear_To_Position+0x22>
 8014904:	e005      	b.n	8014912 <Gear_To_Position+0x2a>
  {
  case 1:
    return GEAR1_POS;
 8014906:	4b07      	ldr	r3, [pc, #28]	; (8014924 <Gear_To_Position+0x3c>)
 8014908:	e005      	b.n	8014916 <Gear_To_Position+0x2e>
    break;
  case 2:
    return GEAR2_POS;
 801490a:	4b07      	ldr	r3, [pc, #28]	; (8014928 <Gear_To_Position+0x40>)
 801490c:	e003      	b.n	8014916 <Gear_To_Position+0x2e>
  case 3: 
    return GEAR3_POS;
 801490e:	4b07      	ldr	r3, [pc, #28]	; (801492c <Gear_To_Position+0x44>)
 8014910:	e001      	b.n	8014916 <Gear_To_Position+0x2e>
  default:
    return -1;
 8014912:	f04f 33ff 	mov.w	r3, #4294967295
    break;
  }

}
 8014916:	4618      	mov	r0, r3
 8014918:	370c      	adds	r7, #12
 801491a:	46bd      	mov	sp, r7
 801491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014920:	4770      	bx	lr
 8014922:	bf00      	nop
 8014924:	00030d40 	.word	0x00030d40
 8014928:	0010c8e0 	.word	0x0010c8e0
 801492c:	002191c0 	.word	0x002191c0

08014930 <Pos_Saturate>:

int32_t Pos_Saturate(int32_t pos)
{
 8014930:	b480      	push	{r7}
 8014932:	b085      	sub	sp, #20
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
  int32_t p = pos;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	60fb      	str	r3, [r7, #12]
  if(p>=POS_UPPER_LIMIT)
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	4a09      	ldr	r2, [pc, #36]	; (8014964 <Pos_Saturate+0x34>)
 8014940:	4293      	cmp	r3, r2
 8014942:	db01      	blt.n	8014948 <Pos_Saturate+0x18>
  {
    p = POS_UPPER_LIMIT;
 8014944:	4b07      	ldr	r3, [pc, #28]	; (8014964 <Pos_Saturate+0x34>)
 8014946:	60fb      	str	r3, [r7, #12]
  }
  if(p<=POS_LOWER_LIMIT)
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	4a07      	ldr	r2, [pc, #28]	; (8014968 <Pos_Saturate+0x38>)
 801494c:	4293      	cmp	r3, r2
 801494e:	dc01      	bgt.n	8014954 <Pos_Saturate+0x24>
  {
    p= POS_LOWER_LIMIT;
 8014950:	4b05      	ldr	r3, [pc, #20]	; (8014968 <Pos_Saturate+0x38>)
 8014952:	60fb      	str	r3, [r7, #12]
  }
  return p;
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	4618      	mov	r0, r3
 8014958:	3714      	adds	r7, #20
 801495a:	46bd      	mov	sp, r7
 801495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014960:	4770      	bx	lr
 8014962:	bf00      	nop
 8014964:	002191c0 	.word	0x002191c0
 8014968:	00030d40 	.word	0x00030d40

0801496c <GetMotorParameterInitData>:
  * @brief  Return the initial motor parameters.
  * @param  index   The index inside the array of parameters to point the right data.
  * @retval MotorParameterData_t*   The pointer to the data structure of parameters.
  */
MotorParameterData_t *GetMotorParameterInitData(void)
{
 801496c:	b480      	push	{r7}
 801496e:	af00      	add	r7, sp, #0
  return (MotorParameterData_t*)(MotorParameterInitData);
 8014970:	4b02      	ldr	r3, [pc, #8]	; (801497c <GetMotorParameterInitData+0x10>)
}
 8014972:	4618      	mov	r0, r3
 8014974:	46bd      	mov	sp, r7
 8014976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497a:	4770      	bx	lr
 801497c:	08019804 	.word	0x08019804

08014980 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8014980:	b480      	push	{r7}
 8014982:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8014984:	bf00      	nop
 8014986:	46bd      	mov	sp, r7
 8014988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498c:	4770      	bx	lr
	...

08014990 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8014990:	b580      	push	{r7, lr}
 8014992:	b086      	sub	sp, #24
 8014994:	af04      	add	r7, sp, #16
 8014996:	4603      	mov	r3, r0
 8014998:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 801499a:	f04f 33ff 	mov.w	r3, #4294967295
 801499e:	9302      	str	r3, [sp, #8]
 80149a0:	2301      	movs	r3, #1
 80149a2:	9301      	str	r3, [sp, #4]
 80149a4:	1dfb      	adds	r3, r7, #7
 80149a6:	9300      	str	r3, [sp, #0]
 80149a8:	2301      	movs	r3, #1
 80149aa:	2200      	movs	r2, #0
 80149ac:	2178      	movs	r1, #120	; 0x78
 80149ae:	4803      	ldr	r0, [pc, #12]	; (80149bc <ssd1306_WriteCommand+0x2c>)
 80149b0:	f7f1 fda4 	bl	80064fc <HAL_I2C_Mem_Write>
}
 80149b4:	bf00      	nop
 80149b6:	3708      	adds	r7, #8
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}
 80149bc:	2000e684 	.word	0x2000e684

080149c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b086      	sub	sp, #24
 80149c4:	af04      	add	r7, sp, #16
 80149c6:	6078      	str	r0, [r7, #4]
 80149c8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	b29b      	uxth	r3, r3
 80149ce:	f04f 32ff 	mov.w	r2, #4294967295
 80149d2:	9202      	str	r2, [sp, #8]
 80149d4:	9301      	str	r3, [sp, #4]
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	9300      	str	r3, [sp, #0]
 80149da:	2301      	movs	r3, #1
 80149dc:	2240      	movs	r2, #64	; 0x40
 80149de:	2178      	movs	r1, #120	; 0x78
 80149e0:	4803      	ldr	r0, [pc, #12]	; (80149f0 <ssd1306_WriteData+0x30>)
 80149e2:	f7f1 fd8b 	bl	80064fc <HAL_I2C_Mem_Write>
}
 80149e6:	bf00      	nop
 80149e8:	3708      	adds	r7, #8
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bd80      	pop	{r7, pc}
 80149ee:	bf00      	nop
 80149f0:	2000e684 	.word	0x2000e684

080149f4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80149f4:	b580      	push	{r7, lr}
 80149f6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80149f8:	f7ff ffc2 	bl	8014980 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80149fc:	2064      	movs	r0, #100	; 0x64
 80149fe:	f7ef fba3 	bl	8004148 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8014a02:	2000      	movs	r0, #0
 8014a04:	f000 fa3a 	bl	8014e7c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8014a08:	2020      	movs	r0, #32
 8014a0a:	f7ff ffc1 	bl	8014990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8014a0e:	2000      	movs	r0, #0
 8014a10:	f7ff ffbe 	bl	8014990 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8014a14:	20b0      	movs	r0, #176	; 0xb0
 8014a16:	f7ff ffbb 	bl	8014990 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8014a1a:	20c8      	movs	r0, #200	; 0xc8
 8014a1c:	f7ff ffb8 	bl	8014990 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8014a20:	2000      	movs	r0, #0
 8014a22:	f7ff ffb5 	bl	8014990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8014a26:	2010      	movs	r0, #16
 8014a28:	f7ff ffb2 	bl	8014990 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8014a2c:	2040      	movs	r0, #64	; 0x40
 8014a2e:	f7ff ffaf 	bl	8014990 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8014a32:	20ff      	movs	r0, #255	; 0xff
 8014a34:	f000 fa0e 	bl	8014e54 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8014a38:	20a1      	movs	r0, #161	; 0xa1
 8014a3a:	f7ff ffa9 	bl	8014990 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8014a3e:	20a6      	movs	r0, #166	; 0xa6
 8014a40:	f7ff ffa6 	bl	8014990 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8014a44:	20a8      	movs	r0, #168	; 0xa8
 8014a46:	f7ff ffa3 	bl	8014990 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8014a4a:	203f      	movs	r0, #63	; 0x3f
 8014a4c:	f7ff ffa0 	bl	8014990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8014a50:	20a4      	movs	r0, #164	; 0xa4
 8014a52:	f7ff ff9d 	bl	8014990 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8014a56:	20d3      	movs	r0, #211	; 0xd3
 8014a58:	f7ff ff9a 	bl	8014990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8014a5c:	2000      	movs	r0, #0
 8014a5e:	f7ff ff97 	bl	8014990 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8014a62:	20d5      	movs	r0, #213	; 0xd5
 8014a64:	f7ff ff94 	bl	8014990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8014a68:	20f0      	movs	r0, #240	; 0xf0
 8014a6a:	f7ff ff91 	bl	8014990 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8014a6e:	20d9      	movs	r0, #217	; 0xd9
 8014a70:	f7ff ff8e 	bl	8014990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8014a74:	2022      	movs	r0, #34	; 0x22
 8014a76:	f7ff ff8b 	bl	8014990 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8014a7a:	20da      	movs	r0, #218	; 0xda
 8014a7c:	f7ff ff88 	bl	8014990 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8014a80:	2012      	movs	r0, #18
 8014a82:	f7ff ff85 	bl	8014990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8014a86:	20db      	movs	r0, #219	; 0xdb
 8014a88:	f7ff ff82 	bl	8014990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8014a8c:	2020      	movs	r0, #32
 8014a8e:	f7ff ff7f 	bl	8014990 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8014a92:	208d      	movs	r0, #141	; 0x8d
 8014a94:	f7ff ff7c 	bl	8014990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8014a98:	2014      	movs	r0, #20
 8014a9a:	f7ff ff79 	bl	8014990 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8014a9e:	2001      	movs	r0, #1
 8014aa0:	f000 f9ec 	bl	8014e7c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8014aa4:	2000      	movs	r0, #0
 8014aa6:	f000 f80f 	bl	8014ac8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8014aaa:	f000 f825 	bl	8014af8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8014aae:	4b05      	ldr	r3, [pc, #20]	; (8014ac4 <ssd1306_Init+0xd0>)
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8014ab4:	4b03      	ldr	r3, [pc, #12]	; (8014ac4 <ssd1306_Init+0xd0>)
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8014aba:	4b02      	ldr	r3, [pc, #8]	; (8014ac4 <ssd1306_Init+0xd0>)
 8014abc:	2201      	movs	r2, #1
 8014abe:	711a      	strb	r2, [r3, #4]
}
 8014ac0:	bf00      	nop
 8014ac2:	bd80      	pop	{r7, pc}
 8014ac4:	2000eb3c 	.word	0x2000eb3c

08014ac8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	4603      	mov	r3, r0
 8014ad0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8014ad2:	79fb      	ldrb	r3, [r7, #7]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d101      	bne.n	8014adc <ssd1306_Fill+0x14>
 8014ad8:	2300      	movs	r3, #0
 8014ada:	e000      	b.n	8014ade <ssd1306_Fill+0x16>
 8014adc:	23ff      	movs	r3, #255	; 0xff
 8014ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014ae2:	4619      	mov	r1, r3
 8014ae4:	4803      	ldr	r0, [pc, #12]	; (8014af4 <ssd1306_Fill+0x2c>)
 8014ae6:	f000 ff45 	bl	8015974 <memset>
}
 8014aea:	bf00      	nop
 8014aec:	3708      	adds	r7, #8
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}
 8014af2:	bf00      	nop
 8014af4:	2000e73c 	.word	0x2000e73c

08014af8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b082      	sub	sp, #8
 8014afc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8014afe:	2300      	movs	r3, #0
 8014b00:	71fb      	strb	r3, [r7, #7]
 8014b02:	e016      	b.n	8014b32 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8014b04:	79fb      	ldrb	r3, [r7, #7]
 8014b06:	3b50      	subs	r3, #80	; 0x50
 8014b08:	b2db      	uxtb	r3, r3
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7ff ff40 	bl	8014990 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8014b10:	2000      	movs	r0, #0
 8014b12:	f7ff ff3d 	bl	8014990 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8014b16:	2010      	movs	r0, #16
 8014b18:	f7ff ff3a 	bl	8014990 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8014b1c:	79fb      	ldrb	r3, [r7, #7]
 8014b1e:	01db      	lsls	r3, r3, #7
 8014b20:	4a08      	ldr	r2, [pc, #32]	; (8014b44 <ssd1306_UpdateScreen+0x4c>)
 8014b22:	4413      	add	r3, r2
 8014b24:	2180      	movs	r1, #128	; 0x80
 8014b26:	4618      	mov	r0, r3
 8014b28:	f7ff ff4a 	bl	80149c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8014b2c:	79fb      	ldrb	r3, [r7, #7]
 8014b2e:	3301      	adds	r3, #1
 8014b30:	71fb      	strb	r3, [r7, #7]
 8014b32:	79fb      	ldrb	r3, [r7, #7]
 8014b34:	2b07      	cmp	r3, #7
 8014b36:	d9e5      	bls.n	8014b04 <ssd1306_UpdateScreen+0xc>
    }
}
 8014b38:	bf00      	nop
 8014b3a:	bf00      	nop
 8014b3c:	3708      	adds	r7, #8
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}
 8014b42:	bf00      	nop
 8014b44:	2000e73c 	.word	0x2000e73c

08014b48 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8014b48:	b480      	push	{r7}
 8014b4a:	b083      	sub	sp, #12
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	4603      	mov	r3, r0
 8014b50:	71fb      	strb	r3, [r7, #7]
 8014b52:	460b      	mov	r3, r1
 8014b54:	71bb      	strb	r3, [r7, #6]
 8014b56:	4613      	mov	r3, r2
 8014b58:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8014b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	db3d      	blt.n	8014bde <ssd1306_DrawPixel+0x96>
 8014b62:	79bb      	ldrb	r3, [r7, #6]
 8014b64:	2b3f      	cmp	r3, #63	; 0x3f
 8014b66:	d83a      	bhi.n	8014bde <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8014b68:	797b      	ldrb	r3, [r7, #5]
 8014b6a:	2b01      	cmp	r3, #1
 8014b6c:	d11a      	bne.n	8014ba4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8014b6e:	79fa      	ldrb	r2, [r7, #7]
 8014b70:	79bb      	ldrb	r3, [r7, #6]
 8014b72:	08db      	lsrs	r3, r3, #3
 8014b74:	b2d8      	uxtb	r0, r3
 8014b76:	4603      	mov	r3, r0
 8014b78:	01db      	lsls	r3, r3, #7
 8014b7a:	4413      	add	r3, r2
 8014b7c:	4a1b      	ldr	r2, [pc, #108]	; (8014bec <ssd1306_DrawPixel+0xa4>)
 8014b7e:	5cd3      	ldrb	r3, [r2, r3]
 8014b80:	b25a      	sxtb	r2, r3
 8014b82:	79bb      	ldrb	r3, [r7, #6]
 8014b84:	f003 0307 	and.w	r3, r3, #7
 8014b88:	2101      	movs	r1, #1
 8014b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8014b8e:	b25b      	sxtb	r3, r3
 8014b90:	4313      	orrs	r3, r2
 8014b92:	b259      	sxtb	r1, r3
 8014b94:	79fa      	ldrb	r2, [r7, #7]
 8014b96:	4603      	mov	r3, r0
 8014b98:	01db      	lsls	r3, r3, #7
 8014b9a:	4413      	add	r3, r2
 8014b9c:	b2c9      	uxtb	r1, r1
 8014b9e:	4a13      	ldr	r2, [pc, #76]	; (8014bec <ssd1306_DrawPixel+0xa4>)
 8014ba0:	54d1      	strb	r1, [r2, r3]
 8014ba2:	e01d      	b.n	8014be0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8014ba4:	79fa      	ldrb	r2, [r7, #7]
 8014ba6:	79bb      	ldrb	r3, [r7, #6]
 8014ba8:	08db      	lsrs	r3, r3, #3
 8014baa:	b2d8      	uxtb	r0, r3
 8014bac:	4603      	mov	r3, r0
 8014bae:	01db      	lsls	r3, r3, #7
 8014bb0:	4413      	add	r3, r2
 8014bb2:	4a0e      	ldr	r2, [pc, #56]	; (8014bec <ssd1306_DrawPixel+0xa4>)
 8014bb4:	5cd3      	ldrb	r3, [r2, r3]
 8014bb6:	b25a      	sxtb	r2, r3
 8014bb8:	79bb      	ldrb	r3, [r7, #6]
 8014bba:	f003 0307 	and.w	r3, r3, #7
 8014bbe:	2101      	movs	r1, #1
 8014bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8014bc4:	b25b      	sxtb	r3, r3
 8014bc6:	43db      	mvns	r3, r3
 8014bc8:	b25b      	sxtb	r3, r3
 8014bca:	4013      	ands	r3, r2
 8014bcc:	b259      	sxtb	r1, r3
 8014bce:	79fa      	ldrb	r2, [r7, #7]
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	01db      	lsls	r3, r3, #7
 8014bd4:	4413      	add	r3, r2
 8014bd6:	b2c9      	uxtb	r1, r1
 8014bd8:	4a04      	ldr	r2, [pc, #16]	; (8014bec <ssd1306_DrawPixel+0xa4>)
 8014bda:	54d1      	strb	r1, [r2, r3]
 8014bdc:	e000      	b.n	8014be0 <ssd1306_DrawPixel+0x98>
        return;
 8014bde:	bf00      	nop
    }
}
 8014be0:	370c      	adds	r7, #12
 8014be2:	46bd      	mov	sp, r7
 8014be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be8:	4770      	bx	lr
 8014bea:	bf00      	nop
 8014bec:	2000e73c 	.word	0x2000e73c

08014bf0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8014bf0:	b590      	push	{r4, r7, lr}
 8014bf2:	b089      	sub	sp, #36	; 0x24
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	4604      	mov	r4, r0
 8014bf8:	1d38      	adds	r0, r7, #4
 8014bfa:	e880 0006 	stmia.w	r0, {r1, r2}
 8014bfe:	461a      	mov	r2, r3
 8014c00:	4623      	mov	r3, r4
 8014c02:	73fb      	strb	r3, [r7, #15]
 8014c04:	4613      	mov	r3, r2
 8014c06:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8014c08:	7bfb      	ldrb	r3, [r7, #15]
 8014c0a:	2b1f      	cmp	r3, #31
 8014c0c:	d902      	bls.n	8014c14 <ssd1306_WriteChar+0x24>
 8014c0e:	7bfb      	ldrb	r3, [r7, #15]
 8014c10:	2b7e      	cmp	r3, #126	; 0x7e
 8014c12:	d901      	bls.n	8014c18 <ssd1306_WriteChar+0x28>
        return 0;
 8014c14:	2300      	movs	r3, #0
 8014c16:	e06d      	b.n	8014cf4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8014c18:	4b38      	ldr	r3, [pc, #224]	; (8014cfc <ssd1306_WriteChar+0x10c>)
 8014c1a:	881b      	ldrh	r3, [r3, #0]
 8014c1c:	461a      	mov	r2, r3
 8014c1e:	793b      	ldrb	r3, [r7, #4]
 8014c20:	4413      	add	r3, r2
 8014c22:	2b80      	cmp	r3, #128	; 0x80
 8014c24:	dc06      	bgt.n	8014c34 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8014c26:	4b35      	ldr	r3, [pc, #212]	; (8014cfc <ssd1306_WriteChar+0x10c>)
 8014c28:	885b      	ldrh	r3, [r3, #2]
 8014c2a:	461a      	mov	r2, r3
 8014c2c:	797b      	ldrb	r3, [r7, #5]
 8014c2e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8014c30:	2b40      	cmp	r3, #64	; 0x40
 8014c32:	dd01      	ble.n	8014c38 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8014c34:	2300      	movs	r3, #0
 8014c36:	e05d      	b.n	8014cf4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8014c38:	2300      	movs	r3, #0
 8014c3a:	61fb      	str	r3, [r7, #28]
 8014c3c:	e04c      	b.n	8014cd8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8014c3e:	68ba      	ldr	r2, [r7, #8]
 8014c40:	7bfb      	ldrb	r3, [r7, #15]
 8014c42:	3b20      	subs	r3, #32
 8014c44:	7979      	ldrb	r1, [r7, #5]
 8014c46:	fb01 f303 	mul.w	r3, r1, r3
 8014c4a:	4619      	mov	r1, r3
 8014c4c:	69fb      	ldr	r3, [r7, #28]
 8014c4e:	440b      	add	r3, r1
 8014c50:	005b      	lsls	r3, r3, #1
 8014c52:	4413      	add	r3, r2
 8014c54:	881b      	ldrh	r3, [r3, #0]
 8014c56:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8014c58:	2300      	movs	r3, #0
 8014c5a:	61bb      	str	r3, [r7, #24]
 8014c5c:	e034      	b.n	8014cc8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8014c5e:	697a      	ldr	r2, [r7, #20]
 8014c60:	69bb      	ldr	r3, [r7, #24]
 8014c62:	fa02 f303 	lsl.w	r3, r2, r3
 8014c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d012      	beq.n	8014c94 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8014c6e:	4b23      	ldr	r3, [pc, #140]	; (8014cfc <ssd1306_WriteChar+0x10c>)
 8014c70:	881b      	ldrh	r3, [r3, #0]
 8014c72:	b2da      	uxtb	r2, r3
 8014c74:	69bb      	ldr	r3, [r7, #24]
 8014c76:	b2db      	uxtb	r3, r3
 8014c78:	4413      	add	r3, r2
 8014c7a:	b2d8      	uxtb	r0, r3
 8014c7c:	4b1f      	ldr	r3, [pc, #124]	; (8014cfc <ssd1306_WriteChar+0x10c>)
 8014c7e:	885b      	ldrh	r3, [r3, #2]
 8014c80:	b2da      	uxtb	r2, r3
 8014c82:	69fb      	ldr	r3, [r7, #28]
 8014c84:	b2db      	uxtb	r3, r3
 8014c86:	4413      	add	r3, r2
 8014c88:	b2db      	uxtb	r3, r3
 8014c8a:	7bba      	ldrb	r2, [r7, #14]
 8014c8c:	4619      	mov	r1, r3
 8014c8e:	f7ff ff5b 	bl	8014b48 <ssd1306_DrawPixel>
 8014c92:	e016      	b.n	8014cc2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8014c94:	4b19      	ldr	r3, [pc, #100]	; (8014cfc <ssd1306_WriteChar+0x10c>)
 8014c96:	881b      	ldrh	r3, [r3, #0]
 8014c98:	b2da      	uxtb	r2, r3
 8014c9a:	69bb      	ldr	r3, [r7, #24]
 8014c9c:	b2db      	uxtb	r3, r3
 8014c9e:	4413      	add	r3, r2
 8014ca0:	b2d8      	uxtb	r0, r3
 8014ca2:	4b16      	ldr	r3, [pc, #88]	; (8014cfc <ssd1306_WriteChar+0x10c>)
 8014ca4:	885b      	ldrh	r3, [r3, #2]
 8014ca6:	b2da      	uxtb	r2, r3
 8014ca8:	69fb      	ldr	r3, [r7, #28]
 8014caa:	b2db      	uxtb	r3, r3
 8014cac:	4413      	add	r3, r2
 8014cae:	b2d9      	uxtb	r1, r3
 8014cb0:	7bbb      	ldrb	r3, [r7, #14]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	bf0c      	ite	eq
 8014cb6:	2301      	moveq	r3, #1
 8014cb8:	2300      	movne	r3, #0
 8014cba:	b2db      	uxtb	r3, r3
 8014cbc:	461a      	mov	r2, r3
 8014cbe:	f7ff ff43 	bl	8014b48 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8014cc2:	69bb      	ldr	r3, [r7, #24]
 8014cc4:	3301      	adds	r3, #1
 8014cc6:	61bb      	str	r3, [r7, #24]
 8014cc8:	793b      	ldrb	r3, [r7, #4]
 8014cca:	461a      	mov	r2, r3
 8014ccc:	69bb      	ldr	r3, [r7, #24]
 8014cce:	4293      	cmp	r3, r2
 8014cd0:	d3c5      	bcc.n	8014c5e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8014cd2:	69fb      	ldr	r3, [r7, #28]
 8014cd4:	3301      	adds	r3, #1
 8014cd6:	61fb      	str	r3, [r7, #28]
 8014cd8:	797b      	ldrb	r3, [r7, #5]
 8014cda:	461a      	mov	r2, r3
 8014cdc:	69fb      	ldr	r3, [r7, #28]
 8014cde:	4293      	cmp	r3, r2
 8014ce0:	d3ad      	bcc.n	8014c3e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8014ce2:	4b06      	ldr	r3, [pc, #24]	; (8014cfc <ssd1306_WriteChar+0x10c>)
 8014ce4:	881a      	ldrh	r2, [r3, #0]
 8014ce6:	793b      	ldrb	r3, [r7, #4]
 8014ce8:	b29b      	uxth	r3, r3
 8014cea:	4413      	add	r3, r2
 8014cec:	b29a      	uxth	r2, r3
 8014cee:	4b03      	ldr	r3, [pc, #12]	; (8014cfc <ssd1306_WriteChar+0x10c>)
 8014cf0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8014cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3724      	adds	r7, #36	; 0x24
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd90      	pop	{r4, r7, pc}
 8014cfc:	2000eb3c 	.word	0x2000eb3c

08014d00 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b084      	sub	sp, #16
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	60f8      	str	r0, [r7, #12]
 8014d08:	1d38      	adds	r0, r7, #4
 8014d0a:	e880 0006 	stmia.w	r0, {r1, r2}
 8014d0e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8014d10:	e012      	b.n	8014d38 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	7818      	ldrb	r0, [r3, #0]
 8014d16:	78fb      	ldrb	r3, [r7, #3]
 8014d18:	1d3a      	adds	r2, r7, #4
 8014d1a:	ca06      	ldmia	r2, {r1, r2}
 8014d1c:	f7ff ff68 	bl	8014bf0 <ssd1306_WriteChar>
 8014d20:	4603      	mov	r3, r0
 8014d22:	461a      	mov	r2, r3
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	781b      	ldrb	r3, [r3, #0]
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	d002      	beq.n	8014d32 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	781b      	ldrb	r3, [r3, #0]
 8014d30:	e008      	b.n	8014d44 <ssd1306_WriteString+0x44>
        }
        str++;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	3301      	adds	r3, #1
 8014d36:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	781b      	ldrb	r3, [r3, #0]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d1e8      	bne.n	8014d12 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	781b      	ldrb	r3, [r3, #0]
}
 8014d44:	4618      	mov	r0, r3
 8014d46:	3710      	adds	r7, #16
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}

08014d4c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8014d4c:	b480      	push	{r7}
 8014d4e:	b083      	sub	sp, #12
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	4603      	mov	r3, r0
 8014d54:	460a      	mov	r2, r1
 8014d56:	71fb      	strb	r3, [r7, #7]
 8014d58:	4613      	mov	r3, r2
 8014d5a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8014d5c:	79fb      	ldrb	r3, [r7, #7]
 8014d5e:	b29a      	uxth	r2, r3
 8014d60:	4b05      	ldr	r3, [pc, #20]	; (8014d78 <ssd1306_SetCursor+0x2c>)
 8014d62:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8014d64:	79bb      	ldrb	r3, [r7, #6]
 8014d66:	b29a      	uxth	r2, r3
 8014d68:	4b03      	ldr	r3, [pc, #12]	; (8014d78 <ssd1306_SetCursor+0x2c>)
 8014d6a:	805a      	strh	r2, [r3, #2]
}
 8014d6c:	bf00      	nop
 8014d6e:	370c      	adds	r7, #12
 8014d70:	46bd      	mov	sp, r7
 8014d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d76:	4770      	bx	lr
 8014d78:	2000eb3c 	.word	0x2000eb3c

08014d7c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8014d7c:	b590      	push	{r4, r7, lr}
 8014d7e:	b089      	sub	sp, #36	; 0x24
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	4604      	mov	r4, r0
 8014d84:	4608      	mov	r0, r1
 8014d86:	4611      	mov	r1, r2
 8014d88:	461a      	mov	r2, r3
 8014d8a:	4623      	mov	r3, r4
 8014d8c:	71fb      	strb	r3, [r7, #7]
 8014d8e:	4603      	mov	r3, r0
 8014d90:	71bb      	strb	r3, [r7, #6]
 8014d92:	460b      	mov	r3, r1
 8014d94:	717b      	strb	r3, [r7, #5]
 8014d96:	4613      	mov	r3, r2
 8014d98:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8014d9a:	797a      	ldrb	r2, [r7, #5]
 8014d9c:	79fb      	ldrb	r3, [r7, #7]
 8014d9e:	1ad3      	subs	r3, r2, r3
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	bfb8      	it	lt
 8014da4:	425b      	neglt	r3, r3
 8014da6:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8014da8:	793a      	ldrb	r2, [r7, #4]
 8014daa:	79bb      	ldrb	r3, [r7, #6]
 8014dac:	1ad3      	subs	r3, r2, r3
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	bfb8      	it	lt
 8014db2:	425b      	neglt	r3, r3
 8014db4:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8014db6:	79fa      	ldrb	r2, [r7, #7]
 8014db8:	797b      	ldrb	r3, [r7, #5]
 8014dba:	429a      	cmp	r2, r3
 8014dbc:	d201      	bcs.n	8014dc2 <ssd1306_Line+0x46>
 8014dbe:	2301      	movs	r3, #1
 8014dc0:	e001      	b.n	8014dc6 <ssd1306_Line+0x4a>
 8014dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8014dc6:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8014dc8:	79ba      	ldrb	r2, [r7, #6]
 8014dca:	793b      	ldrb	r3, [r7, #4]
 8014dcc:	429a      	cmp	r2, r3
 8014dce:	d201      	bcs.n	8014dd4 <ssd1306_Line+0x58>
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	e001      	b.n	8014dd8 <ssd1306_Line+0x5c>
 8014dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8014dd8:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8014dda:	69ba      	ldr	r2, [r7, #24]
 8014ddc:	697b      	ldr	r3, [r7, #20]
 8014dde:	1ad3      	subs	r3, r2, r3
 8014de0:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8014de2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8014de6:	7939      	ldrb	r1, [r7, #4]
 8014de8:	797b      	ldrb	r3, [r7, #5]
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7ff feac 	bl	8014b48 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8014df0:	e024      	b.n	8014e3c <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8014df2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8014df6:	79b9      	ldrb	r1, [r7, #6]
 8014df8:	79fb      	ldrb	r3, [r7, #7]
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f7ff fea4 	bl	8014b48 <ssd1306_DrawPixel>
        error2 = error * 2;
 8014e00:	69fb      	ldr	r3, [r7, #28]
 8014e02:	005b      	lsls	r3, r3, #1
 8014e04:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8014e06:	697b      	ldr	r3, [r7, #20]
 8014e08:	425b      	negs	r3, r3
 8014e0a:	68ba      	ldr	r2, [r7, #8]
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	dd08      	ble.n	8014e22 <ssd1306_Line+0xa6>
            error -= deltaY;
 8014e10:	69fa      	ldr	r2, [r7, #28]
 8014e12:	697b      	ldr	r3, [r7, #20]
 8014e14:	1ad3      	subs	r3, r2, r3
 8014e16:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8014e18:	693b      	ldr	r3, [r7, #16]
 8014e1a:	b2da      	uxtb	r2, r3
 8014e1c:	79fb      	ldrb	r3, [r7, #7]
 8014e1e:	4413      	add	r3, r2
 8014e20:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8014e22:	68ba      	ldr	r2, [r7, #8]
 8014e24:	69bb      	ldr	r3, [r7, #24]
 8014e26:	429a      	cmp	r2, r3
 8014e28:	da08      	bge.n	8014e3c <ssd1306_Line+0xc0>
            error += deltaX;
 8014e2a:	69fa      	ldr	r2, [r7, #28]
 8014e2c:	69bb      	ldr	r3, [r7, #24]
 8014e2e:	4413      	add	r3, r2
 8014e30:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	b2da      	uxtb	r2, r3
 8014e36:	79bb      	ldrb	r3, [r7, #6]
 8014e38:	4413      	add	r3, r2
 8014e3a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8014e3c:	79fa      	ldrb	r2, [r7, #7]
 8014e3e:	797b      	ldrb	r3, [r7, #5]
 8014e40:	429a      	cmp	r2, r3
 8014e42:	d1d6      	bne.n	8014df2 <ssd1306_Line+0x76>
 8014e44:	79ba      	ldrb	r2, [r7, #6]
 8014e46:	793b      	ldrb	r3, [r7, #4]
 8014e48:	429a      	cmp	r2, r3
 8014e4a:	d1d2      	bne.n	8014df2 <ssd1306_Line+0x76>
        }
    }
    return;
 8014e4c:	bf00      	nop
}
 8014e4e:	3724      	adds	r7, #36	; 0x24
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd90      	pop	{r4, r7, pc}

08014e54 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b084      	sub	sp, #16
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8014e5e:	2381      	movs	r3, #129	; 0x81
 8014e60:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8014e62:	7bfb      	ldrb	r3, [r7, #15]
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7ff fd93 	bl	8014990 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8014e6a:	79fb      	ldrb	r3, [r7, #7]
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f7ff fd8f 	bl	8014990 <ssd1306_WriteCommand>
}
 8014e72:	bf00      	nop
 8014e74:	3710      	adds	r7, #16
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}
	...

08014e7c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b084      	sub	sp, #16
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	4603      	mov	r3, r0
 8014e84:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8014e86:	79fb      	ldrb	r3, [r7, #7]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d005      	beq.n	8014e98 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8014e8c:	23af      	movs	r3, #175	; 0xaf
 8014e8e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8014e90:	4b08      	ldr	r3, [pc, #32]	; (8014eb4 <ssd1306_SetDisplayOn+0x38>)
 8014e92:	2201      	movs	r2, #1
 8014e94:	715a      	strb	r2, [r3, #5]
 8014e96:	e004      	b.n	8014ea2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8014e98:	23ae      	movs	r3, #174	; 0xae
 8014e9a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8014e9c:	4b05      	ldr	r3, [pc, #20]	; (8014eb4 <ssd1306_SetDisplayOn+0x38>)
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8014ea2:	7bfb      	ldrb	r3, [r7, #15]
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f7ff fd73 	bl	8014990 <ssd1306_WriteCommand>
}
 8014eaa:	bf00      	nop
 8014eac:	3710      	adds	r7, #16
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd80      	pop	{r7, pc}
 8014eb2:	bf00      	nop
 8014eb4:	2000eb3c 	.word	0x2000eb3c

08014eb8 <HAL_SPI_MspInit>:
}
#endif

#ifdef USE_L6470
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b08c      	sub	sp, #48	; 0x30
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	4a3a      	ldr	r2, [pc, #232]	; (8014fb0 <HAL_SPI_MspInit+0xf8>)
 8014ec6:	4293      	cmp	r3, r2
 8014ec8:	d13c      	bne.n	8014f44 <HAL_SPI_MspInit+0x8c>
  {
    /* GPIO clocks enable */
    __GPIOA_CLK_ENABLE();
 8014eca:	2300      	movs	r3, #0
 8014ecc:	61bb      	str	r3, [r7, #24]
 8014ece:	4b39      	ldr	r3, [pc, #228]	; (8014fb4 <HAL_SPI_MspInit+0xfc>)
 8014ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ed2:	4a38      	ldr	r2, [pc, #224]	; (8014fb4 <HAL_SPI_MspInit+0xfc>)
 8014ed4:	f043 0301 	orr.w	r3, r3, #1
 8014ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8014eda:	4b36      	ldr	r3, [pc, #216]	; (8014fb4 <HAL_SPI_MspInit+0xfc>)
 8014edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ede:	f003 0301 	and.w	r3, r3, #1
 8014ee2:	61bb      	str	r3, [r7, #24]
 8014ee4:	69bb      	ldr	r3, [r7, #24]
#ifdef USE_PB3_AS_SCK
    __GPIOB_CLK_ENABLE();
#endif
    
    /* Peripheral clock enable */
    __SPI1_CLK_ENABLE();
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	617b      	str	r3, [r7, #20]
 8014eea:	4b32      	ldr	r3, [pc, #200]	; (8014fb4 <HAL_SPI_MspInit+0xfc>)
 8014eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014eee:	4a31      	ldr	r2, [pc, #196]	; (8014fb4 <HAL_SPI_MspInit+0xfc>)
 8014ef0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8014ef6:	4b2f      	ldr	r3, [pc, #188]	; (8014fb4 <HAL_SPI_MspInit+0xfc>)
 8014ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014efe:	617b      	str	r3, [r7, #20]
 8014f00:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PA5/PB3 ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8014f02:	2330      	movs	r3, #48	; 0x30
 8014f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f06:	2302      	movs	r3, #2
 8014f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8014f0e:	2303      	movs	r3, #3
 8014f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8014f12:	2305      	movs	r3, #5
 8014f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014f16:	f107 031c 	add.w	r3, r7, #28
 8014f1a:	4619      	mov	r1, r3
 8014f1c:	4826      	ldr	r0, [pc, #152]	; (8014fb8 <HAL_SPI_MspInit+0x100>)
 8014f1e:	f7f0 ffa9 	bl	8005e74 <HAL_GPIO_Init>

#ifdef USE_PB3_AS_SCK
    GPIO_InitStruct.Pin = GPIO_PIN_3;
#elif defined (USE_PA5_AS_SCK)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8014f22:	2320      	movs	r3, #32
 8014f24:	61fb      	str	r3, [r7, #28]
#endif
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f26:	2302      	movs	r3, #2
 8014f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8014f2e:	2303      	movs	r3, #3
 8014f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8014f32:	2305      	movs	r3, #5
 8014f34:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef USE_PB3_AS_SCK
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#elif defined (USE_PA5_AS_SCK)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014f36:	f107 031c 	add.w	r3, r7, #28
 8014f3a:	4619      	mov	r1, r3
 8014f3c:	481f      	ldr	r0, [pc, #124]	; (8014fbc <HAL_SPI_MspInit+0x104>)
 8014f3e:	f7f0 ff99 	bl	8005e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  }
}
 8014f42:	e031      	b.n	8014fa8 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	4a1d      	ldr	r2, [pc, #116]	; (8014fc0 <HAL_SPI_MspInit+0x108>)
 8014f4a:	4293      	cmp	r3, r2
 8014f4c:	d12c      	bne.n	8014fa8 <HAL_SPI_MspInit+0xf0>
    __GPIOB_CLK_ENABLE();
 8014f4e:	2300      	movs	r3, #0
 8014f50:	613b      	str	r3, [r7, #16]
 8014f52:	4b18      	ldr	r3, [pc, #96]	; (8014fb4 <HAL_SPI_MspInit+0xfc>)
 8014f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f56:	4a17      	ldr	r2, [pc, #92]	; (8014fb4 <HAL_SPI_MspInit+0xfc>)
 8014f58:	f043 0302 	orr.w	r3, r3, #2
 8014f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8014f5e:	4b15      	ldr	r3, [pc, #84]	; (8014fb4 <HAL_SPI_MspInit+0xfc>)
 8014f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f62:	f003 0302 	and.w	r3, r3, #2
 8014f66:	613b      	str	r3, [r7, #16]
 8014f68:	693b      	ldr	r3, [r7, #16]
    __SPI2_CLK_ENABLE();
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	60fb      	str	r3, [r7, #12]
 8014f6e:	4b11      	ldr	r3, [pc, #68]	; (8014fb4 <HAL_SPI_MspInit+0xfc>)
 8014f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f72:	4a10      	ldr	r2, [pc, #64]	; (8014fb4 <HAL_SPI_MspInit+0xfc>)
 8014f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014f78:	6413      	str	r3, [r2, #64]	; 0x40
 8014f7a:	4b0e      	ldr	r3, [pc, #56]	; (8014fb4 <HAL_SPI_MspInit+0xfc>)
 8014f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014f82:	60fb      	str	r3, [r7, #12]
 8014f84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8014f86:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8014f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f8c:	2302      	movs	r3, #2
 8014f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f90:	2300      	movs	r3, #0
 8014f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8014f94:	2303      	movs	r3, #3
 8014f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8014f98:	2305      	movs	r3, #5
 8014f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014f9c:	f107 031c 	add.w	r3, r7, #28
 8014fa0:	4619      	mov	r1, r3
 8014fa2:	4805      	ldr	r0, [pc, #20]	; (8014fb8 <HAL_SPI_MspInit+0x100>)
 8014fa4:	f7f0 ff66 	bl	8005e74 <HAL_GPIO_Init>
}
 8014fa8:	bf00      	nop
 8014faa:	3730      	adds	r7, #48	; 0x30
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}
 8014fb0:	40013000 	.word	0x40013000
 8014fb4:	40023800 	.word	0x40023800
 8014fb8:	40020400 	.word	0x40020400
 8014fbc:	40020000 	.word	0x40020000
 8014fc0:	40003800 	.word	0x40003800

08014fc4 <HAL_GPIO_EXTI_Callback>:
  * @brief External Line Callback 
  * @param[in] GPIO_Pin pin number
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	4603      	mov	r3, r0
 8014fcc:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BSP_MOTOR_CONTROL_BOARD_BUSY_PIN)
 8014fce:	88fb      	ldrh	r3, [r7, #6]
 8014fd0:	2b20      	cmp	r3, #32
 8014fd2:	d101      	bne.n	8014fd8 <HAL_GPIO_EXTI_Callback+0x14>
  {
    BSP_MotorControl_BusyInterruptHandler();
 8014fd4:	f7ed fd3e 	bl	8002a54 <BSP_MotorControl_BusyInterruptHandler>
  }

  if (GPIO_Pin == BSP_MOTOR_CONTROL_BOARD_FLAG_PIN)
 8014fd8:	88fb      	ldrh	r3, [r7, #6]
 8014fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014fde:	d101      	bne.n	8014fe4 <HAL_GPIO_EXTI_Callback+0x20>
  {
    BSP_MotorControl_FlagInterruptHandler();
 8014fe0:	f7ed fd1e 	bl	8002a20 <BSP_MotorControl_FlagInterruptHandler>
  }
 }
 8014fe4:	bf00      	nop
 8014fe6:	3708      	adds	r7, #8
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}

08014fec <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8014fec:	b480      	push	{r7}
 8014fee:	af00      	add	r7, sp, #0
}
 8014ff0:	bf00      	nop
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff8:	4770      	bx	lr

08014ffa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8014ffa:	b480      	push	{r7}
 8014ffc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8014ffe:	e7fe      	b.n	8014ffe <HardFault_Handler+0x4>

08015000 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8015000:	b480      	push	{r7}
 8015002:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8015004:	e7fe      	b.n	8015004 <MemManage_Handler+0x4>

08015006 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8015006:	b480      	push	{r7}
 8015008:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 801500a:	e7fe      	b.n	801500a <BusFault_Handler+0x4>

0801500c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 801500c:	b480      	push	{r7}
 801500e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8015010:	e7fe      	b.n	8015010 <UsageFault_Handler+0x4>

08015012 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8015012:	b480      	push	{r7}
 8015014:	af00      	add	r7, sp, #0
}
 8015016:	bf00      	nop
 8015018:	46bd      	mov	sp, r7
 801501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501e:	4770      	bx	lr

08015020 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8015020:	b480      	push	{r7}
 8015022:	af00      	add	r7, sp, #0
}
 8015024:	bf00      	nop
 8015026:	46bd      	mov	sp, r7
 8015028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502c:	4770      	bx	lr

0801502e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 801502e:	b480      	push	{r7}
 8015030:	af00      	add	r7, sp, #0
}
 8015032:	bf00      	nop
 8015034:	46bd      	mov	sp, r7
 8015036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503a:	4770      	bx	lr

0801503c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8015040:	f7ef f862 	bl	8004108 <HAL_IncTick>
}
 8015044:	bf00      	nop
 8015046:	bd80      	pop	{r7, pc}

08015048 <EXTI9_5_IRQHandler>:
  * @brief  This function handles interrupt for External lines 5 to 9
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler(void)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	af00      	add	r7, sp, #0
  //HAL_GPIO_TogglePin(LED_PORT,LED4_PIN);
  HAL_GPIO_EXTI_IRQHandler(BSP_MOTOR_CONTROL_BOARD_BUSY_PIN);
 801504c:	2020      	movs	r0, #32
 801504e:	f7f1 f8f9 	bl	8006244 <HAL_GPIO_EXTI_IRQHandler>
}
 8015052:	bf00      	nop
 8015054:	bd80      	pop	{r7, pc}
	...

08015058 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8015058:	b480      	push	{r7}
 801505a:	af00      	add	r7, sp, #0
  if(is_home == FALSE)
 801505c:	4b05      	ldr	r3, [pc, #20]	; (8015074 <EXTI0_IRQHandler+0x1c>)
 801505e:	781b      	ldrb	r3, [r3, #0]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d102      	bne.n	801506a <EXTI0_IRQHandler+0x12>
  {
    is_home = TRUE;
 8015064:	4b03      	ldr	r3, [pc, #12]	; (8015074 <EXTI0_IRQHandler+0x1c>)
 8015066:	2201      	movs	r2, #1
 8015068:	701a      	strb	r2, [r3, #0]
  }
 // HAL_GPIO_TogglePin(LED_PORT,LED2_PIN);
}
 801506a:	bf00      	nop
 801506c:	46bd      	mov	sp, r7
 801506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015072:	4770      	bx	lr
 8015074:	2000e6d8 	.word	0x2000e6d8

08015078 <EXTI15_10_IRQHandler>:
  * @brief  This function handles interrupt for External lines 10 to 15
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8015078:	b580      	push	{r7, lr}
 801507a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BSP_MOTOR_CONTROL_BOARD_FLAG_PIN);
 801507c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015080:	f7f1 f8e0 	bl	8006244 <HAL_GPIO_EXTI_IRQHandler>
}
 8015084:	bf00      	nop
 8015086:	bd80      	pop	{r7, pc}

08015088 <TIM3_IRQHandler>:
  * @brief  This function handles TIM3 interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimStepClock);
 801508c:	4802      	ldr	r0, [pc, #8]	; (8015098 <TIM3_IRQHandler+0x10>)
 801508e:	f7f2 fd59 	bl	8007b44 <HAL_TIM_IRQHandler>
}
 8015092:	bf00      	nop
 8015094:	bd80      	pop	{r7, pc}
 8015096:	bf00      	nop
 8015098:	20000580 	.word	0x20000580

0801509c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	af00      	add	r7, sp, #0
  // HAL_GPIO_TogglePin(LED_PORT,LED2_PIN);

  // HAL_Delay(1000);
  // }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80150a0:	4802      	ldr	r0, [pc, #8]	; (80150ac <TIM2_IRQHandler+0x10>)
 80150a2:	f7f2 fd4f 	bl	8007b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80150a6:	bf00      	nop
 80150a8:	bd80      	pop	{r7, pc}
 80150aa:	bf00      	nop
 80150ac:	2000eb48 	.word	0x2000eb48

080150b0 <USART1_IRQHandler>:

/*The interrupt handler for UART*/
void USART1_IRQHandler(void)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(& huart1);
 80150b4:	4802      	ldr	r0, [pc, #8]	; (80150c0 <USART1_IRQHandler+0x10>)
 80150b6:	f7f2 ff4b 	bl	8007f50 <HAL_UART_IRQHandler>
}
 80150ba:	bf00      	nop
 80150bc:	bd80      	pop	{r7, pc}
 80150be:	bf00      	nop
 80150c0:	2000eb90 	.word	0x2000eb90

080150c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80150c4:	b480      	push	{r7}
 80150c6:	af00      	add	r7, sp, #0
  return 1;
 80150c8:	2301      	movs	r3, #1
}
 80150ca:	4618      	mov	r0, r3
 80150cc:	46bd      	mov	sp, r7
 80150ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d2:	4770      	bx	lr

080150d4 <_kill>:

int _kill(int pid, int sig)
{
 80150d4:	b480      	push	{r7}
 80150d6:	b083      	sub	sp, #12
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
 80150dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80150de:	4b05      	ldr	r3, [pc, #20]	; (80150f4 <_kill+0x20>)
 80150e0:	2216      	movs	r2, #22
 80150e2:	601a      	str	r2, [r3, #0]
  return -1;
 80150e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80150e8:	4618      	mov	r0, r3
 80150ea:	370c      	adds	r7, #12
 80150ec:	46bd      	mov	sp, r7
 80150ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f2:	4770      	bx	lr
 80150f4:	2000ed10 	.word	0x2000ed10

080150f8 <_exit>:

void _exit (int status)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b082      	sub	sp, #8
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8015100:	f04f 31ff 	mov.w	r1, #4294967295
 8015104:	6878      	ldr	r0, [r7, #4]
 8015106:	f7ff ffe5 	bl	80150d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 801510a:	e7fe      	b.n	801510a <_exit+0x12>

0801510c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b086      	sub	sp, #24
 8015110:	af00      	add	r7, sp, #0
 8015112:	60f8      	str	r0, [r7, #12]
 8015114:	60b9      	str	r1, [r7, #8]
 8015116:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015118:	2300      	movs	r3, #0
 801511a:	617b      	str	r3, [r7, #20]
 801511c:	e00a      	b.n	8015134 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 801511e:	f3af 8000 	nop.w
 8015122:	4601      	mov	r1, r0
 8015124:	68bb      	ldr	r3, [r7, #8]
 8015126:	1c5a      	adds	r2, r3, #1
 8015128:	60ba      	str	r2, [r7, #8]
 801512a:	b2ca      	uxtb	r2, r1
 801512c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801512e:	697b      	ldr	r3, [r7, #20]
 8015130:	3301      	adds	r3, #1
 8015132:	617b      	str	r3, [r7, #20]
 8015134:	697a      	ldr	r2, [r7, #20]
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	429a      	cmp	r2, r3
 801513a:	dbf0      	blt.n	801511e <_read+0x12>
  }

  return len;
 801513c:	687b      	ldr	r3, [r7, #4]
}
 801513e:	4618      	mov	r0, r3
 8015140:	3718      	adds	r7, #24
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}

08015146 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8015146:	b580      	push	{r7, lr}
 8015148:	b086      	sub	sp, #24
 801514a:	af00      	add	r7, sp, #0
 801514c:	60f8      	str	r0, [r7, #12]
 801514e:	60b9      	str	r1, [r7, #8]
 8015150:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015152:	2300      	movs	r3, #0
 8015154:	617b      	str	r3, [r7, #20]
 8015156:	e009      	b.n	801516c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	1c5a      	adds	r2, r3, #1
 801515c:	60ba      	str	r2, [r7, #8]
 801515e:	781b      	ldrb	r3, [r3, #0]
 8015160:	4618      	mov	r0, r3
 8015162:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015166:	697b      	ldr	r3, [r7, #20]
 8015168:	3301      	adds	r3, #1
 801516a:	617b      	str	r3, [r7, #20]
 801516c:	697a      	ldr	r2, [r7, #20]
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	429a      	cmp	r2, r3
 8015172:	dbf1      	blt.n	8015158 <_write+0x12>
  }
  return len;
 8015174:	687b      	ldr	r3, [r7, #4]
}
 8015176:	4618      	mov	r0, r3
 8015178:	3718      	adds	r7, #24
 801517a:	46bd      	mov	sp, r7
 801517c:	bd80      	pop	{r7, pc}

0801517e <_close>:

int _close(int file)
{
 801517e:	b480      	push	{r7}
 8015180:	b083      	sub	sp, #12
 8015182:	af00      	add	r7, sp, #0
 8015184:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8015186:	f04f 33ff 	mov.w	r3, #4294967295
}
 801518a:	4618      	mov	r0, r3
 801518c:	370c      	adds	r7, #12
 801518e:	46bd      	mov	sp, r7
 8015190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015194:	4770      	bx	lr

08015196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8015196:	b480      	push	{r7}
 8015198:	b083      	sub	sp, #12
 801519a:	af00      	add	r7, sp, #0
 801519c:	6078      	str	r0, [r7, #4]
 801519e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80151a0:	683b      	ldr	r3, [r7, #0]
 80151a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80151a6:	605a      	str	r2, [r3, #4]
  return 0;
 80151a8:	2300      	movs	r3, #0
}
 80151aa:	4618      	mov	r0, r3
 80151ac:	370c      	adds	r7, #12
 80151ae:	46bd      	mov	sp, r7
 80151b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b4:	4770      	bx	lr

080151b6 <_isatty>:

int _isatty(int file)
{
 80151b6:	b480      	push	{r7}
 80151b8:	b083      	sub	sp, #12
 80151ba:	af00      	add	r7, sp, #0
 80151bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80151be:	2301      	movs	r3, #1
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	370c      	adds	r7, #12
 80151c4:	46bd      	mov	sp, r7
 80151c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ca:	4770      	bx	lr

080151cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80151cc:	b480      	push	{r7}
 80151ce:	b085      	sub	sp, #20
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	60f8      	str	r0, [r7, #12]
 80151d4:	60b9      	str	r1, [r7, #8]
 80151d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80151d8:	2300      	movs	r3, #0
}
 80151da:	4618      	mov	r0, r3
 80151dc:	3714      	adds	r7, #20
 80151de:	46bd      	mov	sp, r7
 80151e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e4:	4770      	bx	lr
	...

080151e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80151e8:	b480      	push	{r7}
 80151ea:	b087      	sub	sp, #28
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80151f0:	4a14      	ldr	r2, [pc, #80]	; (8015244 <_sbrk+0x5c>)
 80151f2:	4b15      	ldr	r3, [pc, #84]	; (8015248 <_sbrk+0x60>)
 80151f4:	1ad3      	subs	r3, r2, r3
 80151f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80151f8:	697b      	ldr	r3, [r7, #20]
 80151fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80151fc:	4b13      	ldr	r3, [pc, #76]	; (801524c <_sbrk+0x64>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d102      	bne.n	801520a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8015204:	4b11      	ldr	r3, [pc, #68]	; (801524c <_sbrk+0x64>)
 8015206:	4a12      	ldr	r2, [pc, #72]	; (8015250 <_sbrk+0x68>)
 8015208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801520a:	4b10      	ldr	r3, [pc, #64]	; (801524c <_sbrk+0x64>)
 801520c:	681a      	ldr	r2, [r3, #0]
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	4413      	add	r3, r2
 8015212:	693a      	ldr	r2, [r7, #16]
 8015214:	429a      	cmp	r2, r3
 8015216:	d205      	bcs.n	8015224 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8015218:	4b0e      	ldr	r3, [pc, #56]	; (8015254 <_sbrk+0x6c>)
 801521a:	220c      	movs	r2, #12
 801521c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801521e:	f04f 33ff 	mov.w	r3, #4294967295
 8015222:	e009      	b.n	8015238 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8015224:	4b09      	ldr	r3, [pc, #36]	; (801524c <_sbrk+0x64>)
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801522a:	4b08      	ldr	r3, [pc, #32]	; (801524c <_sbrk+0x64>)
 801522c:	681a      	ldr	r2, [r3, #0]
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	4413      	add	r3, r2
 8015232:	4a06      	ldr	r2, [pc, #24]	; (801524c <_sbrk+0x64>)
 8015234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8015236:	68fb      	ldr	r3, [r7, #12]
}
 8015238:	4618      	mov	r0, r3
 801523a:	371c      	adds	r7, #28
 801523c:	46bd      	mov	sp, r7
 801523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015242:	4770      	bx	lr
 8015244:	20020000 	.word	0x20020000
 8015248:	00000400 	.word	0x00000400
 801524c:	2000eb44 	.word	0x2000eb44
 8015250:	2000ed20 	.word	0x2000ed20
 8015254:	2000ed10 	.word	0x2000ed10

08015258 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8015258:	b480      	push	{r7}
 801525a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801525c:	4b16      	ldr	r3, [pc, #88]	; (80152b8 <SystemInit+0x60>)
 801525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015262:	4a15      	ldr	r2, [pc, #84]	; (80152b8 <SystemInit+0x60>)
 8015264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801526c:	4b13      	ldr	r3, [pc, #76]	; (80152bc <SystemInit+0x64>)
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	4a12      	ldr	r2, [pc, #72]	; (80152bc <SystemInit+0x64>)
 8015272:	f043 0301 	orr.w	r3, r3, #1
 8015276:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8015278:	4b10      	ldr	r3, [pc, #64]	; (80152bc <SystemInit+0x64>)
 801527a:	2200      	movs	r2, #0
 801527c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801527e:	4b0f      	ldr	r3, [pc, #60]	; (80152bc <SystemInit+0x64>)
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	4a0e      	ldr	r2, [pc, #56]	; (80152bc <SystemInit+0x64>)
 8015284:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8015288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801528c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801528e:	4b0b      	ldr	r3, [pc, #44]	; (80152bc <SystemInit+0x64>)
 8015290:	4a0b      	ldr	r2, [pc, #44]	; (80152c0 <SystemInit+0x68>)
 8015292:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8015294:	4b09      	ldr	r3, [pc, #36]	; (80152bc <SystemInit+0x64>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	4a08      	ldr	r2, [pc, #32]	; (80152bc <SystemInit+0x64>)
 801529a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801529e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80152a0:	4b06      	ldr	r3, [pc, #24]	; (80152bc <SystemInit+0x64>)
 80152a2:	2200      	movs	r2, #0
 80152a4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80152a6:	4b04      	ldr	r3, [pc, #16]	; (80152b8 <SystemInit+0x60>)
 80152a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80152ac:	609a      	str	r2, [r3, #8]
#endif
}
 80152ae:	bf00      	nop
 80152b0:	46bd      	mov	sp, r7
 80152b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b6:	4770      	bx	lr
 80152b8:	e000ed00 	.word	0xe000ed00
 80152bc:	40023800 	.word	0x40023800
 80152c0:	24003010 	.word	0x24003010

080152c4 <MX_USART1_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_Init()
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80152c8:	4b11      	ldr	r3, [pc, #68]	; (8015310 <MX_USART1_Init+0x4c>)
 80152ca:	4a12      	ldr	r2, [pc, #72]	; (8015314 <MX_USART1_Init+0x50>)
 80152cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80152ce:	4b10      	ldr	r3, [pc, #64]	; (8015310 <MX_USART1_Init+0x4c>)
 80152d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80152d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = USART_WORDLENGTH_8B;
 80152d6:	4b0e      	ldr	r3, [pc, #56]	; (8015310 <MX_USART1_Init+0x4c>)
 80152d8:	2200      	movs	r2, #0
 80152da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = USART_STOPBITS_1;
 80152dc:	4b0c      	ldr	r3, [pc, #48]	; (8015310 <MX_USART1_Init+0x4c>)
 80152de:	2200      	movs	r2, #0
 80152e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = USART_PARITY_NONE;
 80152e2:	4b0b      	ldr	r3, [pc, #44]	; (8015310 <MX_USART1_Init+0x4c>)
 80152e4:	2200      	movs	r2, #0
 80152e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = USART_MODE_TX_RX;
 80152e8:	4b09      	ldr	r3, [pc, #36]	; (8015310 <MX_USART1_Init+0x4c>)
 80152ea:	220c      	movs	r2, #12
 80152ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80152ee:	4b08      	ldr	r3, [pc, #32]	; (8015310 <MX_USART1_Init+0x4c>)
 80152f0:	2200      	movs	r2, #0
 80152f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80152f4:	4b06      	ldr	r3, [pc, #24]	; (8015310 <MX_USART1_Init+0x4c>)
 80152f6:	2200      	movs	r2, #0
 80152f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80152fa:	4805      	ldr	r0, [pc, #20]	; (8015310 <MX_USART1_Init+0x4c>)
 80152fc:	f7f2 fd66 	bl	8007dcc <HAL_UART_Init>
 8015300:	4603      	mov	r3, r0
 8015302:	2b00      	cmp	r3, #0
 8015304:	d001      	beq.n	801530a <MX_USART1_Init+0x46>
  {
    Error_Handler();
 8015306:	f7ff f9b9 	bl	801467c <Error_Handler>
  }

}
 801530a:	bf00      	nop
 801530c:	bd80      	pop	{r7, pc}
 801530e:	bf00      	nop
 8015310:	2000eb90 	.word	0x2000eb90
 8015314:	40011000 	.word	0x40011000

08015318 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b08a      	sub	sp, #40	; 0x28
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015320:	f107 0314 	add.w	r3, r7, #20
 8015324:	2200      	movs	r2, #0
 8015326:	601a      	str	r2, [r3, #0]
 8015328:	605a      	str	r2, [r3, #4]
 801532a:	609a      	str	r2, [r3, #8]
 801532c:	60da      	str	r2, [r3, #12]
 801532e:	611a      	str	r2, [r3, #16]
    if(huart->Instance==USART1)
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	4a2d      	ldr	r2, [pc, #180]	; (80153ec <HAL_UART_MspInit+0xd4>)
 8015336:	4293      	cmp	r3, r2
 8015338:	d153      	bne.n	80153e2 <HAL_UART_MspInit+0xca>
     {
/* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801533a:	2300      	movs	r3, #0
 801533c:	613b      	str	r3, [r7, #16]
 801533e:	4b2c      	ldr	r3, [pc, #176]	; (80153f0 <HAL_UART_MspInit+0xd8>)
 8015340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015342:	4a2b      	ldr	r2, [pc, #172]	; (80153f0 <HAL_UART_MspInit+0xd8>)
 8015344:	f043 0310 	orr.w	r3, r3, #16
 8015348:	6453      	str	r3, [r2, #68]	; 0x44
 801534a:	4b29      	ldr	r3, [pc, #164]	; (80153f0 <HAL_UART_MspInit+0xd8>)
 801534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801534e:	f003 0310 	and.w	r3, r3, #16
 8015352:	613b      	str	r3, [r7, #16]
 8015354:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015356:	2300      	movs	r3, #0
 8015358:	60fb      	str	r3, [r7, #12]
 801535a:	4b25      	ldr	r3, [pc, #148]	; (80153f0 <HAL_UART_MspInit+0xd8>)
 801535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801535e:	4a24      	ldr	r2, [pc, #144]	; (80153f0 <HAL_UART_MspInit+0xd8>)
 8015360:	f043 0301 	orr.w	r3, r3, #1
 8015364:	6313      	str	r3, [r2, #48]	; 0x30
 8015366:	4b22      	ldr	r3, [pc, #136]	; (80153f0 <HAL_UART_MspInit+0xd8>)
 8015368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801536a:	f003 0301 	and.w	r3, r3, #1
 801536e:	60fb      	str	r3, [r7, #12]
 8015370:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8015372:	2300      	movs	r3, #0
 8015374:	60bb      	str	r3, [r7, #8]
 8015376:	4b1e      	ldr	r3, [pc, #120]	; (80153f0 <HAL_UART_MspInit+0xd8>)
 8015378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801537a:	4a1d      	ldr	r2, [pc, #116]	; (80153f0 <HAL_UART_MspInit+0xd8>)
 801537c:	f043 0308 	orr.w	r3, r3, #8
 8015380:	6313      	str	r3, [r2, #48]	; 0x30
 8015382:	4b1b      	ldr	r3, [pc, #108]	; (80153f0 <HAL_UART_MspInit+0xd8>)
 8015384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015386:	f003 0308 	and.w	r3, r3, #8
 801538a:	60bb      	str	r3, [r7, #8]
 801538c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
        PC12     ------> UART5_TX
        PD2     ------> UART5_RX
        */
    //PA9:TX PA10:RX
    GPIO_InitStruct.Pin = UART1_TX_PIN;
 801538e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015394:	2302      	movs	r3, #2
 8015396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015398:	2300      	movs	r3, #0
 801539a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801539c:	2303      	movs	r3, #3
 801539e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80153a0:	2307      	movs	r3, #7
 80153a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(UART1_TX_PORT, &GPIO_InitStruct);
 80153a4:	f107 0314 	add.w	r3, r7, #20
 80153a8:	4619      	mov	r1, r3
 80153aa:	4812      	ldr	r0, [pc, #72]	; (80153f4 <HAL_UART_MspInit+0xdc>)
 80153ac:	f7f0 fd62 	bl	8005e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART1_RX_PIN;
 80153b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80153b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80153b6:	2302      	movs	r3, #2
 80153b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80153ba:	2300      	movs	r3, #0
 80153bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80153be:	2303      	movs	r3, #3
 80153c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80153c2:	2307      	movs	r3, #7
 80153c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(UART1_RX_PORT, &GPIO_InitStruct);
 80153c6:	f107 0314 	add.w	r3, r7, #20
 80153ca:	4619      	mov	r1, r3
 80153cc:	4809      	ldr	r0, [pc, #36]	; (80153f4 <HAL_UART_MspInit+0xdc>)
 80153ce:	f7f0 fd51 	bl	8005e74 <HAL_GPIO_Init>

    /*Interrupt mode enable*/
    /* USER CODE BEGIN UART5_MspInit 1 */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 80153d2:	2201      	movs	r2, #1
 80153d4:	2100      	movs	r1, #0
 80153d6:	2025      	movs	r0, #37	; 0x25
 80153d8:	f7ef fb81 	bl	8004ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80153dc:	2025      	movs	r0, #37	; 0x25
 80153de:	f7ef fb9a 	bl	8004b16 <HAL_NVIC_EnableIRQ>
    /* USER CODE END UART5_MspInit 1 */
}

}
 80153e2:	bf00      	nop
 80153e4:	3728      	adds	r7, #40	; 0x28
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
 80153ea:	bf00      	nop
 80153ec:	40011000 	.word	0x40011000
 80153f0:	40023800 	.word	0x40023800
 80153f4:	40020000 	.word	0x40020000

080153f8 <Uart_Send>:

void Uart_Send(char *string)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b084      	sub	sp, #16
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	f7ea fee5 	bl	80001d0 <strlen>
 8015406:	4603      	mov	r3, r0
 8015408:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) string, len);
 801540a:	7bfb      	ldrb	r3, [r7, #15]
 801540c:	b29b      	uxth	r3, r3
 801540e:	461a      	mov	r2, r3
 8015410:	6879      	ldr	r1, [r7, #4]
 8015412:	4803      	ldr	r0, [pc, #12]	; (8015420 <Uart_Send+0x28>)
 8015414:	f7f2 fd27 	bl	8007e66 <HAL_UART_Transmit_IT>
	//HAL_UART_Transmit(&huart5, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
}
 8015418:	bf00      	nop
 801541a:	3710      	adds	r7, #16
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}
 8015420:	2000eb90 	.word	0x2000eb90

08015424 <BufferInit>:


void BufferInit(uint8_t* pBuffer1, uint8_t* pBuffer2, char *string ,uint16_t BufferLength)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b084      	sub	sp, #16
 8015428:	af00      	add	r7, sp, #0
 801542a:	60f8      	str	r0, [r7, #12]
 801542c:	60b9      	str	r1, [r7, #8]
 801542e:	607a      	str	r2, [r7, #4]
 8015430:	807b      	strh	r3, [r7, #2]
  if (strlen(string) != BufferLength)
 8015432:	6878      	ldr	r0, [r7, #4]
 8015434:	f7ea fecc 	bl	80001d0 <strlen>
 8015438:	4602      	mov	r2, r0
 801543a:	887b      	ldrh	r3, [r7, #2]
 801543c:	429a      	cmp	r2, r3
 801543e:	d023      	beq.n	8015488 <BufferInit+0x64>
  {
    while(BufferLength--)
 8015440:	e00b      	b.n	801545a <BufferInit+0x36>
    {
      *pBuffer1 = 'E';
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	2245      	movs	r2, #69	; 0x45
 8015446:	701a      	strb	r2, [r3, #0]
      *pBuffer2 = 'E';
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	2245      	movs	r2, #69	; 0x45
 801544c:	701a      	strb	r2, [r3, #0]
      pBuffer1++;
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	3301      	adds	r3, #1
 8015452:	60fb      	str	r3, [r7, #12]
      pBuffer2++;
 8015454:	68bb      	ldr	r3, [r7, #8]
 8015456:	3301      	adds	r3, #1
 8015458:	60bb      	str	r3, [r7, #8]
    while(BufferLength--)
 801545a:	887b      	ldrh	r3, [r7, #2]
 801545c:	1e5a      	subs	r2, r3, #1
 801545e:	807a      	strh	r2, [r7, #2]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d1ee      	bne.n	8015442 <BufferInit+0x1e>
      pBuffer1++;
      pBuffer2++;
      string++;
    }
  }
}
 8015464:	e015      	b.n	8015492 <BufferInit+0x6e>
      *pBuffer1 = *pBuffer2 = *string;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	781a      	ldrb	r2, [r3, #0]
 801546a:	68bb      	ldr	r3, [r7, #8]
 801546c:	701a      	strb	r2, [r3, #0]
 801546e:	68bb      	ldr	r3, [r7, #8]
 8015470:	781a      	ldrb	r2, [r3, #0]
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	701a      	strb	r2, [r3, #0]
      pBuffer1++;
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	3301      	adds	r3, #1
 801547a:	60fb      	str	r3, [r7, #12]
      pBuffer2++;
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	3301      	adds	r3, #1
 8015480:	60bb      	str	r3, [r7, #8]
      string++;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	3301      	adds	r3, #1
 8015486:	607b      	str	r3, [r7, #4]
    while(BufferLength--)
 8015488:	887b      	ldrh	r3, [r7, #2]
 801548a:	1e5a      	subs	r2, r3, #1
 801548c:	807a      	strh	r2, [r7, #2]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d1e9      	bne.n	8015466 <BufferInit+0x42>
}
 8015492:	bf00      	nop
 8015494:	3710      	adds	r7, #16
 8015496:	46bd      	mov	sp, r7
 8015498:	bd80      	pop	{r7, pc}

0801549a <BufferCopy>:

void BufferCopy(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 801549a:	b480      	push	{r7}
 801549c:	b085      	sub	sp, #20
 801549e:	af00      	add	r7, sp, #0
 80154a0:	60f8      	str	r0, [r7, #12]
 80154a2:	60b9      	str	r1, [r7, #8]
 80154a4:	4613      	mov	r3, r2
 80154a6:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 80154a8:	e009      	b.n	80154be <BufferCopy+0x24>
  {
    *pBuffer2= *pBuffer1;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	781a      	ldrb	r2, [r3, #0]
 80154ae:	68bb      	ldr	r3, [r7, #8]
 80154b0:	701a      	strb	r2, [r3, #0]
    pBuffer1++;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	3301      	adds	r3, #1
 80154b6:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	3301      	adds	r3, #1
 80154bc:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 80154be:	88fb      	ldrh	r3, [r7, #6]
 80154c0:	1e5a      	subs	r2, r3, #1
 80154c2:	80fa      	strh	r2, [r7, #6]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d1f0      	bne.n	80154aa <BufferCopy+0x10>
  }
}
 80154c8:	bf00      	nop
 80154ca:	bf00      	nop
 80154cc:	3714      	adds	r7, #20
 80154ce:	46bd      	mov	sp, r7
 80154d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d4:	4770      	bx	lr

080154d6 <BufferParse>:

int32_t BufferParse(uint8_t* posBuffer)
{
 80154d6:	b580      	push	{r7, lr}
 80154d8:	b086      	sub	sp, #24
 80154da:	af00      	add	r7, sp, #0
 80154dc:	6078      	str	r0, [r7, #4]
  //minimum postion
  int32_t pos = 0;
 80154de:	2300      	movs	r3, #0
 80154e0:	613b      	str	r3, [r7, #16]
  /*Double Check the msg*/
  if(posBuffer[0] !='A')
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	781b      	ldrb	r3, [r3, #0]
 80154e6:	2b41      	cmp	r3, #65	; 0x41
 80154e8:	d002      	beq.n	80154f0 <BufferParse+0x1a>
  {
    return -1;
 80154ea:	f04f 33ff 	mov.w	r3, #4294967295
 80154ee:	e032      	b.n	8015556 <BufferParse+0x80>
  }
  //check the buffer data vaildity
  for (int i=6;i<=7;i++)
 80154f0:	2306      	movs	r3, #6
 80154f2:	617b      	str	r3, [r7, #20]
 80154f4:	e011      	b.n	801551a <BufferParse+0x44>
  {
    if(posBuffer[i]!= '0' && posBuffer[i]!= '1')
 80154f6:	697b      	ldr	r3, [r7, #20]
 80154f8:	687a      	ldr	r2, [r7, #4]
 80154fa:	4413      	add	r3, r2
 80154fc:	781b      	ldrb	r3, [r3, #0]
 80154fe:	2b30      	cmp	r3, #48	; 0x30
 8015500:	d008      	beq.n	8015514 <BufferParse+0x3e>
 8015502:	697b      	ldr	r3, [r7, #20]
 8015504:	687a      	ldr	r2, [r7, #4]
 8015506:	4413      	add	r3, r2
 8015508:	781b      	ldrb	r3, [r3, #0]
 801550a:	2b31      	cmp	r3, #49	; 0x31
 801550c:	d002      	beq.n	8015514 <BufferParse+0x3e>
    {
      //Uart_Send("here");
      return -1;
 801550e:	f04f 33ff 	mov.w	r3, #4294967295
 8015512:	e020      	b.n	8015556 <BufferParse+0x80>
  for (int i=6;i<=7;i++)
 8015514:	697b      	ldr	r3, [r7, #20]
 8015516:	3301      	adds	r3, #1
 8015518:	617b      	str	r3, [r7, #20]
 801551a:	697b      	ldr	r3, [r7, #20]
 801551c:	2b07      	cmp	r3, #7
 801551e:	ddea      	ble.n	80154f6 <BufferParse+0x20>
    }
  }
  uint8_t gear = (posBuffer[7]-48)*1+(posBuffer[6]-48)*2;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	3307      	adds	r3, #7
 8015524:	781a      	ldrb	r2, [r3, #0]
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	3306      	adds	r3, #6
 801552a:	781b      	ldrb	r3, [r3, #0]
 801552c:	3b30      	subs	r3, #48	; 0x30
 801552e:	b2db      	uxtb	r3, r3
 8015530:	005b      	lsls	r3, r3, #1
 8015532:	b2db      	uxtb	r3, r3
 8015534:	4413      	add	r3, r2
 8015536:	b2db      	uxtb	r3, r3
 8015538:	3b30      	subs	r3, #48	; 0x30
 801553a:	73fb      	strb	r3, [r7, #15]
  
  pos = Gear_To_Position(gear);
 801553c:	7bfb      	ldrb	r3, [r7, #15]
 801553e:	4618      	mov	r0, r3
 8015540:	f7ff f9d2 	bl	80148e8 <Gear_To_Position>
 8015544:	6138      	str	r0, [r7, #16]
  if(pos== -1)
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	f1b3 3fff 	cmp.w	r3, #4294967295
 801554c:	d102      	bne.n	8015554 <BufferParse+0x7e>
  {
    return -1;
 801554e:	f04f 33ff 	mov.w	r3, #4294967295
 8015552:	e000      	b.n	8015556 <BufferParse+0x80>
  }
  return pos;
 8015554:	693b      	ldr	r3, [r7, #16]
}
 8015556:	4618      	mov	r0, r3
 8015558:	3718      	adds	r7, #24
 801555a:	46bd      	mov	sp, r7
 801555c:	bd80      	pop	{r7, pc}

0801555e <Buffercmp>:

uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 801555e:	b480      	push	{r7}
 8015560:	b085      	sub	sp, #20
 8015562:	af00      	add	r7, sp, #0
 8015564:	60f8      	str	r0, [r7, #12]
 8015566:	60b9      	str	r1, [r7, #8]
 8015568:	4613      	mov	r3, r2
 801556a:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 801556c:	e00d      	b.n	801558a <Buffercmp+0x2c>
  {
    if ((*pBuffer1) != *pBuffer2)
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	781a      	ldrb	r2, [r3, #0]
 8015572:	68bb      	ldr	r3, [r7, #8]
 8015574:	781b      	ldrb	r3, [r3, #0]
 8015576:	429a      	cmp	r2, r3
 8015578:	d001      	beq.n	801557e <Buffercmp+0x20>
    {
      return 1;
 801557a:	2301      	movs	r3, #1
 801557c:	e00b      	b.n	8015596 <Buffercmp+0x38>
    }
    pBuffer1++;
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	3301      	adds	r3, #1
 8015582:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8015584:	68bb      	ldr	r3, [r7, #8]
 8015586:	3301      	adds	r3, #1
 8015588:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 801558a:	88fb      	ldrh	r3, [r7, #6]
 801558c:	1e5a      	subs	r2, r3, #1
 801558e:	80fa      	strh	r2, [r7, #6]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d1ec      	bne.n	801556e <Buffercmp+0x10>
  }

  return 0;
 8015594:	2300      	movs	r3, #0
}
 8015596:	4618      	mov	r0, r3
 8015598:	3714      	adds	r7, #20
 801559a:	46bd      	mov	sp, r7
 801559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a0:	4770      	bx	lr
	...

080155a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80155a4:	480d      	ldr	r0, [pc, #52]	; (80155dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80155a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80155a8:	f7ff fe56 	bl	8015258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80155ac:	480c      	ldr	r0, [pc, #48]	; (80155e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80155ae:	490d      	ldr	r1, [pc, #52]	; (80155e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80155b0:	4a0d      	ldr	r2, [pc, #52]	; (80155e8 <LoopForever+0xe>)
  movs r3, #0
 80155b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80155b4:	e002      	b.n	80155bc <LoopCopyDataInit>

080155b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80155b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80155b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80155ba:	3304      	adds	r3, #4

080155bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80155bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80155be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80155c0:	d3f9      	bcc.n	80155b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80155c2:	4a0a      	ldr	r2, [pc, #40]	; (80155ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80155c4:	4c0a      	ldr	r4, [pc, #40]	; (80155f0 <LoopForever+0x16>)
  movs r3, #0
 80155c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80155c8:	e001      	b.n	80155ce <LoopFillZerobss>

080155ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80155ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80155cc:	3204      	adds	r2, #4

080155ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80155ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80155d0:	d3fb      	bcc.n	80155ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80155d2:	f000 fa1d 	bl	8015a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80155d6:	f7fe fb0f 	bl	8013bf8 <main>

080155da <LoopForever>:

LoopForever:
  b LoopForever
 80155da:	e7fe      	b.n	80155da <LoopForever>
  ldr   r0, =_estack
 80155dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80155e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80155e4:	200004e0 	.word	0x200004e0
  ldr r2, =_sidata
 80155e8:	0801a1d8 	.word	0x0801a1d8
  ldr r2, =_sbss
 80155ec:	200004e0 	.word	0x200004e0
  ldr r4, =_ebss
 80155f0:	2000ed20 	.word	0x2000ed20

080155f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80155f4:	e7fe      	b.n	80155f4 <ADC_IRQHandler>
	...

080155f8 <rand>:
 80155f8:	4b16      	ldr	r3, [pc, #88]	; (8015654 <rand+0x5c>)
 80155fa:	b510      	push	{r4, lr}
 80155fc:	681c      	ldr	r4, [r3, #0]
 80155fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015600:	b9b3      	cbnz	r3, 8015630 <rand+0x38>
 8015602:	2018      	movs	r0, #24
 8015604:	f000 faa4 	bl	8015b50 <malloc>
 8015608:	4602      	mov	r2, r0
 801560a:	6320      	str	r0, [r4, #48]	; 0x30
 801560c:	b920      	cbnz	r0, 8015618 <rand+0x20>
 801560e:	4b12      	ldr	r3, [pc, #72]	; (8015658 <rand+0x60>)
 8015610:	4812      	ldr	r0, [pc, #72]	; (801565c <rand+0x64>)
 8015612:	2152      	movs	r1, #82	; 0x52
 8015614:	f000 fa32 	bl	8015a7c <__assert_func>
 8015618:	4911      	ldr	r1, [pc, #68]	; (8015660 <rand+0x68>)
 801561a:	4b12      	ldr	r3, [pc, #72]	; (8015664 <rand+0x6c>)
 801561c:	e9c0 1300 	strd	r1, r3, [r0]
 8015620:	4b11      	ldr	r3, [pc, #68]	; (8015668 <rand+0x70>)
 8015622:	6083      	str	r3, [r0, #8]
 8015624:	230b      	movs	r3, #11
 8015626:	8183      	strh	r3, [r0, #12]
 8015628:	2100      	movs	r1, #0
 801562a:	2001      	movs	r0, #1
 801562c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015630:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015632:	480e      	ldr	r0, [pc, #56]	; (801566c <rand+0x74>)
 8015634:	690b      	ldr	r3, [r1, #16]
 8015636:	694c      	ldr	r4, [r1, #20]
 8015638:	4a0d      	ldr	r2, [pc, #52]	; (8015670 <rand+0x78>)
 801563a:	4358      	muls	r0, r3
 801563c:	fb02 0004 	mla	r0, r2, r4, r0
 8015640:	fba3 3202 	umull	r3, r2, r3, r2
 8015644:	3301      	adds	r3, #1
 8015646:	eb40 0002 	adc.w	r0, r0, r2
 801564a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801564e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015652:	bd10      	pop	{r4, pc}
 8015654:	200004dc 	.word	0x200004dc
 8015658:	0801a0e8 	.word	0x0801a0e8
 801565c:	0801a0ff 	.word	0x0801a0ff
 8015660:	abcd330e 	.word	0xabcd330e
 8015664:	e66d1234 	.word	0xe66d1234
 8015668:	0005deec 	.word	0x0005deec
 801566c:	5851f42d 	.word	0x5851f42d
 8015670:	4c957f2d 	.word	0x4c957f2d

08015674 <std>:
 8015674:	2300      	movs	r3, #0
 8015676:	b510      	push	{r4, lr}
 8015678:	4604      	mov	r4, r0
 801567a:	e9c0 3300 	strd	r3, r3, [r0]
 801567e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015682:	6083      	str	r3, [r0, #8]
 8015684:	8181      	strh	r1, [r0, #12]
 8015686:	6643      	str	r3, [r0, #100]	; 0x64
 8015688:	81c2      	strh	r2, [r0, #14]
 801568a:	6183      	str	r3, [r0, #24]
 801568c:	4619      	mov	r1, r3
 801568e:	2208      	movs	r2, #8
 8015690:	305c      	adds	r0, #92	; 0x5c
 8015692:	f000 f96f 	bl	8015974 <memset>
 8015696:	4b0d      	ldr	r3, [pc, #52]	; (80156cc <std+0x58>)
 8015698:	6263      	str	r3, [r4, #36]	; 0x24
 801569a:	4b0d      	ldr	r3, [pc, #52]	; (80156d0 <std+0x5c>)
 801569c:	62a3      	str	r3, [r4, #40]	; 0x28
 801569e:	4b0d      	ldr	r3, [pc, #52]	; (80156d4 <std+0x60>)
 80156a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80156a2:	4b0d      	ldr	r3, [pc, #52]	; (80156d8 <std+0x64>)
 80156a4:	6323      	str	r3, [r4, #48]	; 0x30
 80156a6:	4b0d      	ldr	r3, [pc, #52]	; (80156dc <std+0x68>)
 80156a8:	6224      	str	r4, [r4, #32]
 80156aa:	429c      	cmp	r4, r3
 80156ac:	d006      	beq.n	80156bc <std+0x48>
 80156ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80156b2:	4294      	cmp	r4, r2
 80156b4:	d002      	beq.n	80156bc <std+0x48>
 80156b6:	33d0      	adds	r3, #208	; 0xd0
 80156b8:	429c      	cmp	r4, r3
 80156ba:	d105      	bne.n	80156c8 <std+0x54>
 80156bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80156c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156c4:	f000 b9c8 	b.w	8015a58 <__retarget_lock_init_recursive>
 80156c8:	bd10      	pop	{r4, pc}
 80156ca:	bf00      	nop
 80156cc:	08015885 	.word	0x08015885
 80156d0:	080158a7 	.word	0x080158a7
 80156d4:	080158df 	.word	0x080158df
 80156d8:	08015903 	.word	0x08015903
 80156dc:	2000ebd4 	.word	0x2000ebd4

080156e0 <stdio_exit_handler>:
 80156e0:	4a02      	ldr	r2, [pc, #8]	; (80156ec <stdio_exit_handler+0xc>)
 80156e2:	4903      	ldr	r1, [pc, #12]	; (80156f0 <stdio_exit_handler+0x10>)
 80156e4:	4803      	ldr	r0, [pc, #12]	; (80156f4 <stdio_exit_handler+0x14>)
 80156e6:	f000 b869 	b.w	80157bc <_fwalk_sglue>
 80156ea:	bf00      	nop
 80156ec:	20000484 	.word	0x20000484
 80156f0:	0801661d 	.word	0x0801661d
 80156f4:	20000490 	.word	0x20000490

080156f8 <cleanup_stdio>:
 80156f8:	6841      	ldr	r1, [r0, #4]
 80156fa:	4b0c      	ldr	r3, [pc, #48]	; (801572c <cleanup_stdio+0x34>)
 80156fc:	4299      	cmp	r1, r3
 80156fe:	b510      	push	{r4, lr}
 8015700:	4604      	mov	r4, r0
 8015702:	d001      	beq.n	8015708 <cleanup_stdio+0x10>
 8015704:	f000 ff8a 	bl	801661c <_fflush_r>
 8015708:	68a1      	ldr	r1, [r4, #8]
 801570a:	4b09      	ldr	r3, [pc, #36]	; (8015730 <cleanup_stdio+0x38>)
 801570c:	4299      	cmp	r1, r3
 801570e:	d002      	beq.n	8015716 <cleanup_stdio+0x1e>
 8015710:	4620      	mov	r0, r4
 8015712:	f000 ff83 	bl	801661c <_fflush_r>
 8015716:	68e1      	ldr	r1, [r4, #12]
 8015718:	4b06      	ldr	r3, [pc, #24]	; (8015734 <cleanup_stdio+0x3c>)
 801571a:	4299      	cmp	r1, r3
 801571c:	d004      	beq.n	8015728 <cleanup_stdio+0x30>
 801571e:	4620      	mov	r0, r4
 8015720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015724:	f000 bf7a 	b.w	801661c <_fflush_r>
 8015728:	bd10      	pop	{r4, pc}
 801572a:	bf00      	nop
 801572c:	2000ebd4 	.word	0x2000ebd4
 8015730:	2000ec3c 	.word	0x2000ec3c
 8015734:	2000eca4 	.word	0x2000eca4

08015738 <global_stdio_init.part.0>:
 8015738:	b510      	push	{r4, lr}
 801573a:	4b0b      	ldr	r3, [pc, #44]	; (8015768 <global_stdio_init.part.0+0x30>)
 801573c:	4c0b      	ldr	r4, [pc, #44]	; (801576c <global_stdio_init.part.0+0x34>)
 801573e:	4a0c      	ldr	r2, [pc, #48]	; (8015770 <global_stdio_init.part.0+0x38>)
 8015740:	601a      	str	r2, [r3, #0]
 8015742:	4620      	mov	r0, r4
 8015744:	2200      	movs	r2, #0
 8015746:	2104      	movs	r1, #4
 8015748:	f7ff ff94 	bl	8015674 <std>
 801574c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015750:	2201      	movs	r2, #1
 8015752:	2109      	movs	r1, #9
 8015754:	f7ff ff8e 	bl	8015674 <std>
 8015758:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801575c:	2202      	movs	r2, #2
 801575e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015762:	2112      	movs	r1, #18
 8015764:	f7ff bf86 	b.w	8015674 <std>
 8015768:	2000ed0c 	.word	0x2000ed0c
 801576c:	2000ebd4 	.word	0x2000ebd4
 8015770:	080156e1 	.word	0x080156e1

08015774 <__sfp_lock_acquire>:
 8015774:	4801      	ldr	r0, [pc, #4]	; (801577c <__sfp_lock_acquire+0x8>)
 8015776:	f000 b970 	b.w	8015a5a <__retarget_lock_acquire_recursive>
 801577a:	bf00      	nop
 801577c:	2000ed15 	.word	0x2000ed15

08015780 <__sfp_lock_release>:
 8015780:	4801      	ldr	r0, [pc, #4]	; (8015788 <__sfp_lock_release+0x8>)
 8015782:	f000 b96b 	b.w	8015a5c <__retarget_lock_release_recursive>
 8015786:	bf00      	nop
 8015788:	2000ed15 	.word	0x2000ed15

0801578c <__sinit>:
 801578c:	b510      	push	{r4, lr}
 801578e:	4604      	mov	r4, r0
 8015790:	f7ff fff0 	bl	8015774 <__sfp_lock_acquire>
 8015794:	6a23      	ldr	r3, [r4, #32]
 8015796:	b11b      	cbz	r3, 80157a0 <__sinit+0x14>
 8015798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801579c:	f7ff bff0 	b.w	8015780 <__sfp_lock_release>
 80157a0:	4b04      	ldr	r3, [pc, #16]	; (80157b4 <__sinit+0x28>)
 80157a2:	6223      	str	r3, [r4, #32]
 80157a4:	4b04      	ldr	r3, [pc, #16]	; (80157b8 <__sinit+0x2c>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d1f5      	bne.n	8015798 <__sinit+0xc>
 80157ac:	f7ff ffc4 	bl	8015738 <global_stdio_init.part.0>
 80157b0:	e7f2      	b.n	8015798 <__sinit+0xc>
 80157b2:	bf00      	nop
 80157b4:	080156f9 	.word	0x080156f9
 80157b8:	2000ed0c 	.word	0x2000ed0c

080157bc <_fwalk_sglue>:
 80157bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157c0:	4607      	mov	r7, r0
 80157c2:	4688      	mov	r8, r1
 80157c4:	4614      	mov	r4, r2
 80157c6:	2600      	movs	r6, #0
 80157c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80157cc:	f1b9 0901 	subs.w	r9, r9, #1
 80157d0:	d505      	bpl.n	80157de <_fwalk_sglue+0x22>
 80157d2:	6824      	ldr	r4, [r4, #0]
 80157d4:	2c00      	cmp	r4, #0
 80157d6:	d1f7      	bne.n	80157c8 <_fwalk_sglue+0xc>
 80157d8:	4630      	mov	r0, r6
 80157da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157de:	89ab      	ldrh	r3, [r5, #12]
 80157e0:	2b01      	cmp	r3, #1
 80157e2:	d907      	bls.n	80157f4 <_fwalk_sglue+0x38>
 80157e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80157e8:	3301      	adds	r3, #1
 80157ea:	d003      	beq.n	80157f4 <_fwalk_sglue+0x38>
 80157ec:	4629      	mov	r1, r5
 80157ee:	4638      	mov	r0, r7
 80157f0:	47c0      	blx	r8
 80157f2:	4306      	orrs	r6, r0
 80157f4:	3568      	adds	r5, #104	; 0x68
 80157f6:	e7e9      	b.n	80157cc <_fwalk_sglue+0x10>

080157f8 <iprintf>:
 80157f8:	b40f      	push	{r0, r1, r2, r3}
 80157fa:	b507      	push	{r0, r1, r2, lr}
 80157fc:	4906      	ldr	r1, [pc, #24]	; (8015818 <iprintf+0x20>)
 80157fe:	ab04      	add	r3, sp, #16
 8015800:	6808      	ldr	r0, [r1, #0]
 8015802:	f853 2b04 	ldr.w	r2, [r3], #4
 8015806:	6881      	ldr	r1, [r0, #8]
 8015808:	9301      	str	r3, [sp, #4]
 801580a:	f000 fbd7 	bl	8015fbc <_vfiprintf_r>
 801580e:	b003      	add	sp, #12
 8015810:	f85d eb04 	ldr.w	lr, [sp], #4
 8015814:	b004      	add	sp, #16
 8015816:	4770      	bx	lr
 8015818:	200004dc 	.word	0x200004dc

0801581c <sniprintf>:
 801581c:	b40c      	push	{r2, r3}
 801581e:	b530      	push	{r4, r5, lr}
 8015820:	4b17      	ldr	r3, [pc, #92]	; (8015880 <sniprintf+0x64>)
 8015822:	1e0c      	subs	r4, r1, #0
 8015824:	681d      	ldr	r5, [r3, #0]
 8015826:	b09d      	sub	sp, #116	; 0x74
 8015828:	da08      	bge.n	801583c <sniprintf+0x20>
 801582a:	238b      	movs	r3, #139	; 0x8b
 801582c:	602b      	str	r3, [r5, #0]
 801582e:	f04f 30ff 	mov.w	r0, #4294967295
 8015832:	b01d      	add	sp, #116	; 0x74
 8015834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015838:	b002      	add	sp, #8
 801583a:	4770      	bx	lr
 801583c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015840:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015844:	bf14      	ite	ne
 8015846:	f104 33ff 	addne.w	r3, r4, #4294967295
 801584a:	4623      	moveq	r3, r4
 801584c:	9304      	str	r3, [sp, #16]
 801584e:	9307      	str	r3, [sp, #28]
 8015850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015854:	9002      	str	r0, [sp, #8]
 8015856:	9006      	str	r0, [sp, #24]
 8015858:	f8ad 3016 	strh.w	r3, [sp, #22]
 801585c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801585e:	ab21      	add	r3, sp, #132	; 0x84
 8015860:	a902      	add	r1, sp, #8
 8015862:	4628      	mov	r0, r5
 8015864:	9301      	str	r3, [sp, #4]
 8015866:	f000 fa81 	bl	8015d6c <_svfiprintf_r>
 801586a:	1c43      	adds	r3, r0, #1
 801586c:	bfbc      	itt	lt
 801586e:	238b      	movlt	r3, #139	; 0x8b
 8015870:	602b      	strlt	r3, [r5, #0]
 8015872:	2c00      	cmp	r4, #0
 8015874:	d0dd      	beq.n	8015832 <sniprintf+0x16>
 8015876:	9b02      	ldr	r3, [sp, #8]
 8015878:	2200      	movs	r2, #0
 801587a:	701a      	strb	r2, [r3, #0]
 801587c:	e7d9      	b.n	8015832 <sniprintf+0x16>
 801587e:	bf00      	nop
 8015880:	200004dc 	.word	0x200004dc

08015884 <__sread>:
 8015884:	b510      	push	{r4, lr}
 8015886:	460c      	mov	r4, r1
 8015888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801588c:	f000 f89c 	bl	80159c8 <_read_r>
 8015890:	2800      	cmp	r0, #0
 8015892:	bfab      	itete	ge
 8015894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015896:	89a3      	ldrhlt	r3, [r4, #12]
 8015898:	181b      	addge	r3, r3, r0
 801589a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801589e:	bfac      	ite	ge
 80158a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80158a2:	81a3      	strhlt	r3, [r4, #12]
 80158a4:	bd10      	pop	{r4, pc}

080158a6 <__swrite>:
 80158a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158aa:	461f      	mov	r7, r3
 80158ac:	898b      	ldrh	r3, [r1, #12]
 80158ae:	05db      	lsls	r3, r3, #23
 80158b0:	4605      	mov	r5, r0
 80158b2:	460c      	mov	r4, r1
 80158b4:	4616      	mov	r6, r2
 80158b6:	d505      	bpl.n	80158c4 <__swrite+0x1e>
 80158b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158bc:	2302      	movs	r3, #2
 80158be:	2200      	movs	r2, #0
 80158c0:	f000 f870 	bl	80159a4 <_lseek_r>
 80158c4:	89a3      	ldrh	r3, [r4, #12]
 80158c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80158ce:	81a3      	strh	r3, [r4, #12]
 80158d0:	4632      	mov	r2, r6
 80158d2:	463b      	mov	r3, r7
 80158d4:	4628      	mov	r0, r5
 80158d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158da:	f000 b887 	b.w	80159ec <_write_r>

080158de <__sseek>:
 80158de:	b510      	push	{r4, lr}
 80158e0:	460c      	mov	r4, r1
 80158e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158e6:	f000 f85d 	bl	80159a4 <_lseek_r>
 80158ea:	1c43      	adds	r3, r0, #1
 80158ec:	89a3      	ldrh	r3, [r4, #12]
 80158ee:	bf15      	itete	ne
 80158f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80158f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80158f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80158fa:	81a3      	strheq	r3, [r4, #12]
 80158fc:	bf18      	it	ne
 80158fe:	81a3      	strhne	r3, [r4, #12]
 8015900:	bd10      	pop	{r4, pc}

08015902 <__sclose>:
 8015902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015906:	f000 b83d 	b.w	8015984 <_close_r>
	...

0801590c <viprintf>:
 801590c:	460b      	mov	r3, r1
 801590e:	4903      	ldr	r1, [pc, #12]	; (801591c <viprintf+0x10>)
 8015910:	4602      	mov	r2, r0
 8015912:	6808      	ldr	r0, [r1, #0]
 8015914:	6881      	ldr	r1, [r0, #8]
 8015916:	f000 bb51 	b.w	8015fbc <_vfiprintf_r>
 801591a:	bf00      	nop
 801591c:	200004dc 	.word	0x200004dc

08015920 <memcmp>:
 8015920:	b510      	push	{r4, lr}
 8015922:	3901      	subs	r1, #1
 8015924:	4402      	add	r2, r0
 8015926:	4290      	cmp	r0, r2
 8015928:	d101      	bne.n	801592e <memcmp+0xe>
 801592a:	2000      	movs	r0, #0
 801592c:	e005      	b.n	801593a <memcmp+0x1a>
 801592e:	7803      	ldrb	r3, [r0, #0]
 8015930:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015934:	42a3      	cmp	r3, r4
 8015936:	d001      	beq.n	801593c <memcmp+0x1c>
 8015938:	1b18      	subs	r0, r3, r4
 801593a:	bd10      	pop	{r4, pc}
 801593c:	3001      	adds	r0, #1
 801593e:	e7f2      	b.n	8015926 <memcmp+0x6>

08015940 <memmove>:
 8015940:	4288      	cmp	r0, r1
 8015942:	b510      	push	{r4, lr}
 8015944:	eb01 0402 	add.w	r4, r1, r2
 8015948:	d902      	bls.n	8015950 <memmove+0x10>
 801594a:	4284      	cmp	r4, r0
 801594c:	4623      	mov	r3, r4
 801594e:	d807      	bhi.n	8015960 <memmove+0x20>
 8015950:	1e43      	subs	r3, r0, #1
 8015952:	42a1      	cmp	r1, r4
 8015954:	d008      	beq.n	8015968 <memmove+0x28>
 8015956:	f811 2b01 	ldrb.w	r2, [r1], #1
 801595a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801595e:	e7f8      	b.n	8015952 <memmove+0x12>
 8015960:	4402      	add	r2, r0
 8015962:	4601      	mov	r1, r0
 8015964:	428a      	cmp	r2, r1
 8015966:	d100      	bne.n	801596a <memmove+0x2a>
 8015968:	bd10      	pop	{r4, pc}
 801596a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801596e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015972:	e7f7      	b.n	8015964 <memmove+0x24>

08015974 <memset>:
 8015974:	4402      	add	r2, r0
 8015976:	4603      	mov	r3, r0
 8015978:	4293      	cmp	r3, r2
 801597a:	d100      	bne.n	801597e <memset+0xa>
 801597c:	4770      	bx	lr
 801597e:	f803 1b01 	strb.w	r1, [r3], #1
 8015982:	e7f9      	b.n	8015978 <memset+0x4>

08015984 <_close_r>:
 8015984:	b538      	push	{r3, r4, r5, lr}
 8015986:	4d06      	ldr	r5, [pc, #24]	; (80159a0 <_close_r+0x1c>)
 8015988:	2300      	movs	r3, #0
 801598a:	4604      	mov	r4, r0
 801598c:	4608      	mov	r0, r1
 801598e:	602b      	str	r3, [r5, #0]
 8015990:	f7ff fbf5 	bl	801517e <_close>
 8015994:	1c43      	adds	r3, r0, #1
 8015996:	d102      	bne.n	801599e <_close_r+0x1a>
 8015998:	682b      	ldr	r3, [r5, #0]
 801599a:	b103      	cbz	r3, 801599e <_close_r+0x1a>
 801599c:	6023      	str	r3, [r4, #0]
 801599e:	bd38      	pop	{r3, r4, r5, pc}
 80159a0:	2000ed10 	.word	0x2000ed10

080159a4 <_lseek_r>:
 80159a4:	b538      	push	{r3, r4, r5, lr}
 80159a6:	4d07      	ldr	r5, [pc, #28]	; (80159c4 <_lseek_r+0x20>)
 80159a8:	4604      	mov	r4, r0
 80159aa:	4608      	mov	r0, r1
 80159ac:	4611      	mov	r1, r2
 80159ae:	2200      	movs	r2, #0
 80159b0:	602a      	str	r2, [r5, #0]
 80159b2:	461a      	mov	r2, r3
 80159b4:	f7ff fc0a 	bl	80151cc <_lseek>
 80159b8:	1c43      	adds	r3, r0, #1
 80159ba:	d102      	bne.n	80159c2 <_lseek_r+0x1e>
 80159bc:	682b      	ldr	r3, [r5, #0]
 80159be:	b103      	cbz	r3, 80159c2 <_lseek_r+0x1e>
 80159c0:	6023      	str	r3, [r4, #0]
 80159c2:	bd38      	pop	{r3, r4, r5, pc}
 80159c4:	2000ed10 	.word	0x2000ed10

080159c8 <_read_r>:
 80159c8:	b538      	push	{r3, r4, r5, lr}
 80159ca:	4d07      	ldr	r5, [pc, #28]	; (80159e8 <_read_r+0x20>)
 80159cc:	4604      	mov	r4, r0
 80159ce:	4608      	mov	r0, r1
 80159d0:	4611      	mov	r1, r2
 80159d2:	2200      	movs	r2, #0
 80159d4:	602a      	str	r2, [r5, #0]
 80159d6:	461a      	mov	r2, r3
 80159d8:	f7ff fb98 	bl	801510c <_read>
 80159dc:	1c43      	adds	r3, r0, #1
 80159de:	d102      	bne.n	80159e6 <_read_r+0x1e>
 80159e0:	682b      	ldr	r3, [r5, #0]
 80159e2:	b103      	cbz	r3, 80159e6 <_read_r+0x1e>
 80159e4:	6023      	str	r3, [r4, #0]
 80159e6:	bd38      	pop	{r3, r4, r5, pc}
 80159e8:	2000ed10 	.word	0x2000ed10

080159ec <_write_r>:
 80159ec:	b538      	push	{r3, r4, r5, lr}
 80159ee:	4d07      	ldr	r5, [pc, #28]	; (8015a0c <_write_r+0x20>)
 80159f0:	4604      	mov	r4, r0
 80159f2:	4608      	mov	r0, r1
 80159f4:	4611      	mov	r1, r2
 80159f6:	2200      	movs	r2, #0
 80159f8:	602a      	str	r2, [r5, #0]
 80159fa:	461a      	mov	r2, r3
 80159fc:	f7ff fba3 	bl	8015146 <_write>
 8015a00:	1c43      	adds	r3, r0, #1
 8015a02:	d102      	bne.n	8015a0a <_write_r+0x1e>
 8015a04:	682b      	ldr	r3, [r5, #0]
 8015a06:	b103      	cbz	r3, 8015a0a <_write_r+0x1e>
 8015a08:	6023      	str	r3, [r4, #0]
 8015a0a:	bd38      	pop	{r3, r4, r5, pc}
 8015a0c:	2000ed10 	.word	0x2000ed10

08015a10 <__libc_init_array>:
 8015a10:	b570      	push	{r4, r5, r6, lr}
 8015a12:	4d0d      	ldr	r5, [pc, #52]	; (8015a48 <__libc_init_array+0x38>)
 8015a14:	4c0d      	ldr	r4, [pc, #52]	; (8015a4c <__libc_init_array+0x3c>)
 8015a16:	1b64      	subs	r4, r4, r5
 8015a18:	10a4      	asrs	r4, r4, #2
 8015a1a:	2600      	movs	r6, #0
 8015a1c:	42a6      	cmp	r6, r4
 8015a1e:	d109      	bne.n	8015a34 <__libc_init_array+0x24>
 8015a20:	4d0b      	ldr	r5, [pc, #44]	; (8015a50 <__libc_init_array+0x40>)
 8015a22:	4c0c      	ldr	r4, [pc, #48]	; (8015a54 <__libc_init_array+0x44>)
 8015a24:	f000 ffe0 	bl	80169e8 <_init>
 8015a28:	1b64      	subs	r4, r4, r5
 8015a2a:	10a4      	asrs	r4, r4, #2
 8015a2c:	2600      	movs	r6, #0
 8015a2e:	42a6      	cmp	r6, r4
 8015a30:	d105      	bne.n	8015a3e <__libc_init_array+0x2e>
 8015a32:	bd70      	pop	{r4, r5, r6, pc}
 8015a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8015a38:	4798      	blx	r3
 8015a3a:	3601      	adds	r6, #1
 8015a3c:	e7ee      	b.n	8015a1c <__libc_init_array+0xc>
 8015a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015a42:	4798      	blx	r3
 8015a44:	3601      	adds	r6, #1
 8015a46:	e7f2      	b.n	8015a2e <__libc_init_array+0x1e>
 8015a48:	0801a1d0 	.word	0x0801a1d0
 8015a4c:	0801a1d0 	.word	0x0801a1d0
 8015a50:	0801a1d0 	.word	0x0801a1d0
 8015a54:	0801a1d4 	.word	0x0801a1d4

08015a58 <__retarget_lock_init_recursive>:
 8015a58:	4770      	bx	lr

08015a5a <__retarget_lock_acquire_recursive>:
 8015a5a:	4770      	bx	lr

08015a5c <__retarget_lock_release_recursive>:
 8015a5c:	4770      	bx	lr

08015a5e <memcpy>:
 8015a5e:	440a      	add	r2, r1
 8015a60:	4291      	cmp	r1, r2
 8015a62:	f100 33ff 	add.w	r3, r0, #4294967295
 8015a66:	d100      	bne.n	8015a6a <memcpy+0xc>
 8015a68:	4770      	bx	lr
 8015a6a:	b510      	push	{r4, lr}
 8015a6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a74:	4291      	cmp	r1, r2
 8015a76:	d1f9      	bne.n	8015a6c <memcpy+0xe>
 8015a78:	bd10      	pop	{r4, pc}
	...

08015a7c <__assert_func>:
 8015a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015a7e:	4614      	mov	r4, r2
 8015a80:	461a      	mov	r2, r3
 8015a82:	4b09      	ldr	r3, [pc, #36]	; (8015aa8 <__assert_func+0x2c>)
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	4605      	mov	r5, r0
 8015a88:	68d8      	ldr	r0, [r3, #12]
 8015a8a:	b14c      	cbz	r4, 8015aa0 <__assert_func+0x24>
 8015a8c:	4b07      	ldr	r3, [pc, #28]	; (8015aac <__assert_func+0x30>)
 8015a8e:	9100      	str	r1, [sp, #0]
 8015a90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015a94:	4906      	ldr	r1, [pc, #24]	; (8015ab0 <__assert_func+0x34>)
 8015a96:	462b      	mov	r3, r5
 8015a98:	f000 fde8 	bl	801666c <fiprintf>
 8015a9c:	f000 fe9e 	bl	80167dc <abort>
 8015aa0:	4b04      	ldr	r3, [pc, #16]	; (8015ab4 <__assert_func+0x38>)
 8015aa2:	461c      	mov	r4, r3
 8015aa4:	e7f3      	b.n	8015a8e <__assert_func+0x12>
 8015aa6:	bf00      	nop
 8015aa8:	200004dc 	.word	0x200004dc
 8015aac:	0801a157 	.word	0x0801a157
 8015ab0:	0801a164 	.word	0x0801a164
 8015ab4:	0801a192 	.word	0x0801a192

08015ab8 <_free_r>:
 8015ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015aba:	2900      	cmp	r1, #0
 8015abc:	d044      	beq.n	8015b48 <_free_r+0x90>
 8015abe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ac2:	9001      	str	r0, [sp, #4]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	f1a1 0404 	sub.w	r4, r1, #4
 8015aca:	bfb8      	it	lt
 8015acc:	18e4      	addlt	r4, r4, r3
 8015ace:	f000 f8e7 	bl	8015ca0 <__malloc_lock>
 8015ad2:	4a1e      	ldr	r2, [pc, #120]	; (8015b4c <_free_r+0x94>)
 8015ad4:	9801      	ldr	r0, [sp, #4]
 8015ad6:	6813      	ldr	r3, [r2, #0]
 8015ad8:	b933      	cbnz	r3, 8015ae8 <_free_r+0x30>
 8015ada:	6063      	str	r3, [r4, #4]
 8015adc:	6014      	str	r4, [r2, #0]
 8015ade:	b003      	add	sp, #12
 8015ae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ae4:	f000 b8e2 	b.w	8015cac <__malloc_unlock>
 8015ae8:	42a3      	cmp	r3, r4
 8015aea:	d908      	bls.n	8015afe <_free_r+0x46>
 8015aec:	6825      	ldr	r5, [r4, #0]
 8015aee:	1961      	adds	r1, r4, r5
 8015af0:	428b      	cmp	r3, r1
 8015af2:	bf01      	itttt	eq
 8015af4:	6819      	ldreq	r1, [r3, #0]
 8015af6:	685b      	ldreq	r3, [r3, #4]
 8015af8:	1949      	addeq	r1, r1, r5
 8015afa:	6021      	streq	r1, [r4, #0]
 8015afc:	e7ed      	b.n	8015ada <_free_r+0x22>
 8015afe:	461a      	mov	r2, r3
 8015b00:	685b      	ldr	r3, [r3, #4]
 8015b02:	b10b      	cbz	r3, 8015b08 <_free_r+0x50>
 8015b04:	42a3      	cmp	r3, r4
 8015b06:	d9fa      	bls.n	8015afe <_free_r+0x46>
 8015b08:	6811      	ldr	r1, [r2, #0]
 8015b0a:	1855      	adds	r5, r2, r1
 8015b0c:	42a5      	cmp	r5, r4
 8015b0e:	d10b      	bne.n	8015b28 <_free_r+0x70>
 8015b10:	6824      	ldr	r4, [r4, #0]
 8015b12:	4421      	add	r1, r4
 8015b14:	1854      	adds	r4, r2, r1
 8015b16:	42a3      	cmp	r3, r4
 8015b18:	6011      	str	r1, [r2, #0]
 8015b1a:	d1e0      	bne.n	8015ade <_free_r+0x26>
 8015b1c:	681c      	ldr	r4, [r3, #0]
 8015b1e:	685b      	ldr	r3, [r3, #4]
 8015b20:	6053      	str	r3, [r2, #4]
 8015b22:	440c      	add	r4, r1
 8015b24:	6014      	str	r4, [r2, #0]
 8015b26:	e7da      	b.n	8015ade <_free_r+0x26>
 8015b28:	d902      	bls.n	8015b30 <_free_r+0x78>
 8015b2a:	230c      	movs	r3, #12
 8015b2c:	6003      	str	r3, [r0, #0]
 8015b2e:	e7d6      	b.n	8015ade <_free_r+0x26>
 8015b30:	6825      	ldr	r5, [r4, #0]
 8015b32:	1961      	adds	r1, r4, r5
 8015b34:	428b      	cmp	r3, r1
 8015b36:	bf04      	itt	eq
 8015b38:	6819      	ldreq	r1, [r3, #0]
 8015b3a:	685b      	ldreq	r3, [r3, #4]
 8015b3c:	6063      	str	r3, [r4, #4]
 8015b3e:	bf04      	itt	eq
 8015b40:	1949      	addeq	r1, r1, r5
 8015b42:	6021      	streq	r1, [r4, #0]
 8015b44:	6054      	str	r4, [r2, #4]
 8015b46:	e7ca      	b.n	8015ade <_free_r+0x26>
 8015b48:	b003      	add	sp, #12
 8015b4a:	bd30      	pop	{r4, r5, pc}
 8015b4c:	2000ed18 	.word	0x2000ed18

08015b50 <malloc>:
 8015b50:	4b02      	ldr	r3, [pc, #8]	; (8015b5c <malloc+0xc>)
 8015b52:	4601      	mov	r1, r0
 8015b54:	6818      	ldr	r0, [r3, #0]
 8015b56:	f000 b823 	b.w	8015ba0 <_malloc_r>
 8015b5a:	bf00      	nop
 8015b5c:	200004dc 	.word	0x200004dc

08015b60 <sbrk_aligned>:
 8015b60:	b570      	push	{r4, r5, r6, lr}
 8015b62:	4e0e      	ldr	r6, [pc, #56]	; (8015b9c <sbrk_aligned+0x3c>)
 8015b64:	460c      	mov	r4, r1
 8015b66:	6831      	ldr	r1, [r6, #0]
 8015b68:	4605      	mov	r5, r0
 8015b6a:	b911      	cbnz	r1, 8015b72 <sbrk_aligned+0x12>
 8015b6c:	f000 fe26 	bl	80167bc <_sbrk_r>
 8015b70:	6030      	str	r0, [r6, #0]
 8015b72:	4621      	mov	r1, r4
 8015b74:	4628      	mov	r0, r5
 8015b76:	f000 fe21 	bl	80167bc <_sbrk_r>
 8015b7a:	1c43      	adds	r3, r0, #1
 8015b7c:	d00a      	beq.n	8015b94 <sbrk_aligned+0x34>
 8015b7e:	1cc4      	adds	r4, r0, #3
 8015b80:	f024 0403 	bic.w	r4, r4, #3
 8015b84:	42a0      	cmp	r0, r4
 8015b86:	d007      	beq.n	8015b98 <sbrk_aligned+0x38>
 8015b88:	1a21      	subs	r1, r4, r0
 8015b8a:	4628      	mov	r0, r5
 8015b8c:	f000 fe16 	bl	80167bc <_sbrk_r>
 8015b90:	3001      	adds	r0, #1
 8015b92:	d101      	bne.n	8015b98 <sbrk_aligned+0x38>
 8015b94:	f04f 34ff 	mov.w	r4, #4294967295
 8015b98:	4620      	mov	r0, r4
 8015b9a:	bd70      	pop	{r4, r5, r6, pc}
 8015b9c:	2000ed1c 	.word	0x2000ed1c

08015ba0 <_malloc_r>:
 8015ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ba4:	1ccd      	adds	r5, r1, #3
 8015ba6:	f025 0503 	bic.w	r5, r5, #3
 8015baa:	3508      	adds	r5, #8
 8015bac:	2d0c      	cmp	r5, #12
 8015bae:	bf38      	it	cc
 8015bb0:	250c      	movcc	r5, #12
 8015bb2:	2d00      	cmp	r5, #0
 8015bb4:	4607      	mov	r7, r0
 8015bb6:	db01      	blt.n	8015bbc <_malloc_r+0x1c>
 8015bb8:	42a9      	cmp	r1, r5
 8015bba:	d905      	bls.n	8015bc8 <_malloc_r+0x28>
 8015bbc:	230c      	movs	r3, #12
 8015bbe:	603b      	str	r3, [r7, #0]
 8015bc0:	2600      	movs	r6, #0
 8015bc2:	4630      	mov	r0, r6
 8015bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015c9c <_malloc_r+0xfc>
 8015bcc:	f000 f868 	bl	8015ca0 <__malloc_lock>
 8015bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8015bd4:	461c      	mov	r4, r3
 8015bd6:	bb5c      	cbnz	r4, 8015c30 <_malloc_r+0x90>
 8015bd8:	4629      	mov	r1, r5
 8015bda:	4638      	mov	r0, r7
 8015bdc:	f7ff ffc0 	bl	8015b60 <sbrk_aligned>
 8015be0:	1c43      	adds	r3, r0, #1
 8015be2:	4604      	mov	r4, r0
 8015be4:	d155      	bne.n	8015c92 <_malloc_r+0xf2>
 8015be6:	f8d8 4000 	ldr.w	r4, [r8]
 8015bea:	4626      	mov	r6, r4
 8015bec:	2e00      	cmp	r6, #0
 8015bee:	d145      	bne.n	8015c7c <_malloc_r+0xdc>
 8015bf0:	2c00      	cmp	r4, #0
 8015bf2:	d048      	beq.n	8015c86 <_malloc_r+0xe6>
 8015bf4:	6823      	ldr	r3, [r4, #0]
 8015bf6:	4631      	mov	r1, r6
 8015bf8:	4638      	mov	r0, r7
 8015bfa:	eb04 0903 	add.w	r9, r4, r3
 8015bfe:	f000 fddd 	bl	80167bc <_sbrk_r>
 8015c02:	4581      	cmp	r9, r0
 8015c04:	d13f      	bne.n	8015c86 <_malloc_r+0xe6>
 8015c06:	6821      	ldr	r1, [r4, #0]
 8015c08:	1a6d      	subs	r5, r5, r1
 8015c0a:	4629      	mov	r1, r5
 8015c0c:	4638      	mov	r0, r7
 8015c0e:	f7ff ffa7 	bl	8015b60 <sbrk_aligned>
 8015c12:	3001      	adds	r0, #1
 8015c14:	d037      	beq.n	8015c86 <_malloc_r+0xe6>
 8015c16:	6823      	ldr	r3, [r4, #0]
 8015c18:	442b      	add	r3, r5
 8015c1a:	6023      	str	r3, [r4, #0]
 8015c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d038      	beq.n	8015c96 <_malloc_r+0xf6>
 8015c24:	685a      	ldr	r2, [r3, #4]
 8015c26:	42a2      	cmp	r2, r4
 8015c28:	d12b      	bne.n	8015c82 <_malloc_r+0xe2>
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	605a      	str	r2, [r3, #4]
 8015c2e:	e00f      	b.n	8015c50 <_malloc_r+0xb0>
 8015c30:	6822      	ldr	r2, [r4, #0]
 8015c32:	1b52      	subs	r2, r2, r5
 8015c34:	d41f      	bmi.n	8015c76 <_malloc_r+0xd6>
 8015c36:	2a0b      	cmp	r2, #11
 8015c38:	d917      	bls.n	8015c6a <_malloc_r+0xca>
 8015c3a:	1961      	adds	r1, r4, r5
 8015c3c:	42a3      	cmp	r3, r4
 8015c3e:	6025      	str	r5, [r4, #0]
 8015c40:	bf18      	it	ne
 8015c42:	6059      	strne	r1, [r3, #4]
 8015c44:	6863      	ldr	r3, [r4, #4]
 8015c46:	bf08      	it	eq
 8015c48:	f8c8 1000 	streq.w	r1, [r8]
 8015c4c:	5162      	str	r2, [r4, r5]
 8015c4e:	604b      	str	r3, [r1, #4]
 8015c50:	4638      	mov	r0, r7
 8015c52:	f104 060b 	add.w	r6, r4, #11
 8015c56:	f000 f829 	bl	8015cac <__malloc_unlock>
 8015c5a:	f026 0607 	bic.w	r6, r6, #7
 8015c5e:	1d23      	adds	r3, r4, #4
 8015c60:	1af2      	subs	r2, r6, r3
 8015c62:	d0ae      	beq.n	8015bc2 <_malloc_r+0x22>
 8015c64:	1b9b      	subs	r3, r3, r6
 8015c66:	50a3      	str	r3, [r4, r2]
 8015c68:	e7ab      	b.n	8015bc2 <_malloc_r+0x22>
 8015c6a:	42a3      	cmp	r3, r4
 8015c6c:	6862      	ldr	r2, [r4, #4]
 8015c6e:	d1dd      	bne.n	8015c2c <_malloc_r+0x8c>
 8015c70:	f8c8 2000 	str.w	r2, [r8]
 8015c74:	e7ec      	b.n	8015c50 <_malloc_r+0xb0>
 8015c76:	4623      	mov	r3, r4
 8015c78:	6864      	ldr	r4, [r4, #4]
 8015c7a:	e7ac      	b.n	8015bd6 <_malloc_r+0x36>
 8015c7c:	4634      	mov	r4, r6
 8015c7e:	6876      	ldr	r6, [r6, #4]
 8015c80:	e7b4      	b.n	8015bec <_malloc_r+0x4c>
 8015c82:	4613      	mov	r3, r2
 8015c84:	e7cc      	b.n	8015c20 <_malloc_r+0x80>
 8015c86:	230c      	movs	r3, #12
 8015c88:	603b      	str	r3, [r7, #0]
 8015c8a:	4638      	mov	r0, r7
 8015c8c:	f000 f80e 	bl	8015cac <__malloc_unlock>
 8015c90:	e797      	b.n	8015bc2 <_malloc_r+0x22>
 8015c92:	6025      	str	r5, [r4, #0]
 8015c94:	e7dc      	b.n	8015c50 <_malloc_r+0xb0>
 8015c96:	605b      	str	r3, [r3, #4]
 8015c98:	deff      	udf	#255	; 0xff
 8015c9a:	bf00      	nop
 8015c9c:	2000ed18 	.word	0x2000ed18

08015ca0 <__malloc_lock>:
 8015ca0:	4801      	ldr	r0, [pc, #4]	; (8015ca8 <__malloc_lock+0x8>)
 8015ca2:	f7ff beda 	b.w	8015a5a <__retarget_lock_acquire_recursive>
 8015ca6:	bf00      	nop
 8015ca8:	2000ed14 	.word	0x2000ed14

08015cac <__malloc_unlock>:
 8015cac:	4801      	ldr	r0, [pc, #4]	; (8015cb4 <__malloc_unlock+0x8>)
 8015cae:	f7ff bed5 	b.w	8015a5c <__retarget_lock_release_recursive>
 8015cb2:	bf00      	nop
 8015cb4:	2000ed14 	.word	0x2000ed14

08015cb8 <__ssputs_r>:
 8015cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cbc:	688e      	ldr	r6, [r1, #8]
 8015cbe:	461f      	mov	r7, r3
 8015cc0:	42be      	cmp	r6, r7
 8015cc2:	680b      	ldr	r3, [r1, #0]
 8015cc4:	4682      	mov	sl, r0
 8015cc6:	460c      	mov	r4, r1
 8015cc8:	4690      	mov	r8, r2
 8015cca:	d82c      	bhi.n	8015d26 <__ssputs_r+0x6e>
 8015ccc:	898a      	ldrh	r2, [r1, #12]
 8015cce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015cd2:	d026      	beq.n	8015d22 <__ssputs_r+0x6a>
 8015cd4:	6965      	ldr	r5, [r4, #20]
 8015cd6:	6909      	ldr	r1, [r1, #16]
 8015cd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015cdc:	eba3 0901 	sub.w	r9, r3, r1
 8015ce0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015ce4:	1c7b      	adds	r3, r7, #1
 8015ce6:	444b      	add	r3, r9
 8015ce8:	106d      	asrs	r5, r5, #1
 8015cea:	429d      	cmp	r5, r3
 8015cec:	bf38      	it	cc
 8015cee:	461d      	movcc	r5, r3
 8015cf0:	0553      	lsls	r3, r2, #21
 8015cf2:	d527      	bpl.n	8015d44 <__ssputs_r+0x8c>
 8015cf4:	4629      	mov	r1, r5
 8015cf6:	f7ff ff53 	bl	8015ba0 <_malloc_r>
 8015cfa:	4606      	mov	r6, r0
 8015cfc:	b360      	cbz	r0, 8015d58 <__ssputs_r+0xa0>
 8015cfe:	6921      	ldr	r1, [r4, #16]
 8015d00:	464a      	mov	r2, r9
 8015d02:	f7ff feac 	bl	8015a5e <memcpy>
 8015d06:	89a3      	ldrh	r3, [r4, #12]
 8015d08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d10:	81a3      	strh	r3, [r4, #12]
 8015d12:	6126      	str	r6, [r4, #16]
 8015d14:	6165      	str	r5, [r4, #20]
 8015d16:	444e      	add	r6, r9
 8015d18:	eba5 0509 	sub.w	r5, r5, r9
 8015d1c:	6026      	str	r6, [r4, #0]
 8015d1e:	60a5      	str	r5, [r4, #8]
 8015d20:	463e      	mov	r6, r7
 8015d22:	42be      	cmp	r6, r7
 8015d24:	d900      	bls.n	8015d28 <__ssputs_r+0x70>
 8015d26:	463e      	mov	r6, r7
 8015d28:	6820      	ldr	r0, [r4, #0]
 8015d2a:	4632      	mov	r2, r6
 8015d2c:	4641      	mov	r1, r8
 8015d2e:	f7ff fe07 	bl	8015940 <memmove>
 8015d32:	68a3      	ldr	r3, [r4, #8]
 8015d34:	1b9b      	subs	r3, r3, r6
 8015d36:	60a3      	str	r3, [r4, #8]
 8015d38:	6823      	ldr	r3, [r4, #0]
 8015d3a:	4433      	add	r3, r6
 8015d3c:	6023      	str	r3, [r4, #0]
 8015d3e:	2000      	movs	r0, #0
 8015d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d44:	462a      	mov	r2, r5
 8015d46:	f000 fd50 	bl	80167ea <_realloc_r>
 8015d4a:	4606      	mov	r6, r0
 8015d4c:	2800      	cmp	r0, #0
 8015d4e:	d1e0      	bne.n	8015d12 <__ssputs_r+0x5a>
 8015d50:	6921      	ldr	r1, [r4, #16]
 8015d52:	4650      	mov	r0, sl
 8015d54:	f7ff feb0 	bl	8015ab8 <_free_r>
 8015d58:	230c      	movs	r3, #12
 8015d5a:	f8ca 3000 	str.w	r3, [sl]
 8015d5e:	89a3      	ldrh	r3, [r4, #12]
 8015d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d64:	81a3      	strh	r3, [r4, #12]
 8015d66:	f04f 30ff 	mov.w	r0, #4294967295
 8015d6a:	e7e9      	b.n	8015d40 <__ssputs_r+0x88>

08015d6c <_svfiprintf_r>:
 8015d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d70:	4698      	mov	r8, r3
 8015d72:	898b      	ldrh	r3, [r1, #12]
 8015d74:	061b      	lsls	r3, r3, #24
 8015d76:	b09d      	sub	sp, #116	; 0x74
 8015d78:	4607      	mov	r7, r0
 8015d7a:	460d      	mov	r5, r1
 8015d7c:	4614      	mov	r4, r2
 8015d7e:	d50e      	bpl.n	8015d9e <_svfiprintf_r+0x32>
 8015d80:	690b      	ldr	r3, [r1, #16]
 8015d82:	b963      	cbnz	r3, 8015d9e <_svfiprintf_r+0x32>
 8015d84:	2140      	movs	r1, #64	; 0x40
 8015d86:	f7ff ff0b 	bl	8015ba0 <_malloc_r>
 8015d8a:	6028      	str	r0, [r5, #0]
 8015d8c:	6128      	str	r0, [r5, #16]
 8015d8e:	b920      	cbnz	r0, 8015d9a <_svfiprintf_r+0x2e>
 8015d90:	230c      	movs	r3, #12
 8015d92:	603b      	str	r3, [r7, #0]
 8015d94:	f04f 30ff 	mov.w	r0, #4294967295
 8015d98:	e0d0      	b.n	8015f3c <_svfiprintf_r+0x1d0>
 8015d9a:	2340      	movs	r3, #64	; 0x40
 8015d9c:	616b      	str	r3, [r5, #20]
 8015d9e:	2300      	movs	r3, #0
 8015da0:	9309      	str	r3, [sp, #36]	; 0x24
 8015da2:	2320      	movs	r3, #32
 8015da4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015da8:	f8cd 800c 	str.w	r8, [sp, #12]
 8015dac:	2330      	movs	r3, #48	; 0x30
 8015dae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015f54 <_svfiprintf_r+0x1e8>
 8015db2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015db6:	f04f 0901 	mov.w	r9, #1
 8015dba:	4623      	mov	r3, r4
 8015dbc:	469a      	mov	sl, r3
 8015dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015dc2:	b10a      	cbz	r2, 8015dc8 <_svfiprintf_r+0x5c>
 8015dc4:	2a25      	cmp	r2, #37	; 0x25
 8015dc6:	d1f9      	bne.n	8015dbc <_svfiprintf_r+0x50>
 8015dc8:	ebba 0b04 	subs.w	fp, sl, r4
 8015dcc:	d00b      	beq.n	8015de6 <_svfiprintf_r+0x7a>
 8015dce:	465b      	mov	r3, fp
 8015dd0:	4622      	mov	r2, r4
 8015dd2:	4629      	mov	r1, r5
 8015dd4:	4638      	mov	r0, r7
 8015dd6:	f7ff ff6f 	bl	8015cb8 <__ssputs_r>
 8015dda:	3001      	adds	r0, #1
 8015ddc:	f000 80a9 	beq.w	8015f32 <_svfiprintf_r+0x1c6>
 8015de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015de2:	445a      	add	r2, fp
 8015de4:	9209      	str	r2, [sp, #36]	; 0x24
 8015de6:	f89a 3000 	ldrb.w	r3, [sl]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	f000 80a1 	beq.w	8015f32 <_svfiprintf_r+0x1c6>
 8015df0:	2300      	movs	r3, #0
 8015df2:	f04f 32ff 	mov.w	r2, #4294967295
 8015df6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015dfa:	f10a 0a01 	add.w	sl, sl, #1
 8015dfe:	9304      	str	r3, [sp, #16]
 8015e00:	9307      	str	r3, [sp, #28]
 8015e02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015e06:	931a      	str	r3, [sp, #104]	; 0x68
 8015e08:	4654      	mov	r4, sl
 8015e0a:	2205      	movs	r2, #5
 8015e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e10:	4850      	ldr	r0, [pc, #320]	; (8015f54 <_svfiprintf_r+0x1e8>)
 8015e12:	f7ea f9e5 	bl	80001e0 <memchr>
 8015e16:	9a04      	ldr	r2, [sp, #16]
 8015e18:	b9d8      	cbnz	r0, 8015e52 <_svfiprintf_r+0xe6>
 8015e1a:	06d0      	lsls	r0, r2, #27
 8015e1c:	bf44      	itt	mi
 8015e1e:	2320      	movmi	r3, #32
 8015e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e24:	0711      	lsls	r1, r2, #28
 8015e26:	bf44      	itt	mi
 8015e28:	232b      	movmi	r3, #43	; 0x2b
 8015e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8015e32:	2b2a      	cmp	r3, #42	; 0x2a
 8015e34:	d015      	beq.n	8015e62 <_svfiprintf_r+0xf6>
 8015e36:	9a07      	ldr	r2, [sp, #28]
 8015e38:	4654      	mov	r4, sl
 8015e3a:	2000      	movs	r0, #0
 8015e3c:	f04f 0c0a 	mov.w	ip, #10
 8015e40:	4621      	mov	r1, r4
 8015e42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e46:	3b30      	subs	r3, #48	; 0x30
 8015e48:	2b09      	cmp	r3, #9
 8015e4a:	d94d      	bls.n	8015ee8 <_svfiprintf_r+0x17c>
 8015e4c:	b1b0      	cbz	r0, 8015e7c <_svfiprintf_r+0x110>
 8015e4e:	9207      	str	r2, [sp, #28]
 8015e50:	e014      	b.n	8015e7c <_svfiprintf_r+0x110>
 8015e52:	eba0 0308 	sub.w	r3, r0, r8
 8015e56:	fa09 f303 	lsl.w	r3, r9, r3
 8015e5a:	4313      	orrs	r3, r2
 8015e5c:	9304      	str	r3, [sp, #16]
 8015e5e:	46a2      	mov	sl, r4
 8015e60:	e7d2      	b.n	8015e08 <_svfiprintf_r+0x9c>
 8015e62:	9b03      	ldr	r3, [sp, #12]
 8015e64:	1d19      	adds	r1, r3, #4
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	9103      	str	r1, [sp, #12]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	bfbb      	ittet	lt
 8015e6e:	425b      	neglt	r3, r3
 8015e70:	f042 0202 	orrlt.w	r2, r2, #2
 8015e74:	9307      	strge	r3, [sp, #28]
 8015e76:	9307      	strlt	r3, [sp, #28]
 8015e78:	bfb8      	it	lt
 8015e7a:	9204      	strlt	r2, [sp, #16]
 8015e7c:	7823      	ldrb	r3, [r4, #0]
 8015e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8015e80:	d10c      	bne.n	8015e9c <_svfiprintf_r+0x130>
 8015e82:	7863      	ldrb	r3, [r4, #1]
 8015e84:	2b2a      	cmp	r3, #42	; 0x2a
 8015e86:	d134      	bne.n	8015ef2 <_svfiprintf_r+0x186>
 8015e88:	9b03      	ldr	r3, [sp, #12]
 8015e8a:	1d1a      	adds	r2, r3, #4
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	9203      	str	r2, [sp, #12]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	bfb8      	it	lt
 8015e94:	f04f 33ff 	movlt.w	r3, #4294967295
 8015e98:	3402      	adds	r4, #2
 8015e9a:	9305      	str	r3, [sp, #20]
 8015e9c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015f64 <_svfiprintf_r+0x1f8>
 8015ea0:	7821      	ldrb	r1, [r4, #0]
 8015ea2:	2203      	movs	r2, #3
 8015ea4:	4650      	mov	r0, sl
 8015ea6:	f7ea f99b 	bl	80001e0 <memchr>
 8015eaa:	b138      	cbz	r0, 8015ebc <_svfiprintf_r+0x150>
 8015eac:	9b04      	ldr	r3, [sp, #16]
 8015eae:	eba0 000a 	sub.w	r0, r0, sl
 8015eb2:	2240      	movs	r2, #64	; 0x40
 8015eb4:	4082      	lsls	r2, r0
 8015eb6:	4313      	orrs	r3, r2
 8015eb8:	3401      	adds	r4, #1
 8015eba:	9304      	str	r3, [sp, #16]
 8015ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ec0:	4825      	ldr	r0, [pc, #148]	; (8015f58 <_svfiprintf_r+0x1ec>)
 8015ec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ec6:	2206      	movs	r2, #6
 8015ec8:	f7ea f98a 	bl	80001e0 <memchr>
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	d038      	beq.n	8015f42 <_svfiprintf_r+0x1d6>
 8015ed0:	4b22      	ldr	r3, [pc, #136]	; (8015f5c <_svfiprintf_r+0x1f0>)
 8015ed2:	bb1b      	cbnz	r3, 8015f1c <_svfiprintf_r+0x1b0>
 8015ed4:	9b03      	ldr	r3, [sp, #12]
 8015ed6:	3307      	adds	r3, #7
 8015ed8:	f023 0307 	bic.w	r3, r3, #7
 8015edc:	3308      	adds	r3, #8
 8015ede:	9303      	str	r3, [sp, #12]
 8015ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ee2:	4433      	add	r3, r6
 8015ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8015ee6:	e768      	b.n	8015dba <_svfiprintf_r+0x4e>
 8015ee8:	fb0c 3202 	mla	r2, ip, r2, r3
 8015eec:	460c      	mov	r4, r1
 8015eee:	2001      	movs	r0, #1
 8015ef0:	e7a6      	b.n	8015e40 <_svfiprintf_r+0xd4>
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	3401      	adds	r4, #1
 8015ef6:	9305      	str	r3, [sp, #20]
 8015ef8:	4619      	mov	r1, r3
 8015efa:	f04f 0c0a 	mov.w	ip, #10
 8015efe:	4620      	mov	r0, r4
 8015f00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f04:	3a30      	subs	r2, #48	; 0x30
 8015f06:	2a09      	cmp	r2, #9
 8015f08:	d903      	bls.n	8015f12 <_svfiprintf_r+0x1a6>
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d0c6      	beq.n	8015e9c <_svfiprintf_r+0x130>
 8015f0e:	9105      	str	r1, [sp, #20]
 8015f10:	e7c4      	b.n	8015e9c <_svfiprintf_r+0x130>
 8015f12:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f16:	4604      	mov	r4, r0
 8015f18:	2301      	movs	r3, #1
 8015f1a:	e7f0      	b.n	8015efe <_svfiprintf_r+0x192>
 8015f1c:	ab03      	add	r3, sp, #12
 8015f1e:	9300      	str	r3, [sp, #0]
 8015f20:	462a      	mov	r2, r5
 8015f22:	4b0f      	ldr	r3, [pc, #60]	; (8015f60 <_svfiprintf_r+0x1f4>)
 8015f24:	a904      	add	r1, sp, #16
 8015f26:	4638      	mov	r0, r7
 8015f28:	f3af 8000 	nop.w
 8015f2c:	1c42      	adds	r2, r0, #1
 8015f2e:	4606      	mov	r6, r0
 8015f30:	d1d6      	bne.n	8015ee0 <_svfiprintf_r+0x174>
 8015f32:	89ab      	ldrh	r3, [r5, #12]
 8015f34:	065b      	lsls	r3, r3, #25
 8015f36:	f53f af2d 	bmi.w	8015d94 <_svfiprintf_r+0x28>
 8015f3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f3c:	b01d      	add	sp, #116	; 0x74
 8015f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f42:	ab03      	add	r3, sp, #12
 8015f44:	9300      	str	r3, [sp, #0]
 8015f46:	462a      	mov	r2, r5
 8015f48:	4b05      	ldr	r3, [pc, #20]	; (8015f60 <_svfiprintf_r+0x1f4>)
 8015f4a:	a904      	add	r1, sp, #16
 8015f4c:	4638      	mov	r0, r7
 8015f4e:	f000 f9bd 	bl	80162cc <_printf_i>
 8015f52:	e7eb      	b.n	8015f2c <_svfiprintf_r+0x1c0>
 8015f54:	0801a193 	.word	0x0801a193
 8015f58:	0801a19d 	.word	0x0801a19d
 8015f5c:	00000000 	.word	0x00000000
 8015f60:	08015cb9 	.word	0x08015cb9
 8015f64:	0801a199 	.word	0x0801a199

08015f68 <__sfputc_r>:
 8015f68:	6893      	ldr	r3, [r2, #8]
 8015f6a:	3b01      	subs	r3, #1
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	b410      	push	{r4}
 8015f70:	6093      	str	r3, [r2, #8]
 8015f72:	da08      	bge.n	8015f86 <__sfputc_r+0x1e>
 8015f74:	6994      	ldr	r4, [r2, #24]
 8015f76:	42a3      	cmp	r3, r4
 8015f78:	db01      	blt.n	8015f7e <__sfputc_r+0x16>
 8015f7a:	290a      	cmp	r1, #10
 8015f7c:	d103      	bne.n	8015f86 <__sfputc_r+0x1e>
 8015f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f82:	f000 bb85 	b.w	8016690 <__swbuf_r>
 8015f86:	6813      	ldr	r3, [r2, #0]
 8015f88:	1c58      	adds	r0, r3, #1
 8015f8a:	6010      	str	r0, [r2, #0]
 8015f8c:	7019      	strb	r1, [r3, #0]
 8015f8e:	4608      	mov	r0, r1
 8015f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f94:	4770      	bx	lr

08015f96 <__sfputs_r>:
 8015f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f98:	4606      	mov	r6, r0
 8015f9a:	460f      	mov	r7, r1
 8015f9c:	4614      	mov	r4, r2
 8015f9e:	18d5      	adds	r5, r2, r3
 8015fa0:	42ac      	cmp	r4, r5
 8015fa2:	d101      	bne.n	8015fa8 <__sfputs_r+0x12>
 8015fa4:	2000      	movs	r0, #0
 8015fa6:	e007      	b.n	8015fb8 <__sfputs_r+0x22>
 8015fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fac:	463a      	mov	r2, r7
 8015fae:	4630      	mov	r0, r6
 8015fb0:	f7ff ffda 	bl	8015f68 <__sfputc_r>
 8015fb4:	1c43      	adds	r3, r0, #1
 8015fb6:	d1f3      	bne.n	8015fa0 <__sfputs_r+0xa>
 8015fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015fbc <_vfiprintf_r>:
 8015fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fc0:	460d      	mov	r5, r1
 8015fc2:	b09d      	sub	sp, #116	; 0x74
 8015fc4:	4614      	mov	r4, r2
 8015fc6:	4698      	mov	r8, r3
 8015fc8:	4606      	mov	r6, r0
 8015fca:	b118      	cbz	r0, 8015fd4 <_vfiprintf_r+0x18>
 8015fcc:	6a03      	ldr	r3, [r0, #32]
 8015fce:	b90b      	cbnz	r3, 8015fd4 <_vfiprintf_r+0x18>
 8015fd0:	f7ff fbdc 	bl	801578c <__sinit>
 8015fd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015fd6:	07d9      	lsls	r1, r3, #31
 8015fd8:	d405      	bmi.n	8015fe6 <_vfiprintf_r+0x2a>
 8015fda:	89ab      	ldrh	r3, [r5, #12]
 8015fdc:	059a      	lsls	r2, r3, #22
 8015fde:	d402      	bmi.n	8015fe6 <_vfiprintf_r+0x2a>
 8015fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015fe2:	f7ff fd3a 	bl	8015a5a <__retarget_lock_acquire_recursive>
 8015fe6:	89ab      	ldrh	r3, [r5, #12]
 8015fe8:	071b      	lsls	r3, r3, #28
 8015fea:	d501      	bpl.n	8015ff0 <_vfiprintf_r+0x34>
 8015fec:	692b      	ldr	r3, [r5, #16]
 8015fee:	b99b      	cbnz	r3, 8016018 <_vfiprintf_r+0x5c>
 8015ff0:	4629      	mov	r1, r5
 8015ff2:	4630      	mov	r0, r6
 8015ff4:	f000 fb8a 	bl	801670c <__swsetup_r>
 8015ff8:	b170      	cbz	r0, 8016018 <_vfiprintf_r+0x5c>
 8015ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015ffc:	07dc      	lsls	r4, r3, #31
 8015ffe:	d504      	bpl.n	801600a <_vfiprintf_r+0x4e>
 8016000:	f04f 30ff 	mov.w	r0, #4294967295
 8016004:	b01d      	add	sp, #116	; 0x74
 8016006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801600a:	89ab      	ldrh	r3, [r5, #12]
 801600c:	0598      	lsls	r0, r3, #22
 801600e:	d4f7      	bmi.n	8016000 <_vfiprintf_r+0x44>
 8016010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016012:	f7ff fd23 	bl	8015a5c <__retarget_lock_release_recursive>
 8016016:	e7f3      	b.n	8016000 <_vfiprintf_r+0x44>
 8016018:	2300      	movs	r3, #0
 801601a:	9309      	str	r3, [sp, #36]	; 0x24
 801601c:	2320      	movs	r3, #32
 801601e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016022:	f8cd 800c 	str.w	r8, [sp, #12]
 8016026:	2330      	movs	r3, #48	; 0x30
 8016028:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80161dc <_vfiprintf_r+0x220>
 801602c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016030:	f04f 0901 	mov.w	r9, #1
 8016034:	4623      	mov	r3, r4
 8016036:	469a      	mov	sl, r3
 8016038:	f813 2b01 	ldrb.w	r2, [r3], #1
 801603c:	b10a      	cbz	r2, 8016042 <_vfiprintf_r+0x86>
 801603e:	2a25      	cmp	r2, #37	; 0x25
 8016040:	d1f9      	bne.n	8016036 <_vfiprintf_r+0x7a>
 8016042:	ebba 0b04 	subs.w	fp, sl, r4
 8016046:	d00b      	beq.n	8016060 <_vfiprintf_r+0xa4>
 8016048:	465b      	mov	r3, fp
 801604a:	4622      	mov	r2, r4
 801604c:	4629      	mov	r1, r5
 801604e:	4630      	mov	r0, r6
 8016050:	f7ff ffa1 	bl	8015f96 <__sfputs_r>
 8016054:	3001      	adds	r0, #1
 8016056:	f000 80a9 	beq.w	80161ac <_vfiprintf_r+0x1f0>
 801605a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801605c:	445a      	add	r2, fp
 801605e:	9209      	str	r2, [sp, #36]	; 0x24
 8016060:	f89a 3000 	ldrb.w	r3, [sl]
 8016064:	2b00      	cmp	r3, #0
 8016066:	f000 80a1 	beq.w	80161ac <_vfiprintf_r+0x1f0>
 801606a:	2300      	movs	r3, #0
 801606c:	f04f 32ff 	mov.w	r2, #4294967295
 8016070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016074:	f10a 0a01 	add.w	sl, sl, #1
 8016078:	9304      	str	r3, [sp, #16]
 801607a:	9307      	str	r3, [sp, #28]
 801607c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016080:	931a      	str	r3, [sp, #104]	; 0x68
 8016082:	4654      	mov	r4, sl
 8016084:	2205      	movs	r2, #5
 8016086:	f814 1b01 	ldrb.w	r1, [r4], #1
 801608a:	4854      	ldr	r0, [pc, #336]	; (80161dc <_vfiprintf_r+0x220>)
 801608c:	f7ea f8a8 	bl	80001e0 <memchr>
 8016090:	9a04      	ldr	r2, [sp, #16]
 8016092:	b9d8      	cbnz	r0, 80160cc <_vfiprintf_r+0x110>
 8016094:	06d1      	lsls	r1, r2, #27
 8016096:	bf44      	itt	mi
 8016098:	2320      	movmi	r3, #32
 801609a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801609e:	0713      	lsls	r3, r2, #28
 80160a0:	bf44      	itt	mi
 80160a2:	232b      	movmi	r3, #43	; 0x2b
 80160a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80160a8:	f89a 3000 	ldrb.w	r3, [sl]
 80160ac:	2b2a      	cmp	r3, #42	; 0x2a
 80160ae:	d015      	beq.n	80160dc <_vfiprintf_r+0x120>
 80160b0:	9a07      	ldr	r2, [sp, #28]
 80160b2:	4654      	mov	r4, sl
 80160b4:	2000      	movs	r0, #0
 80160b6:	f04f 0c0a 	mov.w	ip, #10
 80160ba:	4621      	mov	r1, r4
 80160bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80160c0:	3b30      	subs	r3, #48	; 0x30
 80160c2:	2b09      	cmp	r3, #9
 80160c4:	d94d      	bls.n	8016162 <_vfiprintf_r+0x1a6>
 80160c6:	b1b0      	cbz	r0, 80160f6 <_vfiprintf_r+0x13a>
 80160c8:	9207      	str	r2, [sp, #28]
 80160ca:	e014      	b.n	80160f6 <_vfiprintf_r+0x13a>
 80160cc:	eba0 0308 	sub.w	r3, r0, r8
 80160d0:	fa09 f303 	lsl.w	r3, r9, r3
 80160d4:	4313      	orrs	r3, r2
 80160d6:	9304      	str	r3, [sp, #16]
 80160d8:	46a2      	mov	sl, r4
 80160da:	e7d2      	b.n	8016082 <_vfiprintf_r+0xc6>
 80160dc:	9b03      	ldr	r3, [sp, #12]
 80160de:	1d19      	adds	r1, r3, #4
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	9103      	str	r1, [sp, #12]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	bfbb      	ittet	lt
 80160e8:	425b      	neglt	r3, r3
 80160ea:	f042 0202 	orrlt.w	r2, r2, #2
 80160ee:	9307      	strge	r3, [sp, #28]
 80160f0:	9307      	strlt	r3, [sp, #28]
 80160f2:	bfb8      	it	lt
 80160f4:	9204      	strlt	r2, [sp, #16]
 80160f6:	7823      	ldrb	r3, [r4, #0]
 80160f8:	2b2e      	cmp	r3, #46	; 0x2e
 80160fa:	d10c      	bne.n	8016116 <_vfiprintf_r+0x15a>
 80160fc:	7863      	ldrb	r3, [r4, #1]
 80160fe:	2b2a      	cmp	r3, #42	; 0x2a
 8016100:	d134      	bne.n	801616c <_vfiprintf_r+0x1b0>
 8016102:	9b03      	ldr	r3, [sp, #12]
 8016104:	1d1a      	adds	r2, r3, #4
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	9203      	str	r2, [sp, #12]
 801610a:	2b00      	cmp	r3, #0
 801610c:	bfb8      	it	lt
 801610e:	f04f 33ff 	movlt.w	r3, #4294967295
 8016112:	3402      	adds	r4, #2
 8016114:	9305      	str	r3, [sp, #20]
 8016116:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80161ec <_vfiprintf_r+0x230>
 801611a:	7821      	ldrb	r1, [r4, #0]
 801611c:	2203      	movs	r2, #3
 801611e:	4650      	mov	r0, sl
 8016120:	f7ea f85e 	bl	80001e0 <memchr>
 8016124:	b138      	cbz	r0, 8016136 <_vfiprintf_r+0x17a>
 8016126:	9b04      	ldr	r3, [sp, #16]
 8016128:	eba0 000a 	sub.w	r0, r0, sl
 801612c:	2240      	movs	r2, #64	; 0x40
 801612e:	4082      	lsls	r2, r0
 8016130:	4313      	orrs	r3, r2
 8016132:	3401      	adds	r4, #1
 8016134:	9304      	str	r3, [sp, #16]
 8016136:	f814 1b01 	ldrb.w	r1, [r4], #1
 801613a:	4829      	ldr	r0, [pc, #164]	; (80161e0 <_vfiprintf_r+0x224>)
 801613c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016140:	2206      	movs	r2, #6
 8016142:	f7ea f84d 	bl	80001e0 <memchr>
 8016146:	2800      	cmp	r0, #0
 8016148:	d03f      	beq.n	80161ca <_vfiprintf_r+0x20e>
 801614a:	4b26      	ldr	r3, [pc, #152]	; (80161e4 <_vfiprintf_r+0x228>)
 801614c:	bb1b      	cbnz	r3, 8016196 <_vfiprintf_r+0x1da>
 801614e:	9b03      	ldr	r3, [sp, #12]
 8016150:	3307      	adds	r3, #7
 8016152:	f023 0307 	bic.w	r3, r3, #7
 8016156:	3308      	adds	r3, #8
 8016158:	9303      	str	r3, [sp, #12]
 801615a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801615c:	443b      	add	r3, r7
 801615e:	9309      	str	r3, [sp, #36]	; 0x24
 8016160:	e768      	b.n	8016034 <_vfiprintf_r+0x78>
 8016162:	fb0c 3202 	mla	r2, ip, r2, r3
 8016166:	460c      	mov	r4, r1
 8016168:	2001      	movs	r0, #1
 801616a:	e7a6      	b.n	80160ba <_vfiprintf_r+0xfe>
 801616c:	2300      	movs	r3, #0
 801616e:	3401      	adds	r4, #1
 8016170:	9305      	str	r3, [sp, #20]
 8016172:	4619      	mov	r1, r3
 8016174:	f04f 0c0a 	mov.w	ip, #10
 8016178:	4620      	mov	r0, r4
 801617a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801617e:	3a30      	subs	r2, #48	; 0x30
 8016180:	2a09      	cmp	r2, #9
 8016182:	d903      	bls.n	801618c <_vfiprintf_r+0x1d0>
 8016184:	2b00      	cmp	r3, #0
 8016186:	d0c6      	beq.n	8016116 <_vfiprintf_r+0x15a>
 8016188:	9105      	str	r1, [sp, #20]
 801618a:	e7c4      	b.n	8016116 <_vfiprintf_r+0x15a>
 801618c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016190:	4604      	mov	r4, r0
 8016192:	2301      	movs	r3, #1
 8016194:	e7f0      	b.n	8016178 <_vfiprintf_r+0x1bc>
 8016196:	ab03      	add	r3, sp, #12
 8016198:	9300      	str	r3, [sp, #0]
 801619a:	462a      	mov	r2, r5
 801619c:	4b12      	ldr	r3, [pc, #72]	; (80161e8 <_vfiprintf_r+0x22c>)
 801619e:	a904      	add	r1, sp, #16
 80161a0:	4630      	mov	r0, r6
 80161a2:	f3af 8000 	nop.w
 80161a6:	4607      	mov	r7, r0
 80161a8:	1c78      	adds	r0, r7, #1
 80161aa:	d1d6      	bne.n	801615a <_vfiprintf_r+0x19e>
 80161ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80161ae:	07d9      	lsls	r1, r3, #31
 80161b0:	d405      	bmi.n	80161be <_vfiprintf_r+0x202>
 80161b2:	89ab      	ldrh	r3, [r5, #12]
 80161b4:	059a      	lsls	r2, r3, #22
 80161b6:	d402      	bmi.n	80161be <_vfiprintf_r+0x202>
 80161b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80161ba:	f7ff fc4f 	bl	8015a5c <__retarget_lock_release_recursive>
 80161be:	89ab      	ldrh	r3, [r5, #12]
 80161c0:	065b      	lsls	r3, r3, #25
 80161c2:	f53f af1d 	bmi.w	8016000 <_vfiprintf_r+0x44>
 80161c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80161c8:	e71c      	b.n	8016004 <_vfiprintf_r+0x48>
 80161ca:	ab03      	add	r3, sp, #12
 80161cc:	9300      	str	r3, [sp, #0]
 80161ce:	462a      	mov	r2, r5
 80161d0:	4b05      	ldr	r3, [pc, #20]	; (80161e8 <_vfiprintf_r+0x22c>)
 80161d2:	a904      	add	r1, sp, #16
 80161d4:	4630      	mov	r0, r6
 80161d6:	f000 f879 	bl	80162cc <_printf_i>
 80161da:	e7e4      	b.n	80161a6 <_vfiprintf_r+0x1ea>
 80161dc:	0801a193 	.word	0x0801a193
 80161e0:	0801a19d 	.word	0x0801a19d
 80161e4:	00000000 	.word	0x00000000
 80161e8:	08015f97 	.word	0x08015f97
 80161ec:	0801a199 	.word	0x0801a199

080161f0 <_printf_common>:
 80161f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161f4:	4616      	mov	r6, r2
 80161f6:	4699      	mov	r9, r3
 80161f8:	688a      	ldr	r2, [r1, #8]
 80161fa:	690b      	ldr	r3, [r1, #16]
 80161fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016200:	4293      	cmp	r3, r2
 8016202:	bfb8      	it	lt
 8016204:	4613      	movlt	r3, r2
 8016206:	6033      	str	r3, [r6, #0]
 8016208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801620c:	4607      	mov	r7, r0
 801620e:	460c      	mov	r4, r1
 8016210:	b10a      	cbz	r2, 8016216 <_printf_common+0x26>
 8016212:	3301      	adds	r3, #1
 8016214:	6033      	str	r3, [r6, #0]
 8016216:	6823      	ldr	r3, [r4, #0]
 8016218:	0699      	lsls	r1, r3, #26
 801621a:	bf42      	ittt	mi
 801621c:	6833      	ldrmi	r3, [r6, #0]
 801621e:	3302      	addmi	r3, #2
 8016220:	6033      	strmi	r3, [r6, #0]
 8016222:	6825      	ldr	r5, [r4, #0]
 8016224:	f015 0506 	ands.w	r5, r5, #6
 8016228:	d106      	bne.n	8016238 <_printf_common+0x48>
 801622a:	f104 0a19 	add.w	sl, r4, #25
 801622e:	68e3      	ldr	r3, [r4, #12]
 8016230:	6832      	ldr	r2, [r6, #0]
 8016232:	1a9b      	subs	r3, r3, r2
 8016234:	42ab      	cmp	r3, r5
 8016236:	dc26      	bgt.n	8016286 <_printf_common+0x96>
 8016238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801623c:	1e13      	subs	r3, r2, #0
 801623e:	6822      	ldr	r2, [r4, #0]
 8016240:	bf18      	it	ne
 8016242:	2301      	movne	r3, #1
 8016244:	0692      	lsls	r2, r2, #26
 8016246:	d42b      	bmi.n	80162a0 <_printf_common+0xb0>
 8016248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801624c:	4649      	mov	r1, r9
 801624e:	4638      	mov	r0, r7
 8016250:	47c0      	blx	r8
 8016252:	3001      	adds	r0, #1
 8016254:	d01e      	beq.n	8016294 <_printf_common+0xa4>
 8016256:	6823      	ldr	r3, [r4, #0]
 8016258:	6922      	ldr	r2, [r4, #16]
 801625a:	f003 0306 	and.w	r3, r3, #6
 801625e:	2b04      	cmp	r3, #4
 8016260:	bf02      	ittt	eq
 8016262:	68e5      	ldreq	r5, [r4, #12]
 8016264:	6833      	ldreq	r3, [r6, #0]
 8016266:	1aed      	subeq	r5, r5, r3
 8016268:	68a3      	ldr	r3, [r4, #8]
 801626a:	bf0c      	ite	eq
 801626c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016270:	2500      	movne	r5, #0
 8016272:	4293      	cmp	r3, r2
 8016274:	bfc4      	itt	gt
 8016276:	1a9b      	subgt	r3, r3, r2
 8016278:	18ed      	addgt	r5, r5, r3
 801627a:	2600      	movs	r6, #0
 801627c:	341a      	adds	r4, #26
 801627e:	42b5      	cmp	r5, r6
 8016280:	d11a      	bne.n	80162b8 <_printf_common+0xc8>
 8016282:	2000      	movs	r0, #0
 8016284:	e008      	b.n	8016298 <_printf_common+0xa8>
 8016286:	2301      	movs	r3, #1
 8016288:	4652      	mov	r2, sl
 801628a:	4649      	mov	r1, r9
 801628c:	4638      	mov	r0, r7
 801628e:	47c0      	blx	r8
 8016290:	3001      	adds	r0, #1
 8016292:	d103      	bne.n	801629c <_printf_common+0xac>
 8016294:	f04f 30ff 	mov.w	r0, #4294967295
 8016298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801629c:	3501      	adds	r5, #1
 801629e:	e7c6      	b.n	801622e <_printf_common+0x3e>
 80162a0:	18e1      	adds	r1, r4, r3
 80162a2:	1c5a      	adds	r2, r3, #1
 80162a4:	2030      	movs	r0, #48	; 0x30
 80162a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80162aa:	4422      	add	r2, r4
 80162ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80162b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80162b4:	3302      	adds	r3, #2
 80162b6:	e7c7      	b.n	8016248 <_printf_common+0x58>
 80162b8:	2301      	movs	r3, #1
 80162ba:	4622      	mov	r2, r4
 80162bc:	4649      	mov	r1, r9
 80162be:	4638      	mov	r0, r7
 80162c0:	47c0      	blx	r8
 80162c2:	3001      	adds	r0, #1
 80162c4:	d0e6      	beq.n	8016294 <_printf_common+0xa4>
 80162c6:	3601      	adds	r6, #1
 80162c8:	e7d9      	b.n	801627e <_printf_common+0x8e>
	...

080162cc <_printf_i>:
 80162cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80162d0:	7e0f      	ldrb	r7, [r1, #24]
 80162d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80162d4:	2f78      	cmp	r7, #120	; 0x78
 80162d6:	4691      	mov	r9, r2
 80162d8:	4680      	mov	r8, r0
 80162da:	460c      	mov	r4, r1
 80162dc:	469a      	mov	sl, r3
 80162de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80162e2:	d807      	bhi.n	80162f4 <_printf_i+0x28>
 80162e4:	2f62      	cmp	r7, #98	; 0x62
 80162e6:	d80a      	bhi.n	80162fe <_printf_i+0x32>
 80162e8:	2f00      	cmp	r7, #0
 80162ea:	f000 80d4 	beq.w	8016496 <_printf_i+0x1ca>
 80162ee:	2f58      	cmp	r7, #88	; 0x58
 80162f0:	f000 80c0 	beq.w	8016474 <_printf_i+0x1a8>
 80162f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80162f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80162fc:	e03a      	b.n	8016374 <_printf_i+0xa8>
 80162fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016302:	2b15      	cmp	r3, #21
 8016304:	d8f6      	bhi.n	80162f4 <_printf_i+0x28>
 8016306:	a101      	add	r1, pc, #4	; (adr r1, 801630c <_printf_i+0x40>)
 8016308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801630c:	08016365 	.word	0x08016365
 8016310:	08016379 	.word	0x08016379
 8016314:	080162f5 	.word	0x080162f5
 8016318:	080162f5 	.word	0x080162f5
 801631c:	080162f5 	.word	0x080162f5
 8016320:	080162f5 	.word	0x080162f5
 8016324:	08016379 	.word	0x08016379
 8016328:	080162f5 	.word	0x080162f5
 801632c:	080162f5 	.word	0x080162f5
 8016330:	080162f5 	.word	0x080162f5
 8016334:	080162f5 	.word	0x080162f5
 8016338:	0801647d 	.word	0x0801647d
 801633c:	080163a5 	.word	0x080163a5
 8016340:	08016437 	.word	0x08016437
 8016344:	080162f5 	.word	0x080162f5
 8016348:	080162f5 	.word	0x080162f5
 801634c:	0801649f 	.word	0x0801649f
 8016350:	080162f5 	.word	0x080162f5
 8016354:	080163a5 	.word	0x080163a5
 8016358:	080162f5 	.word	0x080162f5
 801635c:	080162f5 	.word	0x080162f5
 8016360:	0801643f 	.word	0x0801643f
 8016364:	682b      	ldr	r3, [r5, #0]
 8016366:	1d1a      	adds	r2, r3, #4
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	602a      	str	r2, [r5, #0]
 801636c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016374:	2301      	movs	r3, #1
 8016376:	e09f      	b.n	80164b8 <_printf_i+0x1ec>
 8016378:	6820      	ldr	r0, [r4, #0]
 801637a:	682b      	ldr	r3, [r5, #0]
 801637c:	0607      	lsls	r7, r0, #24
 801637e:	f103 0104 	add.w	r1, r3, #4
 8016382:	6029      	str	r1, [r5, #0]
 8016384:	d501      	bpl.n	801638a <_printf_i+0xbe>
 8016386:	681e      	ldr	r6, [r3, #0]
 8016388:	e003      	b.n	8016392 <_printf_i+0xc6>
 801638a:	0646      	lsls	r6, r0, #25
 801638c:	d5fb      	bpl.n	8016386 <_printf_i+0xba>
 801638e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016392:	2e00      	cmp	r6, #0
 8016394:	da03      	bge.n	801639e <_printf_i+0xd2>
 8016396:	232d      	movs	r3, #45	; 0x2d
 8016398:	4276      	negs	r6, r6
 801639a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801639e:	485a      	ldr	r0, [pc, #360]	; (8016508 <_printf_i+0x23c>)
 80163a0:	230a      	movs	r3, #10
 80163a2:	e012      	b.n	80163ca <_printf_i+0xfe>
 80163a4:	682b      	ldr	r3, [r5, #0]
 80163a6:	6820      	ldr	r0, [r4, #0]
 80163a8:	1d19      	adds	r1, r3, #4
 80163aa:	6029      	str	r1, [r5, #0]
 80163ac:	0605      	lsls	r5, r0, #24
 80163ae:	d501      	bpl.n	80163b4 <_printf_i+0xe8>
 80163b0:	681e      	ldr	r6, [r3, #0]
 80163b2:	e002      	b.n	80163ba <_printf_i+0xee>
 80163b4:	0641      	lsls	r1, r0, #25
 80163b6:	d5fb      	bpl.n	80163b0 <_printf_i+0xe4>
 80163b8:	881e      	ldrh	r6, [r3, #0]
 80163ba:	4853      	ldr	r0, [pc, #332]	; (8016508 <_printf_i+0x23c>)
 80163bc:	2f6f      	cmp	r7, #111	; 0x6f
 80163be:	bf0c      	ite	eq
 80163c0:	2308      	moveq	r3, #8
 80163c2:	230a      	movne	r3, #10
 80163c4:	2100      	movs	r1, #0
 80163c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80163ca:	6865      	ldr	r5, [r4, #4]
 80163cc:	60a5      	str	r5, [r4, #8]
 80163ce:	2d00      	cmp	r5, #0
 80163d0:	bfa2      	ittt	ge
 80163d2:	6821      	ldrge	r1, [r4, #0]
 80163d4:	f021 0104 	bicge.w	r1, r1, #4
 80163d8:	6021      	strge	r1, [r4, #0]
 80163da:	b90e      	cbnz	r6, 80163e0 <_printf_i+0x114>
 80163dc:	2d00      	cmp	r5, #0
 80163de:	d04b      	beq.n	8016478 <_printf_i+0x1ac>
 80163e0:	4615      	mov	r5, r2
 80163e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80163e6:	fb03 6711 	mls	r7, r3, r1, r6
 80163ea:	5dc7      	ldrb	r7, [r0, r7]
 80163ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80163f0:	4637      	mov	r7, r6
 80163f2:	42bb      	cmp	r3, r7
 80163f4:	460e      	mov	r6, r1
 80163f6:	d9f4      	bls.n	80163e2 <_printf_i+0x116>
 80163f8:	2b08      	cmp	r3, #8
 80163fa:	d10b      	bne.n	8016414 <_printf_i+0x148>
 80163fc:	6823      	ldr	r3, [r4, #0]
 80163fe:	07de      	lsls	r6, r3, #31
 8016400:	d508      	bpl.n	8016414 <_printf_i+0x148>
 8016402:	6923      	ldr	r3, [r4, #16]
 8016404:	6861      	ldr	r1, [r4, #4]
 8016406:	4299      	cmp	r1, r3
 8016408:	bfde      	ittt	le
 801640a:	2330      	movle	r3, #48	; 0x30
 801640c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016410:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016414:	1b52      	subs	r2, r2, r5
 8016416:	6122      	str	r2, [r4, #16]
 8016418:	f8cd a000 	str.w	sl, [sp]
 801641c:	464b      	mov	r3, r9
 801641e:	aa03      	add	r2, sp, #12
 8016420:	4621      	mov	r1, r4
 8016422:	4640      	mov	r0, r8
 8016424:	f7ff fee4 	bl	80161f0 <_printf_common>
 8016428:	3001      	adds	r0, #1
 801642a:	d14a      	bne.n	80164c2 <_printf_i+0x1f6>
 801642c:	f04f 30ff 	mov.w	r0, #4294967295
 8016430:	b004      	add	sp, #16
 8016432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016436:	6823      	ldr	r3, [r4, #0]
 8016438:	f043 0320 	orr.w	r3, r3, #32
 801643c:	6023      	str	r3, [r4, #0]
 801643e:	4833      	ldr	r0, [pc, #204]	; (801650c <_printf_i+0x240>)
 8016440:	2778      	movs	r7, #120	; 0x78
 8016442:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016446:	6823      	ldr	r3, [r4, #0]
 8016448:	6829      	ldr	r1, [r5, #0]
 801644a:	061f      	lsls	r7, r3, #24
 801644c:	f851 6b04 	ldr.w	r6, [r1], #4
 8016450:	d402      	bmi.n	8016458 <_printf_i+0x18c>
 8016452:	065f      	lsls	r7, r3, #25
 8016454:	bf48      	it	mi
 8016456:	b2b6      	uxthmi	r6, r6
 8016458:	07df      	lsls	r7, r3, #31
 801645a:	bf48      	it	mi
 801645c:	f043 0320 	orrmi.w	r3, r3, #32
 8016460:	6029      	str	r1, [r5, #0]
 8016462:	bf48      	it	mi
 8016464:	6023      	strmi	r3, [r4, #0]
 8016466:	b91e      	cbnz	r6, 8016470 <_printf_i+0x1a4>
 8016468:	6823      	ldr	r3, [r4, #0]
 801646a:	f023 0320 	bic.w	r3, r3, #32
 801646e:	6023      	str	r3, [r4, #0]
 8016470:	2310      	movs	r3, #16
 8016472:	e7a7      	b.n	80163c4 <_printf_i+0xf8>
 8016474:	4824      	ldr	r0, [pc, #144]	; (8016508 <_printf_i+0x23c>)
 8016476:	e7e4      	b.n	8016442 <_printf_i+0x176>
 8016478:	4615      	mov	r5, r2
 801647a:	e7bd      	b.n	80163f8 <_printf_i+0x12c>
 801647c:	682b      	ldr	r3, [r5, #0]
 801647e:	6826      	ldr	r6, [r4, #0]
 8016480:	6961      	ldr	r1, [r4, #20]
 8016482:	1d18      	adds	r0, r3, #4
 8016484:	6028      	str	r0, [r5, #0]
 8016486:	0635      	lsls	r5, r6, #24
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	d501      	bpl.n	8016490 <_printf_i+0x1c4>
 801648c:	6019      	str	r1, [r3, #0]
 801648e:	e002      	b.n	8016496 <_printf_i+0x1ca>
 8016490:	0670      	lsls	r0, r6, #25
 8016492:	d5fb      	bpl.n	801648c <_printf_i+0x1c0>
 8016494:	8019      	strh	r1, [r3, #0]
 8016496:	2300      	movs	r3, #0
 8016498:	6123      	str	r3, [r4, #16]
 801649a:	4615      	mov	r5, r2
 801649c:	e7bc      	b.n	8016418 <_printf_i+0x14c>
 801649e:	682b      	ldr	r3, [r5, #0]
 80164a0:	1d1a      	adds	r2, r3, #4
 80164a2:	602a      	str	r2, [r5, #0]
 80164a4:	681d      	ldr	r5, [r3, #0]
 80164a6:	6862      	ldr	r2, [r4, #4]
 80164a8:	2100      	movs	r1, #0
 80164aa:	4628      	mov	r0, r5
 80164ac:	f7e9 fe98 	bl	80001e0 <memchr>
 80164b0:	b108      	cbz	r0, 80164b6 <_printf_i+0x1ea>
 80164b2:	1b40      	subs	r0, r0, r5
 80164b4:	6060      	str	r0, [r4, #4]
 80164b6:	6863      	ldr	r3, [r4, #4]
 80164b8:	6123      	str	r3, [r4, #16]
 80164ba:	2300      	movs	r3, #0
 80164bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80164c0:	e7aa      	b.n	8016418 <_printf_i+0x14c>
 80164c2:	6923      	ldr	r3, [r4, #16]
 80164c4:	462a      	mov	r2, r5
 80164c6:	4649      	mov	r1, r9
 80164c8:	4640      	mov	r0, r8
 80164ca:	47d0      	blx	sl
 80164cc:	3001      	adds	r0, #1
 80164ce:	d0ad      	beq.n	801642c <_printf_i+0x160>
 80164d0:	6823      	ldr	r3, [r4, #0]
 80164d2:	079b      	lsls	r3, r3, #30
 80164d4:	d413      	bmi.n	80164fe <_printf_i+0x232>
 80164d6:	68e0      	ldr	r0, [r4, #12]
 80164d8:	9b03      	ldr	r3, [sp, #12]
 80164da:	4298      	cmp	r0, r3
 80164dc:	bfb8      	it	lt
 80164de:	4618      	movlt	r0, r3
 80164e0:	e7a6      	b.n	8016430 <_printf_i+0x164>
 80164e2:	2301      	movs	r3, #1
 80164e4:	4632      	mov	r2, r6
 80164e6:	4649      	mov	r1, r9
 80164e8:	4640      	mov	r0, r8
 80164ea:	47d0      	blx	sl
 80164ec:	3001      	adds	r0, #1
 80164ee:	d09d      	beq.n	801642c <_printf_i+0x160>
 80164f0:	3501      	adds	r5, #1
 80164f2:	68e3      	ldr	r3, [r4, #12]
 80164f4:	9903      	ldr	r1, [sp, #12]
 80164f6:	1a5b      	subs	r3, r3, r1
 80164f8:	42ab      	cmp	r3, r5
 80164fa:	dcf2      	bgt.n	80164e2 <_printf_i+0x216>
 80164fc:	e7eb      	b.n	80164d6 <_printf_i+0x20a>
 80164fe:	2500      	movs	r5, #0
 8016500:	f104 0619 	add.w	r6, r4, #25
 8016504:	e7f5      	b.n	80164f2 <_printf_i+0x226>
 8016506:	bf00      	nop
 8016508:	0801a1a4 	.word	0x0801a1a4
 801650c:	0801a1b5 	.word	0x0801a1b5

08016510 <__sflush_r>:
 8016510:	898a      	ldrh	r2, [r1, #12]
 8016512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016516:	4605      	mov	r5, r0
 8016518:	0710      	lsls	r0, r2, #28
 801651a:	460c      	mov	r4, r1
 801651c:	d458      	bmi.n	80165d0 <__sflush_r+0xc0>
 801651e:	684b      	ldr	r3, [r1, #4]
 8016520:	2b00      	cmp	r3, #0
 8016522:	dc05      	bgt.n	8016530 <__sflush_r+0x20>
 8016524:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016526:	2b00      	cmp	r3, #0
 8016528:	dc02      	bgt.n	8016530 <__sflush_r+0x20>
 801652a:	2000      	movs	r0, #0
 801652c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016530:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016532:	2e00      	cmp	r6, #0
 8016534:	d0f9      	beq.n	801652a <__sflush_r+0x1a>
 8016536:	2300      	movs	r3, #0
 8016538:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801653c:	682f      	ldr	r7, [r5, #0]
 801653e:	6a21      	ldr	r1, [r4, #32]
 8016540:	602b      	str	r3, [r5, #0]
 8016542:	d032      	beq.n	80165aa <__sflush_r+0x9a>
 8016544:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016546:	89a3      	ldrh	r3, [r4, #12]
 8016548:	075a      	lsls	r2, r3, #29
 801654a:	d505      	bpl.n	8016558 <__sflush_r+0x48>
 801654c:	6863      	ldr	r3, [r4, #4]
 801654e:	1ac0      	subs	r0, r0, r3
 8016550:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016552:	b10b      	cbz	r3, 8016558 <__sflush_r+0x48>
 8016554:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016556:	1ac0      	subs	r0, r0, r3
 8016558:	2300      	movs	r3, #0
 801655a:	4602      	mov	r2, r0
 801655c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801655e:	6a21      	ldr	r1, [r4, #32]
 8016560:	4628      	mov	r0, r5
 8016562:	47b0      	blx	r6
 8016564:	1c43      	adds	r3, r0, #1
 8016566:	89a3      	ldrh	r3, [r4, #12]
 8016568:	d106      	bne.n	8016578 <__sflush_r+0x68>
 801656a:	6829      	ldr	r1, [r5, #0]
 801656c:	291d      	cmp	r1, #29
 801656e:	d82b      	bhi.n	80165c8 <__sflush_r+0xb8>
 8016570:	4a29      	ldr	r2, [pc, #164]	; (8016618 <__sflush_r+0x108>)
 8016572:	410a      	asrs	r2, r1
 8016574:	07d6      	lsls	r6, r2, #31
 8016576:	d427      	bmi.n	80165c8 <__sflush_r+0xb8>
 8016578:	2200      	movs	r2, #0
 801657a:	6062      	str	r2, [r4, #4]
 801657c:	04d9      	lsls	r1, r3, #19
 801657e:	6922      	ldr	r2, [r4, #16]
 8016580:	6022      	str	r2, [r4, #0]
 8016582:	d504      	bpl.n	801658e <__sflush_r+0x7e>
 8016584:	1c42      	adds	r2, r0, #1
 8016586:	d101      	bne.n	801658c <__sflush_r+0x7c>
 8016588:	682b      	ldr	r3, [r5, #0]
 801658a:	b903      	cbnz	r3, 801658e <__sflush_r+0x7e>
 801658c:	6560      	str	r0, [r4, #84]	; 0x54
 801658e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016590:	602f      	str	r7, [r5, #0]
 8016592:	2900      	cmp	r1, #0
 8016594:	d0c9      	beq.n	801652a <__sflush_r+0x1a>
 8016596:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801659a:	4299      	cmp	r1, r3
 801659c:	d002      	beq.n	80165a4 <__sflush_r+0x94>
 801659e:	4628      	mov	r0, r5
 80165a0:	f7ff fa8a 	bl	8015ab8 <_free_r>
 80165a4:	2000      	movs	r0, #0
 80165a6:	6360      	str	r0, [r4, #52]	; 0x34
 80165a8:	e7c0      	b.n	801652c <__sflush_r+0x1c>
 80165aa:	2301      	movs	r3, #1
 80165ac:	4628      	mov	r0, r5
 80165ae:	47b0      	blx	r6
 80165b0:	1c41      	adds	r1, r0, #1
 80165b2:	d1c8      	bne.n	8016546 <__sflush_r+0x36>
 80165b4:	682b      	ldr	r3, [r5, #0]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d0c5      	beq.n	8016546 <__sflush_r+0x36>
 80165ba:	2b1d      	cmp	r3, #29
 80165bc:	d001      	beq.n	80165c2 <__sflush_r+0xb2>
 80165be:	2b16      	cmp	r3, #22
 80165c0:	d101      	bne.n	80165c6 <__sflush_r+0xb6>
 80165c2:	602f      	str	r7, [r5, #0]
 80165c4:	e7b1      	b.n	801652a <__sflush_r+0x1a>
 80165c6:	89a3      	ldrh	r3, [r4, #12]
 80165c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165cc:	81a3      	strh	r3, [r4, #12]
 80165ce:	e7ad      	b.n	801652c <__sflush_r+0x1c>
 80165d0:	690f      	ldr	r7, [r1, #16]
 80165d2:	2f00      	cmp	r7, #0
 80165d4:	d0a9      	beq.n	801652a <__sflush_r+0x1a>
 80165d6:	0793      	lsls	r3, r2, #30
 80165d8:	680e      	ldr	r6, [r1, #0]
 80165da:	bf08      	it	eq
 80165dc:	694b      	ldreq	r3, [r1, #20]
 80165de:	600f      	str	r7, [r1, #0]
 80165e0:	bf18      	it	ne
 80165e2:	2300      	movne	r3, #0
 80165e4:	eba6 0807 	sub.w	r8, r6, r7
 80165e8:	608b      	str	r3, [r1, #8]
 80165ea:	f1b8 0f00 	cmp.w	r8, #0
 80165ee:	dd9c      	ble.n	801652a <__sflush_r+0x1a>
 80165f0:	6a21      	ldr	r1, [r4, #32]
 80165f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80165f4:	4643      	mov	r3, r8
 80165f6:	463a      	mov	r2, r7
 80165f8:	4628      	mov	r0, r5
 80165fa:	47b0      	blx	r6
 80165fc:	2800      	cmp	r0, #0
 80165fe:	dc06      	bgt.n	801660e <__sflush_r+0xfe>
 8016600:	89a3      	ldrh	r3, [r4, #12]
 8016602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016606:	81a3      	strh	r3, [r4, #12]
 8016608:	f04f 30ff 	mov.w	r0, #4294967295
 801660c:	e78e      	b.n	801652c <__sflush_r+0x1c>
 801660e:	4407      	add	r7, r0
 8016610:	eba8 0800 	sub.w	r8, r8, r0
 8016614:	e7e9      	b.n	80165ea <__sflush_r+0xda>
 8016616:	bf00      	nop
 8016618:	dfbffffe 	.word	0xdfbffffe

0801661c <_fflush_r>:
 801661c:	b538      	push	{r3, r4, r5, lr}
 801661e:	690b      	ldr	r3, [r1, #16]
 8016620:	4605      	mov	r5, r0
 8016622:	460c      	mov	r4, r1
 8016624:	b913      	cbnz	r3, 801662c <_fflush_r+0x10>
 8016626:	2500      	movs	r5, #0
 8016628:	4628      	mov	r0, r5
 801662a:	bd38      	pop	{r3, r4, r5, pc}
 801662c:	b118      	cbz	r0, 8016636 <_fflush_r+0x1a>
 801662e:	6a03      	ldr	r3, [r0, #32]
 8016630:	b90b      	cbnz	r3, 8016636 <_fflush_r+0x1a>
 8016632:	f7ff f8ab 	bl	801578c <__sinit>
 8016636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d0f3      	beq.n	8016626 <_fflush_r+0xa>
 801663e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016640:	07d0      	lsls	r0, r2, #31
 8016642:	d404      	bmi.n	801664e <_fflush_r+0x32>
 8016644:	0599      	lsls	r1, r3, #22
 8016646:	d402      	bmi.n	801664e <_fflush_r+0x32>
 8016648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801664a:	f7ff fa06 	bl	8015a5a <__retarget_lock_acquire_recursive>
 801664e:	4628      	mov	r0, r5
 8016650:	4621      	mov	r1, r4
 8016652:	f7ff ff5d 	bl	8016510 <__sflush_r>
 8016656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016658:	07da      	lsls	r2, r3, #31
 801665a:	4605      	mov	r5, r0
 801665c:	d4e4      	bmi.n	8016628 <_fflush_r+0xc>
 801665e:	89a3      	ldrh	r3, [r4, #12]
 8016660:	059b      	lsls	r3, r3, #22
 8016662:	d4e1      	bmi.n	8016628 <_fflush_r+0xc>
 8016664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016666:	f7ff f9f9 	bl	8015a5c <__retarget_lock_release_recursive>
 801666a:	e7dd      	b.n	8016628 <_fflush_r+0xc>

0801666c <fiprintf>:
 801666c:	b40e      	push	{r1, r2, r3}
 801666e:	b503      	push	{r0, r1, lr}
 8016670:	4601      	mov	r1, r0
 8016672:	ab03      	add	r3, sp, #12
 8016674:	4805      	ldr	r0, [pc, #20]	; (801668c <fiprintf+0x20>)
 8016676:	f853 2b04 	ldr.w	r2, [r3], #4
 801667a:	6800      	ldr	r0, [r0, #0]
 801667c:	9301      	str	r3, [sp, #4]
 801667e:	f7ff fc9d 	bl	8015fbc <_vfiprintf_r>
 8016682:	b002      	add	sp, #8
 8016684:	f85d eb04 	ldr.w	lr, [sp], #4
 8016688:	b003      	add	sp, #12
 801668a:	4770      	bx	lr
 801668c:	200004dc 	.word	0x200004dc

08016690 <__swbuf_r>:
 8016690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016692:	460e      	mov	r6, r1
 8016694:	4614      	mov	r4, r2
 8016696:	4605      	mov	r5, r0
 8016698:	b118      	cbz	r0, 80166a2 <__swbuf_r+0x12>
 801669a:	6a03      	ldr	r3, [r0, #32]
 801669c:	b90b      	cbnz	r3, 80166a2 <__swbuf_r+0x12>
 801669e:	f7ff f875 	bl	801578c <__sinit>
 80166a2:	69a3      	ldr	r3, [r4, #24]
 80166a4:	60a3      	str	r3, [r4, #8]
 80166a6:	89a3      	ldrh	r3, [r4, #12]
 80166a8:	071a      	lsls	r2, r3, #28
 80166aa:	d525      	bpl.n	80166f8 <__swbuf_r+0x68>
 80166ac:	6923      	ldr	r3, [r4, #16]
 80166ae:	b31b      	cbz	r3, 80166f8 <__swbuf_r+0x68>
 80166b0:	6823      	ldr	r3, [r4, #0]
 80166b2:	6922      	ldr	r2, [r4, #16]
 80166b4:	1a98      	subs	r0, r3, r2
 80166b6:	6963      	ldr	r3, [r4, #20]
 80166b8:	b2f6      	uxtb	r6, r6
 80166ba:	4283      	cmp	r3, r0
 80166bc:	4637      	mov	r7, r6
 80166be:	dc04      	bgt.n	80166ca <__swbuf_r+0x3a>
 80166c0:	4621      	mov	r1, r4
 80166c2:	4628      	mov	r0, r5
 80166c4:	f7ff ffaa 	bl	801661c <_fflush_r>
 80166c8:	b9e0      	cbnz	r0, 8016704 <__swbuf_r+0x74>
 80166ca:	68a3      	ldr	r3, [r4, #8]
 80166cc:	3b01      	subs	r3, #1
 80166ce:	60a3      	str	r3, [r4, #8]
 80166d0:	6823      	ldr	r3, [r4, #0]
 80166d2:	1c5a      	adds	r2, r3, #1
 80166d4:	6022      	str	r2, [r4, #0]
 80166d6:	701e      	strb	r6, [r3, #0]
 80166d8:	6962      	ldr	r2, [r4, #20]
 80166da:	1c43      	adds	r3, r0, #1
 80166dc:	429a      	cmp	r2, r3
 80166de:	d004      	beq.n	80166ea <__swbuf_r+0x5a>
 80166e0:	89a3      	ldrh	r3, [r4, #12]
 80166e2:	07db      	lsls	r3, r3, #31
 80166e4:	d506      	bpl.n	80166f4 <__swbuf_r+0x64>
 80166e6:	2e0a      	cmp	r6, #10
 80166e8:	d104      	bne.n	80166f4 <__swbuf_r+0x64>
 80166ea:	4621      	mov	r1, r4
 80166ec:	4628      	mov	r0, r5
 80166ee:	f7ff ff95 	bl	801661c <_fflush_r>
 80166f2:	b938      	cbnz	r0, 8016704 <__swbuf_r+0x74>
 80166f4:	4638      	mov	r0, r7
 80166f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166f8:	4621      	mov	r1, r4
 80166fa:	4628      	mov	r0, r5
 80166fc:	f000 f806 	bl	801670c <__swsetup_r>
 8016700:	2800      	cmp	r0, #0
 8016702:	d0d5      	beq.n	80166b0 <__swbuf_r+0x20>
 8016704:	f04f 37ff 	mov.w	r7, #4294967295
 8016708:	e7f4      	b.n	80166f4 <__swbuf_r+0x64>
	...

0801670c <__swsetup_r>:
 801670c:	b538      	push	{r3, r4, r5, lr}
 801670e:	4b2a      	ldr	r3, [pc, #168]	; (80167b8 <__swsetup_r+0xac>)
 8016710:	4605      	mov	r5, r0
 8016712:	6818      	ldr	r0, [r3, #0]
 8016714:	460c      	mov	r4, r1
 8016716:	b118      	cbz	r0, 8016720 <__swsetup_r+0x14>
 8016718:	6a03      	ldr	r3, [r0, #32]
 801671a:	b90b      	cbnz	r3, 8016720 <__swsetup_r+0x14>
 801671c:	f7ff f836 	bl	801578c <__sinit>
 8016720:	89a3      	ldrh	r3, [r4, #12]
 8016722:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016726:	0718      	lsls	r0, r3, #28
 8016728:	d422      	bmi.n	8016770 <__swsetup_r+0x64>
 801672a:	06d9      	lsls	r1, r3, #27
 801672c:	d407      	bmi.n	801673e <__swsetup_r+0x32>
 801672e:	2309      	movs	r3, #9
 8016730:	602b      	str	r3, [r5, #0]
 8016732:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016736:	81a3      	strh	r3, [r4, #12]
 8016738:	f04f 30ff 	mov.w	r0, #4294967295
 801673c:	e034      	b.n	80167a8 <__swsetup_r+0x9c>
 801673e:	0758      	lsls	r0, r3, #29
 8016740:	d512      	bpl.n	8016768 <__swsetup_r+0x5c>
 8016742:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016744:	b141      	cbz	r1, 8016758 <__swsetup_r+0x4c>
 8016746:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801674a:	4299      	cmp	r1, r3
 801674c:	d002      	beq.n	8016754 <__swsetup_r+0x48>
 801674e:	4628      	mov	r0, r5
 8016750:	f7ff f9b2 	bl	8015ab8 <_free_r>
 8016754:	2300      	movs	r3, #0
 8016756:	6363      	str	r3, [r4, #52]	; 0x34
 8016758:	89a3      	ldrh	r3, [r4, #12]
 801675a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801675e:	81a3      	strh	r3, [r4, #12]
 8016760:	2300      	movs	r3, #0
 8016762:	6063      	str	r3, [r4, #4]
 8016764:	6923      	ldr	r3, [r4, #16]
 8016766:	6023      	str	r3, [r4, #0]
 8016768:	89a3      	ldrh	r3, [r4, #12]
 801676a:	f043 0308 	orr.w	r3, r3, #8
 801676e:	81a3      	strh	r3, [r4, #12]
 8016770:	6923      	ldr	r3, [r4, #16]
 8016772:	b94b      	cbnz	r3, 8016788 <__swsetup_r+0x7c>
 8016774:	89a3      	ldrh	r3, [r4, #12]
 8016776:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801677a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801677e:	d003      	beq.n	8016788 <__swsetup_r+0x7c>
 8016780:	4621      	mov	r1, r4
 8016782:	4628      	mov	r0, r5
 8016784:	f000 f886 	bl	8016894 <__smakebuf_r>
 8016788:	89a0      	ldrh	r0, [r4, #12]
 801678a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801678e:	f010 0301 	ands.w	r3, r0, #1
 8016792:	d00a      	beq.n	80167aa <__swsetup_r+0x9e>
 8016794:	2300      	movs	r3, #0
 8016796:	60a3      	str	r3, [r4, #8]
 8016798:	6963      	ldr	r3, [r4, #20]
 801679a:	425b      	negs	r3, r3
 801679c:	61a3      	str	r3, [r4, #24]
 801679e:	6923      	ldr	r3, [r4, #16]
 80167a0:	b943      	cbnz	r3, 80167b4 <__swsetup_r+0xa8>
 80167a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80167a6:	d1c4      	bne.n	8016732 <__swsetup_r+0x26>
 80167a8:	bd38      	pop	{r3, r4, r5, pc}
 80167aa:	0781      	lsls	r1, r0, #30
 80167ac:	bf58      	it	pl
 80167ae:	6963      	ldrpl	r3, [r4, #20]
 80167b0:	60a3      	str	r3, [r4, #8]
 80167b2:	e7f4      	b.n	801679e <__swsetup_r+0x92>
 80167b4:	2000      	movs	r0, #0
 80167b6:	e7f7      	b.n	80167a8 <__swsetup_r+0x9c>
 80167b8:	200004dc 	.word	0x200004dc

080167bc <_sbrk_r>:
 80167bc:	b538      	push	{r3, r4, r5, lr}
 80167be:	4d06      	ldr	r5, [pc, #24]	; (80167d8 <_sbrk_r+0x1c>)
 80167c0:	2300      	movs	r3, #0
 80167c2:	4604      	mov	r4, r0
 80167c4:	4608      	mov	r0, r1
 80167c6:	602b      	str	r3, [r5, #0]
 80167c8:	f7fe fd0e 	bl	80151e8 <_sbrk>
 80167cc:	1c43      	adds	r3, r0, #1
 80167ce:	d102      	bne.n	80167d6 <_sbrk_r+0x1a>
 80167d0:	682b      	ldr	r3, [r5, #0]
 80167d2:	b103      	cbz	r3, 80167d6 <_sbrk_r+0x1a>
 80167d4:	6023      	str	r3, [r4, #0]
 80167d6:	bd38      	pop	{r3, r4, r5, pc}
 80167d8:	2000ed10 	.word	0x2000ed10

080167dc <abort>:
 80167dc:	b508      	push	{r3, lr}
 80167de:	2006      	movs	r0, #6
 80167e0:	f000 f8bc 	bl	801695c <raise>
 80167e4:	2001      	movs	r0, #1
 80167e6:	f7fe fc87 	bl	80150f8 <_exit>

080167ea <_realloc_r>:
 80167ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167ee:	4680      	mov	r8, r0
 80167f0:	4614      	mov	r4, r2
 80167f2:	460e      	mov	r6, r1
 80167f4:	b921      	cbnz	r1, 8016800 <_realloc_r+0x16>
 80167f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167fa:	4611      	mov	r1, r2
 80167fc:	f7ff b9d0 	b.w	8015ba0 <_malloc_r>
 8016800:	b92a      	cbnz	r2, 801680e <_realloc_r+0x24>
 8016802:	f7ff f959 	bl	8015ab8 <_free_r>
 8016806:	4625      	mov	r5, r4
 8016808:	4628      	mov	r0, r5
 801680a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801680e:	f000 f8e3 	bl	80169d8 <_malloc_usable_size_r>
 8016812:	4284      	cmp	r4, r0
 8016814:	4607      	mov	r7, r0
 8016816:	d802      	bhi.n	801681e <_realloc_r+0x34>
 8016818:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801681c:	d812      	bhi.n	8016844 <_realloc_r+0x5a>
 801681e:	4621      	mov	r1, r4
 8016820:	4640      	mov	r0, r8
 8016822:	f7ff f9bd 	bl	8015ba0 <_malloc_r>
 8016826:	4605      	mov	r5, r0
 8016828:	2800      	cmp	r0, #0
 801682a:	d0ed      	beq.n	8016808 <_realloc_r+0x1e>
 801682c:	42bc      	cmp	r4, r7
 801682e:	4622      	mov	r2, r4
 8016830:	4631      	mov	r1, r6
 8016832:	bf28      	it	cs
 8016834:	463a      	movcs	r2, r7
 8016836:	f7ff f912 	bl	8015a5e <memcpy>
 801683a:	4631      	mov	r1, r6
 801683c:	4640      	mov	r0, r8
 801683e:	f7ff f93b 	bl	8015ab8 <_free_r>
 8016842:	e7e1      	b.n	8016808 <_realloc_r+0x1e>
 8016844:	4635      	mov	r5, r6
 8016846:	e7df      	b.n	8016808 <_realloc_r+0x1e>

08016848 <__swhatbuf_r>:
 8016848:	b570      	push	{r4, r5, r6, lr}
 801684a:	460c      	mov	r4, r1
 801684c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016850:	2900      	cmp	r1, #0
 8016852:	b096      	sub	sp, #88	; 0x58
 8016854:	4615      	mov	r5, r2
 8016856:	461e      	mov	r6, r3
 8016858:	da0d      	bge.n	8016876 <__swhatbuf_r+0x2e>
 801685a:	89a3      	ldrh	r3, [r4, #12]
 801685c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016860:	f04f 0100 	mov.w	r1, #0
 8016864:	bf0c      	ite	eq
 8016866:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801686a:	2340      	movne	r3, #64	; 0x40
 801686c:	2000      	movs	r0, #0
 801686e:	6031      	str	r1, [r6, #0]
 8016870:	602b      	str	r3, [r5, #0]
 8016872:	b016      	add	sp, #88	; 0x58
 8016874:	bd70      	pop	{r4, r5, r6, pc}
 8016876:	466a      	mov	r2, sp
 8016878:	f000 f878 	bl	801696c <_fstat_r>
 801687c:	2800      	cmp	r0, #0
 801687e:	dbec      	blt.n	801685a <__swhatbuf_r+0x12>
 8016880:	9901      	ldr	r1, [sp, #4]
 8016882:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016886:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801688a:	4259      	negs	r1, r3
 801688c:	4159      	adcs	r1, r3
 801688e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016892:	e7eb      	b.n	801686c <__swhatbuf_r+0x24>

08016894 <__smakebuf_r>:
 8016894:	898b      	ldrh	r3, [r1, #12]
 8016896:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016898:	079d      	lsls	r5, r3, #30
 801689a:	4606      	mov	r6, r0
 801689c:	460c      	mov	r4, r1
 801689e:	d507      	bpl.n	80168b0 <__smakebuf_r+0x1c>
 80168a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80168a4:	6023      	str	r3, [r4, #0]
 80168a6:	6123      	str	r3, [r4, #16]
 80168a8:	2301      	movs	r3, #1
 80168aa:	6163      	str	r3, [r4, #20]
 80168ac:	b002      	add	sp, #8
 80168ae:	bd70      	pop	{r4, r5, r6, pc}
 80168b0:	ab01      	add	r3, sp, #4
 80168b2:	466a      	mov	r2, sp
 80168b4:	f7ff ffc8 	bl	8016848 <__swhatbuf_r>
 80168b8:	9900      	ldr	r1, [sp, #0]
 80168ba:	4605      	mov	r5, r0
 80168bc:	4630      	mov	r0, r6
 80168be:	f7ff f96f 	bl	8015ba0 <_malloc_r>
 80168c2:	b948      	cbnz	r0, 80168d8 <__smakebuf_r+0x44>
 80168c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168c8:	059a      	lsls	r2, r3, #22
 80168ca:	d4ef      	bmi.n	80168ac <__smakebuf_r+0x18>
 80168cc:	f023 0303 	bic.w	r3, r3, #3
 80168d0:	f043 0302 	orr.w	r3, r3, #2
 80168d4:	81a3      	strh	r3, [r4, #12]
 80168d6:	e7e3      	b.n	80168a0 <__smakebuf_r+0xc>
 80168d8:	89a3      	ldrh	r3, [r4, #12]
 80168da:	6020      	str	r0, [r4, #0]
 80168dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80168e0:	81a3      	strh	r3, [r4, #12]
 80168e2:	9b00      	ldr	r3, [sp, #0]
 80168e4:	6163      	str	r3, [r4, #20]
 80168e6:	9b01      	ldr	r3, [sp, #4]
 80168e8:	6120      	str	r0, [r4, #16]
 80168ea:	b15b      	cbz	r3, 8016904 <__smakebuf_r+0x70>
 80168ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80168f0:	4630      	mov	r0, r6
 80168f2:	f000 f84d 	bl	8016990 <_isatty_r>
 80168f6:	b128      	cbz	r0, 8016904 <__smakebuf_r+0x70>
 80168f8:	89a3      	ldrh	r3, [r4, #12]
 80168fa:	f023 0303 	bic.w	r3, r3, #3
 80168fe:	f043 0301 	orr.w	r3, r3, #1
 8016902:	81a3      	strh	r3, [r4, #12]
 8016904:	89a3      	ldrh	r3, [r4, #12]
 8016906:	431d      	orrs	r5, r3
 8016908:	81a5      	strh	r5, [r4, #12]
 801690a:	e7cf      	b.n	80168ac <__smakebuf_r+0x18>

0801690c <_raise_r>:
 801690c:	291f      	cmp	r1, #31
 801690e:	b538      	push	{r3, r4, r5, lr}
 8016910:	4604      	mov	r4, r0
 8016912:	460d      	mov	r5, r1
 8016914:	d904      	bls.n	8016920 <_raise_r+0x14>
 8016916:	2316      	movs	r3, #22
 8016918:	6003      	str	r3, [r0, #0]
 801691a:	f04f 30ff 	mov.w	r0, #4294967295
 801691e:	bd38      	pop	{r3, r4, r5, pc}
 8016920:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016922:	b112      	cbz	r2, 801692a <_raise_r+0x1e>
 8016924:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016928:	b94b      	cbnz	r3, 801693e <_raise_r+0x32>
 801692a:	4620      	mov	r0, r4
 801692c:	f000 f852 	bl	80169d4 <_getpid_r>
 8016930:	462a      	mov	r2, r5
 8016932:	4601      	mov	r1, r0
 8016934:	4620      	mov	r0, r4
 8016936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801693a:	f000 b839 	b.w	80169b0 <_kill_r>
 801693e:	2b01      	cmp	r3, #1
 8016940:	d00a      	beq.n	8016958 <_raise_r+0x4c>
 8016942:	1c59      	adds	r1, r3, #1
 8016944:	d103      	bne.n	801694e <_raise_r+0x42>
 8016946:	2316      	movs	r3, #22
 8016948:	6003      	str	r3, [r0, #0]
 801694a:	2001      	movs	r0, #1
 801694c:	e7e7      	b.n	801691e <_raise_r+0x12>
 801694e:	2400      	movs	r4, #0
 8016950:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016954:	4628      	mov	r0, r5
 8016956:	4798      	blx	r3
 8016958:	2000      	movs	r0, #0
 801695a:	e7e0      	b.n	801691e <_raise_r+0x12>

0801695c <raise>:
 801695c:	4b02      	ldr	r3, [pc, #8]	; (8016968 <raise+0xc>)
 801695e:	4601      	mov	r1, r0
 8016960:	6818      	ldr	r0, [r3, #0]
 8016962:	f7ff bfd3 	b.w	801690c <_raise_r>
 8016966:	bf00      	nop
 8016968:	200004dc 	.word	0x200004dc

0801696c <_fstat_r>:
 801696c:	b538      	push	{r3, r4, r5, lr}
 801696e:	4d07      	ldr	r5, [pc, #28]	; (801698c <_fstat_r+0x20>)
 8016970:	2300      	movs	r3, #0
 8016972:	4604      	mov	r4, r0
 8016974:	4608      	mov	r0, r1
 8016976:	4611      	mov	r1, r2
 8016978:	602b      	str	r3, [r5, #0]
 801697a:	f7fe fc0c 	bl	8015196 <_fstat>
 801697e:	1c43      	adds	r3, r0, #1
 8016980:	d102      	bne.n	8016988 <_fstat_r+0x1c>
 8016982:	682b      	ldr	r3, [r5, #0]
 8016984:	b103      	cbz	r3, 8016988 <_fstat_r+0x1c>
 8016986:	6023      	str	r3, [r4, #0]
 8016988:	bd38      	pop	{r3, r4, r5, pc}
 801698a:	bf00      	nop
 801698c:	2000ed10 	.word	0x2000ed10

08016990 <_isatty_r>:
 8016990:	b538      	push	{r3, r4, r5, lr}
 8016992:	4d06      	ldr	r5, [pc, #24]	; (80169ac <_isatty_r+0x1c>)
 8016994:	2300      	movs	r3, #0
 8016996:	4604      	mov	r4, r0
 8016998:	4608      	mov	r0, r1
 801699a:	602b      	str	r3, [r5, #0]
 801699c:	f7fe fc0b 	bl	80151b6 <_isatty>
 80169a0:	1c43      	adds	r3, r0, #1
 80169a2:	d102      	bne.n	80169aa <_isatty_r+0x1a>
 80169a4:	682b      	ldr	r3, [r5, #0]
 80169a6:	b103      	cbz	r3, 80169aa <_isatty_r+0x1a>
 80169a8:	6023      	str	r3, [r4, #0]
 80169aa:	bd38      	pop	{r3, r4, r5, pc}
 80169ac:	2000ed10 	.word	0x2000ed10

080169b0 <_kill_r>:
 80169b0:	b538      	push	{r3, r4, r5, lr}
 80169b2:	4d07      	ldr	r5, [pc, #28]	; (80169d0 <_kill_r+0x20>)
 80169b4:	2300      	movs	r3, #0
 80169b6:	4604      	mov	r4, r0
 80169b8:	4608      	mov	r0, r1
 80169ba:	4611      	mov	r1, r2
 80169bc:	602b      	str	r3, [r5, #0]
 80169be:	f7fe fb89 	bl	80150d4 <_kill>
 80169c2:	1c43      	adds	r3, r0, #1
 80169c4:	d102      	bne.n	80169cc <_kill_r+0x1c>
 80169c6:	682b      	ldr	r3, [r5, #0]
 80169c8:	b103      	cbz	r3, 80169cc <_kill_r+0x1c>
 80169ca:	6023      	str	r3, [r4, #0]
 80169cc:	bd38      	pop	{r3, r4, r5, pc}
 80169ce:	bf00      	nop
 80169d0:	2000ed10 	.word	0x2000ed10

080169d4 <_getpid_r>:
 80169d4:	f7fe bb76 	b.w	80150c4 <_getpid>

080169d8 <_malloc_usable_size_r>:
 80169d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169dc:	1f18      	subs	r0, r3, #4
 80169de:	2b00      	cmp	r3, #0
 80169e0:	bfbc      	itt	lt
 80169e2:	580b      	ldrlt	r3, [r1, r0]
 80169e4:	18c0      	addlt	r0, r0, r3
 80169e6:	4770      	bx	lr

080169e8 <_init>:
 80169e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169ea:	bf00      	nop
 80169ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169ee:	bc08      	pop	{r3}
 80169f0:	469e      	mov	lr, r3
 80169f2:	4770      	bx	lr

080169f4 <_fini>:
 80169f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169f6:	bf00      	nop
 80169f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169fa:	bc08      	pop	{r3}
 80169fc:	469e      	mov	lr, r3
 80169fe:	4770      	bx	lr
